From steve at holdenweb.com  Sat Dec  1 09:54:00 2018
From: steve at holdenweb.com (Steve Holden)
Date: Sat, 1 Dec 2018 14:54:00 +0000
Subject: [Python-Dev] Inclusion of lz4 bindings in stdlib?
In-Reply-To: <1921b844-f1a9-6434-b367-7aa118ee187e@g.nevcal.com>
References: <CAANOHNmAoTr3JALTdr2DZ6mTjD1hVPpDVp8Di-s1N554SKTa5g@mail.gmail.com>
 <20181128174343.6bc8760b@fsol>
 <CAP1=2W4JKa2OxcWGeB4goERueBX7YGw6ScDMuPLufZtKohDBuw@mail.gmail.com>
 <CAGE7PN+=bdYfSbUNuy+jTLNV9g2+bykkvAahpGocnXZatTbm6w@mail.gmail.com>
 <20181128212736.GW4319@ando.pearwood.info>
 <CAEfz+TxAX6B1a3oLTbiPibvZAaAAT+vSnk9T8V30h1Y7GnD=UQ@mail.gmail.com>
 <CAL3CFcXdSf+5MfgbVi_PdWB2gkLERSKVGkVMUmfjn0iYDQ3Usw@mail.gmail.com>
 <CAGE7PN+vSXSYufwau-HSjX7OdR=k381wgjWGPDGUFKDaBzcKXA@mail.gmail.com>
 <CAL3CFcW_GzBHMCO1NbV6uuhqCPw5TWUFXgBOKnRkZX6=ck_ryg@mail.gmail.com>
 <1921b844-f1a9-6434-b367-7aa118ee187e@g.nevcal.com>
Message-ID: <CAMofdRD5gp1OK_W+EA=WA+oSR867Jtc=GSe51x+hnZJTHYJXsA@mail.gmail.com>

We* should probably do more collectively to point people at
production-quality third-party modules, as I believe we currently do with
pipenv which, while not a part of the standard library, is still
recommended in the documentation as the preferred method of dependency
management. We should also be even more strident when a library module is a
basic version, not to be used for production purposes.

This inevitably means, however, that there will be lag in the
documentation, which generally speaking lags current best practices.

Steve Holden

* I am not a significant contributor to the code base.



On Fri, Nov 30, 2018 at 9:02 PM Glenn Linderman <v+python at g.nevcal.com>
wrote:

> On 11/29/2018 2:10 PM, Andrew Svetlov wrote:
>
> Neither http.client nor http.server doesn't support compression
> (gzip/compress/deflate) at all.
> I doubt if we want to add this feature: for client better to use requests
> or, well, aiohttp.
> The same for servers: almost any production ready web server from PyPI
> supports compression.
>
> What production ready web servers exist on PyPi? Are there any that don't
> bring lots of baggage, their own enhanced way of doing things? The nice
> thing about the http.server is that it does things in a standard-conforming
> way, the bad thing about it is that it doesn't implement all the standards,
> and isn't maintained very well.
>
> From just reading PyPi, it is hard to discover whether a particular
> package is production-ready or not.
>
> I had used CherryPy for a while, but at the time it didn't support Python
> 3, and to use the same scripts behind CherryPy or Apache CGI (my deployment
> target, because that was what web hosts provided) became difficult for
> complex scripts.... so I reverted to http.server with a few private
> extensions (private because no one merged the bugs I reported some 3
> versions of Python-development-process ago; back then I submitted patches,
> but I haven't had time to keep up with the churn of technologies Pythondev
> has used since Python 3 came out, which is when I started using Python, and
> I'm sure the submitted patches have bit-rotted by now).
>
> When I google "python web server" the first hit is the doc page for
> http.server, the second is a wiki page that mentions CherryPy and a bunch
> of others, but the descriptions, while terse, mostly point out some special
> capabilities of the server, making it seem like you not only get a web
> server, but a philosophy. I just want a web server. The last one, Waitress,
> is the only one that doesn't seem to have a philosophy in its description.
>
> So it would be nice if http.server and http.client could get some basic
> improvements to be complete, or if the docs could point to a replacement
> that is a complete server, but without a philosophy or framework
> (bloatware) to have to learn and/or work around.
>
> Glenn
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/steve%40holdenweb.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20181201/4314752d/attachment.html>

From njs at pobox.com  Sat Dec  1 12:38:14 2018
From: njs at pobox.com (Nathaniel Smith)
Date: Sat, 1 Dec 2018 09:38:14 -0800
Subject: [Python-Dev] Inclusion of lz4 bindings in stdlib?
In-Reply-To: <CAMofdRD5gp1OK_W+EA=WA+oSR867Jtc=GSe51x+hnZJTHYJXsA@mail.gmail.com>
References: <CAANOHNmAoTr3JALTdr2DZ6mTjD1hVPpDVp8Di-s1N554SKTa5g@mail.gmail.com>
 <20181128174343.6bc8760b@fsol>
 <CAP1=2W4JKa2OxcWGeB4goERueBX7YGw6ScDMuPLufZtKohDBuw@mail.gmail.com>
 <CAGE7PN+=bdYfSbUNuy+jTLNV9g2+bykkvAahpGocnXZatTbm6w@mail.gmail.com>
 <20181128212736.GW4319@ando.pearwood.info>
 <CAEfz+TxAX6B1a3oLTbiPibvZAaAAT+vSnk9T8V30h1Y7GnD=UQ@mail.gmail.com>
 <CAL3CFcXdSf+5MfgbVi_PdWB2gkLERSKVGkVMUmfjn0iYDQ3Usw@mail.gmail.com>
 <CAGE7PN+vSXSYufwau-HSjX7OdR=k381wgjWGPDGUFKDaBzcKXA@mail.gmail.com>
 <CAL3CFcW_GzBHMCO1NbV6uuhqCPw5TWUFXgBOKnRkZX6=ck_ryg@mail.gmail.com>
 <1921b844-f1a9-6434-b367-7aa118ee187e@g.nevcal.com>
 <CAMofdRD5gp1OK_W+EA=WA+oSR867Jtc=GSe51x+hnZJTHYJXsA@mail.gmail.com>
Message-ID: <CAPJVwBnRpzTwJSBs4VoJ_kzpTfOPG_dTD1dUZA95H9xfBS+6Fg@mail.gmail.com>

On Sat, Dec 1, 2018, 06:56 Steve Holden <steve at holdenweb.com wrote:

> We* should probably do more collectively to point people at
> production-quality third-party modules, as I believe we currently do with
> pipenv which, while not a part of the standard library, is still
> recommended in the documentation as the preferred method of dependency
> management.
>

Small correction: the only "official" recommendation for pipenv is that
packaging.python.org (which is maintained by pypa, not python-dev) contains
several tutorials, and one of them discusses how to use pipenv. For a while
Kenneth used this as justification for telling everyone pipenv was "the
officially recommended install tool", and this created a lot of ill will,
so the pipenv team has been working on rolling that back.

A better precedent is requests. There was a long discussion a few years ago
about whether requests should move to the stdlib, and the outcome was that
it didn't, but the urllib docs got a note added recommending the use of
requests, which you can see here:

https://docs.python.org/3/library/urllib.request.html#module-urllib.request

Personally I would have phrased the note more strongly, but my perspective
is skewed by having tried to understand the internals. I'm glad urllib has
helped a lot of people solve their problems, but there's also a lot of ways
that it's flat out broken.

Anyway, I agree that there are probably other places where the docs could
use this technique.

-n
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20181201/ddf7a0ae/attachment.html>

From chris at simplistix.co.uk  Sun Dec  2 09:42:24 2018
From: chris at simplistix.co.uk (Chris Withers)
Date: Sun, 2 Dec 2018 14:42:24 +0000
Subject: [Python-Dev] getting merge rights back on github
Message-ID: <390ddce3-9d42-d270-4495-69f6bd567fc8@simplistix.co.uk>

Hi All,

It's been quite a long time since I last used my python commit rights, 
and it appears they've evaporated in the move to GitHub.

I'd like to get back into helping out, particularly with unittest.mock 
where I've recently started helping out as a maintainer over on 
https://github.com/testing-cabal/mock.

Please let me know what I need to do,

Chris



From chris at withers.org  Sun Dec  2 09:37:09 2018
From: chris at withers.org (Chris Withers)
Date: Sun, 2 Dec 2018 14:37:09 +0000
Subject: [Python-Dev] getting merge rights back on github
Message-ID: <878a07ed-c4a6-5d8d-6f6f-1b92f8e3442b@withers.org>

Hi All,

It's been quite a long time since I last used my python commit rights, 
and it appears they've evaporated in the move to GitHub.

I'd like to get back into helping out, particularly with unittest.mock 
where I've recently started helping out as a maintainer over on 
https://github.com/testing-cabal/mock.

Please let me know what I need to do,

Chris


From brett at python.org  Sun Dec  2 20:55:25 2018
From: brett at python.org (Brett Cannon)
Date: Sun, 2 Dec 2018 17:55:25 -0800
Subject: [Python-Dev] getting merge rights back on github
In-Reply-To: <878a07ed-c4a6-5d8d-6f6f-1b92f8e3442b@withers.org>
References: <878a07ed-c4a6-5d8d-6f6f-1b92f8e3442b@withers.org>
Message-ID: <CAP1=2W5mrdWQO0kz43dbY136_Kp58YcsBCSnX=P9F1P1ZEm6Bw@mail.gmail.com>

This is being dealt with.

On Sun, 2 Dec 2018 at 08:28, Chris Withers <chris at withers.org> wrote:

> Hi All,
>
> It's been quite a long time since I last used my python commit rights,
> and it appears they've evaporated in the move to GitHub.
>
> I'd like to get back into helping out, particularly with unittest.mock
> where I've recently started helping out as a maintainer over on
> https://github.com/testing-cabal/mock.
>
> Please let me know what I need to do,
>
> Chris
>
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/brett%40python.org
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20181202/935dd04a/attachment.html>

From vstinner at redhat.com  Mon Dec  3 05:26:52 2018
From: vstinner at redhat.com (Victor Stinner)
Date: Mon, 3 Dec 2018 11:26:52 +0100
Subject: [Python-Dev] getting merge rights back on github
In-Reply-To: <390ddce3-9d42-d270-4495-69f6bd567fc8@simplistix.co.uk>
References: <390ddce3-9d42-d270-4495-69f6bd567fc8@simplistix.co.uk>
Message-ID: <CA+3bQGHviAseg3SmZgM=DJEqHAyrMZG6ajDqYHx8JjG8gQ+BXg@mail.gmail.com>

Hi,

unittest.mock definitely needs your help :-) I merged a few changes
last months, but I had to rely on Mario Corchero (who authored the new
seal() method) for the review, since I don't know well this module.
Michael Foord (original author) doesn't seem available for reviews.
More reviewers shouldn't hurt :-) If you search for "mock" in pull
requests:
https://github.com/python/cpython/pulls?utf8=%E2%9C%93&q=is%3Apr+is%3Aopen+mock

I see at least 5 open PRs:

https://github.com/python/cpython/pull/10555
https://github.com/python/cpython/pull/9296
https://github.com/python/cpython/pull/7491
https://github.com/python/cpython/pull/4476
https://github.com/python/cpython/pull/1982

You can also search into the bug tracker ;-)


unittest.mock changes that I merged last months:

commit 552be9d7e64f91b8e4ba5b29cd5dcc442d56f92c
Author: Mario Corchero <mariocj89 at gmail.com>
Date:   Tue Oct 17 12:35:11 2017 +0100

    bpo-30541: Add new method to seal mocks (GH61923)

    The new method allows the developer to control when to stop the
    feature of mocks that automagically creates new mocks when accessing
    an attribute that was not declared before

    Signed-off-by: Mario Corchero <mariocj89 at gmail.com>

commit 6c4fab0f4b95410a1a964a75dcdd953697eff089
Author: John Reese <john at noswap.com>
Date:   Tue May 22 13:01:10 2018 -0700

    bpo-33516: Add support for __round__ in MagicMock (GH-6880)

    unittest.mock.MagicMock now supports the __round__() magic method.

commit 96200eb2ffcda05de14099cf23f60d5091366e3e
Author: Mario Corchero <mariocj89 at gmail.com>
Date:   Fri Oct 19 22:57:37 2018 +0100

    unittest.mock doc: Fix references to recursive seal of Mocks (GH-9028)

    The docs in `library/unittest.mock` have been updated to remove
    confusing terms about submock and be explicit about the behavior
    expected.

commit 6c83d9f4a72905d968418bef670bb3091d2744db
Author: Max B?langer <aeromax at gmail.com>
Date:   Thu Oct 25 14:48:58 2018 -0700

    bpo-35022: unittest.mock.MagicMock now also supports __fspath__ (GH-9960)

    The MagicMock class supports many magic methods, but not __fspath__. To ease
    testing with modules such as os.path, this function is now
supported by default.

commit 47d94241a383e2b8a2c40e81d12d40d5947fb170
Author: Petter Strandmark <petter.strandmark at gmail.com>
Date:   Sun Oct 28 21:37:10 2018 +0100

    bpo-35047, unittest.mock: Better error messages on
assert_called_xxx failures (GH-10090)

    unittest.mock now includes mock calls in exception messages if
    assert_not_called, assert_called_once, or assert_called_once_with
    fails.

commit edeca92c84a3b08902ecdfe987cde00c7e617887
Author: Xtreak <tirkarthi at users.noreply.github.com>
Date:   Sat Dec 1 15:33:54 2018 +0530

    bpo-31177: Skip deleted attributes while calling reset_mock (GH-9302)

Victor
Le dim. 2 d?c. 2018 ? 15:45, Chris Withers <chris at simplistix.co.uk> a ?crit :
>
> Hi All,
>
> It's been quite a long time since I last used my python commit rights,
> and it appears they've evaporated in the move to GitHub.
>
> I'd like to get back into helping out, particularly with unittest.mock
> where I've recently started helping out as a maintainer over on
> https://github.com/testing-cabal/mock.
>
> Please let me know what I need to do,
>
> Chris
>
>
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe: https://mail.python.org/mailman/options/python-dev/vstinner%40redhat.com

From chris at simplistix.co.uk  Mon Dec  3 13:34:42 2018
From: chris at simplistix.co.uk (Chris Withers)
Date: Mon, 3 Dec 2018 18:34:42 +0000
Subject: [Python-Dev] getting merge rights back on github
In-Reply-To: <CA+3bQGHviAseg3SmZgM=DJEqHAyrMZG6ajDqYHx8JjG8gQ+BXg@mail.gmail.com>
References: <390ddce3-9d42-d270-4495-69f6bd567fc8@simplistix.co.uk>
 <CA+3bQGHviAseg3SmZgM=DJEqHAyrMZG6ajDqYHx8JjG8gQ+BXg@mail.gmail.com>
Message-ID: <c470029b-e658-e13a-68a1-a2adb346347b@simplistix.co.uk>

Noted, I'll see what I can do...

On 03/12/2018 10:26, Victor Stinner wrote:
> Hi,
>
> unittest.mock definitely needs your help :-) I merged a few changes
> last months, but I had to rely on Mario Corchero (who authored the new
> seal() method) for the review, since I don't know well this module.
> Michael Foord (original author) doesn't seem available for reviews.
> More reviewers shouldn't hurt :-) If you search for "mock" in pull
> requests:
> https://github.com/python/cpython/pulls?utf8=%E2%9C%93&q=is%3Apr+is%3Aopen+mock
>
> I see at least 5 open PRs:
>
> https://github.com/python/cpython/pull/10555
> https://github.com/python/cpython/pull/9296
> https://github.com/python/cpython/pull/7491
> https://github.com/python/cpython/pull/4476
> https://github.com/python/cpython/pull/1982
>
> You can also search into the bug tracker ;-)
>
>
> unittest.mock changes that I merged last months:
>
> commit 552be9d7e64f91b8e4ba5b29cd5dcc442d56f92c
> Author: Mario Corchero <mariocj89 at gmail.com>
> Date:   Tue Oct 17 12:35:11 2017 +0100
>
>      bpo-30541: Add new method to seal mocks (GH61923)
>
>      The new method allows the developer to control when to stop the
>      feature of mocks that automagically creates new mocks when accessing
>      an attribute that was not declared before
>
>      Signed-off-by: Mario Corchero <mariocj89 at gmail.com>
>
> commit 6c4fab0f4b95410a1a964a75dcdd953697eff089
> Author: John Reese <john at noswap.com>
> Date:   Tue May 22 13:01:10 2018 -0700
>
>      bpo-33516: Add support for __round__ in MagicMock (GH-6880)
>
>      unittest.mock.MagicMock now supports the __round__() magic method.
>
> commit 96200eb2ffcda05de14099cf23f60d5091366e3e
> Author: Mario Corchero <mariocj89 at gmail.com>
> Date:   Fri Oct 19 22:57:37 2018 +0100
>
>      unittest.mock doc: Fix references to recursive seal of Mocks (GH-9028)
>
>      The docs in `library/unittest.mock` have been updated to remove
>      confusing terms about submock and be explicit about the behavior
>      expected.
>
> commit 6c83d9f4a72905d968418bef670bb3091d2744db
> Author: Max B?langer <aeromax at gmail.com>
> Date:   Thu Oct 25 14:48:58 2018 -0700
>
>      bpo-35022: unittest.mock.MagicMock now also supports __fspath__ (GH-9960)
>
>      The MagicMock class supports many magic methods, but not __fspath__. To ease
>      testing with modules such as os.path, this function is now
> supported by default.
>
> commit 47d94241a383e2b8a2c40e81d12d40d5947fb170
> Author: Petter Strandmark <petter.strandmark at gmail.com>
> Date:   Sun Oct 28 21:37:10 2018 +0100
>
>      bpo-35047, unittest.mock: Better error messages on
> assert_called_xxx failures (GH-10090)
>
>      unittest.mock now includes mock calls in exception messages if
>      assert_not_called, assert_called_once, or assert_called_once_with
>      fails.
>
> commit edeca92c84a3b08902ecdfe987cde00c7e617887
> Author: Xtreak <tirkarthi at users.noreply.github.com>
> Date:   Sat Dec 1 15:33:54 2018 +0530
>
>      bpo-31177: Skip deleted attributes while calling reset_mock (GH-9302)
>
> Victor
> Le dim. 2 d?c. 2018 ? 15:45, Chris Withers <chris at simplistix.co.uk> a ?crit :
>> Hi All,
>>
>> It's been quite a long time since I last used my python commit rights,
>> and it appears they've evaporated in the move to GitHub.
>>
>> I'd like to get back into helping out, particularly with unittest.mock
>> where I've recently started helping out as a maintainer over on
>> https://github.com/testing-cabal/mock.
>>
>> Please let me know what I need to do,
>>
>> Chris
>>
>>
>> _______________________________________________
>> Python-Dev mailing list
>> Python-Dev at python.org
>> https://mail.python.org/mailman/listinfo/python-dev
>> Unsubscribe: https://mail.python.org/mailman/options/python-dev/vstinner%40redhat.com


From nad at python.org  Tue Dec  4 03:42:28 2018
From: nad at python.org (Ned Deily)
Date: Tue, 4 Dec 2018 03:42:28 -0500
Subject: [Python-Dev] 3.7.2rc1 and 3.6.8rc1 cutoffs ahead,
 last 3.6.x bugfix release!
Message-ID: <95B9F244-38A8-4E47-8E9D-6DAD289C84A2@python.org>

https://discuss.python.org/t/3-7-2rc1-and-3-6-8rc1-cutoffs-ahead-last-3-6-x-bugfix-release/510


We're reaching the end of the year and it's time for another pair of Python 3 maintenance releases, 3.7.2 and 3.6.8, before we ring out 2018.  Since there are still some open release blocker issues and I haven't been bugging you about them, I've moved the code cutoff for the release candidates to this coming Friday, 12-07, by the end of the day (AOE).  That gives us all another 4 days to review open issues and PRs.  Please give highest attention to any release blockers you have been shepherding or reviewing.  Thanks!

A reminder: as previously announced, 3.6.8 is planned to be the last bugfix release of the 3.6 series.  Python 3.6.0 was released on 2016-12-23, so by the time 3.6.8 is released, 3.6.x will have been in bugfix mode almost exactly 2 years.  When a new feature release is made and enters "bugfix" mode, our policy has long been to continue to maintain the previous bugfix branch for at least one more release and then move that branch to "security fix only" mode.  3.7.0 (and 3.6.6) was released nearly six months ago and, with the release of 3.6.8, there will have been two additional 3.6.x bugfix releases since then.  So, barring any showstopper issues that might arise, the upcoming 3.6.8rc1 is your last chance to make bugfix changes for 3.6.x.  Following the successful release of 3.6.8, only security fixes will be accepted for the 3.6 branch and future 3.6.x releases will be source-only and scheduled as needed; no further binary installers will be produced for 3.6.  Refer to the Dev Guide sections and release PEPs linked below for more information.


https://devguide.python.org/devcycle/
https://devguide.python.org/#branchstatus
https://www.python.org/dev/peps/pep-0494/
https://www.python.org/dev/peps/pep-0537/

--
  Ned Deily
  nad at python.org -- []


From vstinner at redhat.com  Tue Dec  4 10:19:46 2018
From: vstinner at redhat.com (Victor Stinner)
Date: Tue, 4 Dec 2018 16:19:46 +0100
Subject: [Python-Dev] Internal header files (Include/internal/*.h) are now
 installed
Message-ID: <CA+3bQGG-gTgspvM0nS+0472RxyqEVpJOUL5-5UwcaMjnzjpwKg@mail.gmail.com>

Hi,

Since Python 3.7, "internal" C API (only declared if Py_BUILD_CORE is
defined) are moving from Include/*.h to Include/internal/*.h. These
API must not be used outside CPython. In Python 3.7, "make install"
doesn't install them for example.

I would like to move more private functions (prefixed by "_Py") to the
"internal" API. Since I'm not 100% sure that it's ok, I decided to
modify "make install" to also install Include/internal/ headers (to
$prefix/include/python3.8m/internal/).

These headers might be useful for low-level debug tools like debuggers
or profilers, to access directly memory without calling functions.
These APIs require to use the same compiler and likely the same
compiler options than CPython. It's especially true for atomic
variables (Include/internal/pycore_atomic.h).

Are you ok to install "internal" header files? If yes, should we
modify "make install" of Python 3.7 to also install them?

Victor

From solipsis at pitrou.net  Tue Dec  4 10:31:57 2018
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Tue, 4 Dec 2018 16:31:57 +0100
Subject: [Python-Dev] Internal header files (Include/internal/*.h) are
 now installed
References: <CA+3bQGG-gTgspvM0nS+0472RxyqEVpJOUL5-5UwcaMjnzjpwKg@mail.gmail.com>
Message-ID: <20181204163157.2b15cf6a@fsol>

On Tue, 4 Dec 2018 16:19:46 +0100
Victor Stinner <vstinner at redhat.com> wrote:
> Hi,
> 
> Since Python 3.7, "internal" C API (only declared if Py_BUILD_CORE is
> defined) are moving from Include/*.h to Include/internal/*.h. These
> API must not be used outside CPython. In Python 3.7, "make install"
> doesn't install them for example.
> 
> I would like to move more private functions (prefixed by "_Py") to the
> "internal" API. Since I'm not 100% sure that it's ok, I decided to
> modify "make install" to also install Include/internal/ headers (to
> $prefix/include/python3.8m/internal/).
> 
> These headers might be useful for low-level debug tools like debuggers
> or profilers, to access directly memory without calling functions.
> These APIs require to use the same compiler and likely the same
> compiler options than CPython. It's especially true for atomic
> variables (Include/internal/pycore_atomic.h).
> 
> Are you ok to install "internal" header files? If yes, should we
> modify "make install" of Python 3.7 to also install them?

+1 to both.

Regards

Antoine.



From vstinner at redhat.com  Tue Dec  4 11:17:12 2018
From: vstinner at redhat.com (Victor Stinner)
Date: Tue, 4 Dec 2018 17:17:12 +0100
Subject: [Python-Dev] Internal header files (Include/internal/*.h) are
 now installed
In-Reply-To: <20181204163157.2b15cf6a@fsol>
References: <CA+3bQGG-gTgspvM0nS+0472RxyqEVpJOUL5-5UwcaMjnzjpwKg@mail.gmail.com>
 <20181204163157.2b15cf6a@fsol>
Message-ID: <CA+3bQGFoe1QXosWi2hTtZVtV7n2fTXdhboRGVK7QCjc3Vy7o_Q@mail.gmail.com>

Le mar. 4 d?c. 2018 ? 16:35, Antoine Pitrou <solipsis at pitrou.net> a ?crit :
> > Are you ok to install "internal" header files? If yes, should we
> > modify "make install" of Python 3.7 to also install them?
>
> +1 to both.

Ok, I reopened https://bugs.python.org/issue35296 and wrote a PR:

https://github.com/python/cpython/pull/10897

Victor

From chris at withers.org  Tue Dec  4 14:13:32 2018
From: chris at withers.org (Chris Withers)
Date: Tue, 4 Dec 2018 19:13:32 +0000
Subject: [Python-Dev] any way to subscribe to bugs and PRs on a particular
 topic?
Message-ID: <bbc873f2-dfb2-2fa6-0852-a68d9672daf1@withers.org>

Hello,

I'd like to see if I can help with unittest.mock, but don't have a huge 
amount of bandwidth and can't even parse let alone process the whole 
firehose of bpo and GH PRs.

Is there? any way I can get bugs.python.org and github PRs to only tell 
me about things, preferably by email, that affect or involve unittest.mock?

cheers,

Chris

From storchaka at gmail.com  Tue Dec  4 14:42:10 2018
From: storchaka at gmail.com (Serhiy Storchaka)
Date: Tue, 4 Dec 2018 21:42:10 +0200
Subject: [Python-Dev] any way to subscribe to bugs and PRs on a
 particular topic?
In-Reply-To: <bbc873f2-dfb2-2fa6-0852-a68d9672daf1@withers.org>
References: <bbc873f2-dfb2-2fa6-0852-a68d9672daf1@withers.org>
Message-ID: <pu6l6f$hdg$1@blaine.gmane.org>

04.12.18 21:13, Chris Withers ????:
> I'd like to see if I can help with unittest.mock, but don't have a huge 
> amount of bandwidth and can't even parse let alone process the whole 
> firehose of bpo and GH PRs.
> 
> Is there? any way I can get bugs.python.org and github PRs to only tell 
> me about things, preferably by email, that affect or involve unittest.mock?

You can add yourself into the experts list:
https://github.com/python/devguide/blob/master/experts.rst. This will 
help to add you to nosy list in new issues.

You can find existing unittest.mock related issues and PRs by using 
search on the bug tracker and GitHub.


From mariatta at python.org  Tue Dec  4 14:46:12 2018
From: mariatta at python.org (Mariatta Wijaya)
Date: Tue, 4 Dec 2018 11:46:12 -0800
Subject: [Python-Dev] any way to subscribe to bugs and PRs on a
 particular topic?
In-Reply-To: <bbc873f2-dfb2-2fa6-0852-a68d9672daf1@withers.org>
References: <bbc873f2-dfb2-2fa6-0852-a68d9672daf1@withers.org>
Message-ID: <CAGbohnYRPzh1-oV=Ks+XVEYdmxcKBdZDR10Ausb_R0gNkSXfJg@mail.gmail.com>

For GitHub PRs, you can add yourself to CODEOWNERS file, so you will be
automatically requested review if a PR contains changes to unittest.mock.
(and you'll receive review-request notification)
https://github.com/python/cpython/blob/master/.github/CODEOWNERS

When GitHub sends you review request notification email, it will cc
review_requested at noreply.github.com, so you can create a filter based on
that.
?

On Tue, Dec 4, 2018 at 11:21 AM Chris Withers <chris at withers.org> wrote:

> Hello,
>
> I'd like to see if I can help with unittest.mock, but don't have a huge
> amount of bandwidth and can't even parse let alone process the whole
> firehose of bpo and GH PRs.
>
> Is there  any way I can get bugs.python.org and github PRs to only tell
> me about things, preferably by email, that affect or involve unittest.mock?
>
> cheers,
>
> Chris
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/mariatta%40python.org
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20181204/51c8e999/attachment.html>

From tjreedy at udel.edu  Tue Dec  4 15:01:45 2018
From: tjreedy at udel.edu (Terry Reedy)
Date: Tue, 4 Dec 2018 15:01:45 -0500
Subject: [Python-Dev] any way to subscribe to bugs and PRs on a
 particular topic?
In-Reply-To: <bbc873f2-dfb2-2fa6-0852-a68d9672daf1@withers.org>
References: <bbc873f2-dfb2-2fa6-0852-a68d9672daf1@withers.org>
Message-ID: <pu6mb9$lvs$1@blaine.gmane.org>

On 12/4/2018 2:13 PM, Chris Withers wrote:
> Hello,

Welcome back.  unittest.mock is important for everyone writing 
non-trivial tests.

> I'd like to see if I can help with unittest.mock, but don't have a huge 
> amount of bandwidth and can't even parse let alone process the whole 
> firehose of bpo and GH PRs.
> 
> Is there? any way I can get bugs.python.org and github PRs to only tell 
> me about things, preferably by email, that affect or involve unittest.mock?

Tracker: Edit https://devguide.python.org/experts/ to add yourself as 
expert for unittest.mock and you will see such issues if the OP or 
triager types 'unittest.mock' in the nosy field and clicks the list.

Note: consider adding yourself also as unittest and Misc - testing expert.

Certain people, such as Zach Ware, can make nosy listing automatic upon 
a selection of a component, such as 'testing'.

Every Friday, a list of new issues for the last week is posted here 
(pydev).  It does not take too long to scan +-50 titles.

PRs. In the repository, add a line to .github/CODEOWNERS (which starts 
with instructions) so you are notified whenever a PR touches 
Lib/unittest/mock.py.  From other example, it seem that the following 
might work (but I am not an expert on this).

@@/*unittest*/*mock*                     <github name>

-- 
Terry Jan Reedy



From vstinner at redhat.com  Wed Dec  5 05:51:04 2018
From: vstinner at redhat.com (Victor Stinner)
Date: Wed, 5 Dec 2018 11:51:04 +0100
Subject: [Python-Dev] test_urllib2net fixed to repair Travis CI
Message-ID: <CA+3bQGFZ-GLCTBV=+hugP=PSbSWixBhQEZPhWF0=whYDCwm2=w@mail.gmail.com>

Hi,

It seems like Travis CI changed its security or network configuration:
some FTP tests of test_urllib2net started to fail with "425 Security:
Bad IP connecting" yesterday:

   https://bugs.python.org/issue35411

The failure seems to be reproducible and so prevents to merge any
change in any branch. It blocked our whole workflow :-(

Good news: I quickly fixed the CI! (2.7, 3.6, 3.7 and master branches)
I skipped the test on Travis CI: AppVeyor runs these tests in
pre-commit and the buildbot farm run them in post-commit.

Bad news: You may have to update your pull requests (ex: merge master
into your branch) to retrieve this fix if the test_urllib2net failed
on Travis CI with "425 Security: Bad IP connecting" on your PR.

Victor

From njs at pobox.com  Wed Dec  5 10:18:00 2018
From: njs at pobox.com (Nathaniel Smith)
Date: Wed, 5 Dec 2018 07:18:00 -0800
Subject: [Python-Dev] test_urllib2net fixed to repair Travis CI
In-Reply-To: <CA+3bQGFZ-GLCTBV=+hugP=PSbSWixBhQEZPhWF0=whYDCwm2=w@mail.gmail.com>
References: <CA+3bQGFZ-GLCTBV=+hugP=PSbSWixBhQEZPhWF0=whYDCwm2=w@mail.gmail.com>
Message-ID: <CAPJVwB=5NqK=eSTexihtw3xmGp2tc-ujNnb+Kwz_zFHGZ62spA@mail.gmail.com>

Travis is in the middle of moving everything from AWS to GCE, which is
probably related:

https://blog.travis-ci.com/2018-11-19-required-linux-infrastructure-migration

As noted there, GCE has different IP addresses. But I suspect it's not the
new IP address that's the problem, but rather the fact that the GCE setup
is known to break outgoing ftp:

https://blog.travis-ci.com/2018-07-23-the-tale-of-ftp-at-travis-ci

-n

On Wed, Dec 5, 2018, 02:53 Victor Stinner <vstinner at redhat.com wrote:

> Hi,
>
> It seems like Travis CI changed its security or network configuration:
> some FTP tests of test_urllib2net started to fail with "425 Security:
> Bad IP connecting" yesterday:
>
>    https://bugs.python.org/issue35411
>
> The failure seems to be reproducible and so prevents to merge any
> change in any branch. It blocked our whole workflow :-(
>
> Good news: I quickly fixed the CI! (2.7, 3.6, 3.7 and master branches)
> I skipped the test on Travis CI: AppVeyor runs these tests in
> pre-commit and the buildbot farm run them in post-commit.
>
> Bad news: You may have to update your pull requests (ex: merge master
> into your branch) to retrieve this fix if the test_urllib2net failed
> on Travis CI with "425 Security: Bad IP connecting" on your PR.
>
> Victor
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/njs%40pobox.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20181205/7cc8559e/attachment.html>

From noreply at pypi.org  Wed Dec  5 15:01:53 2018
From: noreply at pypi.org (PyPI)
Date: Wed, 5 Dec 2018 20:01:53 +0000
Subject: [Python-Dev] [PyPI] Email verification
Message-ID: <010101677ff66451-5cf87aad-b3f5-49f6-aa10-e42c74fb9d74-000000@us-west-2.amazonses.com>


Someone, perhaps you, has added this email address to their PyPI account:

  Python-dev at python.org

If you wish to proceed with this request, follow the link below to verify your
email address:

  https://pypi.org/account/verify-email/?token=eyJhY3Rpb24iOiJlbWFpbC12ZXJpZnkiLCJlbWFpbC5pZCI6IjMyODU0NyJ9.XAgusA.38y3N4T1GonyEeWWpwxm6bE7cn-JDJe0P6LD0tom2vV5WFoS-DDNrUs22weH1UK8kWsqaIhneX9J7tof-my0Jw

This link will expire in 72 hours.

If you did not make this request, you can safely ignore this email.



-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20181205/4f49d538/attachment.html>

From brett at python.org  Wed Dec  5 19:28:43 2018
From: brett at python.org (Brett Cannon)
Date: Wed, 5 Dec 2018 16:28:43 -0800
Subject: [Python-Dev] [PyPI] Email verification
In-Reply-To: <010101677ff66451-5cf87aad-b3f5-49f6-aa10-e42c74fb9d74-000000@us-west-2.amazonses.com>
References: <010101677ff66451-5cf87aad-b3f5-49f6-aa10-e42c74fb9d74-000000@us-west-2.amazonses.com>
Message-ID: <CAP1=2W5hdPr816cFE4hcKp_CzjifqYjJbSMAtmcz6QDiT8n6Lw@mail.gmail.com>

I've reported this to infrastructure at .

On Wed., Dec. 5, 2018, 12:05 PyPI <noreply at pypi.org wrote:

> Someone, perhaps you, has added this email address (Python-dev at python.org)
> to their PyPI account.
>
> If you wish to proceed with this request, click this link to verify your
> email address
> <https://pypi.org/account/verify-email/?token=eyJhY3Rpb24iOiJlbWFpbC12ZXJpZnkiLCJlbWFpbC5pZCI6IjMyODU0NyJ9.XAgusA.38y3N4T1GonyEeWWpwxm6bE7cn-JDJe0P6LD0tom2vV5WFoS-DDNrUs22weH1UK8kWsqaIhneX9J7tof-my0Jw>
>
> This link will expire in 72 hours.
>
> If you did not make this request, you can safely ignore this email.
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/brett%40python.org
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20181205/323d6a86/attachment.html>

From vstinner at redhat.com  Fri Dec  7 07:35:17 2018
From: vstinner at redhat.com (Victor Stinner)
Date: Fri, 7 Dec 2018 13:35:17 +0100
Subject: [Python-Dev] I reverted "Add Windows App Store package" change
Message-ID: <CA+3bQGE2Sb1ArqjO=axjUUoqyXy0mPYe7oh_9m33MfoS90zivQ@mail.gmail.com>

Hi,

I had to revert a change since it broke buildbots. Sadly, I don't have
the bandwidth to investigate the failures and try to fix the change
:-(


A large change has been pushed into the 3.7 and master branches to
"Add Windows App Store package":

"Release Windows Store app containing Python"
https://bugs.python.org/issue34977

These changes broke all Windows buildbots:

"Almost all Windows buildbots are failing to compile"
https://bugs.python.org/issue35437

So I reverted these two changes.

It's a large change which mostly add new files, but also make changes
in different files:
---
commit 468a15aaf9206448a744fc5eab3fc21f51966aad
Author: Steve Dower <steve.dower at microsoft.com>
Date:   Thu Dec 6 21:09:20 2018 -0800

    bpo-34977: Add Windows App Store package (GH-10245)

 .azure-pipelines/windows-appx-test.yml             |  65 +++
 .gitattributes                                     |   1 +
 Doc/make.bat                                       |   2 +
 Lib/test/test_pathlib.py                           |   2 +-
 Lib/test/test_venv.py                              |   1 +
 Lib/venv/__init__.py                               |  49 +-
 .../2018-10-30-13-39-17.bpo-34977.0l7_QV.rst       |   1 +
 PC/classicAppCompat.can.xml                        | Bin 0 -> 3978 bytes
 PC/classicAppCompat.cat                            | Bin 0 -> 10984 bytes
 PC/classicAppCompat.sccd                           | Bin 0 -> 18503 bytes
 PC/getpathp.c                                      |   8 +-
 PC/icons/pythonwx150.png                           | Bin 0 -> 8187 bytes
 PC/icons/pythonwx44.png                            | Bin 0 -> 2232 bytes
 PC/icons/pythonx150.png                            | Bin 0 -> 8271 bytes
 PC/icons/pythonx44.png                             | Bin 0 -> 2178 bytes
 PC/icons/pythonx50.png                             | Bin 0 -> 2190 bytes
 PC/launcher.c                                      | 220 +++++++-
 PC/layout/__init__.py                              |   0
 PC/layout/__main__.py                              |  14 +
 PC/layout/main.py                                  | 612 +++++++++++++++++++++
 PC/layout/support/__init__.py                      |   0
 PC/layout/support/appxmanifest.py                  | 487 ++++++++++++++++
 PC/layout/support/catalog.py                       |  44 ++
 PC/layout/support/constants.py                     |  28 +
 .../support/distutils.command.bdist_wininst.py     |  25 +
 PC/layout/support/filesets.py                      | 100 ++++
 PC/layout/support/logging.py                       |  93 ++++
 PC/layout/support/options.py                       | 122 ++++
 PC/layout/support/pip.py                           |  79 +++
 PC/layout/support/props.py                         | 110 ++++
 {Tools/nuget => PC/layout/support}/python.props    |   0
 PC/pylauncher.rc                                   |   6 +
 PC/python_uwp.cpp                                  | 226 ++++++++
 PC/store_info.txt                                  | 146 +++++
 PCbuild/_tkinter.vcxproj                           |   6 +
 PCbuild/find_msbuild.bat                           |  10 +
 PCbuild/pcbuild.proj                               |   3 +
 PCbuild/pcbuild.sln                                |  72 +++
 PCbuild/python.props                               |   3 +-
 PCbuild/python_uwp.vcxproj                         |  86 +++
 PCbuild/pythoncore.vcxproj                         |  15 +
 PCbuild/pythonw_uwp.vcxproj                        |  86 +++
 PCbuild/venvlauncher.vcxproj                       |  85 +++
 PCbuild/venvwlauncher.vcxproj                      |  85 +++
 Tools/msi/buildrelease.bat                         |  13 +-
 Tools/msi/make_appx.ps1                            |  71 +++
 Tools/msi/make_cat.ps1                             |  34 ++
 Tools/msi/make_zip.proj                            |   9 +-
 Tools/msi/make_zip.py                              | 250 ---------
 Tools/msi/sdktools.psm1                            |  43 ++
 Tools/msi/sign_build.ps1                           |  34 ++
 Tools/nuget/make_pkg.proj                          |  38 +-
 52 files changed, 3053 insertions(+), 331 deletions(-)
---

Note: the commit message is a single line.


Now I have questions :-)


It seems like the change is "experimental":
https://bugs.python.org/issue34977#msg331267

"""
Making the *release experimental* as part of the next 3.7 update was
approved by Ned (over email), so I merged the build. As soon as we
snap for the RC I'll kick off an update and make the store page
public, and hopefully can promote it enough to get eyes on it.

Unfortunately, I discovered as part of a test submission that the
minimum Windows version matters, and it's a version that hasn't been
rolled out fully yet *because of some bugs*, so there may not be that
many people who can use it this first time. But that will *improve
over time*, and I'm sure I can find enough people to flush out issues
before the next release (anyone on the Windows Insiders program should
be fine).
"""

If it's experimental, why pushing it *right now* to the 3.7 branch?
Can't we wait until it's stable enough? Even if it's stable, I'm not
sure sure that it should go into 3.7 which is a stable branch.

I guess that Steve would like to get this feature into 3.7.2. Ned
Deily (3.7 release changer) approved this change.

The pull request was merged one week after it has been created, I
don't see any review.
https://github.com/python/cpython/pull/10245

In general, I'm fine with merging changes without any kind of review,
when the change is small. I'm doing it *frequently* when I'm confident
that the change is small and safe enough. But here, the change is
quite large. Sadly, I know the problem: the lack of available
developers for review. There are very few developers who know Windows
and are available to provide a review. Sometimes, Zachary Ware or Eryk
Sun are around and can help.

I'm fine with iterating in the master branch, since the change seems
to be separated from CPython core: it mostly add new files. My concern
is more about changes on "Python itself": the venv and tests changes.

In the middle of the large change, there is small change on the venv module:

diff --git a/Lib/venv/__init__.py b/Lib/venv/__init__.py
index 043420897e..5438b0d4e5 100644
--- a/Lib/venv/__init__.py
+++ b/Lib/venv/__init__.py
@@ -64,10 +64,11 @@ class EnvBuilder:
         self.system_site_packages = False
         self.create_configuration(context)
         self.setup_python(context)
+        if not self.upgrade:
+            self.setup_scripts(context)
         if self.with_pip:
             self._setup_pip(context)
         if not self.upgrade:
-            self.setup_scripts(context)
             self.post_setup(context)
         if true_system_site_packages:

Moreover, the commit also changes tests:

* Lib/test/test_pathlib.py
* Lib/test/test_venv.py

The commit message is just "bpo-34977: Add Windows App Store package
(GH-10245)", it doesn't explain these changes.

I would prefer to see these changes extracted into separated commits.
Sadly, right now on the cpython project on GitHub, we are only allowed
to squash all commits into a single commit (note: the individual
commit in the PR doesn't explain these venv/tests changes neither). So
I suggest to create multiple PRs (at least one for venv+pathlib
changes and a second for the Windows AppStore).

I guess that these changes are bugfixes or enhancement. Having a
separated change should also ease to backport these changes up to 3.6
;-)

--

Jeremy Kloth just created:
"Correctly detect installed SDK versions"
https://bugs.python.org/issue35433

I'm not sure if it's related to the AppStore change?

Victor
-- 
Night gathers, and now my watch begins. It shall not end until my death.

From steve.dower at python.org  Fri Dec  7 10:16:03 2018
From: steve.dower at python.org (Steve Dower)
Date: Fri, 7 Dec 2018 07:16:03 -0800
Subject: [Python-Dev] I reverted "Add Windows App Store package" change
In-Reply-To: <CA+3bQGE2Sb1ArqjO=axjUUoqyXy0mPYe7oh_9m33MfoS90zivQ@mail.gmail.com>
References: <CA+3bQGE2Sb1ArqjO=axjUUoqyXy0mPYe7oh_9m33MfoS90zivQ@mail.gmail.com>
Message-ID: <4937db92-3a2e-5a6a-6e3b-a4e502277d16@python.org>

Thanks for fixing up the buildbots, but please be a little more thorough
before making publicly incorrect statements.

The change is 99% adding new files that are not part of Python, but
participate in the build for Windows (and are available and incredibly
useful for everyone). These are essentially zero-impact. In the PR I
pointed out exactly where to look for interesting changes and it didn't
help get any traction :)

The other changes are either in Windows-only files or tests. The one
exception is venv, where they are in "if os.name=='nt'" blocks. I also
pinged our venv expert a few times with no response.

The PR was put up two *months* ago, not one week. In that time, it's
been heavily tested by myself and a number of people who I *am* able to
share the output of this with. I've also been chatting with the release
manager for 3.7 about it and he's been on board (the words may have been
"on your own head", but that's close enough to "on board")

It didn't break all Windows buildbots.

That said, it's totally my fault for merging and then not watching. Also
for not submitting custom builds to all the buildbots (Can we still do
that? I'm not seeing any UI right now... I did run a number of test
release builds on the release machine, so I knew that was going to be okay.)

Now, to answer your questions: releasing in a new package with slightly
different semantics *has* to be somewhat experimental, because nobody
can test it until it's been released. This isn't about iterating on this
change in master, it's about getting broad public feedback on a release
mechanism that currently does not exist.

Historically, when changes to the part you point out have been extracted
out from their context, they've been rejected on the basis that they
aren't necessary. But now the original PR is broken (because the tests
don't pass), and so there will never be a need. This time I decided to
specifically point out numerous times where the interesting changes were
and was not able to get reviews from bpo/github (I did get many reviews
and some testing from others).

As it happens, I split out many changes to do with pathconfig that came
from this. You rejected them because they weren't necessary :)

Most of the code is a Python script to do "make install" on Windows. A
very common request is "how do I copy built files into the right place",
and the answer has always been "it's complicated". Now we can measure
how complicated it is in terms of lines of Python code, but at least the
answer is "run this script". Yes, it could go into its own PR, but that
runs into the context problem again. If I'm going to be forced to bypass
review on a dependency just to make it possible to merge a real change,
then they may as well go together.

(The new script is Black formatted, so probably I could get Lukasz to
approve it on its own? :) )

I hope that explains a bit better. People wait two months and more for
simpler reviews, but part of me being a core developer is to accelerate
that for Windows-targeted work. That's all I did here, and I'm happy
with my reasoning.

I've reposted the PRs at https://github.com/python/cpython/pull/11027
and https://github.com/python/cpython/pull/11028 with fixes for the one
issue that Victor couldn't investigate. If someone can get a Windows
buildbot to run against them that would be great (not you Zach - your
buildbots were fine :) ).

Cheers,
Steve

On 07Dec2018 0435, Victor Stinner wrote:
> Hi,
> 
> I had to revert a change since it broke buildbots. Sadly, I don't have
> the bandwidth to investigate the failures and try to fix the change
> :-(
> 
> 
> A large change has been pushed into the 3.7 and master branches to
> "Add Windows App Store package":
> 
> "Release Windows Store app containing Python"
> https://bugs.python.org/issue34977
> 
> These changes broke all Windows buildbots:
> 
> "Almost all Windows buildbots are failing to compile"
> https://bugs.python.org/issue35437
> 
> So I reverted these two changes.
> 
> It's a large change which mostly add new files, but also make changes
> in different files:
> ---
> commit 468a15aaf9206448a744fc5eab3fc21f51966aad
> Author: Steve Dower <steve.dower at microsoft.com>
> Date:   Thu Dec 6 21:09:20 2018 -0800
> 
>     bpo-34977: Add Windows App Store package (GH-10245)
> 
>  .azure-pipelines/windows-appx-test.yml             |  65 +++
>  .gitattributes                                     |   1 +
>  Doc/make.bat                                       |   2 +
>  Lib/test/test_pathlib.py                           |   2 +-
>  Lib/test/test_venv.py                              |   1 +
>  Lib/venv/__init__.py                               |  49 +-
>  .../2018-10-30-13-39-17.bpo-34977.0l7_QV.rst       |   1 +
>  PC/classicAppCompat.can.xml                        | Bin 0 -> 3978 bytes
>  PC/classicAppCompat.cat                            | Bin 0 -> 10984 bytes
>  PC/classicAppCompat.sccd                           | Bin 0 -> 18503 bytes
>  PC/getpathp.c                                      |   8 +-
>  PC/icons/pythonwx150.png                           | Bin 0 -> 8187 bytes
>  PC/icons/pythonwx44.png                            | Bin 0 -> 2232 bytes
>  PC/icons/pythonx150.png                            | Bin 0 -> 8271 bytes
>  PC/icons/pythonx44.png                             | Bin 0 -> 2178 bytes
>  PC/icons/pythonx50.png                             | Bin 0 -> 2190 bytes
>  PC/launcher.c                                      | 220 +++++++-
>  PC/layout/__init__.py                              |   0
>  PC/layout/__main__.py                              |  14 +
>  PC/layout/main.py                                  | 612 +++++++++++++++++++++
>  PC/layout/support/__init__.py                      |   0
>  PC/layout/support/appxmanifest.py                  | 487 ++++++++++++++++
>  PC/layout/support/catalog.py                       |  44 ++
>  PC/layout/support/constants.py                     |  28 +
>  .../support/distutils.command.bdist_wininst.py     |  25 +
>  PC/layout/support/filesets.py                      | 100 ++++
>  PC/layout/support/logging.py                       |  93 ++++
>  PC/layout/support/options.py                       | 122 ++++
>  PC/layout/support/pip.py                           |  79 +++
>  PC/layout/support/props.py                         | 110 ++++
>  {Tools/nuget => PC/layout/support}/python.props    |   0
>  PC/pylauncher.rc                                   |   6 +
>  PC/python_uwp.cpp                                  | 226 ++++++++
>  PC/store_info.txt                                  | 146 +++++
>  PCbuild/_tkinter.vcxproj                           |   6 +
>  PCbuild/find_msbuild.bat                           |  10 +
>  PCbuild/pcbuild.proj                               |   3 +
>  PCbuild/pcbuild.sln                                |  72 +++
>  PCbuild/python.props                               |   3 +-
>  PCbuild/python_uwp.vcxproj                         |  86 +++
>  PCbuild/pythoncore.vcxproj                         |  15 +
>  PCbuild/pythonw_uwp.vcxproj                        |  86 +++
>  PCbuild/venvlauncher.vcxproj                       |  85 +++
>  PCbuild/venvwlauncher.vcxproj                      |  85 +++
>  Tools/msi/buildrelease.bat                         |  13 +-
>  Tools/msi/make_appx.ps1                            |  71 +++
>  Tools/msi/make_cat.ps1                             |  34 ++
>  Tools/msi/make_zip.proj                            |   9 +-
>  Tools/msi/make_zip.py                              | 250 ---------
>  Tools/msi/sdktools.psm1                            |  43 ++
>  Tools/msi/sign_build.ps1                           |  34 ++
>  Tools/nuget/make_pkg.proj                          |  38 +-
>  52 files changed, 3053 insertions(+), 331 deletions(-)
> ---
> 
> Note: the commit message is a single line.
> 
> 
> Now I have questions :-)
> 
> 
> It seems like the change is "experimental":
> https://bugs.python.org/issue34977#msg331267
> 
> """
> Making the *release experimental* as part of the next 3.7 update was
> approved by Ned (over email), so I merged the build. As soon as we
> snap for the RC I'll kick off an update and make the store page
> public, and hopefully can promote it enough to get eyes on it.
> 
> Unfortunately, I discovered as part of a test submission that the
> minimum Windows version matters, and it's a version that hasn't been
> rolled out fully yet *because of some bugs*, so there may not be that
> many people who can use it this first time. But that will *improve
> over time*, and I'm sure I can find enough people to flush out issues
> before the next release (anyone on the Windows Insiders program should
> be fine).
> """
> 
> If it's experimental, why pushing it *right now* to the 3.7 branch?
> Can't we wait until it's stable enough? Even if it's stable, I'm not
> sure sure that it should go into 3.7 which is a stable branch.
> 
> I guess that Steve would like to get this feature into 3.7.2. Ned
> Deily (3.7 release changer) approved this change.
> 
> The pull request was merged one week after it has been created, I
> don't see any review.
> https://github.com/python/cpython/pull/10245
> 
> In general, I'm fine with merging changes without any kind of review,
> when the change is small. I'm doing it *frequently* when I'm confident
> that the change is small and safe enough. But here, the change is
> quite large. Sadly, I know the problem: the lack of available
> developers for review. There are very few developers who know Windows
> and are available to provide a review. Sometimes, Zachary Ware or Eryk
> Sun are around and can help.
> 
> I'm fine with iterating in the master branch, since the change seems
> to be separated from CPython core: it mostly add new files. My concern
> is more about changes on "Python itself": the venv and tests changes.
> 
> In the middle of the large change, there is small change on the venv module:
> 
> diff --git a/Lib/venv/__init__.py b/Lib/venv/__init__.py
> index 043420897e..5438b0d4e5 100644
> --- a/Lib/venv/__init__.py
> +++ b/Lib/venv/__init__.py
> @@ -64,10 +64,11 @@ class EnvBuilder:
>          self.system_site_packages = False
>          self.create_configuration(context)
>          self.setup_python(context)
> +        if not self.upgrade:
> +            self.setup_scripts(context)
>          if self.with_pip:
>              self._setup_pip(context)
>          if not self.upgrade:
> -            self.setup_scripts(context)
>              self.post_setup(context)
>          if true_system_site_packages:
> 
> Moreover, the commit also changes tests:
> 
> * Lib/test/test_pathlib.py
> * Lib/test/test_venv.py
> 
> The commit message is just "bpo-34977: Add Windows App Store package
> (GH-10245)", it doesn't explain these changes.
> 
> I would prefer to see these changes extracted into separated commits.
> Sadly, right now on the cpython project on GitHub, we are only allowed
> to squash all commits into a single commit (note: the individual
> commit in the PR doesn't explain these venv/tests changes neither). So
> I suggest to create multiple PRs (at least one for venv+pathlib
> changes and a second for the Windows AppStore).
> 
> I guess that these changes are bugfixes or enhancement. Having a
> separated change should also ease to backport these changes up to 3.6
> ;-)
> 
> --
> 
> Jeremy Kloth just created:
> "Correctly detect installed SDK versions"
> https://bugs.python.org/issue35433
> 
> I'm not sure if it's related to the AppStore change?
> 
> Victor
> 


From steve.dower at python.org  Fri Dec  7 10:41:38 2018
From: steve.dower at python.org (Steve Dower)
Date: Fri, 7 Dec 2018 07:41:38 -0800
Subject: [Python-Dev] I reverted "Add Windows App Store package" change
In-Reply-To: <4937db92-3a2e-5a6a-6e3b-a4e502277d16@python.org>
References: <CA+3bQGE2Sb1ArqjO=axjUUoqyXy0mPYe7oh_9m33MfoS90zivQ@mail.gmail.com>
 <4937db92-3a2e-5a6a-6e3b-a4e502277d16@python.org>
Message-ID: <1bff9c35-2284-27ee-11b3-bab6072bf9aa@python.org>

As a slight aside, 8 out of 8 buildbot messages on the PR look like
false positives, and none of the true positives sent a message. What
happened there?

On 07Dec2018 0716, Steve Dower wrote:
> Thanks for fixing up the buildbots, but please be a little more thorough
> before making publicly incorrect statements.
> 
> The change is 99% adding new files that are not part of Python, but
> participate in the build for Windows (and are available and incredibly
> useful for everyone). These are essentially zero-impact. In the PR I
> pointed out exactly where to look for interesting changes and it didn't
> help get any traction :)
> 
> The other changes are either in Windows-only files or tests. The one
> exception is venv, where they are in "if os.name=='nt'" blocks. I also
> pinged our venv expert a few times with no response.
> 
> The PR was put up two *months* ago, not one week. In that time, it's
> been heavily tested by myself and a number of people who I *am* able to
> share the output of this with. I've also been chatting with the release
> manager for 3.7 about it and he's been on board (the words may have been
> "on your own head", but that's close enough to "on board")
> 
> It didn't break all Windows buildbots.
> 
> That said, it's totally my fault for merging and then not watching. Also
> for not submitting custom builds to all the buildbots (Can we still do
> that? I'm not seeing any UI right now... I did run a number of test
> release builds on the release machine, so I knew that was going to be okay.)
> 
> Now, to answer your questions: releasing in a new package with slightly
> different semantics *has* to be somewhat experimental, because nobody
> can test it until it's been released. This isn't about iterating on this
> change in master, it's about getting broad public feedback on a release
> mechanism that currently does not exist.
> 
> Historically, when changes to the part you point out have been extracted
> out from their context, they've been rejected on the basis that they
> aren't necessary. But now the original PR is broken (because the tests
> don't pass), and so there will never be a need. This time I decided to
> specifically point out numerous times where the interesting changes were
> and was not able to get reviews from bpo/github (I did get many reviews
> and some testing from others).
> 
> As it happens, I split out many changes to do with pathconfig that came
> from this. You rejected them because they weren't necessary :)
> 
> Most of the code is a Python script to do "make install" on Windows. A
> very common request is "how do I copy built files into the right place",
> and the answer has always been "it's complicated". Now we can measure
> how complicated it is in terms of lines of Python code, but at least the
> answer is "run this script". Yes, it could go into its own PR, but that
> runs into the context problem again. If I'm going to be forced to bypass
> review on a dependency just to make it possible to merge a real change,
> then they may as well go together.
> 
> (The new script is Black formatted, so probably I could get Lukasz to
> approve it on its own? :) )
> 
> I hope that explains a bit better. People wait two months and more for
> simpler reviews, but part of me being a core developer is to accelerate
> that for Windows-targeted work. That's all I did here, and I'm happy
> with my reasoning.
> 
> I've reposted the PRs at https://github.com/python/cpython/pull/11027
> and https://github.com/python/cpython/pull/11028 with fixes for the one
> issue that Victor couldn't investigate. If someone can get a Windows
> buildbot to run against them that would be great (not you Zach - your
> buildbots were fine :) ).
> 
> Cheers,
> Steve
> 
> On 07Dec2018 0435, Victor Stinner wrote:
>> Hi,
>>
>> I had to revert a change since it broke buildbots. Sadly, I don't have
>> the bandwidth to investigate the failures and try to fix the change
>> :-(
>>
>>
>> A large change has been pushed into the 3.7 and master branches to
>> "Add Windows App Store package":
>>
>> "Release Windows Store app containing Python"
>> https://bugs.python.org/issue34977
>>
>> These changes broke all Windows buildbots:
>>
>> "Almost all Windows buildbots are failing to compile"
>> https://bugs.python.org/issue35437
>>
>> So I reverted these two changes.
>>
>> It's a large change which mostly add new files, but also make changes
>> in different files:
>> ---
>> commit 468a15aaf9206448a744fc5eab3fc21f51966aad
>> Author: Steve Dower <steve.dower at microsoft.com>
>> Date:   Thu Dec 6 21:09:20 2018 -0800
>>
>>     bpo-34977: Add Windows App Store package (GH-10245)
>>
>>  .azure-pipelines/windows-appx-test.yml             |  65 +++
>>  .gitattributes                                     |   1 +
>>  Doc/make.bat                                       |   2 +
>>  Lib/test/test_pathlib.py                           |   2 +-
>>  Lib/test/test_venv.py                              |   1 +
>>  Lib/venv/__init__.py                               |  49 +-
>>  .../2018-10-30-13-39-17.bpo-34977.0l7_QV.rst       |   1 +
>>  PC/classicAppCompat.can.xml                        | Bin 0 -> 3978 bytes
>>  PC/classicAppCompat.cat                            | Bin 0 -> 10984 bytes
>>  PC/classicAppCompat.sccd                           | Bin 0 -> 18503 bytes
>>  PC/getpathp.c                                      |   8 +-
>>  PC/icons/pythonwx150.png                           | Bin 0 -> 8187 bytes
>>  PC/icons/pythonwx44.png                            | Bin 0 -> 2232 bytes
>>  PC/icons/pythonx150.png                            | Bin 0 -> 8271 bytes
>>  PC/icons/pythonx44.png                             | Bin 0 -> 2178 bytes
>>  PC/icons/pythonx50.png                             | Bin 0 -> 2190 bytes
>>  PC/launcher.c                                      | 220 +++++++-
>>  PC/layout/__init__.py                              |   0
>>  PC/layout/__main__.py                              |  14 +
>>  PC/layout/main.py                                  | 612 +++++++++++++++++++++
>>  PC/layout/support/__init__.py                      |   0
>>  PC/layout/support/appxmanifest.py                  | 487 ++++++++++++++++
>>  PC/layout/support/catalog.py                       |  44 ++
>>  PC/layout/support/constants.py                     |  28 +
>>  .../support/distutils.command.bdist_wininst.py     |  25 +
>>  PC/layout/support/filesets.py                      | 100 ++++
>>  PC/layout/support/logging.py                       |  93 ++++
>>  PC/layout/support/options.py                       | 122 ++++
>>  PC/layout/support/pip.py                           |  79 +++
>>  PC/layout/support/props.py                         | 110 ++++
>>  {Tools/nuget => PC/layout/support}/python.props    |   0
>>  PC/pylauncher.rc                                   |   6 +
>>  PC/python_uwp.cpp                                  | 226 ++++++++
>>  PC/store_info.txt                                  | 146 +++++
>>  PCbuild/_tkinter.vcxproj                           |   6 +
>>  PCbuild/find_msbuild.bat                           |  10 +
>>  PCbuild/pcbuild.proj                               |   3 +
>>  PCbuild/pcbuild.sln                                |  72 +++
>>  PCbuild/python.props                               |   3 +-
>>  PCbuild/python_uwp.vcxproj                         |  86 +++
>>  PCbuild/pythoncore.vcxproj                         |  15 +
>>  PCbuild/pythonw_uwp.vcxproj                        |  86 +++
>>  PCbuild/venvlauncher.vcxproj                       |  85 +++
>>  PCbuild/venvwlauncher.vcxproj                      |  85 +++
>>  Tools/msi/buildrelease.bat                         |  13 +-
>>  Tools/msi/make_appx.ps1                            |  71 +++
>>  Tools/msi/make_cat.ps1                             |  34 ++
>>  Tools/msi/make_zip.proj                            |   9 +-
>>  Tools/msi/make_zip.py                              | 250 ---------
>>  Tools/msi/sdktools.psm1                            |  43 ++
>>  Tools/msi/sign_build.ps1                           |  34 ++
>>  Tools/nuget/make_pkg.proj                          |  38 +-
>>  52 files changed, 3053 insertions(+), 331 deletions(-)
>> ---
>>
>> Note: the commit message is a single line.
>>
>>
>> Now I have questions :-)
>>
>>
>> It seems like the change is "experimental":
>> https://bugs.python.org/issue34977#msg331267
>>
>> """
>> Making the *release experimental* as part of the next 3.7 update was
>> approved by Ned (over email), so I merged the build. As soon as we
>> snap for the RC I'll kick off an update and make the store page
>> public, and hopefully can promote it enough to get eyes on it.
>>
>> Unfortunately, I discovered as part of a test submission that the
>> minimum Windows version matters, and it's a version that hasn't been
>> rolled out fully yet *because of some bugs*, so there may not be that
>> many people who can use it this first time. But that will *improve
>> over time*, and I'm sure I can find enough people to flush out issues
>> before the next release (anyone on the Windows Insiders program should
>> be fine).
>> """
>>
>> If it's experimental, why pushing it *right now* to the 3.7 branch?
>> Can't we wait until it's stable enough? Even if it's stable, I'm not
>> sure sure that it should go into 3.7 which is a stable branch.
>>
>> I guess that Steve would like to get this feature into 3.7.2. Ned
>> Deily (3.7 release changer) approved this change.
>>
>> The pull request was merged one week after it has been created, I
>> don't see any review.
>> https://github.com/python/cpython/pull/10245
>>
>> In general, I'm fine with merging changes without any kind of review,
>> when the change is small. I'm doing it *frequently* when I'm confident
>> that the change is small and safe enough. But here, the change is
>> quite large. Sadly, I know the problem: the lack of available
>> developers for review. There are very few developers who know Windows
>> and are available to provide a review. Sometimes, Zachary Ware or Eryk
>> Sun are around and can help.
>>
>> I'm fine with iterating in the master branch, since the change seems
>> to be separated from CPython core: it mostly add new files. My concern
>> is more about changes on "Python itself": the venv and tests changes.
>>
>> In the middle of the large change, there is small change on the venv module:
>>
>> diff --git a/Lib/venv/__init__.py b/Lib/venv/__init__.py
>> index 043420897e..5438b0d4e5 100644
>> --- a/Lib/venv/__init__.py
>> +++ b/Lib/venv/__init__.py
>> @@ -64,10 +64,11 @@ class EnvBuilder:
>>          self.system_site_packages = False
>>          self.create_configuration(context)
>>          self.setup_python(context)
>> +        if not self.upgrade:
>> +            self.setup_scripts(context)
>>          if self.with_pip:
>>              self._setup_pip(context)
>>          if not self.upgrade:
>> -            self.setup_scripts(context)
>>              self.post_setup(context)
>>          if true_system_site_packages:
>>
>> Moreover, the commit also changes tests:
>>
>> * Lib/test/test_pathlib.py
>> * Lib/test/test_venv.py
>>
>> The commit message is just "bpo-34977: Add Windows App Store package
>> (GH-10245)", it doesn't explain these changes.
>>
>> I would prefer to see these changes extracted into separated commits.
>> Sadly, right now on the cpython project on GitHub, we are only allowed
>> to squash all commits into a single commit (note: the individual
>> commit in the PR doesn't explain these venv/tests changes neither). So
>> I suggest to create multiple PRs (at least one for venv+pathlib
>> changes and a second for the Windows AppStore).
>>
>> I guess that these changes are bugfixes or enhancement. Having a
>> separated change should also ease to backport these changes up to 3.6
>> ;-)
>>
>> --
>>
>> Jeremy Kloth just created:
>> "Correctly detect installed SDK versions"
>> https://bugs.python.org/issue35433
>>
>> I'm not sure if it's related to the AppStore change?
>>
>> Victor

From jeremy.kloth at gmail.com  Fri Dec  7 11:13:35 2018
From: jeremy.kloth at gmail.com (Jeremy Kloth)
Date: Fri, 7 Dec 2018 09:13:35 -0700
Subject: [Python-Dev] I reverted "Add Windows App Store package" change
In-Reply-To: <1bff9c35-2284-27ee-11b3-bab6072bf9aa@python.org>
References: <CA+3bQGE2Sb1ArqjO=axjUUoqyXy0mPYe7oh_9m33MfoS90zivQ@mail.gmail.com>
 <4937db92-3a2e-5a6a-6e3b-a4e502277d16@python.org>
 <1bff9c35-2284-27ee-11b3-bab6072bf9aa@python.org>
Message-ID: <CAGvrs3JXKedV-Lr5+Cag24jwCK=VspqZPKPiY97fO8kA6ESujA@mail.gmail.com>

> On 07Dec2018 0716, Steve Dower wrote:
> > It didn't break all Windows buildbots.
> >
> > That said, it's totally my fault for merging and then not watching. Also
> > for not submitting custom builds to all the buildbots (Can we still do
> > that? I'm not seeing any UI right now... I did run a number of test
> > release builds on the release machine, so I knew that was going to be okay.)

As to the breakage on my buildbot
(https://buildbot.python.org/all/#/workers/12), it seems to be caused
by not having VS2017 (my guess due to missing C++ headers).  Unless
something has changed recently, the guides still state the building
with VS2015 is OK and I would like to keep my buildbot testing at the
*minimum* required components for building (hence the VS9.0 builder)
to keep us honest with any changes.

I have no problem adding VS2017 for newer Python versions, but I think
is build scripts always chose the latest version of the build tools
thus making testing with older toolsets impossible.

-- 
Jeremy Kloth

From zachary.ware+pydev at gmail.com  Fri Dec  7 11:17:10 2018
From: zachary.ware+pydev at gmail.com (Zachary Ware)
Date: Fri, 7 Dec 2018 10:17:10 -0600
Subject: [Python-Dev] I reverted "Add Windows App Store package" change
In-Reply-To: <4937db92-3a2e-5a6a-6e3b-a4e502277d16@python.org>
References: <CA+3bQGE2Sb1ArqjO=axjUUoqyXy0mPYe7oh_9m33MfoS90zivQ@mail.gmail.com>
 <4937db92-3a2e-5a6a-6e3b-a4e502277d16@python.org>
Message-ID: <CAKJDb-M0xdmGmqiqbPk=2GDSmP2sye7XKP124xtMq1RihX_XZA@mail.gmail.com>

On Fri, Dec 7, 2018 at 9:17 AM Steve Dower <steve.dower at python.org> wrote:
> Also for not submitting custom builds to all the buildbots (Can we still do
> that? I'm not seeing any UI right now... I did run a number of test
> release builds on the release machine, so I knew that was going to be okay.)

The UX is not great, but you can trigger a custom builder build by
pushing to the `buildbot-custom` branch of python/cpython.

Eventually, time will materialize to make it possible for core devs to
trigger builds from branches on their personal fork since we do have
proper auth now.

-- 
Zach

From vstinner at redhat.com  Fri Dec  7 11:17:58 2018
From: vstinner at redhat.com (Victor Stinner)
Date: Fri, 7 Dec 2018 17:17:58 +0100
Subject: [Python-Dev] I reverted "Add Windows App Store package" change
In-Reply-To: <1bff9c35-2284-27ee-11b3-bab6072bf9aa@python.org>
References: <CA+3bQGE2Sb1ArqjO=axjUUoqyXy0mPYe7oh_9m33MfoS90zivQ@mail.gmail.com>
 <4937db92-3a2e-5a6a-6e3b-a4e502277d16@python.org>
 <1bff9c35-2284-27ee-11b3-bab6072bf9aa@python.org>
Message-ID: <CA+3bQGHAQyCpRXXP1Ru6FHXpa6foD6odMDpwGZBoji7L7ouJ7A@mail.gmail.com>

Le ven. 7 d?c. 2018 ? 16:42, Steve Dower <steve.dower at python.org> a ?crit :
> As a slight aside, 8 out of 8 buildbot messages on the PR look like
> false positives, and none of the true positives sent a message. What
> happened there?

I don't know why the PR didn't get notifications about the regression.
I got something more than 20 emails in my buildbot mail box :-)

Let me have a look:
https://github.com/python/cpython/pull/10245#issuecomment-445184041

There are multiple messages related to the 'custom' build: Pablo's
created a custom build ("buildbot-custom" Git branch) which reverted
your PR in master. It seems like Pablo's buildbot which sends
notifications to PRs decided that his commit is attached to your PR.
You can ignore all notifications from the "custom" build. The GitHub
notifications are still experimental. If someone is interested, see
how you can enhance these notifications ;-)

s390x Debian 3.7 failed on "git clone". Well, that's a random network
issue. We are working on trying to make this specific issue quiet:
https://github.com/python/buildmaster-config/pull/69

Anyone is welcome to help to enhance the Python CIs, there are plenty
of things to enhance ;-) Buildbots are complex beast, but the
situation should be better nowadays than 2 years ago. The number of
random failure is quite low.

Maybe random failures are more visible today because notifications are
sent on state change (basically when the color changes). Two years
ago, all buildbots were always red (fail), so we never get any
notification :-)

I'm still fixing random failures every week: test_eintr, test_socket, etc.

Victor

From vstinner at redhat.com  Fri Dec  7 11:31:47 2018
From: vstinner at redhat.com (Victor Stinner)
Date: Fri, 7 Dec 2018 17:31:47 +0100
Subject: [Python-Dev] I reverted "Add Windows App Store package" change
In-Reply-To: <4937db92-3a2e-5a6a-6e3b-a4e502277d16@python.org>
References: <CA+3bQGE2Sb1ArqjO=axjUUoqyXy0mPYe7oh_9m33MfoS90zivQ@mail.gmail.com>
 <4937db92-3a2e-5a6a-6e3b-a4e502277d16@python.org>
Message-ID: <CA+3bQGEc17P2Ty5XkN+Qc7FKpqLRGjvePPcBocubv0RvciRVbw@mail.gmail.com>

Le ven. 7 d?c. 2018 ? 16:16, Steve Dower <steve.dower at python.org> a ?crit :
> The other changes are either in Windows-only files or tests. The one
> exception is venv, where they are in "if os.name=='nt'" blocks. I also
> pinged our venv expert a few times with no response.

Yeah, the lack of review is an issue in Python, I'm well aware of that...

But I guess that it would be easier to get a review on a change
modifying a single file (venv) than one PR modifying 52 files?
Usually, I'm scared by giant PRs and I just skip them :-)


> The PR was put up two *months* ago, not one week.

Oh, wait... I read Oct 30 and I counted 7 days... sorry :-) November
becomes December, not October. Sorry about that.


> That said, it's totally my fault for merging and then not watching.

That's fine. A revert doesn't mean that your change is wrong. The only
intent is to repair the CI as soon as possible to spot other
regressions, and give us more time to design the proper fix:

   https://pythondev.readthedocs.io/ci.html#revert-on-fail


> (Can we still do that? I'm not seeing any UI right now... I did run a number of test
> release builds on the release machine, so I knew that was going to be okay.)

The current process is described at:
https://devguide.python.org/buildbots/#custom-builders


> Historically, when changes to the part you point out have been extracted
> out from their context, they've been rejected on the basis that they
> aren't necessary.

I don't think that there is a general rule. It's usually decided on a
case by case basis, and I know that each core dev has a different
opinion on this question :-) I do prefer multiple small commits.

I would be simpler if it would be possible to have a "patch serie":
list of pull requests, or a single PR with multiple commits but don't
squash them.


> As it happens, I split out many changes to do with pathconfig that came
> from this. You rejected them because they weren't necessary :)

I'm sorry, I don't recall, which changes?


> I hope that explains a bit better.

It does, thanks :-)

Victor

From status at bugs.python.org  Fri Dec  7 12:10:08 2018
From: status at bugs.python.org (Python tracker)
Date: Fri,  7 Dec 2018 18:10:08 +0100 (CET)
Subject: [Python-Dev] Summary of Python tracker Issues
Message-ID: <20181207171008.6E36A116856@psf.upfronthosting.co.za>


ACTIVITY SUMMARY (2018-11-30 - 2018-12-07)
Python tracker at https://bugs.python.org/

To view or respond to any of the issues listed below, click on the issue.
Do NOT respond to this message.

Issues counts and deltas:
  open    6904 (+24)
  closed 40284 (+50)
  total  47188 (+74)

Open issues with patches: 2743 


Issues opened (49)
==================

#35364: Datetime ???fromtimestamp()??? ignores inheritance if timezone
https://bugs.python.org/issue35364  opened by Delgan

#35366: Monkey Patching class derived from ctypes.Union doesn't work
https://bugs.python.org/issue35366  opened by rvijayc

#35368: [2.7] Make PyMem_Malloc() thread-safe in debug mode
https://bugs.python.org/issue35368  opened by vstinner

#35370: Provide API to set the tracing function to be used for running
https://bugs.python.org/issue35370  opened by fabioz

#35374: Windows doc build does not find autodetected hhc.exe
https://bugs.python.org/issue35374  opened by chrullrich

#35376: modulefinder skips nested modules with same name as top-level 
https://bugs.python.org/issue35376  opened by rdb

#35377: urlparse doesn't validate the scheme
https://bugs.python.org/issue35377  opened by devkral

#35378: multiprocessing.Pool.imaps iterators do not maintain alive the
https://bugs.python.org/issue35378  opened by pablogsal

#35379: IDLE's close fails when io.filename set to None
https://bugs.python.org/issue35379  opened by rhettinger

#35381: Heap-allocated posixmodule types
https://bugs.python.org/issue35381  opened by eelizondo

#35383: lib2to3 raises ParseError on argument called "print"
https://bugs.python.org/issue35383  opened by n_rosenstein

#35385: time module: why not using tzname from the glibc?
https://bugs.python.org/issue35385  opened by vstinner

#35387: Dialogs on IDLE are accompanied by a small black window
https://bugs.python.org/issue35387  opened by wordtech

#35388: _PyRuntime_Initialize() called after Py_Finalize() does nothin
https://bugs.python.org/issue35388  opened by vstinner

#35391: threading.RLock exception handling while waiting
https://bugs.python.org/issue35391  opened by Omer Bartal

#35392: Create asyncio/sockutils.py
https://bugs.python.org/issue35392  opened by asvetlov

#35393: Typo in documentation
https://bugs.python.org/issue35393  opened by autom

#35394: Add __slots__ = () to asyncio protocols
https://bugs.python.org/issue35394  opened by asvetlov

#35397: Undeprecate and document urllib.parse.unwrap
https://bugs.python.org/issue35397  opened by steven.daprano

#35398: SQLite incorrect row count for UPDATE
https://bugs.python.org/issue35398  opened by Montana Low

#35399: Sysconfig bug
https://bugs.python.org/issue35399  opened by neyuru

#35400: PGOMGR : warning PG0188:
https://bugs.python.org/issue35400  opened by neyuru

#35401: Upgrade Windows and macOS installers to use OpenSSL 1.1.0j / 1
https://bugs.python.org/issue35401  opened by ned.deily

#35402: Upgrade macOS (and Windows?) installer to Tcl/Tk 8.6.9.1
https://bugs.python.org/issue35402  opened by ned.deily

#35403: support application/wasm in mimetypes and http.server
https://bugs.python.org/issue35403  opened by pmpp

#35404: Document how to import _structure in email.message
https://bugs.python.org/issue35404  opened by charlax

#35409: Async generator might re-throw GeneratorExit on aclose()
https://bugs.python.org/issue35409  opened by vxgmichel

#35410: copy.deepcopy does not respect metaclasses with __deepcopy__ i
https://bugs.python.org/issue35410  opened by elibixby

#35412: test_future4 ran no test
https://bugs.python.org/issue35412  opened by vstinner

#35413: test_multiprocessing_fork: test_del_pool() leaks dangling thre
https://bugs.python.org/issue35413  opened by vstinner

#35414: A reference counting bug in PyState_RemoveModule()
https://bugs.python.org/issue35414  opened by ZackerySpytz

#35415: fileno argument to socket.socket is not validated
https://bugs.python.org/issue35415  opened by Dima.Tisnek

#35416: Fix potential resource warnings in distutils
https://bugs.python.org/issue35416  opened by Tiger-222

#35417: Double parenthesis in print function running 2to3 in already c
https://bugs.python.org/issue35417  opened by jondaa

#35419: Thread.is_alive while running Process.is_alive causes either p
https://bugs.python.org/issue35419  opened by Hexorg

#35420: how to migrate a c-extension module to one that supports subin
https://bugs.python.org/issue35420  opened by mattip

#35422: misleading error message from ssl.get_server_certificate() whe
https://bugs.python.org/issue35422  opened by cedricvanrompay

#35423: Signal handling machinery still relies on "pending calls".
https://bugs.python.org/issue35423  opened by eric.snow

#35424: multiprocessing.Pool: emit ResourceWarning
https://bugs.python.org/issue35424  opened by vstinner

#35425: test_eintr fails randomly on AMD64 FreeBSD 10-STABLE Non-Debug
https://bugs.python.org/issue35425  opened by vstinner

#35426: test_signal.test_interprocess_signal() race condition
https://bugs.python.org/issue35426  opened by vstinner

#35427: logging UnicodeDecodeError from undecodable strftime output
https://bugs.python.org/issue35427  opened by mark.dickinson

#35428: xml.etree.ElementTree.tostring violates W3 standards allowing 
https://bugs.python.org/issue35428  opened by Zim

#35429: Incorrect use of raise NotImplemented
https://bugs.python.org/issue35429  opened by rth

#35431: The math module should provide a function for computing binomi
https://bugs.python.org/issue35431  opened by kellerfuchs

#35432: str.format and string.Formatter bug with French (and other) lo
https://bugs.python.org/issue35432  opened by canuck7

#35433: Correctly detect installed SDK versions
https://bugs.python.org/issue35433  opened by jkloth

#35435: Documentation of 3.3 is available
https://bugs.python.org/issue35435  opened by matrixise

#35436: Add missing PyErr_NoMemory() calls
https://bugs.python.org/issue35436  opened by ZackerySpytz



Most recent 15 issues with no replies (15)
==========================================

#35425: test_eintr fails randomly on AMD64 FreeBSD 10-STABLE Non-Debug
https://bugs.python.org/issue35425

#35420: how to migrate a c-extension module to one that supports subin
https://bugs.python.org/issue35420

#35419: Thread.is_alive while running Process.is_alive causes either p
https://bugs.python.org/issue35419

#35415: fileno argument to socket.socket is not validated
https://bugs.python.org/issue35415

#35413: test_multiprocessing_fork: test_del_pool() leaks dangling thre
https://bugs.python.org/issue35413

#35410: copy.deepcopy does not respect metaclasses with __deepcopy__ i
https://bugs.python.org/issue35410

#35409: Async generator might re-throw GeneratorExit on aclose()
https://bugs.python.org/issue35409

#35404: Document how to import _structure in email.message
https://bugs.python.org/issue35404

#35402: Upgrade macOS (and Windows?) installer to Tcl/Tk 8.6.9.1
https://bugs.python.org/issue35402

#35401: Upgrade Windows and macOS installers to use OpenSSL 1.1.0j / 1
https://bugs.python.org/issue35401

#35400: PGOMGR : warning PG0188:
https://bugs.python.org/issue35400

#35399: Sysconfig bug
https://bugs.python.org/issue35399

#35397: Undeprecate and document urllib.parse.unwrap
https://bugs.python.org/issue35397

#35394: Add __slots__ = () to asyncio protocols
https://bugs.python.org/issue35394

#35392: Create asyncio/sockutils.py
https://bugs.python.org/issue35392



Most recent 15 issues waiting for review (15)
=============================================

#35436: Add missing PyErr_NoMemory() calls
https://bugs.python.org/issue35436

#35433: Correctly detect installed SDK versions
https://bugs.python.org/issue35433

#35431: The math module should provide a function for computing binomi
https://bugs.python.org/issue35431

#35429: Incorrect use of raise NotImplemented
https://bugs.python.org/issue35429

#35424: multiprocessing.Pool: emit ResourceWarning
https://bugs.python.org/issue35424

#35423: Signal handling machinery still relies on "pending calls".
https://bugs.python.org/issue35423

#35416: Fix potential resource warnings in distutils
https://bugs.python.org/issue35416

#35415: fileno argument to socket.socket is not validated
https://bugs.python.org/issue35415

#35414: A reference counting bug in PyState_RemoveModule()
https://bugs.python.org/issue35414

#35409: Async generator might re-throw GeneratorExit on aclose()
https://bugs.python.org/issue35409

#35404: Document how to import _structure in email.message
https://bugs.python.org/issue35404

#35398: SQLite incorrect row count for UPDATE
https://bugs.python.org/issue35398

#35394: Add __slots__ = () to asyncio protocols
https://bugs.python.org/issue35394

#35381: Heap-allocated posixmodule types
https://bugs.python.org/issue35381

#35378: multiprocessing.Pool.imaps iterators do not maintain alive the
https://bugs.python.org/issue35378



Top 10 most discussed issues (10)
=================================

#34172: multiprocessing.Pool and ThreadPool leak resources after being
https://bugs.python.org/issue34172  25 msgs

#35431: The math module should provide a function for computing binomi
https://bugs.python.org/issue35431  18 msgs

#10496: Python startup should not require passwd entry
https://bugs.python.org/issue10496  13 msgs

#34977: Release Windows Store app containing Python
https://bugs.python.org/issue34977  12 msgs

#35378: multiprocessing.Pool.imaps iterators do not maintain alive the
https://bugs.python.org/issue35378  11 msgs

#22005: datetime.__setstate__ fails decoding python2 pickle
https://bugs.python.org/issue22005   9 msgs

#34850: Emit a syntax warning for "is" with a literal
https://bugs.python.org/issue34850   7 msgs

#35377: urlparse doesn't validate the scheme
https://bugs.python.org/issue35377   7 msgs

#35433: Correctly detect installed SDK versions
https://bugs.python.org/issue35433   7 msgs

#35364: Datetime ???fromtimestamp()??? ignores inheritance if timezone
https://bugs.python.org/issue35364   6 msgs



Issues closed (50)
==================

#16865: ctypes arrays >=2GB in length causes exception
https://bugs.python.org/issue16865  closed by serhiy.storchaka

#20371: datetime.datetime.replace bypasses a subclass's __new__
https://bugs.python.org/issue20371  closed by belopolsky

#22496: urllib2 fails against IIS (urllib2 can't parse 401 reply www-a
https://bugs.python.org/issue22496  closed by deronnax

#25862: TextIOWrapper assertion failure after read() and SEEK_CUR
https://bugs.python.org/issue25862  closed by serhiy.storchaka

#29564: ResourceWarning: suggest to enable tracemalloc in the message
https://bugs.python.org/issue29564  closed by vstinner

#31177: unittest mock's reset_mock throws an error when an attribute h
https://bugs.python.org/issue31177  closed by xtreak

#32787: Better error handling in ctypes
https://bugs.python.org/issue32787  closed by serhiy.storchaka

#33709: test.support.FS_NONASCII returns incorrect result in Windows w
https://bugs.python.org/issue33709  closed by serhiy.storchaka

#34052: sqlite's create_function() raises exception on unhashable call
https://bugs.python.org/issue34052  closed by serhiy.storchaka

#34185: Lib/test/test_bdb.py failed when ran as a script
https://bugs.python.org/issue34185  closed by serhiy.storchaka

#34604: Possible mojibake in pwd.getpwnam and grp.getgrnam
https://bugs.python.org/issue34604  closed by serhiy.storchaka

#34738: Distutils: ZIP files don't include directory entries
https://bugs.python.org/issue34738  closed by serhiy.storchaka

#34784: Heap-allocated StructSequences
https://bugs.python.org/issue34784  closed by petr.viktorin

#34987: A possible null pointer dereference in _pickle.c's save_reduce
https://bugs.python.org/issue34987  closed by ZackerySpytz

#35226: mock.call equality surprisingly broken
https://bugs.python.org/issue35226  closed by cjw296

#35250: Minor parameter documentation mismatch for turtle
https://bugs.python.org/issue35250  closed by serhiy.storchaka

#35305: subprocess.Popen(['/sbin/ldconfig', '-p'], stdin=PIPE) itself 
https://bugs.python.org/issue35305  closed by vstinner

#35310: select which was interrupted by EINTR isn't re-run if the time
https://bugs.python.org/issue35310  closed by vstinner

#35316: test_eintr fails randomly on macOS
https://bugs.python.org/issue35316  closed by vstinner

#35341: Add generic version of OrderedDict to typing module
https://bugs.python.org/issue35341  closed by levkivskyi

#35344: platform: get macOS version rather than darwin version
https://bugs.python.org/issue35344  closed by vstinner

#35352: test_asyncio fails on RHEL8, or on Fedora using NEXT security 
https://bugs.python.org/issue35352  closed by vstinner

#35357: unittest.mock.call can't represent calls to a method called 'p
https://bugs.python.org/issue35357  closed by cjw296

#35359: [2.7][Windows] Define _CRT_SECURE_NO_WARNINGS to build Modules
https://bugs.python.org/issue35359  closed by vstinner

#35363: test_eintr: test_open() hangs randomly on x86-64 El Capitan 3.
https://bugs.python.org/issue35363  closed by vstinner

#35365: Use wchar_t* buffer instead of Unicode object in code page dec
https://bugs.python.org/issue35365  closed by serhiy.storchaka

#35367: FileExistsError During os.symlink() Displays Arrow in the Wron
https://bugs.python.org/issue35367  closed by eryksun

#35369: List sorting makes duplicate comparisons
https://bugs.python.org/issue35369  closed by rhettinger

#35371: Fix undefined behavior in os.utime() on Windows
https://bugs.python.org/issue35371  closed by serhiy.storchaka

#35372: Code page decoder incorrectly handles input >2GiB
https://bugs.python.org/issue35372  closed by serhiy.storchaka

#35373: PyInit_timezone() must return a value
https://bugs.python.org/issue35373  closed by vstinner

#35375: name shadowing while a module tries to import another
https://bugs.python.org/issue35375  closed by ksriram

#35380: Enable TCP_NODELAY for proactor event loop
https://bugs.python.org/issue35380  closed by asvetlov

#35382: Something wrong with pymysql
https://bugs.python.org/issue35382  closed by mark.dickinson

#35384: The repr of ctypes.CArgObject fails for non-ascii character
https://bugs.python.org/issue35384  closed by serhiy.storchaka

#35386: ftp://www.pythontest.net/ returns error 500
https://bugs.python.org/issue35386  closed by vstinner

#35389: Use gnu_get_libc_version() in platform.libc_ver()?
https://bugs.python.org/issue35389  closed by vstinner

#35390: ctypes not possible to pass NULL c_void_p in structure by refe
https://bugs.python.org/issue35390  closed by dtamayo

#35395: Typo in asyncio eventloop documentation
https://bugs.python.org/issue35395  closed by asvetlov

#35396: Add support for __fspath__ to fnmatch.fnmatchase and filter
https://bugs.python.org/issue35396  closed by adelfino

#35405: Wrong traceback for AssertionError while running under pdb
https://bugs.python.org/issue35405  closed by xtreak

#35406: calendar.nextmonth and calendar.prevmonth functions doesn't ch
https://bugs.python.org/issue35406  closed by asocia

#35407: Datetime function with selenium
https://bugs.python.org/issue35407  closed by steven.daprano

#35408: Python3.7 crash in PyCFunction_New due to broken _PyObject_GC_
https://bugs.python.org/issue35408  closed by vstinner

#35411: FTP tests of test_urllib2net fail on Travis CI: 425 Security: 
https://bugs.python.org/issue35411  closed by vstinner

#35418: python hung or stuck somtimes randomly on windows server 2008R
https://bugs.python.org/issue35418  closed by Cao Hongfu

#35421: Expected result is not clear in case of list.append(list)
https://bugs.python.org/issue35421  closed by eric.smith

#35430: Lib/argparse.py uses `is` for string comparison
https://bugs.python.org/issue35430  closed by serhiy.storchaka

#35434: Wrong bpo linked in What's New in 3.8
https://bugs.python.org/issue35434  closed by Mariatta

#35437: Almost all Windows buildbots are failing to compile
https://bugs.python.org/issue35437  closed by vstinner

From tjreedy at udel.edu  Fri Dec  7 16:40:03 2018
From: tjreedy at udel.edu (Terry Reedy)
Date: Fri, 7 Dec 2018 16:40:03 -0500
Subject: [Python-Dev] I reverted "Add Windows App Store package" change
In-Reply-To: <CA+3bQGEc17P2Ty5XkN+Qc7FKpqLRGjvePPcBocubv0RvciRVbw@mail.gmail.com>
References: <CA+3bQGE2Sb1ArqjO=axjUUoqyXy0mPYe7oh_9m33MfoS90zivQ@mail.gmail.com>
 <4937db92-3a2e-5a6a-6e3b-a4e502277d16@python.org>
 <CA+3bQGEc17P2Ty5XkN+Qc7FKpqLRGjvePPcBocubv0RvciRVbw@mail.gmail.com>
Message-ID: <puep7i$3g4$1@blaine.gmane.org>

On 12/7/2018 11:31 AM, Victor Stinner wrote:

> I would be simpler if it would be possible to have a "patch serie":
> list of pull requests,

One can make an 'index issue' with multiple dependencies, each with a 
PR.  I do this for multiple independent changes to a module or related 
modules.

> or a single PR with multiple commits but don't squash them.

Already possible on Github.  If one clicks [View Changes], multiple 
commits in a PR are combined for display purposes into a net PR diff. 
But the individual commits can be examined and reviewed individually and 
are not squashed into one by github (and should not be by authors) until 
the merge into cpython.

Typically, authors effectively 'squash' all initial changes into one 
commit, make a PR, and only add additional commits in review.  But 
authors *can* split the initial editing into multiple commits with an 
eye to easing review -- and record information for future maintainers.

Simple bugfix example:
<commit 1> Add test to test_mod that fails with TwinkleError.
Posted to issue by Joe Blow.
<commit 2> Make new test pass using the 'underhand' strategy.

The split above is not really necessary, but PR 10245 squashed changes 
to 52 files of 15 file types into one initial commit.

https://github.com/python/cpython/pull/10245/commits/17ba155a7b794926ce705ee0e2af787fbd2996e6

View Files displays them alphabetically.  Jump to ... lists them in the 
same order, but includes the functions changed, so it is hundreds of lines.

I think this PR would have benefited from having perhaps 10 or more 
initial commits, each with a comment about the group of files included. 
In icon commit could have said something about the source and purpose of 
the added icon files.  One commit could have included the venv and test 
changes that you want to review.  An added message, as long as needed, 
could have explained these particular changes.

-- 
Terry Jan Reedy


From steve.dower at python.org  Fri Dec  7 18:06:25 2018
From: steve.dower at python.org (Steve Dower)
Date: Fri, 7 Dec 2018 15:06:25 -0800
Subject: [Python-Dev] I reverted "Add Windows App Store package" change
In-Reply-To: <puep7i$3g4$1@blaine.gmane.org>
References: <CA+3bQGE2Sb1ArqjO=axjUUoqyXy0mPYe7oh_9m33MfoS90zivQ@mail.gmail.com>
 <4937db92-3a2e-5a6a-6e3b-a4e502277d16@python.org>
 <CA+3bQGEc17P2Ty5XkN+Qc7FKpqLRGjvePPcBocubv0RvciRVbw@mail.gmail.com>
 <puep7i$3g4$1@blaine.gmane.org>
Message-ID: <94dcd7b1-6566-bf8b-0fc0-40b264858290@python.org>

On 07Dec2018 1340, Terry Reedy wrote:
> Simple bugfix example:
> <commit 1> Add test to test_mod that fails with TwinkleError.
> Posted to issue by Joe Blow.
> <commit 2> Make new test pass using the 'underhand' strategy.
> 
> The split above is not really necessary, but PR 10245 squashed changes 
> to 52 files of 15 file types into one initial commit.
> 
> https://github.com/python/cpython/pull/10245/commits/17ba155a7b794926ce705ee0e2af787fbd2996e6 
> 
> 
> View Files displays them alphabetically.? Jump to ... lists them in the 
> same order, but includes the functions changed, so it is hundreds of lines.
> 
> I think this PR would have benefited from having perhaps 10 or more 
> initial commits, each with a comment about the group of files included. 
> In icon commit could have said something about the source and purpose of 
> the added icon files.? One commit could have included the venv and test 
> changes that you want to review.? An added message, as long as needed, 
> could have explained these particular changes.
> 

This is great in theory, but if you look back at the original PR it 
would have been 100+ commits (I was occasionally squashing and force 
pushing). What you're really proposing is:

* do all the work using the git workflow (stream-of-consiousness commits)
* squash all the commits at the end
* re-expand the single commit into logical groupings of files and 
re-commit them

So it's easy to sit back and imagine that I had all the perfect changes 
ready to go and deliberately chose to make it harder to review, but 
that's not the case at all. Making it sound like this is how development 
works is really disparaging to people who find themselves not producing 
perfect commit histories.

And let's be honest, there's no good tooling for turning a series of 
interdependent commits into a smaller set of sensible ones. Squashing at 
least gets rid of the changes that were reverted as part of the entire 
PR, and if you then just want to split by file you're really just asking 
for extra work. If someone had bothered to say "I'll review the parts of 
it that are relevant to me if you can split them out" then I would have, 
but nobody (in public) showed any interest in reviewing the changes at 
all - I had some private reviews done by colleagues at work, who weren't 
so demanding about it.

I review as many PRs as I send these days (maybe more? I'm not 
counting), and I always try to make an effort to have mercy towards 
people to save them having to work extra hard just to make my life a 
little bit easier. It grates to have had an incremental change visible 
in public for over two months, have it be totally ignored the entire 
time, and then have to defend something that I already did. Luckily I 
get paid work time for doing this; really can't see why I'd want to 
suffer through this for free...

From ncoghlan at gmail.com  Sat Dec  8 11:32:53 2018
From: ncoghlan at gmail.com (Nick Coghlan)
Date: Sun, 9 Dec 2018 02:32:53 +1000
Subject: [Python-Dev] I reverted "Add Windows App Store package" change
In-Reply-To: <94dcd7b1-6566-bf8b-0fc0-40b264858290@python.org>
References: <CA+3bQGE2Sb1ArqjO=axjUUoqyXy0mPYe7oh_9m33MfoS90zivQ@mail.gmail.com>
 <4937db92-3a2e-5a6a-6e3b-a4e502277d16@python.org>
 <CA+3bQGEc17P2Ty5XkN+Qc7FKpqLRGjvePPcBocubv0RvciRVbw@mail.gmail.com>
 <puep7i$3g4$1@blaine.gmane.org>
 <94dcd7b1-6566-bf8b-0fc0-40b264858290@python.org>
Message-ID: <CADiSq7dSiZJDB2Upqqbd5djNk8bG6z+6RozKx2_Sseb-BndEWQ@mail.gmail.com>

On Sat, 8 Dec 2018 at 09:10, Steve Dower <steve.dower at python.org> wrote:
> And let's be honest, there's no good tooling for turning a series of
> interdependent commits into a smaller set of sensible ones. Squashing at
> least gets rid of the changes that were reverted as part of the entire
> PR, and if you then just want to split by file you're really just asking
> for extra work.

Whether the UX counts as "good" or not is open to debate (I consider
it pretty good for the complexity of the task it handles), but if you
ever want to revise the history of a complex patch series to make it
easier for reviewers to follow:

1. Use "git rebase --interactive" to squash all the ad hoc commits
into a single commit
2. Use "git reset HEAD^" to unstage that squashed monolithic commit
3. Use "git add --patch" to compose a new commit series that takes a
reviewer through a logical set of changes, rather than the messy
reality of what actually happened

(I have no idea if there are any GUI tools which expose this level of
commit series editing power, but it exists on the command line, so
presumably there are graphical equivalents)

Most of the time this isn't worth the hassle, with either reviewing
the PR as a whole being good enough, or else there being subsets of
the changes which can be made into separate PRs that can be reviewed
and accepted independently.

However, on those occassions where you're needing to tell the
reviewers a story not only about what you changed, but also why you
changed it, then an hour or two spent up front creating a more
coherent commit history may save multiple hours of discussion later.

Cheers,
Nick.

P.S. Gerrit's entire review model is based around this idea of
dependent patch series, but code review UX turned out to be a
situation where optimising for the simple, common case (i.e. GitHub's
approach) proved to be a much better idea than focusing on the less
common complex cases.

-- 
Nick Coghlan   |   ncoghlan at gmail.com   |   Brisbane, Australia

From tjreedy at udel.edu  Sat Dec  8 22:56:12 2018
From: tjreedy at udel.edu (Terry Reedy)
Date: Sat, 8 Dec 2018 22:56:12 -0500
Subject: [Python-Dev] I reverted "Add Windows App Store package" change
In-Reply-To: <CADiSq7dSiZJDB2Upqqbd5djNk8bG6z+6RozKx2_Sseb-BndEWQ@mail.gmail.com>
References: <CA+3bQGE2Sb1ArqjO=axjUUoqyXy0mPYe7oh_9m33MfoS90zivQ@mail.gmail.com>
 <4937db92-3a2e-5a6a-6e3b-a4e502277d16@python.org>
 <CA+3bQGEc17P2Ty5XkN+Qc7FKpqLRGjvePPcBocubv0RvciRVbw@mail.gmail.com>
 <puep7i$3g4$1@blaine.gmane.org>
 <94dcd7b1-6566-bf8b-0fc0-40b264858290@python.org>
 <CADiSq7dSiZJDB2Upqqbd5djNk8bG6z+6RozKx2_Sseb-BndEWQ@mail.gmail.com>
Message-ID: <pui3kq$d83$1@blaine.gmane.org>

On 12/8/2018 11:32 AM, Nick Coghlan wrote:

> Whether the UX counts as "good" or not is open to debate (I consider
> it pretty good for the complexity of the task it handles), but if you
> ever want to revise the history of a complex patch series to make it
> easier for reviewers to follow:
> 
> 1. Use "git rebase --interactive" to squash all the ad hoc commits
> into a single commit
> 2. Use "git reset HEAD^" to unstage that squashed monolithic commit
> 3. Use "git add --patch" to compose a new commit series that takes a
> reviewer through a logical set of changes, rather than the messy
> reality of what actually happened

Thank you for the information.  I am sure I will use it.

> (I have no idea if there are any GUI tools which expose this level of
> commit series editing power, but it exists on the command line, so
> presumably there are graphical equivalents)

On Windows, I use git gui routinely for making commits.  It lists files 
with workspace changes in Unstaged and Staged boxes.  ^T (sTage) and ^U 
(Unstage) moves a hightlighted file to the other one.  A third box shows 
the diff for a highlighted file.  One can also revise the 'last' commit 
(never done this yet).  A fourth box is for entering and editing commit 
messages.

-- 
Terry Jan Reedy


From barry at barrys-emacs.org  Sun Dec  9 09:32:54 2018
From: barry at barrys-emacs.org (Barry Scott)
Date: Sun, 9 Dec 2018 14:32:54 +0000
Subject: [Python-Dev] windows compiler list missing 3.7 details on wiki
In-Reply-To: <bfcde3d4-b290-6d3d-f315-7cd3076882ea@python.org>
References: <16BCAA90-23DF-4B6A-8A78-DEB397109133@barrys-emacs.org>
 <bfcde3d4-b290-6d3d-f315-7cd3076882ea@python.org>
Message-ID: <873A4CF1-7651-4144-8A4E-D598740A6100@barrys-emacs.org>



> On 3 Nov 2018, at 17:57, Steve Dower <steve.dower at python.org> wrote:
> 
> Yes. Visual Studio 2015 or later can be used (and as this is the only way to get the compiler right now, I think it's fine to list that as the requirement - note that the "Visual Studio Build Tools" installer doesn't include the IDE itself).
> 
> Feel free to update the wiki.

Just got around to doing this. That page is marked as Immutable Page for me.

Do I need to apply for edit permissions? I'm user BarryScott on the wiki.

Barry


> 
> Cheers,
> Steve
> 
> On 03Nov2018 0208, Barry Scott wrote:
>> On https://wiki.python.org/moin/WindowsCompilers details for 3.7 are missing.
>> I'm assuming its still VC V14
>> Barry
> 


From nad at python.org  Mon Dec 10 02:16:46 2018
From: nad at python.org (Ned Deily)
Date: Mon, 10 Dec 2018 02:16:46 -0500
Subject: [Python-Dev] 3.7.2rc1 and 3.6.8rc1 cutoffs ahead,
 last 3.6.x bugfix release!
In-Reply-To: <95B9F244-38A8-4E47-8E9D-6DAD289C84A2@python.org>
References: <95B9F244-38A8-4E47-8E9D-6DAD289C84A2@python.org>
Message-ID: <58C8B7D8-80EF-46D3-BCBE-4ACC95382D0A@python.org>

On Dec 4, 2018, at 03:42, Ned Deily <nad at python.org> wrote:
> https://discuss.python.org/t/3-7-2rc1-and-3-6-8rc1-cutoffs-ahead-last-3-6-x-bugfix-release/510

An update: as of the planned Friday cutoff, we still had a few open issues.  Since 3.6.8 is the last planned bugfix for the 3.6 branch, I would like to make sure we leave it in as good a state as possible before it moves to security-fix-only mode.  Also, the Windows App Store support for 3.7.x that Steve D has been working on is in final review and it would be great to have that in the release candidate.  So I'm going to extend the cutoff for 3.7.2rc1 and 3.6.8rc1 until **Monday, 12-10, end of day (AOE**), in other words **about 30 hours from now**.   Thanks for all your efforts so far!


> We're reaching the end of the year and it's time for another pair of Python 3 maintenance releases, 3.7.2 and 3.6.8, before we ring out 2018.  Since there are still some open release blocker issues and I haven't been bugging you about them, I've moved the code cutoff for the release candidates to this coming Friday, 12-07, by the end of the day (AOE).  That gives us all another 4 days to review open issues and PRs.  Please give highest attention to any release blockers you have been shepherding or reviewing.  Thanks!
> 
> A reminder: as previously announced, 3.6.8 is planned to be the last bugfix release of the 3.6 series.  Python 3.6.0 was released on 2016-12-23, so by the time 3.6.8 is released, 3.6.x will have been in bugfix mode almost exactly 2 years.  When a new feature release is made and enters "bugfix" mode, our policy has long been to continue to maintain the previous bugfix branch for at least one more release and then move that branch to "security fix only" mode.  3.7.0 (and 3.6.6) was released nearly six months ago and, with the release of 3.6.8, there will have been two additional 3.6.x bugfix releases since then.  So, barring any showstopper issues that might arise, the upcoming 3.6.8rc1 is your last chance to make bugfix changes for 3.6.x.  Following the successful release of 3.6.8, only security fixes will be accepted for the 3.6 branch and future 3.6.x releases will be source-only and scheduled as needed; no further binary installers will be produced for 3.6.  Refer to the Dev Guide 
> sections and release PEPs linked below for more information.
> 
> 
> https://devguide.python.org/devcycle/
> https://devguide.python.org/#branchstatus
> https://www.python.org/dev/peps/pep-0494/
> https://www.python.org/dev/peps/pep-0537/
> 
> --
>  Ned Deily
>  nad at python.org -- []
> 
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe: https://mail.python.org/mailman/options/python-dev/nad%40python.org

--
  Ned Deily
  nad at python.org -- []



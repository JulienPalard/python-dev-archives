From ezio.melotti at gmail.com  Fri Mar  1 02:05:55 2019
From: ezio.melotti at gmail.com (Ezio Melotti)
Date: Fri, 1 Mar 2019 08:05:55 +0100
Subject: [Python-Dev] Summary of Python tracker Issues
In-Reply-To: <q5ae7e$603g$1@blaine.gmane.org>
References: <20190208180753.1.782F2F2B9AA3561B@roundup.psfhosted.org>
 <CAEfz+TwdqQm829Q_2RWJq9QVDsnRX53JkFYVMqFP0G+OSqJKiA@mail.gmail.com>
 <CAK256p3ruU-RCv-k_XeXSsu+33oKKnE29YK=bK=pQBJb=7tEgg@mail.gmail.com>
 <q59m60$1i0v$1@blaine.gmane.org>
 <CAK256p1kP_D9AYYfCbcgOXp5tb7oMHVbZ8x7JBi9yO9QsO4B0g@mail.gmail.com>
 <bb74cef5-2393-dccb-a6c5-5e491bbf66be@g.nevcal.com>
 <q59oo7$71ib$1@blaine.gmane.org>
 <5d12e862-5398-5701-2503-b745c0875976@g.nevcal.com>
 <q5ae7e$603g$1@blaine.gmane.org>
Message-ID: <CACBhJdGqHTJCrZfGDtEnwBMs5JXTpjyNa04qiR5sOf4yb9OzbQ@mail.gmail.com>

On Fri, Mar 1, 2019 at 5:59 AM Terry Reedy <tjreedy at udel.edu> wrote:
>
> On 2/28/2019 6:54 PM, Glenn Linderman wrote:
>
> > There seems to be enough evidence that something went wrong somewhere,
> > though, and whoever maintains that process should start investigating,
> > but it would still be nice to get confirmation from a non-Google email
> > recipient whether they did or did not get the Summary messages.
> >
> > I wonder if there is a way to manually send them, and if the missing two
> > weeks of activity can be reported... once the sending problem is
> > understood and resolved.
>
> I posted a note to the core-workflow list, but I don't know if anyone
> with power or knowledge still reads it.
>

The tracker got migrated recently, and that's the most likely cause of
the missing reports.
We'll look into it and get them back :)

> To get a listing, go to the tracker search page, put
> 2019-02-09 to 2019-03-01
> in the date box, and change status to don't care.  At the moment, this
> returns 204 issues.
>
> --
> Terry Jan Reedy
>

From encukou at gmail.com  Fri Mar  1 05:41:03 2019
From: encukou at gmail.com (Petr Viktorin)
Date: Fri, 1 Mar 2019 11:41:03 +0100
Subject: [Python-Dev] Compile-time resolution of packages [Was: Another
 update for PEP 394...]
In-Reply-To: <CAGE7PNL3L_jrxMk0CKr2b0RQX6R3u9N7XyO+CeC8w2Y0cTuoxg@mail.gmail.com>
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
 <a096f664-3000-272a-ae5f-7713c936aa2c@gmail.com>
 <37ba6931-faa0-0c9c-b9e5-067eb123e313@gmail.com>
 <58F34E40-11B8-4F36-AF7E-C9022D4F48DF@python.org>
 <CAGE7PNK0o1tG84q06VUttGOBNkd2g3ftmsUA1U3NscjcGFGRQg@mail.gmail.com>
 <20190226220418.b36jw33qthdv5i5l@python.ca>
 <CABVPEKqPoOycqrwVjfCZo3J+4bgF-o1i3WB7nM5P+a3zZ0UkbQ@mail.gmail.com>
 <CAGE7PNL3L_jrxMk0CKr2b0RQX6R3u9N7XyO+CeC8w2Y0cTuoxg@mail.gmail.com>
Message-ID: <37ff84c0-7b7d-485f-e061-9f9b8f96fdb4@gmail.com>

On 2/28/19 6:56 PM, Gregory P. Smith wrote:
> 
> On Wed, Feb 27, 2019 at 5:12 PM Toshio Kuratomi <a.badger at gmail.com 
> <mailto:a.badger at gmail.com>> wrote:
> 
> 
>     On Tue, Feb 26, 2019 at 2:07 PM Neil Schemenauer
>     <nas-python at arctrix.com <mailto:nas-python at arctrix.com>> wrote:
> 
>         On 2019-02-26, Gregory P. Smith wrote:
>          > On Tue, Feb 26, 2019 at 9:55 AM Barry Warsaw
>         <barry at python.org <mailto:barry at python.org>> wrote:
>          > For an OS distro provided interpreter, being able to restrict
>         its use to
>          > only OS distro provided software would be ideal (so ideal
>         that people who
>          > haven't learned the hard distro maintenance lessons may hate
>         me for it).
> 
>     This idea has some definite problems.? I think enforcing it via
>     convention is about as much as would be good to do.? Anything more
>     and you make it hard for people who really need to use the vendor
>     provided interpreter from being able to do so.
> 
>     Why might someone need to use the distro provided interpreter?
> 
>     * Vendor provides some python modules in their system packages which
>     are not installable from pip (possibly even a proprietary extension
>     module, so not even buildable from source or copyable from the
>     system location) which the end user needs to use to do something to
>     their system.
>     * End user writes a python module which is a plugin to a system tool
>     which has to be installed into the system python to from which that
>     system tool runs.? The user then wants to write a script which uses
>     the system tool with the plugin in order to do something to their
>     system outside of the system tool (perhaps the system tool is
>     GUI-driven and the user wants to automate a part of it via the
>     python module).? They need their script to use the system python so
>     that they are using the same code as the system tool itself would use.
> 
>     There's probably other scenarios where the benefits of locking the
>     user out of the system python outweigh the benefits but these are
>     the ones that I've run across lately.
> 
> 
> Agreed.? The convention approach as someone said RHEL 8 has apparently 
> done with an os distro reserved interpreter (yay) is likely good enough 
> for most situations.
> 
> I'd go a /little/ further than that and suggest such an os distro 
> reserved interpreter attempt to prevent installation of packages (ie: 
> remove pip/ensurepip/distutils) via any other means than the OS package 
> manager (rpms, debs).? Obviously that can't actually prevent someone 
> from figuring out how to run getpip or manually installing trees of 
> packages within its sys.path, but it acts as a deterrent suggesting that 
> this interpreter is not intended for arbitrary software installation.

Currently, in RHEL/Fedora:
- "sudo pip" installs to /usr/local/, RPM packages install to /usr/
- with "-I", the interpreter does not look into /usr/local/.
AFAIK, Debian/Ubuntu have something very similar, and were first to do it.

What remains to tie this together is making "platform-python" always run 
with -I. This is PEP 432's "system-python" use case / design goal.
(The RHEL/Fedora platform-python was initially called system-python. We 
renamed to it so it doesn't clash with the PEP. It's the same use case, 
but we don't want to assign semantics to the name prematurely. 
Cutrrently, system-python is waiting for the larger-scale restructuring, 
and hopefully wider/longer discussion.)


From aixtools at felt.demon.nl  Fri Mar  1 08:51:40 2019
From: aixtools at felt.demon.nl (Michael Felt)
Date: Fri, 1 Mar 2019 14:51:40 +0100
Subject: [Python-Dev] before I open an issue re: posix.stat and/or
 os.stat
In-Reply-To: <d229a52f-3c40-515b-917f-3c9a89d9f6a2@felt.demon.nl>
References: <d229a52f-3c40-515b-917f-3c9a89d9f6a2@felt.demon.nl>
Message-ID: <ECA5961E-5CED-4C8A-AF7E-5D311137C9DD@felt.demon.nl>

Shortening the original mail to something shorter.

The reason I am starting here, in -dev, rather than as an issue directly, is because I would like some direction/recommendation from concerned individuals before I take a "outsider" approach. Too often I have learned that I guessed wrong how the Python community "sees the world".
> On 2/21/2019 11:26 AM, Michael wrote:
> It seems so - however, Is there something such as PyUnsignedLong and is
> that large enough for a "long long"? and if it exists, would that make
> the value positive (for the first test).
> 
> posix.major and os.major will need to mask away the MSB and
> posix.makedev and os.makedev will need to add it back.
> 
> OR - do I need to make the PyStat values "the same" in both 32-bit and
> 64-bit?
I think I already have the answer to this - follow the platform (as far as size goes).

On 32-bit max(1) == 256 (2^^8) and on 64-bit 65536 (2^^16).

However, I am still puzzeled re: the idiosyncratic MSB addition - that the value for 
st.st_dev

on AIX 64-bit has always (as far back as I could look at least) had the MSB set so that, as a signed number st.st_dev is always negative. And MSB is not part of the major device number. It's just there.

So, it has been a few days since I studied this (waiting for reactions) - but is the return suppossed to always be a value returned by the posixmodule.c (if so, can strip the MSB bit and make everything positive - even for st.st_dev (but that would break under a direct comparision with a C program that does not strip the MSB).

Currently, the macros on AIX for 64-bit are broken, so I cannot guess how they will decide to implement major() and mkdevice() as far as striping (and adding) the MSB when "constructing" the st_dev number from two "regular" major and minor numbers.

Parked for now,

Best wishes,

Michael
> 
> Puzzled on what you think is the correct approach.
> 
> Michael
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190301/36629631/attachment.html>

From willingc at gmail.com  Fri Mar  1 01:48:52 2019
From: willingc at gmail.com (Carol Willing)
Date: Thu, 28 Feb 2019 22:48:52 -0800
Subject: [Python-Dev] Update from the Python Steering Council about CPython
 Development
Message-ID: <2AACF155-36B1-4D80-A2C1-A948561C45E4@getmailspring.com>

The Python Steering Council is pleased to provide an update to the Python community about Steering Council activity and CPython development. We've created a GitHub repo for Steering Council updates and helpful documents: https://github.com/python/steering-council

Here's the latest update written after our meeting on February 26th:
https://github.com/python/steering-council/blob/master/updates/2019-02-26_steering-council-update.md (https://link.getmailspring.com/link/2AACF155-36B1-4D80-A2C1-A948561C45E4 at getmailspring.com/0?redirect=https%3A%2F%2Fgithub.com%2Fpython%2Fsteering-council%2Fblob%2Fmaster%2Fupdates%2F2019-02-26_steering-council-update.md&recipient=cHl0aG9uLWRldkBweXRob24ub3Jn)
We'll be posting updates after each steering council meeting which will be roughly twice a month.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190228/db1930b4/attachment.html>

From status at bugs.python.org  Fri Mar  1 13:08:03 2019
From: status at bugs.python.org (Python tracker)
Date: Fri,  1 Mar 2019 18:08:03 +0000 (UTC)
Subject: [Python-Dev] Summary of Python tracker Issues
Message-ID: <20190301180803.B9E9652B1B3@bugs.ams1.psf.io>


ACTIVITY SUMMARY (2019-02-22 - 2019-03-01)
Python tracker at https://bugs.python.org/

To view or respond to any of the issues listed below, click on the issue.
Do NOT respond to this message.

Issues counts and deltas:
  open    7012 (+13)
  closed 40898 (+64)
  total  47910 (+77)

Open issues with patches: 2791 


Issues opened (44)
==================

#35459: Use PyDict_GetItemWithError() instead of PyDict_GetItem()
https://bugs.python.org/issue35459  reopened by vstinner

#35931: pdb: "debug print(" crashes with SyntaxError
https://bugs.python.org/issue35931  reopened by blueyed

#36084: Threading: add builtin TID attribute to Thread objects
https://bugs.python.org/issue36084  opened by jaketesler

#36085: Enable better DLL resolution
https://bugs.python.org/issue36085  opened by steve.dower

#36086: Split IDLE into separate feature in Windows installer
https://bugs.python.org/issue36086  opened by kimsey0

#36091: clean up async generator from types module
https://bugs.python.org/issue36091  opened by scotchka

#36092: unittest.mock's patch.object and patch.dict are not supported 
https://bugs.python.org/issue36092  opened by xtreak

#36093: UnicodeEncodeError raise from smtplib.verify() method
https://bugs.python.org/issue36093  opened by Windson Yang

#36094: When using an SMTP SSL connection,, get ValueError.
https://bugs.python.org/issue36094  opened by tyrone-zhao

#36095: Better NaN sorting.
https://bugs.python.org/issue36095  opened by brandtbucher

#36097: Use only public C-API in _xxsubinterpreters module.
https://bugs.python.org/issue36097  opened by eric.snow

#36098: asyncio: ssl client-server with "slow" read
https://bugs.python.org/issue36098  opened by MultiSosnooley

#36099: Clarify the difference between mu and xbar in the statistics d
https://bugs.python.org/issue36099  opened by steven.daprano

#36100: Document the differences between str.isdigit, isdecimal and is
https://bugs.python.org/issue36100  opened by StyXman

#36103: Increase shutil.COPY_BUFSIZE
https://bugs.python.org/issue36103  opened by inada.naoki

#36107: aarch64 python3 buffer overflow with stack protector on rpi3 (
https://bugs.python.org/issue36107  opened by Natanael Copa

#36108: Avoid failing the build on race condition in clean
https://bugs.python.org/issue36108  opened by steve.dower

#36114: test_multiprocessing_spawn changes the execution environment
https://bugs.python.org/issue36114  opened by pablogsal

#36116: test_multiprocessing_spawn fails on AMD64 Windows8 3.x
https://bugs.python.org/issue36116  opened by pablogsal

#36121: csv: Non global alternative to csv.field_size_limit
https://bugs.python.org/issue36121  opened by Carlos Ramos

#36124: Provide convenient C API for storing per-interpreter state
https://bugs.python.org/issue36124  opened by ncoghlan

#36127: Argument Clinic: inline parsing code for functions with keywor
https://bugs.python.org/issue36127  opened by serhiy.storchaka

#36128: ResourceReader for FileLoader inconsistently handles path sepa
https://bugs.python.org/issue36128  opened by indygreg

#36129: io documentation unclear about flush() and close() semantics f
https://bugs.python.org/issue36129  opened by indygreg

#36130: Pdb(skip=[...]) + module without __name__ => TypeError
https://bugs.python.org/issue36130  opened by Anthony Sottile

#36132: Python cannot access hci_channel field in sockaddr_hci
https://bugs.python.org/issue36132  opened by bsder

#36133: ThreadPoolExecutor and ProcessPoolExecutor, dynamic worker cou
https://bugs.python.org/issue36133  opened by Fabian Dill

#36136: Windows: python._pth sets isolated mode late during Python ini
https://bugs.python.org/issue36136  opened by vstinner

#36137: SSL verification fails for some sites inside windows docker co
https://bugs.python.org/issue36137  opened by Mika Fischer

#36138: Improve documentation about converting datetime.timedelta to s
https://bugs.python.org/issue36138  opened by p-ganssle

#36139: release GIL on mmap dealloc
https://bugs.python.org/issue36139  opened by davide.rizzo

#36140: An incorrect check in _msi.c's msidb_getsummaryinformation()
https://bugs.python.org/issue36140  opened by ZackerySpytz

#36141: configure: error: could not find pthreads on your system durin
https://bugs.python.org/issue36141  opened by muhzi

#36142: Add a new _PyPreConfig step to Python initialization to setup 
https://bugs.python.org/issue36142  opened by vstinner

#36143: Auto-generate Lib/keyword.py
https://bugs.python.org/issue36143  opened by gvanrossum

#36144: Dictionary addition.
https://bugs.python.org/issue36144  opened by brandtbucher

#36145: android arm cross compilation fails, config issue
https://bugs.python.org/issue36145  opened by muhzi

#36147: [2.7] Coverity scan: Modules/_ctypes/cfield.c , Variable "resu
https://bugs.python.org/issue36147  opened by cstratak

#36149: use of uninitialised memory in cPickle.
https://bugs.python.org/issue36149  opened by twouters

#36153: Freeze support documentation is misleading.
https://bugs.python.org/issue36153  opened by Sridhar Iyer

#36154: Python quit unexpectedly error
https://bugs.python.org/issue36154  opened by kellena

#36157: Document PyInterpreterState_Main().
https://bugs.python.org/issue36157  opened by eric.snow

#36158: Regex search behaves differently in list comprehension
https://bugs.python.org/issue36158  opened by Matthew Drago

#36159: Modify Formatter Class to handle arbitrary objects
https://bugs.python.org/issue36159  opened by Ross Biro



Most recent 15 issues with no replies (15)
==========================================

#36159: Modify Formatter Class to handle arbitrary objects
https://bugs.python.org/issue36159

#36157: Document PyInterpreterState_Main().
https://bugs.python.org/issue36157

#36149: use of uninitialised memory in cPickle.
https://bugs.python.org/issue36149

#36140: An incorrect check in _msi.c's msidb_getsummaryinformation()
https://bugs.python.org/issue36140

#36138: Improve documentation about converting datetime.timedelta to s
https://bugs.python.org/issue36138

#36136: Windows: python._pth sets isolated mode late during Python ini
https://bugs.python.org/issue36136

#36133: ThreadPoolExecutor and ProcessPoolExecutor, dynamic worker cou
https://bugs.python.org/issue36133

#36130: Pdb(skip=[...]) + module without __name__ => TypeError
https://bugs.python.org/issue36130

#36108: Avoid failing the build on race condition in clean
https://bugs.python.org/issue36108

#36097: Use only public C-API in _xxsubinterpreters module.
https://bugs.python.org/issue36097

#36092: unittest.mock's patch.object and patch.dict are not supported 
https://bugs.python.org/issue36092

#36084: Threading: add builtin TID attribute to Thread objects
https://bugs.python.org/issue36084

#36081: Cannot set LDFLAGS containing $
https://bugs.python.org/issue36081

#36079: pdb on setuptools "ValueError: underlying buffer has been deta
https://bugs.python.org/issue36079

#36076: ssl.get_server_certificate should use SNI
https://bugs.python.org/issue36076



Most recent 15 issues waiting for review (15)
=============================================

#36149: use of uninitialised memory in cPickle.
https://bugs.python.org/issue36149

#36147: [2.7] Coverity scan: Modules/_ctypes/cfield.c , Variable "resu
https://bugs.python.org/issue36147

#36144: Dictionary addition.
https://bugs.python.org/issue36144

#36142: Add a new _PyPreConfig step to Python initialization to setup 
https://bugs.python.org/issue36142

#36140: An incorrect check in _msi.c's msidb_getsummaryinformation()
https://bugs.python.org/issue36140

#36139: release GIL on mmap dealloc
https://bugs.python.org/issue36139

#36130: Pdb(skip=[...]) + module without __name__ => TypeError
https://bugs.python.org/issue36130

#36127: Argument Clinic: inline parsing code for functions with keywor
https://bugs.python.org/issue36127

#36121: csv: Non global alternative to csv.field_size_limit
https://bugs.python.org/issue36121

#36103: Increase shutil.COPY_BUFSIZE
https://bugs.python.org/issue36103

#36097: Use only public C-API in _xxsubinterpreters module.
https://bugs.python.org/issue36097

#36095: Better NaN sorting.
https://bugs.python.org/issue36095

#36094: When using an SMTP SSL connection,, get ValueError.
https://bugs.python.org/issue36094

#36091: clean up async generator from types module
https://bugs.python.org/issue36091

#36086: Split IDLE into separate feature in Windows installer
https://bugs.python.org/issue36086



Top 10 most discussed issues (10)
=================================

#33944: Deprecate and remove pth files
https://bugs.python.org/issue33944  21 msgs

#36030: add internal API function to create tuple without items array 
https://bugs.python.org/issue36030  12 msgs

#36100: Document the differences between str.isdigit, isdecimal and is
https://bugs.python.org/issue36100  11 msgs

#36144: Dictionary addition.
https://bugs.python.org/issue36144  11 msgs

#36085: Enable better DLL resolution
https://bugs.python.org/issue36085  10 msgs

#36095: Better NaN sorting.
https://bugs.python.org/issue36095  10 msgs

#35975: Put back the ability to parse files where async/await aren't k
https://bugs.python.org/issue35975   9 msgs

#33608: [subinterpreters] Add a cross-interpreter-safe mechanism to in
https://bugs.python.org/issue33608   8 msgs

#35813: shared memory construct to avoid need for serialization betwee
https://bugs.python.org/issue35813   8 msgs

#36103: Increase shutil.COPY_BUFSIZE
https://bugs.python.org/issue36103   8 msgs



Issues closed (62)
==================

#8747: Autoconf tests in python not portably correct
https://bugs.python.org/issue8747  closed by ngie

#10308: Modules/getpath.c bugs
https://bugs.python.org/issue10308  closed by vstinner

#13497: Fix for broken nice test on non-broken platforms with pedantic
https://bugs.python.org/issue13497  closed by benjamin.peterson

#22123: Provide a direct function for types.SimpleNamespace()
https://bugs.python.org/issue22123  closed by rhettinger

#24235: ABCs don't fail metaclass instantiation
https://bugs.python.org/issue24235  closed by cheryl.sabella

#24310: Idle documentation -- what to do if you do not see an undersco
https://bugs.python.org/issue24310  closed by terry.reedy

#24643: VS 2015 pyconfig.h #define timezone _timezone conflicts with t
https://bugs.python.org/issue24643  closed by steve.dower

#24740: make patchcheck doesn't detect changes if commit is done first
https://bugs.python.org/issue24740  closed by terry.reedy

#27313: test case failures in test_widgets.ComboboxTest.of test_ttk_gu
https://bugs.python.org/issue27313  closed by ned.deily

#28450: Misleading/inaccurate documentation about unknown escape seque
https://bugs.python.org/issue28450  closed by serhiy.storchaka

#29397: linux/random.h present but cannot be compiled
https://bugs.python.org/issue29397  closed by christian.heimes

#29659: Expose the `length` arg from shutil.copyfileobj for public use
https://bugs.python.org/issue29659  closed by inada.naoki

#31652: make install fails: no module _ctypes
https://bugs.python.org/issue31652  closed by inada.naoki

#31916: ensurepip not honoring value of $(DESTDIR) - pip not installed
https://bugs.python.org/issue31916  closed by cheryl.sabella

#34211: Cygwin build broken due to use of &PyType_Type in static decla
https://bugs.python.org/issue34211  closed by inada.naoki

#34623: _elementtree.c doesn't call XML_SetHashSalt()
https://bugs.python.org/issue34623  closed by larry

#35178: Typo/trivial mistake in warnings.py (may be related to 2.x to 
https://bugs.python.org/issue35178  closed by vstinner

#35512: patch.dict resolves in_dict eagerly (should be late resolved)
https://bugs.python.org/issue35512  closed by xtreak

#35652: Add use_srcentry parameter to shutil.copytree() II
https://bugs.python.org/issue35652  closed by giampaolo.rodola

#35724: Check for main interpreter when checking for "main" thread (fo
https://bugs.python.org/issue35724  closed by eric.snow

#35802: os.stat / os.lstat always present, but code checks hastattr(os
https://bugs.python.org/issue35802  closed by Anthony Sottile

#35886: Move PyInterpreterState into Include/internal/pycore_pystate.h
https://bugs.python.org/issue35886  closed by eric.snow

#36016: Allow gc.getobjects to return the objects tracked by a specifi
https://bugs.python.org/issue36016  closed by inada.naoki

#36018: Add a Normal Distribution class to the statistics module
https://bugs.python.org/issue36018  closed by rhettinger

#36048: Deprecate implicit truncating when convert Python numbers to C
https://bugs.python.org/issue36048  closed by serhiy.storchaka

#36066: Add `empty` block to `for` and `while` loops.
https://bugs.python.org/issue36066  closed by terry.reedy

#36072: str.translate() behaves differently for ASCII-only and other s
https://bugs.python.org/issue36072  closed by terry.reedy

#36083: Misformated manpage: --check-hash-based-pycs ??default??|??alw
https://bugs.python.org/issue36083  closed by benjamin.peterson

#36087: ThreadPoolExecutor max_workers none issue
https://bugs.python.org/issue36087  closed by asvetlov

#36088: zipfile cannot handle zip in zip
https://bugs.python.org/issue36088  closed by serhiy.storchaka

#36089: Formatting/Spelling errors in SimpleHTTPServer docs
https://bugs.python.org/issue36089  closed by serhiy.storchaka

#36090: spelling error in PEP219 introduction
https://bugs.python.org/issue36090  closed by nanjekyejoannah

#36096: IDLE: Refactor class variables to instance variables in colori
https://bugs.python.org/issue36096  closed by terry.reedy

#36101: remove non-ascii characters in docstring
https://bugs.python.org/issue36101  closed by inada.naoki

#36102: TestSharedMemory fails on AMD64 FreeBSD CURRENT Shared 3.x
https://bugs.python.org/issue36102  closed by davin

#36104: test_httplib and test_nntplib fail on ARMv7 Ubuntu
https://bugs.python.org/issue36104  closed by vstinner

#36105: Windows: use GetNativeSystemInfo instead of GetSystemInfo
https://bugs.python.org/issue36105  closed by steve.dower

#36106: resolve sinpi() name clash with libm
https://bugs.python.org/issue36106  closed by serhiy.storchaka

#36109: test_descr: test_vicious_descriptor_nonsense() fails randomly
https://bugs.python.org/issue36109  closed by pablogsal

#36110: test_descr: test_vicious_descriptor_nonsense() fails randomly
https://bugs.python.org/issue36110  closed by pablogsal

#36111: Non-zero `offset`s are no longer acceptable with SEEK_END/SEEK
https://bugs.python.org/issue36111  closed by inada.naoki

#36112: os.path.realpath on windows and substed drives
https://bugs.python.org/issue36112  closed by eryksun

#36113: Problem With SciPy Computation of sigma
https://bugs.python.org/issue36113  closed by berker.peksag

#36115: test_ctypes leaks references and memory blocks
https://bugs.python.org/issue36115  closed by miss-islington

#36117: Allow rich comparisons for real-valued complex objects.
https://bugs.python.org/issue36117  closed by serhiy.storchaka

#36118: Cannot correctly concatenate nested list that contains more th
https://bugs.python.org/issue36118  closed by josh.r

#36119: Can't add/append in set/list inside shared dict
https://bugs.python.org/issue36119  closed by josh.r

#36120: Regression - Concurrent Futures
https://bugs.python.org/issue36120  closed by cheryl.sabella

#36122: Second run of 2to3 continues to modify output
https://bugs.python.org/issue36122  closed by bers

#36123: Race condition in test_socket
https://bugs.python.org/issue36123  closed by nanjekyejoannah

#36125: Cannot cross-compile to more featureful but same tune
https://bugs.python.org/issue36125  closed by ned.deily

#36126: Reference count leakage in structseq_repr
https://bugs.python.org/issue36126  closed by serhiy.storchaka

#36131: test.test_urllib2net.TimeoutTest ftp related tests fail due to
https://bugs.python.org/issue36131  closed by vstinner

#36134: test failure : test_re; recipe for target 'test' failed
https://bugs.python.org/issue36134  closed by serhiy.storchaka

#36135: altinstall error Makefile:1140: recipe for target 'altinstall'
https://bugs.python.org/issue36135  closed by matrixise

#36146: Refactor setup.py
https://bugs.python.org/issue36146  closed by vstinner

#36148: smtplib.SMTP.sendmail: mta status codes only accessible by loc
https://bugs.python.org/issue36148  closed by r.david.murray

#36150: Possible assertion failures due to _ctypes.c's PyCData_reduce(
https://bugs.python.org/issue36150  closed by christian.heimes

#36151: Incorrect answer when calculating 11/3
https://bugs.python.org/issue36151  closed by zach.ware

#36152: IDLE: Remove close_when_done from colorizer close()
https://bugs.python.org/issue36152  closed by cheryl.sabella

#36155: ./python -m test -m test_gc fails
https://bugs.python.org/issue36155  closed by pablogsal

#36156: different method, but id function return same value.
https://bugs.python.org/issue36156  closed by inada.naoki

From barry at python.org  Fri Mar  1 18:25:29 2019
From: barry at python.org (Barry Warsaw)
Date: Fri, 1 Mar 2019 15:25:29 -0800
Subject: [Python-Dev] Compile-time resolution of packages [Was: Another
 update for PEP 394...]
In-Reply-To: <37ff84c0-7b7d-485f-e061-9f9b8f96fdb4@gmail.com>
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
 <a096f664-3000-272a-ae5f-7713c936aa2c@gmail.com>
 <37ba6931-faa0-0c9c-b9e5-067eb123e313@gmail.com>
 <58F34E40-11B8-4F36-AF7E-C9022D4F48DF@python.org>
 <CAGE7PNK0o1tG84q06VUttGOBNkd2g3ftmsUA1U3NscjcGFGRQg@mail.gmail.com>
 <20190226220418.b36jw33qthdv5i5l@python.ca>
 <CABVPEKqPoOycqrwVjfCZo3J+4bgF-o1i3WB7nM5P+a3zZ0UkbQ@mail.gmail.com>
 <CAGE7PNL3L_jrxMk0CKr2b0RQX6R3u9N7XyO+CeC8w2Y0cTuoxg@mail.gmail.com>
 <37ff84c0-7b7d-485f-e061-9f9b8f96fdb4@gmail.com>
Message-ID: <CB9C97A6-FD4F-43BA-89F1-137538E9A9E7@python.org>

On Mar 1, 2019, at 02:41, Petr Viktorin <encukou at gmail.com> wrote:

> Currently, in RHEL/Fedora:
> - "sudo pip" installs to /usr/local/, RPM packages install to /usr/
> - with "-I", the interpreter does not look into /usr/local/.
> AFAIK, Debian/Ubuntu have something very similar, and were first to do it.

Debuntu?s pip installs to the user path by default, and you have to do something explicit to install into the system Python.

-Barry

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: Message signed with OpenPGP
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190301/484e048e/attachment.sig>

From larry at hastings.org  Sat Mar  2 01:05:16 2019
From: larry at hastings.org (Larry Hastings)
Date: Fri, 1 Mar 2019 22:05:16 -0800
Subject: [Python-Dev] Last-minute request: please backport bpo-33329 fix to
 3.4 and 3.5
Message-ID: <eca9d6f2-14a3-0a17-2730-8d74cbb8fa84@hastings.org>


This bug in bpo-33329:

    https://bugs.python.org/issue33329

was fixed for 3.6+, but it also affects 3.4 and 3.5.? The bug is that 
with newer versions of glibc--which I'm pretty sure has shipped on all 
major Linux distros by now--the test suite may send signals that are 
invalid somehow.? As a result the test suite... blocks forever?? I 
think?? Anyway the observed resulting behavior is that there are three 
regression tests in each branch that seemingly never complete.? I 
started the 3.4 regression test suite /nine hours ago/ and it still 
claims to be running--and the 3.5 test suite isn't far behind.? 
Technically, no, it's not a security bug.? But I simply can't ship 3.4 
and 3.5 in this sorry state.

Obviously it'd be best if the folks involved with the original PRs 
(Antoine?) took over.? I'm sending this to a wider audience just because 
I'd hoped to tag the next RCs for 3.4 and 3.5 this weekend, and the 
original participants in this fix may not be available, and I'm hoping I 
won't have to slip the schedule.


Thanks for your time,


//arry/

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190301/7c584aca/attachment.html>

From benjamin at python.org  Sun Mar  3 22:30:52 2019
From: benjamin at python.org (Benjamin Peterson)
Date: Sun, 03 Mar 2019 22:30:52 -0500
Subject: [Python-Dev] [RELEASE] Python 2.7.16
Message-ID: <5cb021d0-bf2f-45aa-98f1-5f4bb77fb4a6@www.fastmail.com>

Hello all,
I'm pleased to announce the immediate availability of Python 2.7.16 for download at https://www.python.org/downloads/release/python-2716/.

The only change since the release candidate was a fix for the IDLE icon on macOS. See https://bugs.python.org/issue32129. Refer to the changelog for a full list of changes: https://raw.githubusercontent.com/python/cpython/v2.7.16/Misc/NEWS.d/2.7.16rc1.rst

Please report any bugs to https://bugs.python.org/.

Regards,
Benjamin
2.7 release manager
(on behalf of all Python 2.7's contributors)

From larry at hastings.org  Mon Mar  4 04:23:33 2019
From: larry at hastings.org (Larry Hastings)
Date: Mon, 4 Mar 2019 01:23:33 -0800
Subject: [Python-Dev] [RELEASED] Python 3.4.10rc1 and Python 3.5.7rc1 are
 now available
Message-ID: <a3d8c67e-584c-db8e-134f-66cf922f73ea@hastings.org>


On behalf of the Python development community, I'm chuffed to announce 
the availability of Python 3.4.10rc1 and Python 3.5.7rc1.

Both Python 3.4 and 3.5 are in "security fixes only" mode.? Both 
versions only accept security fixes, not conventional bug fixes, and 
both releases are source-only.

The "final" releases on both these branches should be out in about two 
weeks.? Of particular note: that release of Python 3.4, Python 3.4.10 
final, will be the final release ever in the Python 3.4 series.? After 
3.4.10, the branch will be closed for good and I'll retire as Python 3.4 
Release Manager.? I'll still be the Python 3.5 Release Manager until 3.5 
similarly concludes, approximately eighteen months from now.

You can find Python 3.4.10rc1 here:

    https://www.python.org/downloads/release/python-3410rc1/


And you can find Python 3.5.7rc1 here:

    https://www.python.org/downloads/release/python-357rc1/


Best wishes,



//arry/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190304/491ea9e7/attachment.html>

From j.orponen at 4teamwork.ch  Mon Mar  4 05:29:43 2019
From: j.orponen at 4teamwork.ch (Joni Orponen)
Date: Mon, 4 Mar 2019 11:29:43 +0100
Subject: [Python-Dev] Last-minute request: please backport bpo-33329 fix
 to 3.4 and 3.5
In-Reply-To: <eca9d6f2-14a3-0a17-2730-8d74cbb8fa84@hastings.org>
References: <eca9d6f2-14a3-0a17-2730-8d74cbb8fa84@hastings.org>
Message-ID: <CA+LW3i3jX06H5XbPSnFxcLmL+fQX9Z9yFPMUjhrceR6cKcceSw@mail.gmail.com>

On Sat, Mar 2, 2019 at 7:08 AM Larry Hastings <larry at hastings.org> wrote:

>
> This bug in bpo-33329:
>
> https://bugs.python.org/issue33329
>
> was fixed for 3.6+, but it also affects 3.4 and 3.5.  The bug is that with
> newer versions of glibc--which I'm pretty sure has shipped on all major
> Linux distros by now--the test suite may send signals that are invalid
> somehow.  As a result the test suite... blocks forever?  I think?  Anyway
> the observed resulting behavior is that there are three regression tests in
> each branch that seemingly never complete.  I started the 3.4 regression
> test suite *nine hours ago* and it still claims to be running--and the
> 3.5 test suite isn't far behind.  Technically, no, it's not a security
> bug.  But I simply can't ship 3.4 and 3.5 in this sorry state.
>

This is also potentially affecting PGO builds of 2.7 on Debian Buster with
GCC. Somehow building with Clang is fine.

Does the configure time choice of compiler make a difference here for 3.4
and 3.5?

-- 
Joni Orponen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190304/bb923943/attachment.html>

From aixtools at felt.demon.nl  Mon Mar  4 06:46:35 2019
From: aixtools at felt.demon.nl (Michael)
Date: Mon, 4 Mar 2019 12:46:35 +0100
Subject: [Python-Dev] [RELEASE] Python 2.7.16
In-Reply-To: <5cb021d0-bf2f-45aa-98f1-5f4bb77fb4a6@www.fastmail.com>
References: <5cb021d0-bf2f-45aa-98f1-5f4bb77fb4a6@www.fastmail.com>
Message-ID: <6010f9bf-5a18-43fd-dd04-1b28cbe39d9e@felt.demon.nl>

On 04/03/2019 04:30, Benjamin Peterson wrote:
> Hello all,
> I'm pleased to announce the immediate availability of Python 2.7.16 for download at https://www.python.org/downloads/release/python-2716/.

Congratulations!


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 488 bytes
Desc: OpenPGP digital signature
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190304/1d24cba5/attachment.sig>

From vstinner at redhat.com  Mon Mar  4 10:37:00 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Mon, 4 Mar 2019 16:37:00 +0100
Subject: [Python-Dev] [python-committers] [RELEASED] Python 3.4.10rc1
 and Python 3.5.7rc1 are now available
In-Reply-To: <a3d8c67e-584c-db8e-134f-66cf922f73ea@hastings.org>
References: <a3d8c67e-584c-db8e-134f-66cf922f73ea@hastings.org>
Message-ID: <CA+3bQGGFsfQxezqrWwwPwXHWooXXWxkzcehTv4td7-5_-tkKfA@mail.gmail.com>

FYI I check and I confirm that all known security vulnerabilities
listed in the link below are fixed in these releases:
https://python-security.readthedocs.io/vulnerabilities.html

Victor

Le lun. 4 mars 2019 ? 10:24, Larry Hastings <larry at hastings.org> a ?crit :
>
>
> On behalf of the Python development community, I'm chuffed to announce the availability of Python 3.4.10rc1 and Python 3.5.7rc1.
>
> Both Python 3.4 and 3.5 are in "security fixes only" mode.  Both versions only accept security fixes, not conventional bug fixes, and both releases are source-only.
>
> The "final" releases on both these branches should be out in about two weeks.  Of particular note: that release of Python 3.4, Python 3.4.10 final, will be the final release ever in the Python 3.4 series.  After 3.4.10, the branch will be closed for good and I'll retire as Python 3.4 Release Manager.  I'll still be the Python 3.5 Release Manager until 3.5 similarly concludes, approximately eighteen months from now.
>
> You can find Python 3.4.10rc1 here:
>
> https://www.python.org/downloads/release/python-3410rc1/
>
>
> And you can find Python 3.5.7rc1 here:
>
> https://www.python.org/downloads/release/python-357rc1/
>
>
> Best wishes,
>
>
>
> /arry
> _______________________________________________
> python-committers mailing list
> python-committers at python.org
> https://mail.python.org/mailman/listinfo/python-committers
> Code of Conduct: https://www.python.org/psf/codeofconduct/



-- 
Night gathers, and now my watch begins. It shall not end until my death.

From storchaka at gmail.com  Mon Mar  4 12:37:17 2019
From: storchaka at gmail.com (Serhiy Storchaka)
Date: Mon, 4 Mar 2019 19:37:17 +0200
Subject: [Python-Dev] Addendum to PEP 530
Message-ID: <q5jnog$3trj$1@blaine.gmane.org>

PEP 530 introduced support for asynchronous comprehensions.

Comprehensions are implemented as local functions. To make a function 
asynchronous you should to add "async" before "def", and after that you 
can use "async for", "async with" and "await" in a function. But you can 
to do this with comprehensions, since these functions are implicit.

PEP 530 allows to make these function asynchronous by just using 
asynchronous syntax inside. "async with" can not be used in 
comprehensions, but using "async for" or "await" makes the comprehension 
asynchronous.

What PEP 530 missed is that asynchronous comprehensions itself are 
asynchronous constructions which can be used only in asynchronous functions.

Issue33346 [1] makes an asynchronous comprehension inside a 
comprehension making the outer comprehension asynchronous as well as 
using explicit "async for" or "await". See details on the issue.

Yury, the author of PEP 530, likes this idea, and there is a ready 
implementation. But making the decision was deferred until a new 
government be stated. Now, after the Steering Council has been elected, 
can it make the decision?

[1] https://bugs.python.org/issue33346


From brett at python.org  Mon Mar  4 15:06:55 2019
From: brett at python.org (Brett Cannon)
Date: Mon, 4 Mar 2019 12:06:55 -0800
Subject: [Python-Dev] Addendum to PEP 530
In-Reply-To: <q5jnog$3trj$1@blaine.gmane.org>
References: <q5jnog$3trj$1@blaine.gmane.org>
Message-ID: <CAP1=2W5CNF4GJ=b=cKc2XO3jqhrAf2Rh47h3FJX56RU3zbvtVg@mail.gmail.com>

Open an issue at https://github.com/python/steering-council/issues if you
want the steering council to consider something.

On Mon, Mar 4, 2019 at 9:38 AM Serhiy Storchaka <storchaka at gmail.com> wrote:

> PEP 530 introduced support for asynchronous comprehensions.
>
> Comprehensions are implemented as local functions. To make a function
> asynchronous you should to add "async" before "def", and after that you
> can use "async for", "async with" and "await" in a function. But you can
> to do this with comprehensions, since these functions are implicit.
>
> PEP 530 allows to make these function asynchronous by just using
> asynchronous syntax inside. "async with" can not be used in
> comprehensions, but using "async for" or "await" makes the comprehension
> asynchronous.
>
> What PEP 530 missed is that asynchronous comprehensions itself are
> asynchronous constructions which can be used only in asynchronous
> functions.
>
> Issue33346 [1] makes an asynchronous comprehension inside a
> comprehension making the outer comprehension asynchronous as well as
> using explicit "async for" or "await". See details on the issue.
>
> Yury, the author of PEP 530, likes this idea, and there is a ready
> implementation. But making the decision was deferred until a new
> government be stated. Now, after the Steering Council has been elected,
> can it make the decision?
>
> [1] https://bugs.python.org/issue33346
>
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/brett%40python.org
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190304/844a49e9/attachment.html>

From tjreedy at udel.edu  Mon Mar  4 19:31:50 2019
From: tjreedy at udel.edu (Terry Reedy)
Date: Mon, 4 Mar 2019 19:31:50 -0500
Subject: [Python-Dev] [RELEASE] Python 2.7.16
In-Reply-To: <5cb021d0-bf2f-45aa-98f1-5f4bb77fb4a6@www.fastmail.com>
References: <5cb021d0-bf2f-45aa-98f1-5f4bb77fb4a6@www.fastmail.com>
Message-ID: <q5kg1n$3cnc$1@blaine.gmane.org>

On 3/3/2019 10:30 PM, Benjamin Peterson wrote:

> I'm pleased to announce the immediate availability of Python 2.7.16 for download at https://www.python.org/downloads/release/python-2716/.

On Windows 10, this is an 'unrecognized app' and Windows Defender 
SmartScreen, now default, refuses to run it. "Windows protected your PC" 
until one clicks 'more info' to get 'Run anyway'.  This is new since the 
.rc1 release.  We should either make 2.7 a 'known' app* or say something 
on the download page about clicking 'more info'.  I don't know the 
status of python.org 3.x downloads.

Since Steve Dower put 3.7 on the Windows store, PSF must now be a known 
publisher.  Perhaps he can help make 2.7 'known'.

-- 
Terry Jan Reedy


From brett at snarky.ca  Mon Mar  4 20:43:59 2019
From: brett at snarky.ca (Brett Cannon)
Date: Mon, 4 Mar 2019 17:43:59 -0800
Subject: [Python-Dev] PEPs from non-core devs now need a sponsor
Message-ID: <CAP1=2W7BnsYJga=WbkPLT_xHAeHMAqR4DAP6+iAt+_1fKBXLUQ@mail.gmail.com>

The steering council has implemented a new idea called sponsors to the PEP
process (added in
https://github.com/python/peps/commit/c58d32c33bd06eb386d3f33963a1434510528f68).
The thinking is that to help make sure PEPs from non-core developers
receive appropriate guidance through the PEP process, a core developer
needs to sign on to be a sponsor of the PEP. Being a sponsor does *not*
preclude the core dev from eventually becoming a co-author or BDFL-delegate
later on (but obviously not both), but the expectation is the sponsor is
supportive of the idea (because if a single core dev won't sign on to help
then what chance does the PEP have of being accepted?).

If this doesn't turn out well we can obviously revert this, but hopefully
this will make things smoother for those who are new to the PEP process.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190304/166b6a50/attachment.html>

From hasan.diwan at gmail.com  Mon Mar  4 23:57:46 2019
From: hasan.diwan at gmail.com (Hasan Diwan)
Date: Mon, 4 Mar 2019 20:57:46 -0800
Subject: [Python-Dev] [RELEASE] Python 2.7.16
In-Reply-To: <q5kg1n$3cnc$1@blaine.gmane.org>
References: <5cb021d0-bf2f-45aa-98f1-5f4bb77fb4a6@www.fastmail.com>
 <q5kg1n$3cnc$1@blaine.gmane.org>
Message-ID: <CAP+bYWCnJirLfv-2VUXt5Kwo_O67zBUus50vRqBzj_hNCT0QsQ@mail.gmail.com>

On Mon, 4 Mar 2019 at 16:33, Terry Reedy <tjreedy at udel.edu> wrote:

> On 3/3/2019 10:30 PM, Benjamin Peterson wrote:
>
> > I'm pleased to announce the immediate availability of Python 2.7.16 for
> download at https://www.python.org/downloads/release/python-2716/.
>

Congrats team! -- H
-- 
OpenPGP:
https://sks-keyservers.net/pks/lookup?op=get&search=0xFEBAD7FFD041BBA1
If you wish to request my time, please do so using
*bit.ly/hd1AppointmentRequest
<http://bit.ly/hd1AppointmentRequest>*.
Si vous voudrais faire connnaisance, allez a *bit.ly/hd1AppointmentRequest
<http://bit.ly/hd1AppointmentRequest>*.

<https://sks-keyservers.net/pks/lookup?op=get&search=0xFEBAD7FFD041BBA1>Sent
from my mobile device
Envoye de mon portable
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190304/f004d6d9/attachment.html>

From J.Demeyer at UGent.be  Tue Mar  5 01:11:57 2019
From: J.Demeyer at UGent.be (Jeroen Demeyer)
Date: Tue, 5 Mar 2019 07:11:57 +0100
Subject: [Python-Dev] PEPs from non-core devs now need a sponsor
In-Reply-To: <CAP1=2W7BnsYJga=WbkPLT_xHAeHMAqR4DAP6+iAt+_1fKBXLUQ@mail.gmail.com>
References: <CAP1=2W7BnsYJga=WbkPLT_xHAeHMAqR4DAP6+iAt+_1fKBXLUQ@mail.gmail.com>
Message-ID: <5C7E132D.20004@UGent.be>

Does this apply to existing draft PEPs or only new ones?

From mhroncok at redhat.com  Tue Mar  5 06:17:48 2019
From: mhroncok at redhat.com (=?UTF-8?Q?Miro_Hron=c4=8dok?=)
Date: Tue, 5 Mar 2019 12:17:48 +0100
Subject: [Python-Dev] [RELEASE] Python 2.7.16
In-Reply-To: <5cb021d0-bf2f-45aa-98f1-5f4bb77fb4a6@www.fastmail.com>
References: <5cb021d0-bf2f-45aa-98f1-5f4bb77fb4a6@www.fastmail.com>
Message-ID: <12acd71f-c18b-ea72-1e43-df4c76aa7812@redhat.com>

On 04. 03. 19 4:30, Benjamin Peterson wrote:
> Hello all,
> I'm pleased to announce the immediate availability of Python 2.7.16 for download at https://www.python.org/downloads/release/python-2716/.
> 
> The only change since the release candidate was a fix for the IDLE icon on macOS. See https://bugs.python.org/issue32129. Refer to the changelog for a full list of changes: https://raw.githubusercontent.com/python/cpython/v2.7.16/Misc/NEWS.d/2.7.16rc1.rst


https://www.python.org/downloads/release/python-2716/ links changelog to 
https://raw.githubusercontent.com/python/cpython/v2.7.16/Misc/NEWS.d/2.7.16.rst 
but that only has 1 change (I suppose against rc1).

Is there a better link, or should I read those two combined?

https://raw.githubusercontent.com/python/cpython/v2.7.16/Misc/NEWS.d/2.7.16rc1.rst
https://raw.githubusercontent.com/python/cpython/v2.7.16/Misc/NEWS.d/2.7.16.rst

-- 
Miro Hron?ok
--
Phone: +420777974800
IRC: mhroncok

From vstinner at redhat.com  Tue Mar  5 06:35:59 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Tue, 5 Mar 2019 12:35:59 +0100
Subject: [Python-Dev] PEPs from non-core devs now need a sponsor
In-Reply-To: <CAP1=2W7BnsYJga=WbkPLT_xHAeHMAqR4DAP6+iAt+_1fKBXLUQ@mail.gmail.com>
References: <CAP1=2W7BnsYJga=WbkPLT_xHAeHMAqR4DAP6+iAt+_1fKBXLUQ@mail.gmail.com>
Message-ID: <CA+3bQGFhgPymJSrsAqAkkeLv0kDWFQuhiVushuz__kD4jQp5wQ@mail.gmail.com>

Hi,

Le mar. 5 mars 2019 ? 02:53, Brett Cannon <brett at snarky.ca> a ?crit :
> The steering council has implemented a new idea called sponsors to the PEP process (...). The thinking is that to help make sure PEPs from non-core developers receive appropriate guidance through the PEP process (...)

Hum, this isn't fully new, some PEPs already got a "PEP champion" (old
name), no?

A recent example is PEP 572 who has been "championed" by Guido van
Rossum, then by Tim Peters. In this specific case, they became
co-authors :-)

> ... eventually becoming a co-author or BDFL-delegate later

Nitpick: since Python has no more BDFL, maybe the expression should
becocme "PEP-delegate"? ;-)

Victor
-- 
Night gathers, and now my watch begins. It shall not end until my death.

From cspealma at redhat.com  Tue Mar  5 08:05:31 2019
From: cspealma at redhat.com (Calvin Spealman)
Date: Tue, 5 Mar 2019 08:05:31 -0500
Subject: [Python-Dev] PEPs from non-core devs now need a sponsor
In-Reply-To: <CAP1=2W7BnsYJga=WbkPLT_xHAeHMAqR4DAP6+iAt+_1fKBXLUQ@mail.gmail.com>
References: <CAP1=2W7BnsYJga=WbkPLT_xHAeHMAqR4DAP6+iAt+_1fKBXLUQ@mail.gmail.com>
Message-ID: <CACo5Rz5k=iBypcHFtGXE1mR-3RiME8Z1=4K=fiKTWXH5Zzjn_w@mail.gmail.com>

> because if a single core dev won't sign on to help then what chance does
the PEP have of being accepted?

If this is the justification, then I feel like it is a barrier that could
be disassembled, rather than one people need to be granted permission to
climb over.

I am named on one PEP with two others (PEP 3135) and none of us were core
developers, I think? I don't want that barrier added to newcomers, and I
don't disagree there is a pre-existing barrier, but I can't help but feel
this is not the best solution to it.

I'm worried this creates a gatekeeping perception that will scare away
contributors.

On Mon, Mar 4, 2019 at 8:53 PM Brett Cannon <brett at snarky.ca> wrote:

> The steering council has implemented a new idea called sponsors to the PEP
> process (added in
> https://github.com/python/peps/commit/c58d32c33bd06eb386d3f33963a1434510528f68).
> The thinking is that to help make sure PEPs from non-core developers
> receive appropriate guidance through the PEP process, a core developer
> needs to sign on to be a sponsor of the PEP. Being a sponsor does *not*
> preclude the core dev from eventually becoming a co-author or BDFL-delegate
> later on (but obviously not both), but the expectation is the sponsor is
> supportive of the idea (because if a single core dev won't sign on to help
> then what chance does the PEP have of being accepted?).
>
> If this doesn't turn out well we can obviously revert this, but hopefully
> this will make things smoother for those who are new to the PEP process.
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/cspealma%40redhat.com
>


-- 

CALVIN SPEALMAN

SENIOR QUALITY ENGINEER

cspealma at redhat.com  M: +1.336.210.5107
<https://red.ht/sig>
TRIED. TESTED. TRUSTED. <https://redhat.com/trusted>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190305/1ba078ba/attachment.html>

From J.Demeyer at UGent.be  Tue Mar  5 08:24:43 2019
From: J.Demeyer at UGent.be (Jeroen Demeyer)
Date: Tue, 5 Mar 2019 14:24:43 +0100
Subject: [Python-Dev] PEPs from non-core devs now need a sponsor
In-Reply-To: <CACo5Rz5k=iBypcHFtGXE1mR-3RiME8Z1=4K=fiKTWXH5Zzjn_w@mail.gmail.com>
References: <CAP1=2W7BnsYJga=WbkPLT_xHAeHMAqR4DAP6+iAt+_1fKBXLUQ@mail.gmail.com>
 <CACo5Rz5k=iBypcHFtGXE1mR-3RiME8Z1=4K=fiKTWXH5Zzjn_w@mail.gmail.com>
Message-ID: <5C7E789B.9010007@UGent.be>

On 2019-03-05 14:05, Calvin Spealman wrote:
> I'm worried this creates a gatekeeping perception that will scare away
> contributors.

+1

I also expressed this worry at https://github.com/python/peps/pull/903

You could keep the positive part of the sponsoring idea (somebody acting 
as mentor) but drop the negative part (make it a hard requirement to 
find a sponsor supporting the proposal before the proposal can even 
become a draft PEP).

From jheiv at jheiv.com  Tue Mar  5 09:20:15 2019
From: jheiv at jheiv.com (James Edwards)
Date: Tue, 5 Mar 2019 09:20:15 -0500
Subject: [Python-Dev] PEPs from non-core devs now need a sponsor
In-Reply-To: <5C7E789B.9010007@UGent.be>
References: <CAP1=2W7BnsYJga=WbkPLT_xHAeHMAqR4DAP6+iAt+_1fKBXLUQ@mail.gmail.com>
 <CACo5Rz5k=iBypcHFtGXE1mR-3RiME8Z1=4K=fiKTWXH5Zzjn_w@mail.gmail.com>
 <5C7E789B.9010007@UGent.be>
Message-ID: <CANbgQ_GNqk19iOpotgGT_mNFUFNBEHoNoEm9tVpV1rZOnLw1kQ@mail.gmail.com>

I have to say, this is sort of surprising for what seems like the first
official action of the steering committee.  Are there really *that many *PEPs
that a team that is now, what, 5x the size of the BFDL model is worried
that they'll be able to keep up?  As a long-time lurker, this hardly seems
to be the case.  Despite the seemingly-well-intentioned rationale, this
seems like an ominous sign.

On Tue, Mar 5, 2019 at 8:33 AM Jeroen Demeyer <J.Demeyer at ugent.be> wrote:

> On 2019-03-05 14:05, Calvin Spealman wrote:
> > I'm worried this creates a gatekeeping perception that will scare away
> > contributors.
>
> +1
>
> I also expressed this worry at https://github.com/python/peps/pull/903
>
> You could keep the positive part of the sponsoring idea (somebody acting
> as mentor) but drop the negative part (make it a hard requirement to
> find a sponsor supporting the proposal before the proposal can even
> become a draft PEP).
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/jheiv%40jheiv.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190305/0eb0f80b/attachment.html>

From status at bugs.python.org  Tue Mar  5 11:25:07 2019
From: status at bugs.python.org (Python tracker)
Date: Tue,  5 Mar 2019 16:25:07 +0000 (UTC)
Subject: [Python-Dev] Summary of Python tracker Issues
Message-ID: <20190305162507.B883A52B1CF@bugs.ams1.psf.io>


ACTIVITY SUMMARY (2019-02-08 - 2019-02-15)
Python tracker at https://bugs.python.org/

To view or respond to any of the issues listed below, click on the issue.
Do NOT respond to this message.

Issues counts and deltas:
  open    7009 (+11)
  closed 40747 (+51)
  total  47756 (+62)

Open issues with patches: 2814 


Issues opened (42)
==================

#25737: array is not a Sequence
https://bugs.python.org/issue25737  reopened by josh.r

#35944: Python 3.7 install error
https://bugs.python.org/issue35944  opened by lasonjack

#35945: Cannot distinguish between subtask cancellation and running ta
https://bugs.python.org/issue35945  opened by jnwatson

#35946: Ambiguous documentation for assert_called_with()
https://bugs.python.org/issue35946  opened by chimaerase

#35947: Update libffi_msvc to current version of libffi
https://bugs.python.org/issue35947  opened by Paul Monson

#35949: Move PyThreadState into Include/internal/pycore_pystate.h
https://bugs.python.org/issue35949  opened by eric.snow

#35950: io.BufferedReader.writabe is False, but io.BufferedReader.trun
https://bugs.python.org/issue35950  opened by steverpalmer

#35951: os.renames() creates directories if original name doesn't exis
https://bugs.python.org/issue35951  opened by chris.jerdonek

#35952: test.pythoninfo prints a stack trace and exits with 1 when the
https://bugs.python.org/issue35952  opened by xdegaye

#35953: crosscompilation fails with clang on android
https://bugs.python.org/issue35953  opened by muhzi

#35954: Incoherent type conversion in configparser
https://bugs.python.org/issue35954  opened by Adeokkuw

#35955: difflib reports incorrect location of mismatch
https://bugs.python.org/issue35955  opened by jaraco

#35956: Sort documentation could be improved for complex sorting
https://bugs.python.org/issue35956  opened by FabriceSalvaire

#35957: Indentation explanation is unclear
https://bugs.python.org/issue35957  opened by J??r??me LAURENS

#35959: math.prod(range(10)) caues segfault
https://bugs.python.org/issue35959  opened by xtreak

#35962: Slight error in words in [ 2.4.1. String and Bytes literals ]
https://bugs.python.org/issue35962  opened by Magnien Sebastien

#35964: shutil.make_archive (xxx, tar, root_dir) is adding './' entry 
https://bugs.python.org/issue35964  opened by HFM

#35967: Better platform.processor support
https://bugs.python.org/issue35967  opened by jaraco

#35969: Interpreter crashes with "can't initialize init_sys_streams" w
https://bugs.python.org/issue35969  opened by p-ganssle

#35970: no help flag in base64 util
https://bugs.python.org/issue35970  opened by rkuska

#35971: Documentation should warn about code injection from current wo
https://bugs.python.org/issue35971  opened by Gabriel Corona

#35974: os.DirEntry.inode() returns invalid value within Docker contai
https://bugs.python.org/issue35974  opened by decaz

#35975: Put back the ability to parse files where async/await aren't k
https://bugs.python.org/issue35975  opened by gvanrossum

#35978: test_venv fails in Travis with GCC
https://bugs.python.org/issue35978  opened by xtreak

#35981: shutil make_archive create wrong file when base name contains 
https://bugs.python.org/issue35981  opened by highwind

#35982: Create unit-tests for os.renames()
https://bugs.python.org/issue35982  opened by nanjekyejoannah

#35983: tp_dealloc trashcan shouldn't be called for subclasses
https://bugs.python.org/issue35983  opened by jdemeyer

#35984: test__xxsubinterpreters leaked [3, 4, 3] memory blocks, sum=1
https://bugs.python.org/issue35984  opened by pablogsal

#35989: ipaddress.IPv4Network allows prefix > 32
https://bugs.python.org/issue35989  opened by John Florian

#35990: ipaddress.IPv4Interface won't accept 2-tuple (address, mask)
https://bugs.python.org/issue35990  opened by John Florian

#35992: Metaclasses interfere with __class_getitem__
https://bugs.python.org/issue35992  opened by donovick

#35993: incorrect use of released memory in Python/pystate.c line 284
https://bugs.python.org/issue35993  opened by wjq-security

#35995: logging.handlers.SMTPHandler
https://bugs.python.org/issue35995  opened by lidayan

#35996: Optional modulus argument for new math.prod() function
https://bugs.python.org/issue35996  opened by lschoe

#35997: ImportError: dlopen failed: cannot locate symbol "PyBool_Type"
https://bugs.python.org/issue35997  opened by muhzi

#35998: test_asyncio: test_start_tls_server_1() TimeoutError on Fedora
https://bugs.python.org/issue35998  opened by matrixise

#35999: multpirocessing.Process alive after SIGTERM on parent
https://bugs.python.org/issue35999  opened by lids

#36000: __debug__ is a keyword but not a keyword
https://bugs.python.org/issue36000  opened by bup

#36001: LIBFFI_INCLUDEDIR is not detected when set into a profile nor 
https://bugs.python.org/issue36001  opened by neil pop

#36002: configure --enable-optimizations with clang fails to detect ll
https://bugs.python.org/issue36002  opened by mjpieters

#36003: set better defaults for TCPServer options
https://bugs.python.org/issue36003  opened by giampaolo.rodola

#36004: Add datetime.fromisocalendar
https://bugs.python.org/issue36004  opened by p-ganssle



Most recent 15 issues with no replies (15)
==========================================

#36002: configure --enable-optimizations with clang fails to detect ll
https://bugs.python.org/issue36002

#36001: LIBFFI_INCLUDEDIR is not detected when set into a profile nor 
https://bugs.python.org/issue36001

#35999: multpirocessing.Process alive after SIGTERM on parent
https://bugs.python.org/issue35999

#35990: ipaddress.IPv4Interface won't accept 2-tuple (address, mask)
https://bugs.python.org/issue35990

#35974: os.DirEntry.inode() returns invalid value within Docker contai
https://bugs.python.org/issue35974

#35970: no help flag in base64 util
https://bugs.python.org/issue35970

#35964: shutil.make_archive (xxx, tar, root_dir) is adding './' entry 
https://bugs.python.org/issue35964

#35952: test.pythoninfo prints a stack trace and exits with 1 when the
https://bugs.python.org/issue35952

#35950: io.BufferedReader.writabe is False, but io.BufferedReader.trun
https://bugs.python.org/issue35950

#35947: Update libffi_msvc to current version of libffi
https://bugs.python.org/issue35947

#35939: Remove urllib.parse._splittype from mimetypes.guess_type
https://bugs.python.org/issue35939

#35930: Raising an exception raised in a "future" instance will create
https://bugs.python.org/issue35930

#35926: Need openssl 1.1.1 support on Windows for ARM and ARM64
https://bugs.python.org/issue35926

#35924: curses segfault resizing window
https://bugs.python.org/issue35924

#35919: multiprocessing: shared manager Pool fails with AttributeError
https://bugs.python.org/issue35919



Most recent 15 issues waiting for review (15)
=============================================

#36004: Add datetime.fromisocalendar
https://bugs.python.org/issue36004

#36003: set better defaults for TCPServer options
https://bugs.python.org/issue36003

#35989: ipaddress.IPv4Network allows prefix > 32
https://bugs.python.org/issue35989

#35983: tp_dealloc trashcan shouldn't be called for subclasses
https://bugs.python.org/issue35983

#35982: Create unit-tests for os.renames()
https://bugs.python.org/issue35982

#35975: Put back the ability to parse files where async/await aren't k
https://bugs.python.org/issue35975

#35969: Interpreter crashes with "can't initialize init_sys_streams" w
https://bugs.python.org/issue35969

#35959: math.prod(range(10)) caues segfault
https://bugs.python.org/issue35959

#35954: Incoherent type conversion in configparser
https://bugs.python.org/issue35954

#35951: os.renames() creates directories if original name doesn't exis
https://bugs.python.org/issue35951

#35947: Update libffi_msvc to current version of libffi
https://bugs.python.org/issue35947

#35946: Ambiguous documentation for assert_called_with()
https://bugs.python.org/issue35946

#35941: ssl.enum_certificates() regression
https://bugs.python.org/issue35941

#35936: Give modulefinder some much-needed updates.
https://bugs.python.org/issue35936

#35933: python doc does not say that the state kwarg in Pickler.save_r
https://bugs.python.org/issue35933



Top 10 most discussed issues (10)
=================================

#35969: Interpreter crashes with "can't initialize init_sys_streams" w
https://bugs.python.org/issue35969  14 msgs

#35955: difflib reports incorrect location of mismatch
https://bugs.python.org/issue35955  12 msgs

#35813: shared memory construct to avoid need for serialization betwee
https://bugs.python.org/issue35813  10 msgs

#35959: math.prod(range(10)) caues segfault
https://bugs.python.org/issue35959   9 msgs

#35995: logging.handlers.SMTPHandler
https://bugs.python.org/issue35995   9 msgs

#35155: Clarify Protocol Handlers in urllib.request Docs
https://bugs.python.org/issue35155   8 msgs

#35810: Object Initialization does not incref Heap-allocated Types
https://bugs.python.org/issue35810   8 msgs

#35982: Create unit-tests for os.renames()
https://bugs.python.org/issue35982   8 msgs

#35984: test__xxsubinterpreters leaked [3, 4, 3] memory blocks, sum=1
https://bugs.python.org/issue35984   8 msgs

#1054041: Python doesn't exit with proper resultcode on SIGINT
https://bugs.python.org/issue1054041   8 msgs



Issues closed (51)
==================

#7850: platform.system() should be "macosx" instead of "Darwin" on OS
https://bugs.python.org/issue7850  closed by ronaldoussoren

#12374: Execution model should explain compile vs definition vs execut
https://bugs.python.org/issue12374  closed by ncoghlan

#21107: Add pgen.vcxproj to allow regenerating grammar files on Window
https://bugs.python.org/issue21107  closed by zach.ware

#22062: Fix pathlib.Path.(r)glob doc glitches.
https://bugs.python.org/issue22062  closed by petr.viktorin

#28627: [alpine] shutil.copytree fail to copy a direcotry with broken 
https://bugs.python.org/issue28627  closed by benjamin.peterson

#28673: pyro4 with more than 15 threads often crashes 2.7.12
https://bugs.python.org/issue28673  closed by inada.naoki

#30410: Documentation for sys.stdout encoding does not reflect the new
https://bugs.python.org/issue30410  closed by Mariatta

#31940: copystat on symlinks fails for alpine -- faulty lchmod impleme
https://bugs.python.org/issue31940  closed by benjamin.peterson

#32417: fromutc does not respect datetime subclasses
https://bugs.python.org/issue32417  closed by p-ganssle

#34433: cancel all other pending child futures
https://bugs.python.org/issue34433  closed by yselivanov

#35055: Error when we try to download the epub archive
https://bugs.python.org/issue35055  closed by mdk

#35321: None _frozen_importlib.__spec__.origin attribute
https://bugs.python.org/issue35321  closed by maggyero

#35364: Datetime ???fromtimestamp()??? ignores inheritance if timezone
https://bugs.python.org/issue35364  closed by p-ganssle

#35378: multiprocessing.Pool.imaps iterators do not maintain alive the
https://bugs.python.org/issue35378  closed by pablogsal

#35460: Add PyDict_GetItemStringWithError
https://bugs.python.org/issue35460  closed by ronaldoussoren

#35505: Test test_imaplib fail in test_imap4_host_default_value
https://bugs.python.org/issue35505  closed by vstinner

#35633: test_eintr fails on AIX since fcntl functions were modified
https://bugs.python.org/issue35633  closed by Mariatta

#35688: "pip install --user numpy" fails on Python from the Windows St
https://bugs.python.org/issue35688  closed by mattip

#35706: Make it easier to use a venv with an embedded Python interpret
https://bugs.python.org/issue35706  closed by steve.dower

#35766: Merge typed_ast back into CPython
https://bugs.python.org/issue35766  closed by gvanrossum

#35796: time.localtime returns error for negative values
https://bugs.python.org/issue35796  closed by ammar2

#35833: IDLE: revise doc for control chars sent to Shell
https://bugs.python.org/issue35833  closed by terry.reedy

#35846: Incomplete documentation for re.sub
https://bugs.python.org/issue35846  closed by serhiy.storchaka

#35875: Crash by Pandas - algos.cp36-win_amd64.pyd  join.cp36-win_amd6
https://bugs.python.org/issue35875  closed by eryksun

#35878: ast.c: end_col_offset may be used uninitialized in this functi
https://bugs.python.org/issue35878  closed by levkivskyi

#35887: Doc string for updating the frozen version of importlib in _bo
https://bugs.python.org/issue35887  closed by brett.cannon

#35903: Build of posixshmem.c should probe for required OS functions
https://bugs.python.org/issue35903  closed by nascheme

#35918: multiprocessing's SyncManager.dict.has_key() method is broken
https://bugs.python.org/issue35918  closed by josh.r

#35934: Add socket.create_server() utility function
https://bugs.python.org/issue35934  closed by giampaolo.rodola

#35940: multiprocessing manager tests fail in the Refleaks buildbots
https://bugs.python.org/issue35940  closed by pablogsal

#35948: update version of libffi in cpython-sources-dep
https://bugs.python.org/issue35948  closed by steve.dower

#35958: io.IOBase subclasses don't play nice with abc.abstractmethod
https://bugs.python.org/issue35958  closed by josh.r

#35960: dataclasses.field does not preserve empty metadata object
https://bugs.python.org/issue35960  closed by eric.smith

#35961: test_slice: gc_decref: Assertion "gc_get_refs(g) > 0" failed: 
https://bugs.python.org/issue35961  closed by vstinner

#35963: Python/symtable.c: warning: enumeration value ???FunctionType_
https://bugs.python.org/issue35963  closed by gvanrossum

#35965: Behavior for unittest.assertRaisesRegex differs depending on w
https://bugs.python.org/issue35965  closed by xtreak

#35966: Didn't raise "StopIteration" Error when I use "yield" in the f
https://bugs.python.org/issue35966  closed by SilentGhost

#35968: lib2to3 cannot parse rf''
https://bugs.python.org/issue35968  closed by ned.deily

#35972: _xxsubinterpreters: channel_send() may truncate ints on 32-bit
https://bugs.python.org/issue35972  closed by eric.snow

#35973: `growable_int_array type_ignores` in parsetok.c is not always 
https://bugs.python.org/issue35973  closed by gvanrossum

#35976: Enable Windows projects to build with platform ARM32
https://bugs.python.org/issue35976  closed by steve.dower

#35977: test_slice crashed on s390x Debian 3.x: gc_decref: Assertion "
https://bugs.python.org/issue35977  closed by vstinner

#35979: Incorrect __text_signature__ for the __get__ slot wrapper
https://bugs.python.org/issue35979  closed by SilentGhost

#35980: Py3 BIF random.choices() is O(N**2) but I've written O(N) code
https://bugs.python.org/issue35980  closed by mark.dickinson

#35985: Folding tries to slice from 0 to float("+inf") when maxlength 
https://bugs.python.org/issue35985  closed by Lukas J

#35986: print() documentation typo?
https://bugs.python.org/issue35986  closed by cheryl.sabella

#35987: Mypy and Asyncio import cannot be skipped
https://bugs.python.org/issue35987  closed by levkivskyi

#35988: Python interpreter segfault
https://bugs.python.org/issue35988  closed by josh.r

#35991: potential double free in Modules/_randommodule.c line 295 and 
https://bugs.python.org/issue35991  closed by benjamin.peterson

#35994: In WalkTests of test_os.py, sub2_tree missed the dir "SUB21" i
https://bugs.python.org/issue35994  closed by zach.ware

#36005: [2.7] test_ssl failures on ARMv7 Ubuntu 2.7 with OpenSSL 1.1.1
https://bugs.python.org/issue36005  closed by gregory.p.smith

From status at bugs.python.org  Tue Mar  5 11:30:58 2019
From: status at bugs.python.org (Python tracker)
Date: Tue,  5 Mar 2019 16:30:58 +0000 (UTC)
Subject: [Python-Dev] Summary of Python tracker Issues
Message-ID: <20190305163058.EA55852B1CF@bugs.ams1.psf.io>


ACTIVITY SUMMARY (2019-02-15 - 2019-02-22)
Python tracker at https://bugs.python.org/

To view or respond to any of the issues listed below, click on the issue.
Do NOT respond to this message.

Issues counts and deltas:
  open    6999 (-10)
  closed 40834 (+87)
  total  47833 (+77)

Open issues with patches: 2795 


Issues opened (45)
==================

#36008: [good first issue] Update documentation for 3.8
https://bugs.python.org/issue36008  opened by cheryl.sabella

#36010: Please provide a .zip Windows release of Python that is not cr
https://bugs.python.org/issue36010  opened by jt

#36011: ssl - tls verify on Windows fails
https://bugs.python.org/issue36011  opened by chris-k

#36015: streamhandler cannot represent streams with an integer as name
https://bugs.python.org/issue36015  opened by Riccardo Magliocchetti

#36016: Allow gc.getobjects to return the objects tracked by a specifi
https://bugs.python.org/issue36016  opened by pablogsal

#36017: test_grp
https://bugs.python.org/issue36017  opened by mjbrands

#36018: Add a Normal Distribution class to the statistics module
https://bugs.python.org/issue36018  opened by rhettinger

#36019: test_urllib fail in s390x buildbots: http://www.example.com/
https://bugs.python.org/issue36019  opened by pablogsal

#36020: HAVE_SNPRINTF and MSVC std::snprintf support
https://bugs.python.org/issue36020  opened by palotasb-conti

#36021: [Security][Windows] webbrowser: WindowsDefault uses os.startfi
https://bugs.python.org/issue36021  opened by vstinner

#36022: [Security] logging.config should not use eval()
https://bugs.python.org/issue36022  opened by vstinner

#36023: Improve configparser.ConfigParser repr
https://bugs.python.org/issue36023  opened by remi.lapeyre

#36025: Breaking change in PyDate_FromTimeStamp API
https://bugs.python.org/issue36025  opened by p-ganssle

#36026: Different error message when sys.settrace is used
https://bugs.python.org/issue36026  opened by SylvainDe

#36027: Support negative exponents in pow() where a modulus is specifi
https://bugs.python.org/issue36027  opened by rhettinger

#36029: Use title-case HTTP header fields
https://bugs.python.org/issue36029  opened by maggyero

#36030: add internal API function to create tuple without items array 
https://bugs.python.org/issue36030  opened by sir-sigurd

#36033: logging.makeLogRecord should update "rv" using a dict defined 
https://bugs.python.org/issue36033  opened by ralonsoh

#36034: Suprise halt caused by -Werror=implicit-function-declaration i
https://bugs.python.org/issue36034  opened by Michael.Felt

#36035: pathlib.Path().rglob() breaks with broken symlinks
https://bugs.python.org/issue36035  opened by J??rg Stucke

#36036: Add method to get user defined command line arguments in unitt
https://bugs.python.org/issue36036  opened by remi.lapeyre

#36041: email: folding of quoted string in display_name violates RFC
https://bugs.python.org/issue36041  opened by aaryn.startmail

#36042: Setting __init_subclass__ and __class_getitem__ methods are in
https://bugs.python.org/issue36042  opened by BTaskaya

#36043: FileCookieJar constructor don't accept PathLike
https://bugs.python.org/issue36043  opened by kapsh

#36044: PROFILE_TASK for PGO build is not a good workload
https://bugs.python.org/issue36044  opened by nascheme

#36045: builtins.help function is not much help with async functions
https://bugs.python.org/issue36045  opened by Dan Rose

#36046: support dropping privileges when running subprocesses
https://bugs.python.org/issue36046  opened by patrick.mclean

#36048: Deprecate implicit truncating when convert Python numbers to C
https://bugs.python.org/issue36048  opened by serhiy.storchaka

#36050: Why does http.client.HTTPResponse._safe_read use MAXAMOUNT
https://bugs.python.org/issue36050  opened by bmerry

#36051: Drop the GIL during large bytes.join operations?
https://bugs.python.org/issue36051  opened by bmerry

#36053: pkgutil.walk_packages jumps out from given path if there is pa
https://bugs.python.org/issue36053  opened by karkucik

#36054: Way to detect CPU count inside docker container
https://bugs.python.org/issue36054  opened by keirlawson

#36058: Improve file decoding before re.search
https://bugs.python.org/issue36058  opened by terry.reedy

#36064: docs: urllib.request.Request not accepting iterables data type
https://bugs.python.org/issue36064  opened by sylye

#36066: Add `empty` block to `for` and `while` loops.
https://bugs.python.org/issue36066  opened by wlohu

#36067: subprocess terminate() "invalid handle" error when process is 
https://bugs.python.org/issue36067  opened by giampaolo.rodola

#36071: Add support for Windows ARM32 in ctypes/libffi
https://bugs.python.org/issue36071  opened by Paul Monson

#36072: str.translate() behaves differently for ASCII-only and other s
https://bugs.python.org/issue36072  opened by sir-sigurd

#36073: sqlite crashes with converters mutating cursor
https://bugs.python.org/issue36073  opened by sir-sigurd

#36075: python 2to3 conversion tool is generating file with extra line
https://bugs.python.org/issue36075  opened by sabakauser

#36076: ssl.get_server_certificate should use SNI
https://bugs.python.org/issue36076  opened by enki

#36077: Inheritance dataclasses fields and default init statement
https://bugs.python.org/issue36077  opened by ???????????? ????????????

#36078: argparse: positional with type=int, default=SUPPRESS raise Val
https://bugs.python.org/issue36078  opened by n8falke

#36079: pdb on setuptools "ValueError: underlying buffer has been deta
https://bugs.python.org/issue36079  opened by Gerrit.Holl

#36081: Cannot set LDFLAGS containing $
https://bugs.python.org/issue36081  opened by Dakon



Most recent 15 issues with no replies (15)
==========================================

#36079: pdb on setuptools "ValueError: underlying buffer has been deta
https://bugs.python.org/issue36079

#36076: ssl.get_server_certificate should use SNI
https://bugs.python.org/issue36076

#36073: sqlite crashes with converters mutating cursor
https://bugs.python.org/issue36073

#36071: Add support for Windows ARM32 in ctypes/libffi
https://bugs.python.org/issue36071

#36058: Improve file decoding before re.search
https://bugs.python.org/issue36058

#36053: pkgutil.walk_packages jumps out from given path if there is pa
https://bugs.python.org/issue36053

#36051: Drop the GIL during large bytes.join operations?
https://bugs.python.org/issue36051

#36036: Add method to get user defined command line arguments in unitt
https://bugs.python.org/issue36036

#36017: test_grp
https://bugs.python.org/issue36017

#36002: configure --enable-optimizations with clang fails to detect ll
https://bugs.python.org/issue36002

#36001: LIBFFI_INCLUDEDIR is not detected when set into a profile nor 
https://bugs.python.org/issue36001

#35999: multpirocessing.Process alive after SIGTERM on parent
https://bugs.python.org/issue35999

#35990: ipaddress.IPv4Interface won't accept 2-tuple (address, mask)
https://bugs.python.org/issue35990

#35974: os.DirEntry.inode() returns invalid value within Docker contai
https://bugs.python.org/issue35974

#35970: no help flag in base64 util
https://bugs.python.org/issue35970



Most recent 15 issues waiting for review (15)
=============================================

#36073: sqlite crashes with converters mutating cursor
https://bugs.python.org/issue36073

#36071: Add support for Windows ARM32 in ctypes/libffi
https://bugs.python.org/issue36071

#36064: docs: urllib.request.Request not accepting iterables data type
https://bugs.python.org/issue36064

#36053: pkgutil.walk_packages jumps out from given path if there is pa
https://bugs.python.org/issue36053

#36046: support dropping privileges when running subprocesses
https://bugs.python.org/issue36046

#36045: builtins.help function is not much help with async functions
https://bugs.python.org/issue36045

#36042: Setting __init_subclass__ and __class_getitem__ methods are in
https://bugs.python.org/issue36042

#36041: email: folding of quoted string in display_name violates RFC
https://bugs.python.org/issue36041

#36036: Add method to get user defined command line arguments in unitt
https://bugs.python.org/issue36036

#36035: pathlib.Path().rglob() breaks with broken symlinks
https://bugs.python.org/issue36035

#36030: add internal API function to create tuple without items array 
https://bugs.python.org/issue36030

#36029: Use title-case HTTP header fields
https://bugs.python.org/issue36029

#36026: Different error message when sys.settrace is used
https://bugs.python.org/issue36026

#36025: Breaking change in PyDate_FromTimeStamp API
https://bugs.python.org/issue36025

#36021: [Security][Windows] webbrowser: WindowsDefault uses os.startfi
https://bugs.python.org/issue36021



Top 10 most discussed issues (10)
=================================

#36021: [Security][Windows] webbrowser: WindowsDefault uses os.startfi
https://bugs.python.org/issue36021  23 msgs

#36010: Please provide a .zip Windows release of Python that is not cr
https://bugs.python.org/issue36010  22 msgs

#35813: shared memory construct to avoid need for serialization betwee
https://bugs.python.org/issue35813  17 msgs

#36027: Support negative exponents in pow() where a modulus is specifi
https://bugs.python.org/issue36027  13 msgs

#36064: docs: urllib.request.Request not accepting iterables data type
https://bugs.python.org/issue36064  13 msgs

#35892: Fix awkwardness of statistics.mode() for multimodal datasets
https://bugs.python.org/issue35892  12 msgs

#36019: test_urllib fail in s390x buildbots: http://www.example.com/
https://bugs.python.org/issue36019  12 msgs

#35925: test_httplib test_nntplib test_ssl fail on ARMv7 Debian buster
https://bugs.python.org/issue35925  10 msgs

#36020: HAVE_SNPRINTF and MSVC std::snprintf support
https://bugs.python.org/issue36020  10 msgs

#36026: Different error message when sys.settrace is used
https://bugs.python.org/issue36026  10 msgs



Issues closed (84)
==================

#1104: msilib.SummaryInfo.GetProperty() truncates the string by one c
https://bugs.python.org/issue1104  closed by steve.dower

#12822: NewGIL should use CLOCK_MONOTONIC if possible.
https://bugs.python.org/issue12822  closed by inada.naoki

#13659: Add a help() viewer for IDLE's Shell.
https://bugs.python.org/issue13659  closed by terry.reedy

#14929: IDLE crashes on *Edit / Find in files ...* command
https://bugs.python.org/issue14929  closed by terry.reedy

#15248: Better explain "TypeError: 'tuple' object is not callable"
https://bugs.python.org/issue15248  closed by serhiy.storchaka

#20687: Change in expectedFailure breaks testtools
https://bugs.python.org/issue20687  closed by cheryl.sabella

#22704: Review extension enable options
https://bugs.python.org/issue22704  closed by terry.reedy

#23077: PEP 1: Allow Provisional status for PEPs
https://bugs.python.org/issue23077  closed by cheryl.sabella

#23428: Use the monotonic clock for thread conditions on POSIX platfor
https://bugs.python.org/issue23428  closed by inada.naoki

#26787: test_distutils fails when configured --with-lto
https://bugs.python.org/issue26787  closed by inada.naoki

#27632: build on AIX fails when builddir != srcdir, more than bad path
https://bugs.python.org/issue27632  closed by Michael.Felt

#28235: In xml.etree.ElementTree docs there is no parser argument in f
https://bugs.python.org/issue28235  closed by cheryl.sabella

#28328: statistics.geometric_mean has no tests. Defer to 3.7?
https://bugs.python.org/issue28328  closed by inada.naoki

#29278: Python 3.6 build fails with parallel make
https://bugs.python.org/issue29278  closed by inada.naoki

#30449: Improve __slots__ datamodel documentation
https://bugs.python.org/issue30449  closed by cheryl.sabella

#31982: 8.3. collections ??? Container datatypes
https://bugs.python.org/issue31982  closed by rhettinger

#32108: configparser bug: section is emptied if you assign a section t
https://bugs.python.org/issue32108  closed by cheryl.sabella

#32657: Mutable Objects in SMTP send_message Signature
https://bugs.python.org/issue32657  closed by inada.naoki

#32808: subprocess.check_output opens an unwanted command line window 
https://bugs.python.org/issue32808  closed by cheryl.sabella

#33961: Inconsistency in exceptions for dataclasses.dataclass document
https://bugs.python.org/issue33961  closed by inada.naoki

#33989: ms.key_compare is not initialized in all paths of list_sort_im
https://bugs.python.org/issue33989  closed by serhiy.storchaka

#34203: documentation: recommend Python 3 over 2 in faq
https://bugs.python.org/issue34203  closed by abcdef

#34294: re module: wrong capturing groups
https://bugs.python.org/issue34294  closed by serhiy.storchaka

#34315: Regex not evalauated correctly
https://bugs.python.org/issue34315  closed by serhiy.storchaka

#34572: C unpickling bypasses import thread safety
https://bugs.python.org/issue34572  closed by pitrou

#34720: Fix test_importlib.test_bad_traverse for AIX
https://bugs.python.org/issue34720  closed by ncoghlan

#34757: Placeholder for discussion on Combined patches for AIX - to re
https://bugs.python.org/issue34757  closed by Michael.Felt

#34785: pty.spawn -- auto-termination after child process is dead (a z
https://bugs.python.org/issue34785  closed by martin.panter

#34817: Ellipsis docs has extra dot in the markdown that makes it look
https://bugs.python.org/issue34817  closed by xtreak

#34981: Unable to install Python from web-based installer and executab
https://bugs.python.org/issue34981  closed by inada.naoki

#35126: Mistake in FAQ about converting number to string.
https://bugs.python.org/issue35126  closed by cheryl.sabella

#35153: Allow to set headers in xmlrpc.client.ServerProxy
https://bugs.python.org/issue35153  closed by vstinner

#35186: distutils.command.upload uses deprecated platform.dist with bd
https://bugs.python.org/issue35186  closed by p-ganssle

#35307: Command line help example  is missing "--prompt" option
https://bugs.python.org/issue35307  closed by cheryl.sabella

#35500: Align expected and actual calls on mock.assert_called_with err
https://bugs.python.org/issue35500  closed by taleinat

#35584: Wrong statement about ^ in howto/regex.rst
https://bugs.python.org/issue35584  closed by rhettinger

#35689: IDLE: Docstrings and test for colorizer
https://bugs.python.org/issue35689  closed by terry.reedy

#35704: On AIX, test_unpack_archive_xztar fails with default MAXDATA s
https://bugs.python.org/issue35704  closed by ncoghlan

#35798: duplicate SyntaxWarning: "is" with a literal
https://bugs.python.org/issue35798  closed by serhiy.storchaka

#35812: Don't log an exception from the main coroutine in asyncio.run(
https://bugs.python.org/issue35812  closed by asvetlov

#35822: _queue _queuemodule.c is missing inside the Setup file
https://bugs.python.org/issue35822  closed by inada.naoki

#35826: Typo in example for async with statement with condition
https://bugs.python.org/issue35826  closed by mhchia

#35852: Fixed tests regenerating using CRLF when running it on Windows
https://bugs.python.org/issue35852  closed by addons_zz

#35867: NameError is not caught at Task execution
https://bugs.python.org/issue35867  closed by pablogsal

#35904: Add statistics.fmean(seq)
https://bugs.python.org/issue35904  closed by rhettinger

#35915: re.search extreme slowness (looks like hang/livelock), searchi
https://bugs.python.org/issue35915  closed by serhiy.storchaka

#35942: posixmodule.c:path_converter() returns an invalid exception me
https://bugs.python.org/issue35942  closed by pablogsal

#35945: Cannot distinguish between subtask cancellation and running ta
https://bugs.python.org/issue35945  closed by jnwatson

#35956: Sort documentation could be improved for complex sorting
https://bugs.python.org/issue35956  closed by rhettinger

#35984: test__xxsubinterpreters leaked [3, 4, 3] memory blocks, sum=1
https://bugs.python.org/issue35984  closed by eric.snow

#35992: Metaclasses interfere with __class_getitem__
https://bugs.python.org/issue35992  closed by levkivskyi

#35993: incorrect use of released memory in Python/pystate.c line 284
https://bugs.python.org/issue35993  closed by vstinner

#36006: [good first issue] Align version changed for truncate in io mo
https://bugs.python.org/issue36006  closed by Mariatta

#36007: python3.8 a1 - docs build requires sphinx 1.7 but uses a 1.8 f
https://bugs.python.org/issue36007  closed by Mariatta

#36009: weakref.ReferenceType is not a valid typing type
https://bugs.python.org/issue36009  closed by levkivskyi

#36012: Investigate slow writes to class variables
https://bugs.python.org/issue36012  closed by rhettinger

#36013: test_signal fails in AMD64 Debian PGO 3.x
https://bugs.python.org/issue36013  closed by gregory.p.smith

#36014: test_help_with_metavar broken
https://bugs.python.org/issue36014  closed by wabba

#36024: ctypes: test_ctypes test_callbacks() crash on AArch64 with SEL
https://bugs.python.org/issue36024  closed by vstinner

#36028: Integer Division discrepancy with float
https://bugs.python.org/issue36028  closed by mark.dickinson

#36031: add internal API function to effectively convert just created 
https://bugs.python.org/issue36031  closed by vstinner

#36032: Wrong output in tutorial (3.1.2. Strings)
https://bugs.python.org/issue36032  closed by serhiy.storchaka

#36037: test_ssl fails on RHEL8 strict OpenSSL configuration
https://bugs.python.org/issue36037  closed by vstinner

#36038: ^ used in inaccurate example in regex-howto
https://bugs.python.org/issue36038  closed by mdk

#36039: Replace append loops with list comprehensions
https://bugs.python.org/issue36039  closed by rhettinger

#36040: Python\ast.c(3875): warning C4244: 'initializing': conversion 
https://bugs.python.org/issue36040  closed by pablogsal

#36047: socket file handle does not support stream write
https://bugs.python.org/issue36047  closed by matrixise

#36049: No __repr__() for queue.PriorityQueue and queue.LifoQueue
https://bugs.python.org/issue36049  closed by rhettinger

#36052: Assignment operator allows to assign to __debug__
https://bugs.python.org/issue36052  closed by pablogsal

#36055: Division using math.pow and math.log approximation fails
https://bugs.python.org/issue36055  closed by mark.dickinson

#36056: importlib does not support pathlib
https://bugs.python.org/issue36056  closed by berker.peksag

#36057: Add docs and tests for ordering in Counter.  [no behavior chan
https://bugs.python.org/issue36057  closed by rhettinger

#36059: Update docs for OrderedDict to reflect that regular dicts are 
https://bugs.python.org/issue36059  closed by rhettinger

#36060: Document how collections.ChainMap() determines iteration order
https://bugs.python.org/issue36060  closed by rhettinger

#36061: zipfile does not handle arcnames with non-ascii characters on 
https://bugs.python.org/issue36061  closed by inada.naoki

#36062: move index normalization from list_slice() to PyList_GetSlice(
https://bugs.python.org/issue36062  closed by serhiy.storchaka

#36063: replace PyTuple_SetItem() with PyTuple_SET_ITEM() in long_divm
https://bugs.python.org/issue36063  closed by serhiy.storchaka

#36065: Add unified C API for accessing bytes and bytearray
https://bugs.python.org/issue36065  closed by serhiy.storchaka

#36068: Make _tuplegetter objects serializable
https://bugs.python.org/issue36068  closed by rhettinger

#36069: asyncio: create_connection cannot handle IPv6 link-local addre
https://bugs.python.org/issue36069  closed by Leonardo M??rlein

#36070: Enclosing scope not visible from within list comprehension
https://bugs.python.org/issue36070  closed by serhiy.storchaka

#36074: Result of `asyncio.Server.sockets` after `Server.close()` is n
https://bugs.python.org/issue36074  closed by mdk

#36080: Ensurepip fails to install pip into a nested virtual environme
https://bugs.python.org/issue36080  closed by Sammy Gillespie

#36082: The built-in round() function giving a wrong output
https://bugs.python.org/issue36082  closed by SilentGhost

From steve.dower at python.org  Tue Mar  5 11:55:41 2019
From: steve.dower at python.org (Steve Dower)
Date: Tue, 5 Mar 2019 08:55:41 -0800
Subject: [Python-Dev] [RELEASE] Python 2.7.16
In-Reply-To: <q5kg1n$3cnc$1@blaine.gmane.org>
References: <5cb021d0-bf2f-45aa-98f1-5f4bb77fb4a6@www.fastmail.com>
 <q5kg1n$3cnc$1@blaine.gmane.org>
Message-ID: <b7acd184-fd29-f1f2-642f-5073d51f3436@python.org>

On 04Mar2019 1631, Terry Reedy wrote:
> On 3/3/2019 10:30 PM, Benjamin Peterson wrote:
> 
>> I'm pleased to announce the immediate availability of Python 2.7.16 
>> for download at https://www.python.org/downloads/release/python-2716/.
> 
> On Windows 10, this is an 'unrecognized app' and Windows Defender 
> SmartScreen, now default, refuses to run it. "Windows protected your PC" 
> until one clicks 'more info' to get 'Run anyway'.? This is new since the 
> .rc1 release.? We should either make 2.7 a 'known' app* or say something 
> on the download page about clicking 'more info'.? I don't know the 
> status of python.org 3.x downloads.
> 
> Since Steve Dower put 3.7 on the Windows store, PSF must now be a known 
> publisher.? Perhaps he can help make 2.7 'known'.

SmartScreen should recognize it now that it's been downloaded a few 
times without reporting, but the real problem is that it hasn't been 
signed properly. (I don't have any validation set up for Python 2 on this.)

I'll try and sign the version on my build machine by hand and upload it 
again this week, and maybe add a validation step to interrupt the upload 
if it's not signed, but anything Python 2 is a very low priority for me 
(sorry Benjamin :) ).

Cheers,
Steve

From ezio.melotti at gmail.com  Tue Mar  5 11:57:24 2019
From: ezio.melotti at gmail.com (Ezio Melotti)
Date: Tue, 5 Mar 2019 17:57:24 +0100
Subject: [Python-Dev] Summary of Python tracker Issues
In-Reply-To: <CACBhJdGqHTJCrZfGDtEnwBMs5JXTpjyNa04qiR5sOf4yb9OzbQ@mail.gmail.com>
References: <20190208180753.1.782F2F2B9AA3561B@roundup.psfhosted.org>
 <CAEfz+TwdqQm829Q_2RWJq9QVDsnRX53JkFYVMqFP0G+OSqJKiA@mail.gmail.com>
 <CAK256p3ruU-RCv-k_XeXSsu+33oKKnE29YK=bK=pQBJb=7tEgg@mail.gmail.com>
 <q59m60$1i0v$1@blaine.gmane.org>
 <CAK256p1kP_D9AYYfCbcgOXp5tb7oMHVbZ8x7JBi9yO9QsO4B0g@mail.gmail.com>
 <bb74cef5-2393-dccb-a6c5-5e491bbf66be@g.nevcal.com>
 <q59oo7$71ib$1@blaine.gmane.org>
 <5d12e862-5398-5701-2503-b745c0875976@g.nevcal.com>
 <q5ae7e$603g$1@blaine.gmane.org>
 <CACBhJdGqHTJCrZfGDtEnwBMs5JXTpjyNa04qiR5sOf4yb9OzbQ@mail.gmail.com>
Message-ID: <CACBhJdFi0xLrwFuC6Fiqz=V9nM67ku5=2c7WGGSPt-ptKE1dAA@mail.gmail.com>

On Fri, Mar 1, 2019 at 8:05 AM Ezio Melotti <ezio.melotti at gmail.com> wrote:
>
> On Fri, Mar 1, 2019 at 5:59 AM Terry Reedy <tjreedy at udel.edu> wrote:
> >
> > On 2/28/2019 6:54 PM, Glenn Linderman wrote:
> >
> > > There seems to be enough evidence that something went wrong somewhere,
> > > though, and whoever maintains that process should start investigating,
> > > but it would still be nice to get confirmation from a non-Google email
> > > recipient whether they did or did not get the Summary messages.
> > >
> > > I wonder if there is a way to manually send them, and if the missing two
> > > weeks of activity can be reported... once the sending problem is
> > > understood and resolved.
> >
> > I posted a note to the core-workflow list, but I don't know if anyone
> > with power or knowledge still reads it.
> >
>
> The tracker got migrated recently, and that's the most likely cause of
> the missing reports.
> We'll look into it and get them back :)
>

Ernest promptly fixed the issue so last week report was sent out correctly.
I just generated and sent out the two reports that were missing and
updated the tracker stats at
https://bugs.python.org/issue?@template=stats
Note that some values in the report might be a bit off (for example,
the list of issues waiting for review doesn't include issues that were
closed after the selected period, and the patch count includes issues
created before or during the selected period even if a patch was
uploaded after the selected period).
The issues counts and deltas at the top of the summary should be correct.
Let me know if you notice any other problem (and thanks Ned for
bringing this to my attention!).

Best Regards,
Ezio Melotti

> > To get a listing, go to the tracker search page, put
> > 2019-02-09 to 2019-03-01
> > in the date box, and change status to don't care.  At the moment, this
> > returns 204 issues.
> >
> > --
> > Terry Jan Reedy
> >

From steve.dower at python.org  Tue Mar  5 12:14:11 2019
From: steve.dower at python.org (Steve Dower)
Date: Tue, 5 Mar 2019 09:14:11 -0800
Subject: [Python-Dev] PEPs from non-core devs now need a sponsor
In-Reply-To: <CANbgQ_GNqk19iOpotgGT_mNFUFNBEHoNoEm9tVpV1rZOnLw1kQ@mail.gmail.com>
References: <CAP1=2W7BnsYJga=WbkPLT_xHAeHMAqR4DAP6+iAt+_1fKBXLUQ@mail.gmail.com>
 <CACo5Rz5k=iBypcHFtGXE1mR-3RiME8Z1=4K=fiKTWXH5Zzjn_w@mail.gmail.com>
 <5C7E789B.9010007@UGent.be>
 <CANbgQ_GNqk19iOpotgGT_mNFUFNBEHoNoEm9tVpV1rZOnLw1kQ@mail.gmail.com>
Message-ID: <65a0900d-36f3-32f0-1cd0-e4403368f855@python.org>

On 05Mar2019 0620, James Edwards wrote:
> I have to say, this is sort of surprising for what seems like the first 
> official action of the steering?committee.? Are there really /that many 
> /PEPs that a team that is now, what, 5x the size of the BFDL model is 
> worried that they'll be able to keep up?? As a long-time lurker, this 
> hardly seems to be the case.? Despite the seemingly-well-intentioned 
> rationale, this seems like an ominous sign.

FWIW, I'm 100% on board with this idea (and feel free to continue 
stealing ideas from PEP 8013 ;) ). However, the presentation of it 
certainly didn't emphasize the good rationale for the decision.

In short, the five person steering council is not the equivalent of 5x 
BDFL. If they want to delegate early decision making to the core team as 
a whole, they can, and that's what they've done here.

For non-core developers, and particularly first-time contributors, the 
PEP process typically starts at python-ideas. (Even core devs probably 
ought to start there, though part of being accepted as a core developer 
means we trust your judgement in selecting the correct venue for 
discussion, so if security-sig, datetime-sig, capi-sig, core-workflow, 
or just python-dev is more appropriate, feel free to start there.)

To "get out" of python-ideas, someone needs to suggest where it goes 
next. Most of the time, this is python-dev. However, if you don't have 
*a single* core developer on board from python-ideas, chances are the 
whole team is going to reject the proposal.

In the past, an idea would be shut down by just one negative vote 
(Guido's). In this future, an idea is promoted by just one positive vote 
(any core developer's). It's actually much easier for an "outsider" to 
get their idea in front of the whole core team than before. And 
python-ideas has core developers and regular contributors who have 
self-selected to "triage" ideas and help move them along. If the 
triagers don't like your idea, it's probably not a good idea :)

Asking for proclamation from the council/delegate is literally saying 
"this proposal is ready". As a contributor (first time or 100th time), 
if you think your proposal is ready without *anyone else* agreeing with 
you, then *we* think you have a humility problem and we'd like you to go 
work on that.

It's not a big ask to have one of the lower level mailing lists look at 
your proposal before the council has to make an official decision. You 
should *want* the mailing lists to look at your proposal. I certainly 
do, because every time they do my proposals get better, and I get better 
at writing proposals. This is a situation where everyone wins.

Cheers,
Steve

From brett at python.org  Tue Mar  5 14:30:18 2019
From: brett at python.org (Brett Cannon)
Date: Tue, 5 Mar 2019 11:30:18 -0800
Subject: [Python-Dev] PEPs from non-core devs now need a sponsor
In-Reply-To: <5C7E132D.20004@UGent.be>
References: <CAP1=2W7BnsYJga=WbkPLT_xHAeHMAqR4DAP6+iAt+_1fKBXLUQ@mail.gmail.com>
 <5C7E132D.20004@UGent.be>
Message-ID: <CAP1=2W7pYv_ujxzvTZ52bRz3qvh0PGrBq28RjvPzfiV8wFfR6A@mail.gmail.com>

On Mon, Mar 4, 2019 at 10:13 PM Jeroen Demeyer <J.Demeyer at ugent.be> wrote:

> Does this apply to existing draft PEPs or only new ones?
>

Only new ones; this is not retroactive.

-Brett


> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/brett%40python.org
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190305/777fd7db/attachment.html>

From brett at python.org  Tue Mar  5 14:41:18 2019
From: brett at python.org (Brett Cannon)
Date: Tue, 5 Mar 2019 11:41:18 -0800
Subject: [Python-Dev] PEPs from non-core devs now need a sponsor
In-Reply-To: <5C7E789B.9010007@UGent.be>
References: <CAP1=2W7BnsYJga=WbkPLT_xHAeHMAqR4DAP6+iAt+_1fKBXLUQ@mail.gmail.com>
 <CACo5Rz5k=iBypcHFtGXE1mR-3RiME8Z1=4K=fiKTWXH5Zzjn_w@mail.gmail.com>
 <5C7E789B.9010007@UGent.be>
Message-ID: <CAP1=2W73Tk5C_tHKLjQK3Oi1q80ir0Bd9ZFO3VQJP4xgba9PBA@mail.gmail.com>

On Tue, Mar 5, 2019 at 5:33 AM Jeroen Demeyer <J.Demeyer at ugent.be> wrote:

> On 2019-03-05 14:05, Calvin Spealman wrote:
> > I'm worried this creates a gatekeeping perception that will scare away
> > contributors.
>

It might, but if people are not prepared properly for the PEP process then
it's best to spare them and everyone else the time sink.


>
> +1
>
> I also expressed this worry at https://github.com/python/peps/pull/903
>
> You could keep the positive part of the sponsoring idea (somebody acting
> as mentor) but drop the negative part (make it a hard requirement to
> find a sponsor supporting the proposal before the proposal can even
> become a draft PEP).
>

The hard requirement is on purpose. This is not a suggestion for a reason
as PEPs are not a cheap, cost-free thing for both authors and those
participating in the discussion. They take up a ton of time and if people
are not properly equipped to be successful then it just leads to a massive
loss of time that could be been better used by everyone involved.

Please also realize that the top 4 PEP authors are on the steering council,
and some of the longest active core devs and PEP editors are on the
council, so this isn't coming from people that lack experience and exposure
to all facets of the PEP process.

As I said in my announcement email, if this turns out to be a bad decision
then we can change the process back/again, but please do realize this is
not coming out of thin air just because we like fiddling with the PEP
process.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190305/1881c105/attachment.html>

From brett at snarky.ca  Tue Mar  5 14:31:08 2019
From: brett at snarky.ca (Brett Cannon)
Date: Tue, 5 Mar 2019 11:31:08 -0800
Subject: [Python-Dev] PEPs from non-core devs now need a sponsor
In-Reply-To: <CA+3bQGFhgPymJSrsAqAkkeLv0kDWFQuhiVushuz__kD4jQp5wQ@mail.gmail.com>
References: <CAP1=2W7BnsYJga=WbkPLT_xHAeHMAqR4DAP6+iAt+_1fKBXLUQ@mail.gmail.com>
 <CA+3bQGFhgPymJSrsAqAkkeLv0kDWFQuhiVushuz__kD4jQp5wQ@mail.gmail.com>
Message-ID: <CAP1=2W7bohs32ViRO4jfY8kVSHiFGiEoW8vqnExYbcsLHYYxUg@mail.gmail.com>

On Tue, Mar 5, 2019 at 3:36 AM Victor Stinner <vstinner at redhat.com> wrote:

> Hi,
>
> Le mar. 5 mars 2019 ? 02:53, Brett Cannon <brett at snarky.ca> a ?crit :
> > The steering council has implemented a new idea called sponsors to the
> PEP process (...). The thinking is that to help make sure PEPs from
> non-core developers receive appropriate guidance through the PEP process
> (...)
>
> Hum, this isn't fully new, some PEPs already got a "PEP champion" (old
> name), no?
>

Sure. You can consider this just making it a more formal thing then.

-Brett


>
> A recent example is PEP 572 who has been "championed" by Guido van
> Rossum, then by Tim Peters. In this specific case, they became
> co-authors :-)
>
> > ... eventually becoming a co-author or BDFL-delegate later
>
> Nitpick: since Python has no more BDFL, maybe the expression should
> becocme "PEP-delegate"? ;-)
>

That's covered in PEP 1 as to why the name has been kept so far.

-Brett


>
> Victor
> --
> Night gathers, and now my watch begins. It shall not end until my death.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190305/8488e36c/attachment.html>

From J.Demeyer at UGent.be  Tue Mar  5 14:58:43 2019
From: J.Demeyer at UGent.be (Jeroen Demeyer)
Date: Tue, 5 Mar 2019 20:58:43 +0100
Subject: [Python-Dev] PEPs from non-core devs now need a sponsor
In-Reply-To: <65a0900d-36f3-32f0-1cd0-e4403368f855@python.org>
References: <CAP1=2W7BnsYJga=WbkPLT_xHAeHMAqR4DAP6+iAt+_1fKBXLUQ@mail.gmail.com>
 <CACo5Rz5k=iBypcHFtGXE1mR-3RiME8Z1=4K=fiKTWXH5Zzjn_w@mail.gmail.com>
 <5C7E789B.9010007@UGent.be>
 <CANbgQ_GNqk19iOpotgGT_mNFUFNBEHoNoEm9tVpV1rZOnLw1kQ@mail.gmail.com>
 <65a0900d-36f3-32f0-1cd0-e4403368f855@python.org>
Message-ID: <5C7ED4F3.10302@UGent.be>

On 2019-03-05 18:14, Steve Dower wrote:
> However, if you don't have
> *a single* core developer on board from python-ideas, chances are the
> whole team is going to reject the proposal.

Sure, I couldn't agree more. But this is something that a PEP mentor 
(instead of sponsor) also could deal with. Any potential mentor would 
quickly dismiss the PEP as having no chance and that would work just fine.

The problem with the "sponsor" idea is that the sponsor must come from 
the group of core devs supporting the PEP. What if all core devs 
supporting it don't have time to act as sponsor or just don't care enough?

On the other hand, if there is some support for an idea, then anybody 
should be able to mentor even if the mentor doesn't personally support 
the idea. I guess the mentor shouldn't be opposed either, but there is a 
large gray zone of -0/+0 in between where mentors could come from.


Jeroen.

From brett at python.org  Tue Mar  5 15:39:40 2019
From: brett at python.org (Brett Cannon)
Date: Tue, 5 Mar 2019 12:39:40 -0800
Subject: [Python-Dev] PEPs from non-core devs now need a sponsor
In-Reply-To: <5C7ED4F3.10302@UGent.be>
References: <CAP1=2W7BnsYJga=WbkPLT_xHAeHMAqR4DAP6+iAt+_1fKBXLUQ@mail.gmail.com>
 <CACo5Rz5k=iBypcHFtGXE1mR-3RiME8Z1=4K=fiKTWXH5Zzjn_w@mail.gmail.com>
 <5C7E789B.9010007@UGent.be>
 <CANbgQ_GNqk19iOpotgGT_mNFUFNBEHoNoEm9tVpV1rZOnLw1kQ@mail.gmail.com>
 <65a0900d-36f3-32f0-1cd0-e4403368f855@python.org> <5C7ED4F3.10302@UGent.be>
Message-ID: <CAP1=2W4RKiQBUokR9xforwBMQA9=1qhXA_a3_99x6hUjhnS68w@mail.gmail.com>

On Tue, Mar 5, 2019 at 11:59 AM Jeroen Demeyer <J.Demeyer at ugent.be> wrote:

> On 2019-03-05 18:14, Steve Dower wrote:
> > However, if you don't have
> > *a single* core developer on board from python-ideas, chances are the
> > whole team is going to reject the proposal.
>
> Sure, I couldn't agree more. But this is something that a PEP mentor
> (instead of sponsor) also could deal with. Any potential mentor would
> quickly dismiss the PEP as having no chance and that would work just fine.
>
> The problem with the "sponsor" idea is that the sponsor must come from
> the group of core devs supporting the PEP. What if all core devs
> supporting it don't have time to act as sponsor or just don't care enough?
>

If no one cares enough then there isn't enough support to begin with. I
can't think of a PEP that was accepted with a universally lukewarm
reception; there's always been at least one person who liked the idea to
care.


> On the other hand, if there is some support for an idea, then anybody
> should be able to mentor even if the mentor doesn't personally support
> the idea. I guess the mentor shouldn't be opposed either, but there is a
> large gray zone of -0/+0 in between where mentors could come from.
>

If the hypothetical situation comes up of:

   1. An external person proposes a PEP
   2. No supportive core dev has time to sponsor
   3. Someone who doesn't support the PEP is willing to sponsor

then we can talk about changing the process, but otherwise we are worrying
about a hypothetical situation versus personal experience which suggests
this won't be the case. IOW we need to give this a shot before we consider
changing it.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190305/31f8ef4f/attachment.html>

From rosuav at gmail.com  Tue Mar  5 15:45:41 2019
From: rosuav at gmail.com (Chris Angelico)
Date: Wed, 6 Mar 2019 07:45:41 +1100
Subject: [Python-Dev] PEPs from non-core devs now need a sponsor
In-Reply-To: <CAP1=2W4RKiQBUokR9xforwBMQA9=1qhXA_a3_99x6hUjhnS68w@mail.gmail.com>
References: <CAP1=2W7BnsYJga=WbkPLT_xHAeHMAqR4DAP6+iAt+_1fKBXLUQ@mail.gmail.com>
 <CACo5Rz5k=iBypcHFtGXE1mR-3RiME8Z1=4K=fiKTWXH5Zzjn_w@mail.gmail.com>
 <5C7E789B.9010007@UGent.be>
 <CANbgQ_GNqk19iOpotgGT_mNFUFNBEHoNoEm9tVpV1rZOnLw1kQ@mail.gmail.com>
 <65a0900d-36f3-32f0-1cd0-e4403368f855@python.org> <5C7ED4F3.10302@UGent.be>
 <CAP1=2W4RKiQBUokR9xforwBMQA9=1qhXA_a3_99x6hUjhnS68w@mail.gmail.com>
Message-ID: <CAPTjJmpZKOrWz6DPqtxdDdWUOyvNHH=D7XzRRbwmaEU4ai9_zg@mail.gmail.com>

On Wed, Mar 6, 2019 at 7:41 AM Brett Cannon <brett at python.org> wrote:
>
>
>
> On Tue, Mar 5, 2019 at 11:59 AM Jeroen Demeyer <J.Demeyer at ugent.be> wrote:
>>
>> On 2019-03-05 18:14, Steve Dower wrote:
>> > However, if you don't have
>> > *a single* core developer on board from python-ideas, chances are the
>> > whole team is going to reject the proposal.
>>
>> Sure, I couldn't agree more. But this is something that a PEP mentor
>> (instead of sponsor) also could deal with. Any potential mentor would
>> quickly dismiss the PEP as having no chance and that would work just fine.
>>
>> The problem with the "sponsor" idea is that the sponsor must come from
>> the group of core devs supporting the PEP. What if all core devs
>> supporting it don't have time to act as sponsor or just don't care enough?
>
>
> If no one cares enough then there isn't enough support to begin with. I can't think of a PEP that was accepted with a universally lukewarm reception; there's always been at least one person who liked the idea to care.
>
>>
>> On the other hand, if there is some support for an idea, then anybody
>> should be able to mentor even if the mentor doesn't personally support
>> the idea. I guess the mentor shouldn't be opposed either, but there is a
>> large gray zone of -0/+0 in between where mentors could come from.
>
>
> If the hypothetical situation comes up of:
>
> An external person proposes a PEP
> No supportive core dev has time to sponsor
> Someone who doesn't support the PEP is willing to sponsor
>
> then we can talk about changing the process, but otherwise we are worrying about a hypothetical situation versus personal experience which suggests this won't be the case. IOW we need to give this a shot before we consider changing it.
>

How much effort does it take to sponsor a PEP? I'm not a core dev, but
I can help someone with the work of writing and publishing. So if, in
that hypothetical situation, some (very busy) core dev were willing to
say "yeah, go ahead, put my name on it", would that be sufficient? If
so, it shouldn't be a problem to require this - any proposal with
enough support to be worth PEPing should have at least one person
who's willing to have his/her name in the headers.

ChrisA

From steve.dower at python.org  Tue Mar  5 16:02:54 2019
From: steve.dower at python.org (Steve Dower)
Date: Tue, 5 Mar 2019 13:02:54 -0800
Subject: [Python-Dev] PEPs from non-core devs now need a sponsor
In-Reply-To: <CAPTjJmpZKOrWz6DPqtxdDdWUOyvNHH=D7XzRRbwmaEU4ai9_zg@mail.gmail.com>
References: <CAP1=2W7BnsYJga=WbkPLT_xHAeHMAqR4DAP6+iAt+_1fKBXLUQ@mail.gmail.com>
 <CACo5Rz5k=iBypcHFtGXE1mR-3RiME8Z1=4K=fiKTWXH5Zzjn_w@mail.gmail.com>
 <5C7E789B.9010007@UGent.be>
 <CANbgQ_GNqk19iOpotgGT_mNFUFNBEHoNoEm9tVpV1rZOnLw1kQ@mail.gmail.com>
 <65a0900d-36f3-32f0-1cd0-e4403368f855@python.org> <5C7ED4F3.10302@UGent.be>
 <CAP1=2W4RKiQBUokR9xforwBMQA9=1qhXA_a3_99x6hUjhnS68w@mail.gmail.com>
 <CAPTjJmpZKOrWz6DPqtxdDdWUOyvNHH=D7XzRRbwmaEU4ai9_zg@mail.gmail.com>
Message-ID: <021c02d0-2ba8-db1c-d074-b07e741ed9bd@python.org>

On 05Mar2019 1245, Chris Angelico wrote:
> How much effort does it take to sponsor a PEP? I'm not a core dev, but
> I can help someone with the work of writing and publishing. So if, in
> that hypothetical situation, some (very busy) core dev were willing to
> say "yeah, go ahead, put my name on it", would that be sufficient? If
> so, it shouldn't be a problem to require this - any proposal with
> enough support to be worth PEPing should have at least one person
> who's willing to have his/her name in the headers.

For the record, now that he's joined the conversation, Chris is who I 
had in mind when I invented the term "PEP triager" in my email :)

If we had a way of appointing people who we trust to be non-core dev 
sponsors of PEPs, I'd nominate him. Though I suspect he's well known 
enough to the council that they'd accept his support of a PEP as 
sufficient to consider it from someone who's otherwise completely 
unknown. There are always grey areas in any policy.

Cheers,
Steve

From steve at holdenweb.com  Tue Mar  5 17:53:58 2019
From: steve at holdenweb.com (Steve Holden)
Date: Tue, 5 Mar 2019 22:53:58 +0000
Subject: [Python-Dev] PEPs from non-core devs now need a sponsor
In-Reply-To: <021c02d0-2ba8-db1c-d074-b07e741ed9bd@python.org>
References: <CAP1=2W7BnsYJga=WbkPLT_xHAeHMAqR4DAP6+iAt+_1fKBXLUQ@mail.gmail.com>
 <CACo5Rz5k=iBypcHFtGXE1mR-3RiME8Z1=4K=fiKTWXH5Zzjn_w@mail.gmail.com>
 <5C7E789B.9010007@UGent.be>
 <CANbgQ_GNqk19iOpotgGT_mNFUFNBEHoNoEm9tVpV1rZOnLw1kQ@mail.gmail.com>
 <65a0900d-36f3-32f0-1cd0-e4403368f855@python.org> <5C7ED4F3.10302@UGent.be>
 <CAP1=2W4RKiQBUokR9xforwBMQA9=1qhXA_a3_99x6hUjhnS68w@mail.gmail.com>
 <CAPTjJmpZKOrWz6DPqtxdDdWUOyvNHH=D7XzRRbwmaEU4ai9_zg@mail.gmail.com>
 <021c02d0-2ba8-db1c-d074-b07e741ed9bd@python.org>
Message-ID: <CAMofdRC+M14VeQBu_rzvf2V4MXhMGaFZ2bR0h_GOObJPtswSGg@mail.gmail.com>

On Tue, Mar 5, 2019 at 9:04 PM Steve Dower <steve.dower at python.org> wrote:

> On 05Mar2019 1245, Chris Angelico wrote:
> > How much effort does it take to sponsor a PEP? I'm not a core dev, but
> > I can help someone with the work of writing and publishing. So if, in
> > that hypothetical situation, some (very busy) core dev were willing to
> > say "yeah, go ahead, put my name on it", would that be sufficient? If
> > so, it shouldn't be a problem to require this - any proposal with
> > enough support to be worth PEPing should have at least one person
> > who's willing to have his/her name in the headers.
>
> For the record, now that he's joined the conversation, Chris is who I
> had in mind when I invented the term "PEP triager" in my email :)
>
> If we had a way of appointing people who we trust to be non-core dev
> sponsors of PEPs, I'd nominate him. Though I suspect he's well known
> enough to the council that they'd accept his support of a PEP as
> sufficient to consider it from someone who's otherwise completely
> unknown. There are always grey areas in any policy.
>

If core devs trust someone enough to let them act as a PEP sponsor, they
probably know at least one core dev well enough to get them to add their
name as sponsor on the condition that they are only responsiible for
ensuring their "proxy" (?) responds adequately and in a sufficiently timely
manner.

I don't have a great deal to add to most conversations here, but I would
urge all concerned to consider Brett's point, from my own now distant
experience as a PSF chair. If I may paraphrase him, it's easier to change
the rules when someone wants or needs to do something outside their current
scope than it is to devise bullet-proof rules. It was only after I learned
this lesson that much of the constitutional lawyering in the PSF was
(gradually) replaced by useful mission-directed volunteer-led activity.

Please don't concern yourselves too much about process, but instead focus
on the desired results. If lawyering is needed, delegate it to the PSF! I'd
rather have you pushing Python forward ;-).

Finally, thanks again to everyone who contributes, particularly for
managing to hide a great deal of Python's modern-day complexity from those
who neither want nor need to know about it. Ultimately I think that is
perhaps the biggest factor fuelling the language's continued growth.

Kind regards
Steve Holden
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190305/e878624a/attachment-0001.html>

From songofacandy at gmail.com  Wed Mar  6 00:21:05 2019
From: songofacandy at gmail.com (Inada Naoki)
Date: Wed, 6 Mar 2019 14:21:05 +0900
Subject: [Python-Dev] Summary of Python tracker Issues
In-Reply-To: <CACBhJdFi0xLrwFuC6Fiqz=V9nM67ku5=2c7WGGSPt-ptKE1dAA@mail.gmail.com>
References: <20190208180753.1.782F2F2B9AA3561B@roundup.psfhosted.org>
 <CAEfz+TwdqQm829Q_2RWJq9QVDsnRX53JkFYVMqFP0G+OSqJKiA@mail.gmail.com>
 <CAK256p3ruU-RCv-k_XeXSsu+33oKKnE29YK=bK=pQBJb=7tEgg@mail.gmail.com>
 <q59m60$1i0v$1@blaine.gmane.org>
 <CAK256p1kP_D9AYYfCbcgOXp5tb7oMHVbZ8x7JBi9yO9QsO4B0g@mail.gmail.com>
 <bb74cef5-2393-dccb-a6c5-5e491bbf66be@g.nevcal.com>
 <q59oo7$71ib$1@blaine.gmane.org>
 <5d12e862-5398-5701-2503-b745c0875976@g.nevcal.com>
 <q5ae7e$603g$1@blaine.gmane.org>
 <CACBhJdGqHTJCrZfGDtEnwBMs5JXTpjyNa04qiR5sOf4yb9OzbQ@mail.gmail.com>
 <CACBhJdFi0xLrwFuC6Fiqz=V9nM67ku5=2c7WGGSPt-ptKE1dAA@mail.gmail.com>
Message-ID: <CAEfz+TxQnv2kTKgAE1Mgy827xCEw0C=7eiAv3Cu3un2xVsgULA@mail.gmail.com>

Thank you for fixing it.Weekly status give me motivation to look issues.

-- 
Inada Naoki  <songofacandy at gmail.com>

From benjamin at python.org  Wed Mar  6 00:40:33 2019
From: benjamin at python.org (Benjamin Peterson)
Date: Wed, 06 Mar 2019 00:40:33 -0500
Subject: [Python-Dev] [RELEASE] Python 2.7.16
In-Reply-To: <12acd71f-c18b-ea72-1e43-df4c76aa7812@redhat.com>
References: <5cb021d0-bf2f-45aa-98f1-5f4bb77fb4a6@www.fastmail.com>
 <12acd71f-c18b-ea72-1e43-df4c76aa7812@redhat.com>
Message-ID: <3cdb64ff-afc1-43d3-bb69-b866386d3f87@www.fastmail.com>



On Tue, Mar 5, 2019, at 03:18, Miro Hron?ok wrote:
> On 04. 03. 19 4:30, Benjamin Peterson wrote:
> > Hello all,
> > I'm pleased to announce the immediate availability of Python 2.7.16 for download at https://www.python.org/downloads/release/python-2716/.
> > 
> > The only change since the release candidate was a fix for the IDLE icon on macOS. See https://bugs.python.org/issue32129. Refer to the changelog for a full list of changes: https://raw.githubusercontent.com/python/cpython/v2.7.16/Misc/NEWS.d/2.7.16rc1.rst
> 
> 
> https://www.python.org/downloads/release/python-2716/ links changelog to 
> https://raw.githubusercontent.com/python/cpython/v2.7.16/Misc/NEWS.d/2.7.16.rst 
> but that only has 1 change (I suppose against rc1).
> 
> Is there a better link, or should I read those two combined?
> 
> https://raw.githubusercontent.com/python/cpython/v2.7.16/Misc/NEWS.d/2.7.16rc1.rst
> https://raw.githubusercontent.com/python/cpython/v2.7.16/Misc/NEWS.d/2.7.16.rst

Correct, those the full delta between 2.7.15 and 2.7.16.

From brett at snarky.ca  Wed Mar  6 12:56:23 2019
From: brett at snarky.ca (Brett Cannon)
Date: Wed, 6 Mar 2019 09:56:23 -0800
Subject: [Python-Dev] PEPs from non-core devs now need a sponsor
In-Reply-To: <CAP1=2W7BnsYJga=WbkPLT_xHAeHMAqR4DAP6+iAt+_1fKBXLUQ@mail.gmail.com>
References: <CAP1=2W7BnsYJga=WbkPLT_xHAeHMAqR4DAP6+iAt+_1fKBXLUQ@mail.gmail.com>
Message-ID: <CAP1=2W4i73qwnZo9BqhQ27M=ZioG=ddOfiHLGKfp87CMyvQyVw@mail.gmail.com>

Just to clarify a key point here which is covered in PEP 1 but based on
offline conversations is being missed, the need for a sponsor only kicks in
for committing it to the peps repo which typically kicks in when
transitioning from python-ideas to python-dev (although if one gets a
sponsor sooner then great as getting mentoring on how to handle the process
is always beneficial) . This should not be a barrier to presenting an idea
or writing up a proto-PEP for python-ideas if people are too shy to ask
upfront for a sponsor until their idea shows merit (and remember that we
already ask people to fork the peps repo and get feedback on their
proto-PEPs in their own fork instead of in the official repo). Nor should
this impact slow-burning ideas which people have to warm up to as that
typically happens before a PEP is written anyway.

I also don't see this preventing PEPs written to be explicitly rejected
either. I personally am happy to sponsor such PEPs as I'm sure several
other core devs are as well.


On Mon, Mar 4, 2019 at 5:43 PM Brett Cannon <brett at snarky.ca> wrote:

> The steering council has implemented a new idea called sponsors to the PEP
> process (added in
> https://github.com/python/peps/commit/c58d32c33bd06eb386d3f33963a1434510528f68).
> The thinking is that to help make sure PEPs from non-core developers
> receive appropriate guidance through the PEP process, a core developer
> needs to sign on to be a sponsor of the PEP. Being a sponsor does *not*
> preclude the core dev from eventually becoming a co-author or BDFL-delegate
> later on (but obviously not both), but the expectation is the sponsor is
> supportive of the idea (because if a single core dev won't sign on to help
> then what chance does the PEP have of being accepted?).
>
> If this doesn't turn out well we can obviously revert this, but hopefully
> this will make things smoother for those who are new to the PEP process.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190306/deac9838/attachment.html>

From arj.python at gmail.com  Wed Mar  6 13:28:12 2019
From: arj.python at gmail.com (Abdur-Rahmaan Janhangeer)
Date: Wed, 6 Mar 2019 22:28:12 +0400
Subject: [Python-Dev] PEPs from non-core devs now need a sponsor
In-Reply-To: <CAP1=2W7BnsYJga=WbkPLT_xHAeHMAqR4DAP6+iAt+_1fKBXLUQ@mail.gmail.com>
References: <CAP1=2W7BnsYJga=WbkPLT_xHAeHMAqR4DAP6+iAt+_1fKBXLUQ@mail.gmail.com>
Message-ID: <CADrxXXkwamz3aR2f7mvyR1=V7vC3MGBXoY7qTAZCH2uYSCsGFw@mail.gmail.com>

As a non core-dev, my enthusiasm for submitting a pep has been diminished
by some 40%.

yours,

Abdur-Rahmaan Janhangeer
http://www.pythonmembers.club | https://github.com/Abdur-rahmaanJ
Mauritius
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190306/815f42f5/attachment.html>

From barry at python.org  Wed Mar  6 14:32:25 2019
From: barry at python.org (Barry Warsaw)
Date: Wed, 6 Mar 2019 11:32:25 -0800
Subject: [Python-Dev] PEPs from non-core devs now need a sponsor
In-Reply-To: <CADrxXXkwamz3aR2f7mvyR1=V7vC3MGBXoY7qTAZCH2uYSCsGFw@mail.gmail.com>
References: <CAP1=2W7BnsYJga=WbkPLT_xHAeHMAqR4DAP6+iAt+_1fKBXLUQ@mail.gmail.com>
 <CADrxXXkwamz3aR2f7mvyR1=V7vC3MGBXoY7qTAZCH2uYSCsGFw@mail.gmail.com>
Message-ID: <71E9592A-EC9F-44F2-9999-D89E8D1EE85D@python.org>

On Mar 6, 2019, at 10:28, Abdur-Rahmaan Janhangeer <arj.python at gmail.com> wrote:
> 
> As a non core-dev, my enthusiasm for submitting a pep has been diminished by some 40%.

I?m sorry to hear that.

I think it?s worth keeping in mind that successfully navigating the PEP process can be quite daunting an demoralizing at times.  I wish that weren?t the case, and it was certainly not the intention when the PEP process was originally designed, but Python is a large diverse community now, and a mature, slow moving language, so it?s rare that a great idea makes it through without contention.

I think that the requirement to find a sponsor can help with that, regardless of whether the PEPable idea is ultimately accepted or rejected.  Core devs generally have a pretty good sense of what it takes to get a PEP through the process, can provide encouragement when the millithreads get you down or overwhelmed, and can help short circuit the disappointment, time and emotional investment when the idea has a poor chance of being accepted.  Many of our core devs have gone through it, with both outcomes, so their guidance can be very valuable.  I like to think of the sponsor as a PEP mentor, although sponsors can of course have a range of involvement.  Our core devs want you to succeed (or conversely save you from wasting your time), and they?ve been there, done that.

Core dev sponsors can be a great resource for folks new to the process.

Cheers,
-Barry

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: Message signed with OpenPGP
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190306/61eb3caa/attachment.sig>

From arj.python at gmail.com  Wed Mar  6 14:57:40 2019
From: arj.python at gmail.com (Abdur-Rahmaan Janhangeer)
Date: Wed, 6 Mar 2019 23:57:40 +0400
Subject: [Python-Dev] PEPs from non-core devs now need a sponsor
In-Reply-To: <71E9592A-EC9F-44F2-9999-D89E8D1EE85D@python.org>
References: <CAP1=2W7BnsYJga=WbkPLT_xHAeHMAqR4DAP6+iAt+_1fKBXLUQ@mail.gmail.com>
 <CADrxXXkwamz3aR2f7mvyR1=V7vC3MGBXoY7qTAZCH2uYSCsGFw@mail.gmail.com>
 <71E9592A-EC9F-44F2-9999-D89E8D1EE85D@python.org>
Message-ID: <CADrxXXmPdn_=Pc3fNNeWm8O9UaWx88Ruked4tEojyT+VVKw2fA@mail.gmail.com>

i think that "should have at least a mentor guiding you" sounds a lot more
better than

a core developer needs to sign on to be a sponsor

that sounds a lot more that without backing, you can't submit a pep, i
guess the core devs wanted to make things easier but the sponsor thing etc
put me off.

for someone using py, ideas sometimes come but since i've not yet submitted
a pep, when i see a change in the flow, i ask: will it be easier or more
difficult to submit peps now? i really got the impression that now chances
are slimmer.

great idea that core mentors now volunteer to guide peps,

sorry for trouble.

yours,

Abdur-Rahmaan Janhangeer
http://www.pythonmembers.club | https://github.com/Abdur-rahmaanJ
Mauritius
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190306/dcb64b73/attachment.html>

From g.rodola at gmail.com  Wed Mar  6 18:58:26 2019
From: g.rodola at gmail.com (Giampaolo Rodola')
Date: Thu, 7 Mar 2019 00:58:26 +0100
Subject: [Python-Dev] PEPs from non-core devs now need a sponsor
In-Reply-To: <CADrxXXmPdn_=Pc3fNNeWm8O9UaWx88Ruked4tEojyT+VVKw2fA@mail.gmail.com>
References: <CAP1=2W7BnsYJga=WbkPLT_xHAeHMAqR4DAP6+iAt+_1fKBXLUQ@mail.gmail.com>
 <CADrxXXkwamz3aR2f7mvyR1=V7vC3MGBXoY7qTAZCH2uYSCsGFw@mail.gmail.com>
 <71E9592A-EC9F-44F2-9999-D89E8D1EE85D@python.org>
 <CADrxXXmPdn_=Pc3fNNeWm8O9UaWx88Ruked4tEojyT+VVKw2fA@mail.gmail.com>
Message-ID: <CAFYqXL_A2C5nm5BNTfNoW7LxY-WiJHsCYiTuMf2AyYrOB9oa_A@mail.gmail.com>

On Wed, Mar 6, 2019 at 8:58 PM Abdur-Rahmaan Janhangeer <
arj.python at gmail.com> wrote:

> i think that "should have at least a mentor guiding you" sounds a lot more
> better than
>
> a core developer needs to sign on to be a sponsor
>
> that sounds a lot more that without backing, you can't submit a pep, i
> guess the core devs wanted to make things easier but the sponsor thing etc
> put me off.
> for someone using py, ideas sometimes come but since i've not yet
> submitted a pep, when i see a change in the flow, i ask: will it be easier
> or more difficult to submit peps now? i really got the impression that now
> chances are slimmer.
>

Before submitting a PEP one (including core-devs) usually starts a
discussion on python-dev/ideas in order to start collecting feedback and,
most importantly, to figure out whether the idea deserves a PEP or not
(often times it doesn't). If the proposal is good it means somebody agreed
with you: those persons are likely gonna be the ones who'll likely sponsor
your PEP. If you can't find such a person immediately and the idea received
positive feedback I imagine you'll just be asked to write a proto-PEP
first, and if that is good enough somebody will eventually sponsor it and
possibly even help you. If you can't find any person then it probably means
it wasn't such a good idea, and that's also good because it will save you
from the trouble of writing the PEP in the first place (meeting the PEP
quality standards is not exactly a piece of cake). I doubt we'll end up in
a situation where a good proposal won't happen just because nobody is
willing to sponsor it.

-- 
Giampaolo - http://grodola.blogspot.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190307/2ecf456d/attachment.html>

From songofacandy at gmail.com  Thu Mar  7 04:18:27 2019
From: songofacandy at gmail.com (Inada Naoki)
Date: Thu, 7 Mar 2019 18:18:27 +0900
Subject: [Python-Dev] configparser: should optionxform be idempotent?
Message-ID: <CAEfz+Twwyt_U=hgm2SUwP_NPefE2n6KSduFBqaOg6-K4c-NNgQ@mail.gmail.com>

Hi, all.

I came from https://bugs.python.org/issue35838
Since there are no "expert" for configparser in
Expert Index, I ask here to make design decision.

The default behavior of CofigParser.optionxform
is str.lowercase().  This is used to canonicalize
option key names.

The document of the optionxform shows example
overrides it to identity function `lambda option: option`.
https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.optionxform

BPO-35838 is issue about optionxform can be called twice
while ConfigParser.read_dict().
If optionxfrom is not idempotent, it creates unexpected option
name.
https://bugs.python.org/issue35838#msg334439

But even if all APIs calls optionxform exactly once, user may
read option name and value, and write updated value with same name.
In this case, user read option name already optionxform-ed
(canonicalized).  So non-idempotent optionxform will break
option name.

So what should we do about optionxform?

a)  Document "optionxform must be idempotent".

b) Ensure all APIs calls optionxform exactly once, and document
   "When you get option name from section objects, it is already
    optionxform-ed.  You can not reuse the option name if
    optionxform is not idempotent, because optionxform will be
    applied to the name again."

I prefer (a) to (b) because it's simple and easy solution.

But for some use cases (e.g. read only, write only, use only
predefined option name and read only it's value), (b) works.
At least issue reporter try this use case and be trapped by
this behavior.

How do you think?

-- 
Inada Naoki  <songofacandy at gmail.com>

From p.f.moore at gmail.com  Thu Mar  7 04:56:49 2019
From: p.f.moore at gmail.com (Paul Moore)
Date: Thu, 7 Mar 2019 09:56:49 +0000
Subject: [Python-Dev] configparser: should optionxform be idempotent?
In-Reply-To: <CAEfz+Twwyt_U=hgm2SUwP_NPefE2n6KSduFBqaOg6-K4c-NNgQ@mail.gmail.com>
References: <CAEfz+Twwyt_U=hgm2SUwP_NPefE2n6KSduFBqaOg6-K4c-NNgQ@mail.gmail.com>
Message-ID: <CACac1F_5MsNeC-pGO7kQRCt7HEAx8yFE2UyVD9i-CFQ3ZDfF8w@mail.gmail.com>

On Thu, 7 Mar 2019 at 09:21, Inada Naoki <songofacandy at gmail.com> wrote:
> The document of the optionxform shows example
> overrides it to identity function `lambda option: option`.
> https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.optionxform
>
> BPO-35838 is issue about optionxform can be called twice
> while ConfigParser.read_dict().
> If optionxfrom is not idempotent, it creates unexpected option
> name.
> https://bugs.python.org/issue35838#msg334439

I'm not keen on the term "idempotent" here - I wasn't at all clear
what it was intended to convey. But from looking at the bug report, I
see that it basically means "optionxform should be a function which,
when applied more than one time to a value, returns the same result as
if it had been applied once only".

> But even if all APIs calls optionxform exactly once, user may
> read option name and value, and write updated value with same name.
> In this case, user read option name already optionxform-ed
> (canonicalized).  So non-idempotent optionxform will break
> option name.
>
> So what should we do about optionxform?
>
> a)  Document "optionxform must be idempotent".
>
> b) Ensure all APIs calls optionxform exactly once, and document
>    "When you get option name from section objects, it is already
>     optionxform-ed.  You can not reuse the option name if
>     optionxform is not idempotent, because optionxform will be
>     applied to the name again."
>
> I prefer (a) to (b) because it's simple and easy solution.

I strongly prefer (b). I think the example given in the bug report is
a reasonable thing to expect to work. I think that disallowing this
usage is an arbitrary restriction that honestly doesn't have a good
justification *other* than "it's easier for the implementation". It's
obviously not a *common* requirement, otherwise the issue would have
come up more often, but it's a reasonable one (after all, we don't
require similar functions like the key argument to sorted() to conform
to this restriction).

I'd look at the question the other way round. If we *did* insist that
optionxform has to be "idempotent", how would we recommend that the
person who reported the bug achieved the result he's trying to get?
lambda x: x if x.startswith("(") and x.endswith(")") else "(" + x +
")"? That seems a bit fiddly.

If, however, the consensus is that we choose (a), can I ask that we
*don't* use the term "idempotent" when documenting the restriction? I
think it will cause too much confusion - we should explain the
restriction without using obscure terms (and if it's hard to explain
the restriction like that, maybe that demonstrates that it's an
unreasonable restriction to impose? ;-))

Paul

From songofacandy at gmail.com  Thu Mar  7 05:06:31 2019
From: songofacandy at gmail.com (Inada Naoki)
Date: Thu, 7 Mar 2019 19:06:31 +0900
Subject: [Python-Dev] configparser: should optionxform be idempotent?
In-Reply-To: <CACac1F_5MsNeC-pGO7kQRCt7HEAx8yFE2UyVD9i-CFQ3ZDfF8w@mail.gmail.com>
References: <CAEfz+Twwyt_U=hgm2SUwP_NPefE2n6KSduFBqaOg6-K4c-NNgQ@mail.gmail.com>
 <CACac1F_5MsNeC-pGO7kQRCt7HEAx8yFE2UyVD9i-CFQ3ZDfF8w@mail.gmail.com>
Message-ID: <CAEfz+Ty2y0+3ZBTB=MekQaBEgcUhtHyEFk=_cTbSzrBintio4A@mail.gmail.com>

On Thu, Mar 7, 2019 at 6:57 PM Paul Moore <p.f.moore at gmail.com> wrote:
>
> I'm not keen on the term "idempotent" here - I wasn't at all clear
> what it was intended to convey. But from looking at the bug report, I
> see that it basically means "optionxform should be a function which,
> when applied more than one time to a value, returns the same result as
> if it had been applied once only".

You're right.  "idempotent" is technical (or mathematical) jargon.
When f(x) satisfies "f(x) == f(f(x)) for all x" restriction, f(x) is idempotent.


>
> I'd look at the question the other way round. If we *did* insist that
> optionxform has to be "idempotent", how would we recommend that the
> person who reported the bug achieved the result he's trying to get?
> lambda x: x if x.startswith("(") and x.endswith(")") else "(" + x +
> ")"? That seems a bit fiddly.

In this case, we recommend not using optionxform to wrap name with
"()" implicitly.  Use wrapped name explicitly instead.

e.g. cfg["section"]["(name)"] = "value"

It's very simple.

-- 
Inada Naoki  <songofacandy at gmail.com>

From tir.karthi at gmail.com  Thu Mar  7 05:30:02 2019
From: tir.karthi at gmail.com (Karthikeyan)
Date: Thu, 7 Mar 2019 16:00:02 +0530
Subject: [Python-Dev] configparser: should optionxform be idempotent?
In-Reply-To: <CAEfz+Twwyt_U=hgm2SUwP_NPefE2n6KSduFBqaOg6-K4c-NNgQ@mail.gmail.com>
References: <CAEfz+Twwyt_U=hgm2SUwP_NPefE2n6KSduFBqaOg6-K4c-NNgQ@mail.gmail.com>
Message-ID: <CAAjsFLQcQyyLYa6NA34k3Xjuyk6WmrGmTb5RAQK-=nref3ndsA@mail.gmail.com>

On Thu, Mar 7, 2019 at 2:51 PM Inada Naoki <songofacandy at gmail.com> wrote:

> Hi, all.
>
> I came from https://bugs.python.org/issue35838
> Since there are no "expert" for configparser in
> Expert Index, I ask here to make design decision.
>

There is lukasz.langa in the expert index for configparser at
https://devguide.python.org/experts/#stdlib and that's why I deferred to
them.

The default behavior of CofigParser.optionxform
> is str.lowercase().  This is used to canonicalize
> option key names.
>
> The document of the optionxform shows example
> overrides it to identity function `lambda option: option`.
>
> https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.optionxform
>
> BPO-35838 is issue about optionxform can be called twice
> while ConfigParser.read_dict().
> If optionxfrom is not idempotent, it creates unexpected option
> name.
> https://bugs.python.org/issue35838#msg334439
>
> But even if all APIs calls optionxform exactly once, user may
> read option name and value, and write updated value with same name.
> In this case, user read option name already optionxform-ed
> (canonicalized).  So non-idempotent optionxform will break
> option name.
>
> So what should we do about optionxform?
>
> a)  Document "optionxform must be idempotent".
>

I also feel this is restrictive since wrapping keys with () looks like a
valid use case to me.

b) Ensure all APIs calls optionxform exactly once, and document
>    "When you get option name from section objects, it is already
>     optionxform-ed.  You can not reuse the option name if
>     optionxform is not idempotent, because optionxform will be
>     applied to the name again."
>
> I prefer (a) to (b) because it's simple and easy solution.
>

I initially preferred (b) while read_dict is one case. As you have
mentioned in the tracker there are various scenarios where the transform is
done and stored in the underlying internal dict and then while setting one
section key to another it might apply it again. Also I am afraid there is
less test coverage for optionxform itself so there could be more scenarios
to cover increasing the complexity.

-- 
Regards,
Karthikeyan S
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190307/19cc428d/attachment.html>

From p.f.moore at gmail.com  Thu Mar  7 05:30:10 2019
From: p.f.moore at gmail.com (Paul Moore)
Date: Thu, 7 Mar 2019 10:30:10 +0000
Subject: [Python-Dev] configparser: should optionxform be idempotent?
In-Reply-To: <CAEfz+Ty2y0+3ZBTB=MekQaBEgcUhtHyEFk=_cTbSzrBintio4A@mail.gmail.com>
References: <CAEfz+Twwyt_U=hgm2SUwP_NPefE2n6KSduFBqaOg6-K4c-NNgQ@mail.gmail.com>
 <CACac1F_5MsNeC-pGO7kQRCt7HEAx8yFE2UyVD9i-CFQ3ZDfF8w@mail.gmail.com>
 <CAEfz+Ty2y0+3ZBTB=MekQaBEgcUhtHyEFk=_cTbSzrBintio4A@mail.gmail.com>
Message-ID: <CACac1F8EC42SCCgLac3F0Ytf-vOzJJ5hTxOu9uh0ZdykVtcq_Q@mail.gmail.com>

On Thu, 7 Mar 2019 at 10:06, Inada Naoki <songofacandy at gmail.com> wrote:
>
> On Thu, Mar 7, 2019 at 6:57 PM Paul Moore <p.f.moore at gmail.com> wrote:
> >
> > I'm not keen on the term "idempotent" here - I wasn't at all clear
> > what it was intended to convey. But from looking at the bug report, I
> > see that it basically means "optionxform should be a function which,
> > when applied more than one time to a value, returns the same result as
> > if it had been applied once only".
>
> You're right.  "idempotent" is technical (or mathematical) jargon.
> When f(x) satisfies "f(x) == f(f(x)) for all x" restriction, f(x) is idempotent.

Thanks. I know what the term means, at least in a mathematical sense -
the computing sense is slightly different (in a subtle way that may
not be relevant here - see
https://stackoverflow.com/questions/1077412/what-is-an-idempotent-operation).

> > I'd look at the question the other way round. If we *did* insist that
> > optionxform has to be "idempotent", how would we recommend that the
> > person who reported the bug achieved the result he's trying to get?
> > lambda x: x if x.startswith("(") and x.endswith(")") else "(" + x +
> > ")"? That seems a bit fiddly.
>
> In this case, we recommend not using optionxform to wrap name with
> "()" implicitly.  Use wrapped name explicitly instead.
>
> e.g. cfg["section"]["(name)"] = "value"
>
> It's very simple.

That argument could be used for any use of optionxform, though -
instead of using the default optionxform, use explicitly-lowercased
values everywhere instead.

I still prefer option (b), allowing general functions for optionxform.
However, I will say (and I should have said in my first mail) that
this is a view based purely on theoretical considerations. I've never
explicitly used optionxform myself, and none of my code would be
impacted in any way regardless of the outcome of this discussion.

Paul

From songofacandy at gmail.com  Thu Mar  7 05:41:21 2019
From: songofacandy at gmail.com (Inada Naoki)
Date: Thu, 7 Mar 2019 19:41:21 +0900
Subject: [Python-Dev] configparser: should optionxform be idempotent?
In-Reply-To: <CACac1F8EC42SCCgLac3F0Ytf-vOzJJ5hTxOu9uh0ZdykVtcq_Q@mail.gmail.com>
References: <CAEfz+Twwyt_U=hgm2SUwP_NPefE2n6KSduFBqaOg6-K4c-NNgQ@mail.gmail.com>
 <CACac1F_5MsNeC-pGO7kQRCt7HEAx8yFE2UyVD9i-CFQ3ZDfF8w@mail.gmail.com>
 <CAEfz+Ty2y0+3ZBTB=MekQaBEgcUhtHyEFk=_cTbSzrBintio4A@mail.gmail.com>
 <CACac1F8EC42SCCgLac3F0Ytf-vOzJJ5hTxOu9uh0ZdykVtcq_Q@mail.gmail.com>
Message-ID: <CAEfz+TyzDCrWuDrSZK9_dB4pcxqmuyLxTfC9ECScp-zK34TNgw@mail.gmail.com>

>
> That argument could be used for any use of optionxform, though -
> instead of using the default optionxform, use explicitly-lowercased
> values everywhere instead.
>

It can't be usable if the config format case-insensitive.

value = (cfg.get("section", "name") or cfg.get("section", "Name")
        or cfg.get("section", "nAme") or cfg.get("section", "naMe")...)


> I still prefer option (b), allowing general functions for optionxform.
> However, I will say (and I should have said in my first mail) that
> this is a view based purely on theoretical considerations. I've never
> explicitly used optionxform myself, and none of my code would be
> impacted in any way regardless of the outcome of this discussion.
>
> Paul

If we choose (b), I think core developer must check test coverage for
optionxform before documenting non-idempotent optionxform
is allowed explicitly.

I don't have motivation for that because I never used configparser in such way.

The PR looks good to me for the particular case the issue describe.
So I will merge the PR without updating document when we chose (b).

But let's wait a few days for other comments.

Regards,

-- 
Inada Naoki  <songofacandy at gmail.com>

From steve at pearwood.info  Thu Mar  7 07:39:50 2019
From: steve at pearwood.info (Steven D'Aprano)
Date: Thu, 7 Mar 2019 23:39:50 +1100
Subject: [Python-Dev] configparser: should optionxform be idempotent?
In-Reply-To: <CACac1F_5MsNeC-pGO7kQRCt7HEAx8yFE2UyVD9i-CFQ3ZDfF8w@mail.gmail.com>
References: <CAEfz+Twwyt_U=hgm2SUwP_NPefE2n6KSduFBqaOg6-K4c-NNgQ@mail.gmail.com>
 <CACac1F_5MsNeC-pGO7kQRCt7HEAx8yFE2UyVD9i-CFQ3ZDfF8w@mail.gmail.com>
Message-ID: <20190307123950.GL4465@ando.pearwood.info>

On Thu, Mar 07, 2019 at 09:56:49AM +0000, Paul Moore wrote:
> On Thu, 7 Mar 2019 at 09:21, Inada Naoki <songofacandy at gmail.com> wrote:
> > The document of the optionxform shows example
> > overrides it to identity function `lambda option: option`.
> > https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.optionxform
> >
> > BPO-35838 is issue about optionxform can be called twice
> > while ConfigParser.read_dict().
> > If optionxfrom is not idempotent, it creates unexpected option
> > name.
> > https://bugs.python.org/issue35838#msg334439
> 
> I'm not keen on the term "idempotent" here - I wasn't at all clear
> what it was intended to convey. But from looking at the bug report, I
> see that it basically means "optionxform should be a function which,
> when applied more than one time to a value, returns the same result as
> if it had been applied once only".

That's what "idempotent" means :-)


[...]
> > So what should we do about optionxform?
> >
> > a)  Document "optionxform must be idempotent".
> >
> > b) Ensure all APIs calls optionxform exactly once, and document
> >    "When you get option name from section objects, it is already
> >     optionxform-ed.  You can not reuse the option name if
> >     optionxform is not idempotent, because optionxform will be
> >     applied to the name again."
> >
> > I prefer (a) to (b) because it's simple and easy solution.
> 
> I strongly prefer (b).

I don't have a strong opinion, but I have a mild preference for taking 
responsibility for idempotency out of the user's hands if practical.


[...]
> I'd look at the question the other way round. If we *did* insist that
> optionxform has to be "idempotent", how would we recommend that the
> person who reported the bug achieved the result he's trying to get?
> lambda x: x if x.startswith("(") and x.endswith(")") else "(" + x +
> ")"? That seems a bit fiddly.

Writing idempotent functions often is.

 
> If, however, the consensus is that we choose (a), can I ask that we
> *don't* use the term "idempotent" when documenting the restriction?

Why use one word when twenty-four will do? *wink*


> I think it will cause too much confusion - we should explain the
> restriction without using obscure terms (and if it's hard to explain
> the restriction like that, maybe that demonstrates that it's an
> unreasonable restriction to impose? ;-))

Please, idempotent is a standard term of art, especially for those 
working with RESTful interfaces.

http://restcookbook.com/HTTP%20Methods/idempotency/

It might be obscure to you, but then nearly every jargon term will be 
obscure to somebody. Nobody is born knowing what terms like

    multiprocessing
    threading
    metaclass
    decorator
    comprehension
    futures

etc mean. They're all "obscure jargon" terms to someone. The first time 
I came across "tuple", I had no idea what it meant (and in fact it took 
me many years to stop misspelling it "turple").

By all means include a definition of idempotent (perhaps a link to the 
glossary). But we shouldn't avoid useful, precise terminology because 
some people haven't come across it yet.



-- 
Steven

From songofacandy at gmail.com  Thu Mar  7 08:26:48 2019
From: songofacandy at gmail.com (Inada Naoki)
Date: Thu, 7 Mar 2019 22:26:48 +0900
Subject: [Python-Dev] Compact ordered set
In-Reply-To: <FC1A9CE1-0353-41A2-81A1-3D48E03292E9@gmail.com>
References: <CAEfz+TwBihOdZRBY8_F230fDbhB-3chReMoG8dQCE66=zZmbeQ@mail.gmail.com>
 <A1B3DF9E-9220-44E2-A9CB-9D7014A61767@gmail.com>
 <FC1A9CE1-0353-41A2-81A1-3D48E03292E9@gmail.com>
Message-ID: <CAEfz+TwT2Ft2i_uA_heinkwHoGvb-Y6KyReFDpb_MoUT3HTgvg@mail.gmail.com>

ordered set 2

Hi, Raymond.

Thank you for your detailed response and I'm sorry about the late reply.

All of your points make sense to me.  My implementation has not been
battle-tested yet.

As I wrote in a previous mail, there is only one benchmark in
pyperformance was affected significantly.  (My implementation was 13%
faster.)

After that, I wrote some microbenchmarks.  Some run faster on the
current implementation and some run faster on the ordered
implementation.
https://github.com/methane/sandbox/tree/master/python/ordered-set

For example, current implementation is at most 20% faster on creating
new set by consecutive integers. (e.g. `set(range(N))`)   As you know,
it is because hash(int) is consecutive too.

On the other hand, ordered implementation is at most 17% faster on
creating new set by string values.

But I don't know how this microbenchmark results affects real world
set workloads.  Pyperformance doesn't have enough variations of set
worklods.

Would you please tell me how did you gather vary set workloads?


> * To get the same lookup performance, the density of index table would need to go down to around 25%. Otherwise, there's no way to make up for the extra indirection and the loss of cache locality.

Yes.  Currently, I chose capacity ratio=50%, and I removed 4X resize
on small sets.  So density is about 25~50% for now.  Performance of
simple lookup is 5~8% slower.

More small capacity ratio may improve performance a bit, but it tends
worse memory efficiency when table is 32bit or 64bit.

> * There was a small win on iteration performance because its cheaper to loop over a dense array than a sparse array (fewer memory access and elimination of the unpredictable branch).  This is nice because iteration performance matters in some key use cases.

Yes.  And it can be huge performance benefit on extreme cases.
(e.g. https://bugs.python.org/issue32846)

> * I gave up on ordering right away.  If we care about performance, keys can be stored in the order added; but no effort should be expended to maintain order if subsequent deletions occur.  Likewise, to keep set-to-set operations efficient (i.e. looping over the smaller input), no order guarantee should be given for those operations.  In general, we can let order happen but should not guarantee it and work to maintain it or slow-down essential operations to make them ordered.

I agree.  Maybe, set shouldn't guarantee preserving insertion order unlike dict.
It loses almost half of benefit of new implementation :-(
But order is stable in most cases anyway regardless hash randomization.
Stable pyc can be compiled without PYTHONHASHSEED=0, and sets in
logs are almost stable and readable.


> * Compacting does make sets a little smaller but does cost an indirection and incurs a cost for switching index sizes between 1-byte arrays, 2-byte arrays, 4-byte arrays, and 8-byte arrays.  Those don't seem very expensive; however, set lookups are already very cheap when the hash values are known (when they're not, the cost of computing the hash value tends to dominate anything done by the setobject itself).

Yes.  Ordered implementation makes simple case slower.  But memory
efficiency is very different if application uses tons of small sets.

> * I couldn't find any existing application that would notice the benefit of making sets a bit smaller.  Most applications use dictionaries (directly or indirectly) everywhere, so compaction was an overall win.  Sets tend to be used more sparsely (no pun intended) and tend to be only a small part of overall memory usage. I had to consider this when bumping the load factor down to 60%, prioritizing speed over space.

You're right.  Number of set objects in Python interpreter is very few
than dict.
And ordered set is not memory efficient for large set.

Maybe, we couldn't find clear net win by this set implementation.
I will stop this work at some point.

Thank you,

--
Inada Naoki  <songofacandy at gmail.com>

From p.f.moore at gmail.com  Thu Mar  7 09:39:23 2019
From: p.f.moore at gmail.com (Paul Moore)
Date: Thu, 7 Mar 2019 14:39:23 +0000
Subject: [Python-Dev] configparser: should optionxform be idempotent?
In-Reply-To: <20190307123950.GL4465@ando.pearwood.info>
References: <CAEfz+Twwyt_U=hgm2SUwP_NPefE2n6KSduFBqaOg6-K4c-NNgQ@mail.gmail.com>
 <CACac1F_5MsNeC-pGO7kQRCt7HEAx8yFE2UyVD9i-CFQ3ZDfF8w@mail.gmail.com>
 <20190307123950.GL4465@ando.pearwood.info>
Message-ID: <CACac1F9y6W8cbkyVLXf1M8UVxExDU=Z8Csvz50NVcF6xqhYu+g@mail.gmail.com>

On Thu, 7 Mar 2019 at 12:42, Steven D'Aprano <steve at pearwood.info> wrote:

> > I'm not keen on the term "idempotent" here - I wasn't at all clear
> > what it was intended to convey. But from looking at the bug report, I
> > see that it basically means "optionxform should be a function which,
> > when applied more than one time to a value, returns the same result as
> > if it had been applied once only".
>
> That's what "idempotent" means :-)

Sigh. I'm not interested in an extended debate on fiddly details here.

I know that's what "idempotent" means. I said I "wasn't clear", and
the context clarified it for me (as would going and looking it up,
which I *also* did).There's a subtle difference in the mathematical
and computing meanings (around functions with side-effects, which
aren't a thing in maths), which IMO makes the term *very slightly*
ambiguous - but more to the point, it's uncommon jargon in many areas
(searching for "idempotent" in Google shows enough examples of people
asking what it means to bear this out, IMO - feel free to disagree).

> > If, however, the consensus is that we choose (a), can I ask that we
> > *don't* use the term "idempotent" when documenting the restriction?
>
> Why use one word when twenty-four will do? *wink*

Why use possibly-misunderstood jargon when a clear description will
do? Hmm, let me think. I guess it depends on which
carefully-worded-to-make-your-point description of the situation you
choose to use. *wink*

> > I think it will cause too much confusion - we should explain the
> > restriction without using obscure terms (and if it's hard to explain
> > the restriction like that, maybe that demonstrates that it's an
> > unreasonable restriction to impose? ;-))
>
> Please, idempotent is a standard term of art, especially for those
> working with RESTful interfaces.
>
> http://restcookbook.com/HTTP%20Methods/idempotency/
>
> It might be obscure to you, but then nearly every jargon term will be
> obscure to somebody.

I didn't say otherwise. I said "I think it will cause too much
confusion". I stand by that. I value clear, non-technical, terms over
jargon when it's possible to express an idea that way without
sacrificing clarity. I believe that in this case this is possible
(although as I've already said, I think it's better to avoid the whole
question and *not* impose the restriction at all).

I have no idea what proportion of readers of the configparser docs
will be familiar with REST (or with maths, or with any other
context).I doubt you do either, but if you do I'll defer to your
knowledge.

> The first time
> I came across "tuple", I had no idea what it meant (and in fact it took
> me many years to stop misspelling it "turple").

I love that, I may start using it deliberately :-)

> By all means include a definition of idempotent (perhaps a link to the
> glossary). But we shouldn't avoid useful, precise terminology because
> some people haven't come across it yet.

Agreed, but we should also express ideas in a way that is as
accessible to the general reader as possible. Sometimes that means
using (and explaining) precise technical terms, other times it means
using simple language that gets the job done, without using
*unnecessary* jargon. It's a judgement call as to where the dividing
line lies. So I feel that "idempotent" is on one side of the line, and
you think it's on the other. We've expressed our opinions, let's leave
it at that - I don't want to get into an extended debate over "my
experience of what the average user thinks is wider than yours"...

Paul

From storchaka at gmail.com  Thu Mar  7 11:40:12 2019
From: storchaka at gmail.com (Serhiy Storchaka)
Date: Thu, 7 Mar 2019 18:40:12 +0200
Subject: [Python-Dev] configparser: should optionxform be idempotent?
In-Reply-To: <CAEfz+Twwyt_U=hgm2SUwP_NPefE2n6KSduFBqaOg6-K4c-NNgQ@mail.gmail.com>
References: <CAEfz+Twwyt_U=hgm2SUwP_NPefE2n6KSduFBqaOg6-K4c-NNgQ@mail.gmail.com>
Message-ID: <q5rhhg$63gc$1@blaine.gmane.org>

07.03.19 11:18, Inada Naoki ????:
> So what should we do about optionxform?
> 
> a)  Document "optionxform must be idempotent".
> 
> b) Ensure all APIs calls optionxform exactly once, and document
>     "When you get option name from section objects, it is already
>      optionxform-ed.  You can not reuse the option name if
>      optionxform is not idempotent, because optionxform will be
>      applied to the name again."
> 
> I prefer (a) to (b) because it's simple and easy solution.

I am not expert of configparser, but I prefer (a). The purpose of 
introducing optionxform was to make lowercasing optional.

https://github.com/python/cpython/commit/9e480adf9b3520ea3deb322fd1214f53a2293a0d


From sadhak001 at gmail.com  Thu Mar  7 12:24:48 2019
From: sadhak001 at gmail.com (Mani Sarkar)
Date: Thu, 7 Mar 2019 17:24:48 +0000
Subject: [Python-Dev] Loading modules from a folder
Message-ID: <CAGHtMW=DpdzH_S-AVqwcEqB__2k4cGiXKfrsPkseQ+PZaMLAhg@mail.gmail.com>

Hi,

I have seen multiple ways to load modules from a folder.

Say I have a folder src which contains a number of folders each one of them
is a module.

What are the conventional ways to load modules from such a folder?

I have used

>From src.[module] import xxxxx

But I don't want to use the src prefix, any other ways to indicate that in
python?

Thanks

Cheers,
Mani
-- 

@theNeomatrix369 <http://twitter.com/theNeomatrix369>*  |  **Blog
<http://neomatrix369.wordpress.com/>**  | *@adoptopenjdk
<http://twitter.com/adoptopenjdk> @graalvm <http://twitter.com/graalvm>
@graal <http://twitter.com/graal> @truffleruby
<http://twitter.com/truffleruby> | Dev. communities | *Bitbucket
<https://bitbucket.org/neomatrix369>* * |  **Github
<https://github.com/neomatrix369>* * | * *Slideshare
<https://slideshare.net/neomatrix369>* * | **LinkedIn
<http://uk.linkedin.com/pub/mani-sarkar/71/a77/39b>*
*Come to Devoxx UK 2019:* http://www.devoxx.co.uk/

*Don't chase success, rather aim for "Excellence", and success will come
chasing after you!*
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190307/82a35790/attachment.html>

From brett at python.org  Thu Mar  7 13:41:27 2019
From: brett at python.org (Brett Cannon)
Date: Thu, 7 Mar 2019 10:41:27 -0800
Subject: [Python-Dev] Loading modules from a folder
In-Reply-To: <CAGHtMW=DpdzH_S-AVqwcEqB__2k4cGiXKfrsPkseQ+PZaMLAhg@mail.gmail.com>
References: <CAGHtMW=DpdzH_S-AVqwcEqB__2k4cGiXKfrsPkseQ+PZaMLAhg@mail.gmail.com>
Message-ID: <CAP1=2W7JbhY0OyAANBNs7ar7WOm+_5hNnVWZbT6yqKub0VHXpw@mail.gmail.com>

This mailing list is actually for the development *of* Python, not *with*
Python. You can try asking your question on Stack Overflow, python tutor,
or python-list.

On Thu, Mar 7, 2019 at 9:28 AM Mani Sarkar <sadhak001 at gmail.com> wrote:

> Hi,
>
> I have seen multiple ways to load modules from a folder.
>
> Say I have a folder src which contains a number of folders each one of
> them is a module.
>
> What are the conventional ways to load modules from such a folder?
>
> I have used
>
> From src.[module] import xxxxx
>
> But I don't want to use the src prefix, any other ways to indicate that in
> python?
>
> Thanks
>
> Cheers,
> Mani
> --
>
> @theNeomatrix369 <http://twitter.com/theNeomatrix369>*  |  **Blog
> <http://neomatrix369.wordpress.com/>**  | *@adoptopenjdk
> <http://twitter.com/adoptopenjdk> @graalvm <http://twitter.com/graalvm>
> @graal <http://twitter.com/graal> @truffleruby
> <http://twitter.com/truffleruby> | Dev. communities | *Bitbucket
> <https://bitbucket.org/neomatrix369>* * |  **Github
> <https://github.com/neomatrix369>* * | * *Slideshare
> <https://slideshare.net/neomatrix369>* * | **LinkedIn
> <http://uk.linkedin.com/pub/mani-sarkar/71/a77/39b>*
> *Come to Devoxx UK 2019:* http://www.devoxx.co.uk/
>
> *Don't chase success, rather aim for "Excellence", and success will come
> chasing after you!*
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/brett%40python.org
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190307/8b8ff747/attachment.html>

From mariatta at python.org  Thu Mar  7 13:49:50 2019
From: mariatta at python.org (Mariatta)
Date: Thu, 7 Mar 2019 10:49:50 -0800
Subject: [Python-Dev] Using CLA assistant for Python contributions
Message-ID: <CAGbohnbpnjLcbXHy9x6CtOY9KRRu5NEasUnkoQ0r32iq7STV7w@mail.gmail.com>

I've posted in Discourse under core-workflow category
<https://discuss.python.org/t/using-cla-assistant-for-python/990>, and this
has been previously discussed on the core-workflow mailing list
<https://mail.python.org/archives/list/core-workflow at python.org/thread/JBV3XJVD2DLDX5DY7TZEA6CO5YPNHJ2C/>,
but I feel this affects the wider contributors to Python, so wanted to
share it here for more visibility.

TL;DR:

We'd like to start using CLA assistant for contributions to Python
(including CPython, devguide, PEPs, all the bots etc). Ernest had set up
our own instance of CLA assistant, and it had been tested by several core
developers. We've also consulted The PSF and Van Lindberg for legal advice.

Unless I hear strong opposition (with reasons) from Python Steering
Council, Python core developers, and active core contributors, I plan to
switch us over to to CLA assistant in the coming week (before my OOOS of
March 18)

How this will affect all contributors to Python old and new:

- you will need to sign the CLA again, even if you've signed it before (in
bpo). It will take you several clicks, but then you'll do this only once,
and it takes effect immediately. (instead of waiting for a PSF staff to
check for it)

- bpo username will no longer be required when signing the CLA

- CLA will be accepted under Apache v2 only (no more Academic Free license)

For even more details, please follow the discourse post and the
core-workflow mailing list linked above, as well as the "CLA" section of my
blog post about Core Python sprint 2018
<https://mariatta.ca/core-sprint-2018-part-2.html#core-sprint-2018-part-2>.

Thanks.
?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190307/e46f7e04/attachment.html>

From mariatta at python.org  Thu Mar  7 14:08:50 2019
From: mariatta at python.org (Mariatta)
Date: Thu, 7 Mar 2019 11:08:50 -0800
Subject: [Python-Dev] PEP 581: Using GitHub Issues for CPython
Message-ID: <CAGbohnZMUfGwzfhzqp1QEyhuuVEFeAWe8XVs+=p_MqZ2zkq+ew@mail.gmail.com>

I'd like to formally present to Python-dev PEP 581: Using GitHub Issues for
CPython

Full text: https://www.python.org/dev/peps/pep-0581/

This is my first PEP, and in my opinion it is ready for wider discussion. I
don't know if it is "ready for pronouncement" so I'm hoping to get more
guidance about it from other experienced core devs and steering council.

I also plan to open discussion about PEP 581 at Python Language Summit, and
since I'm one-half of the language summit chairs, it is quite likely this
discussion will happen.

On that note, you can still sign up for the language summit here:
https://us.pycon.org/2019/events/language-summit/

Note that unlike previous years, you do not need to be invited by a core
developer. ?ukasz and I will be curating the content, and we want to
include more diverse perspectives into language summit discussions.

Thanks.

?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190307/e2783988/attachment.html>

From sadhak001 at gmail.com  Thu Mar  7 15:27:49 2019
From: sadhak001 at gmail.com (Mani Sarkar)
Date: Thu, 7 Mar 2019 20:27:49 +0000
Subject: [Python-Dev] Loading modules from a folder
In-Reply-To: <CAP1=2W7JbhY0OyAANBNs7ar7WOm+_5hNnVWZbT6yqKub0VHXpw@mail.gmail.com>
References: <CAGHtMW=DpdzH_S-AVqwcEqB__2k4cGiXKfrsPkseQ+PZaMLAhg@mail.gmail.com>
 <CAP1=2W7JbhY0OyAANBNs7ar7WOm+_5hNnVWZbT6yqKub0VHXpw@mail.gmail.com>
Message-ID: <CAGHtMWmpsQvRW4NS8fMind8XdMw+G2oLyJ4QbuV2OUvd0xgTJg@mail.gmail.com>

Cool, thanks!

My apologies - i'll post the question there instead.

On Thu, 7 Mar 2019 at 18:41 Brett Cannon <brett at python.org> wrote:

> This mailing list is actually for the development *of* Python, not *with*
> Python. You can try asking your question on Stack Overflow, python tutor,
> or python-list.
>
> On Thu, Mar 7, 2019 at 9:28 AM Mani Sarkar <sadhak001 at gmail.com> wrote:
>
>> Hi,
>>
>> I have seen multiple ways to load modules from a folder.
>>
>> Say I have a folder src which contains a number of folders each one of
>> them is a module.
>>
>> What are the conventional ways to load modules from such a folder?
>>
>> I have used
>>
>> From src.[module] import xxxxx
>>
>> But I don't want to use the src prefix, any other ways to indicate that
>> in python?
>>
>> Thanks
>>
>> Cheers,
>> Mani
>> --
>>
>> @theNeomatrix369 <http://twitter.com/theNeomatrix369>*  |  **Blog
>> <http://neomatrix369.wordpress.com/>**  | *@adoptopenjdk
>> <http://twitter.com/adoptopenjdk> @graalvm <http://twitter.com/graalvm>
>> @graal <http://twitter.com/graal> @truffleruby
>> <http://twitter.com/truffleruby> | Dev. communities | *Bitbucket
>> <https://bitbucket.org/neomatrix369>* * |  **Github
>> <https://github.com/neomatrix369>* * | * *Slideshare
>> <https://slideshare.net/neomatrix369>* * | **LinkedIn
>> <http://uk.linkedin.com/pub/mani-sarkar/71/a77/39b>*
>> *Come to Devoxx UK 2019:* http://www.devoxx.co.uk/
>>
>> *Don't chase success, rather aim for "Excellence", and success will come
>> chasing after you!*
>>
> _______________________________________________
>> Python-Dev mailing list
>> Python-Dev at python.org
>> https://mail.python.org/mailman/listinfo/python-dev
>> Unsubscribe:
>> https://mail.python.org/mailman/options/python-dev/brett%40python.org
>>
> --

@theNeomatrix369 <http://twitter.com/theNeomatrix369>*  |  **Blog
<http://neomatrix369.wordpress.com/>**  | *@adoptopenjdk
<http://twitter.com/adoptopenjdk> @graalvm <http://twitter.com/graalvm>
@graal <http://twitter.com/graal> @truffleruby
<http://twitter.com/truffleruby> | Dev. communities | *Bitbucket
<https://bitbucket.org/neomatrix369>* * |  **Github
<https://github.com/neomatrix369>* * | * *Slideshare
<https://slideshare.net/neomatrix369>* * | **LinkedIn
<http://uk.linkedin.com/pub/mani-sarkar/71/a77/39b>*
*Come to Devoxx UK 2019:* http://www.devoxx.co.uk/

*Don't chase success, rather aim for "Excellence", and success will come
chasing after you!*
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190307/b6631977/attachment.html>

From matthew at woodcraft.me.uk  Thu Mar  7 14:56:41 2019
From: matthew at woodcraft.me.uk (Matthew Woodcraft)
Date: Thu, 07 Mar 2019 19:56:41 +0000
Subject: [Python-Dev] PEP 581: Using GitHub Issues for CPython
Message-ID: <1551988232.oqg8xuvpxk.astroid@golux.woodcraft.me.uk>

On 07/03/2019 19.08, Mariatta wrote:
> I'd like to formally present to Python-dev PEP 581: Using GitHub Issues
> for CPython
>
> Full text: https://www.python.org/dev/peps/pep-0581/
>
> This is my first PEP, and in my opinion it is ready for wider
> discussion.

One part of this PEP stands out to me:

| We should not be moving all open issues to GitHub. Issues with little
| or no activity should just be closed. Issues with no decision made for
| years should just be closed.

I strongly advise against closing bug reports just because they're old.

I know that the Python developers value trying to be a welcoming
community. To many people, having a bug report that they put some effort
into closed for no reason other than the passage of time feels like a
slap in the face which stings harder than, for example, intemperate
words on a mailing list.

This is even more true if there won't be an option to re-open the bug,
which seems to be what the PEP is saying will be the case.

If a bug has been around for a long time and hasn't been fixed, the most
useful information for the bug tracker to contain is "this bug has been
around for a long time and it hasn't been fixed". Leaving the bug open
is the simplest way to achieve that.

(I think the above only goes for issues which are actually reporting
bugs. Wishlist items are a different matter.)

-M-



From skip.montanaro at gmail.com  Thu Mar  7 17:01:55 2019
From: skip.montanaro at gmail.com (Skip Montanaro)
Date: Thu, 7 Mar 2019 16:01:55 -0600
Subject: [Python-Dev] PEP 581: Using GitHub Issues for CPython
In-Reply-To: <CAGbohnZMUfGwzfhzqp1QEyhuuVEFeAWe8XVs+=p_MqZ2zkq+ew@mail.gmail.com>
References: <CAGbohnZMUfGwzfhzqp1QEyhuuVEFeAWe8XVs+=p_MqZ2zkq+ew@mail.gmail.com>
Message-ID: <CANc-5UwodQb0uLPA1viNk4wx5hvvmKbHOOGjejY6Peh8a_5syg@mail.gmail.com>

> I'd like to formally present to Python-dev PEP 581: Using GitHub Issues for CPython
>
> Full text: https://www.python.org/dev/peps/pep-0581/

Thanks for doing this. I think there is a pretty strong argument to be
made that mature, widely adopted systems like GitHub (or GitLab or
Bitbucket) should be used where possible. One thing I didn't notice
was any sort of explanation about how CPython wound up on Roundup to
begin with. I think it would be worthwhile to mention a couple
reasons, when the decision was made to use Roundup, etc. Without it, a
casual reader might think the core devs made a horrible mistake way
back when, and are only now getting around to correcting it. I don't
recall when Roundup was adopted, but it was quite awhile ago, and the
issue tracker universe was a much different place. Here are a couple
things I recall (perhaps incorrectly). It's been awhile, but for the
digital spelunkers, I'm sure it's all in an email archive somewhere.
(I didn't find a PEP. Did that decision predate PEPs?)

* Back in the olden days, basically every candidate issue tracker
required modification to make it suitable for a particular project. I
don't rightly recall if Roundup was deemed easier to modify or if
there were just people willing to step up and make the necessary
changes.

* There was a desire to eat your own dog food, and I believe Roundup
is/was written in Python. That would be much less important today.
Plenty of people already eat Python brand Dog Food.?

Skip

From mariatta at python.org  Thu Mar  7 17:11:49 2019
From: mariatta at python.org (Mariatta)
Date: Thu, 7 Mar 2019 14:11:49 -0800
Subject: [Python-Dev] PEP 581: Using GitHub Issues for CPython
In-Reply-To: <1551988232.oqg8xuvpxk.astroid@golux.woodcraft.me.uk>
References: <1551988232.oqg8xuvpxk.astroid@golux.woodcraft.me.uk>
Message-ID: <CAGbohnbjzWaaMa3z_Sj=48HOD0YBSYyZB5eNKiUO8CZ7tV9oxw@mail.gmail.com>

On Thu, Mar 7, 2019 at 12:35 PM Matthew Woodcraft <matthew at woodcraft.me.uk>
wrote:

>
> One part of this PEP stands out to me:
>
> | We should not be moving all open issues to GitHub. Issues with little
> | or no activity should just be closed. Issues with no decision made for
> | years should just be closed.
>
> I strongly advise against closing bug reports just because they're old.
>
> I know that the Python developers value trying to be a welcoming
> community. To many people, having a bug report that they put some effort
> into closed for no reason other than the passage of time feels like a
> slap in the face which stings harder than, for example, intemperate
> words on a mailing list.
>
> This is even more true if there won't be an option to re-open the bug,
> which seems to be what the PEP is saying will be the case.
>
> If a bug has been around for a long time and hasn't been fixed, the most
> useful information for the bug tracker to contain is "this bug has been
> around for a long time and it hasn't been fixed". Leaving the bug open
> is the simplest way to achieve that.
>
> (I think the above only goes for issues which are actually reporting
> bugs. Wishlist items are a different matter.)
>
> -M-
>


Thanks. A similar argument had been made by several other core devs in
person during Language summit 2018 as well as during the drafting of PEP
581, that we shouldn't be closing issues blindly.

I hear you (all) and I see the point. I agree that we shouldn't just be
closing all issues. I will edit the PEP sometime later today (or later this
weekend).


?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190307/762e2e35/attachment.html>

From mariatta at python.org  Thu Mar  7 17:16:36 2019
From: mariatta at python.org (Mariatta)
Date: Thu, 7 Mar 2019 14:16:36 -0800
Subject: [Python-Dev] PEP 581: Using GitHub Issues for CPython
In-Reply-To: <CA+VECoVi63oLbe7rdF_S1-P0rpUyQpKsObYqRGOBJD7W_mGZEg@mail.gmail.com>
References: <CAGbohnZMUfGwzfhzqp1QEyhuuVEFeAWe8XVs+=p_MqZ2zkq+ew@mail.gmail.com>
 <CA+VECoVi63oLbe7rdF_S1-P0rpUyQpKsObYqRGOBJD7W_mGZEg@mail.gmail.com>
Message-ID: <CAGbohnZQk4Voeb0xW9gUuHQS3j-bhvqqq+JJ_KJ_b=aXC4k=3Q@mail.gmail.com>

On Thu, Mar 7, 2019 at 12:36 PM Manuel Cer?n <ceronman at gmail.com> wrote:

>
> After some frustration with bpo, I decided to file some issues into the
> meta tracker, just to find out that the link [1] provided by the Python
> Developer's Guide [2] is broken, giving a connection timeout.
>
>
Sometime ago we've started experimenting moving the meta tracker to GitHub.
https://github.com/python/bugs.python.org I don't know whether this is now
the "official" place for it, but I've definitely been referring people to
this repo if they need to file issue about bpo.

Again I don't know if this is now official or not, and should we start
updating all documentations accordingly?

?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190307/4cf1a916/attachment.html>

From mariatta at python.org  Thu Mar  7 17:36:11 2019
From: mariatta at python.org (Mariatta)
Date: Thu, 7 Mar 2019 14:36:11 -0800
Subject: [Python-Dev] PEP 581: Using GitHub Issues for CPython
In-Reply-To: <CANc-5UwodQb0uLPA1viNk4wx5hvvmKbHOOGjejY6Peh8a_5syg@mail.gmail.com>
References: <CAGbohnZMUfGwzfhzqp1QEyhuuVEFeAWe8XVs+=p_MqZ2zkq+ew@mail.gmail.com>
 <CANc-5UwodQb0uLPA1viNk4wx5hvvmKbHOOGjejY6Peh8a_5syg@mail.gmail.com>
Message-ID: <CAGbohnbP0vZ-+RHV+B3gWGg5P-LOWrTtRBG38cRfNkbm8m+G2A@mail.gmail.com>

On Thu, Mar 7, 2019 at 2:02 PM Skip Montanaro <skip.montanaro at gmail.com>
wrote:

>  I think it would be worthwhile to mention a couple
> reasons, when the decision was made to use Roundup, etc. Without it, a
> casual reader might think the core devs made a horrible mistake way
> back when, and are only now getting around to correcting it.
>

I was not involved in core Python development back then, so if it is really
important and if people think such paragraph needs to be part of the PEP,
then perhaps someone else more knowledgeable will need to help with this.

Personally, I don't think it was a horrible mistake. I believe the core
devs back then carefully considered all options and decided that
bpo/roundup was the way to go. And I really don't want to give that
impression to the readers of this PEP that "I" or "core devs" now think it
was a horrible mistake. If there is specific parts of the PEP that gives
people that impression, then I'd definitely want to work and improve that.

?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190307/9205084b/attachment.html>

From greg at krypto.org  Thu Mar  7 17:51:01 2019
From: greg at krypto.org (Gregory P. Smith)
Date: Thu, 7 Mar 2019 14:51:01 -0800
Subject: [Python-Dev] PEP 581: Using GitHub Issues for CPython
In-Reply-To: <CAGbohnbjzWaaMa3z_Sj=48HOD0YBSYyZB5eNKiUO8CZ7tV9oxw@mail.gmail.com>
References: <1551988232.oqg8xuvpxk.astroid@golux.woodcraft.me.uk>
 <CAGbohnbjzWaaMa3z_Sj=48HOD0YBSYyZB5eNKiUO8CZ7tV9oxw@mail.gmail.com>
Message-ID: <CAGE7PNLMGuJgmYgsZH635YANK71RO6oohh7EgjFGo3UsRrouNw@mail.gmail.com>

On Thu, Mar 7, 2019 at 2:12 PM Mariatta <mariatta at python.org> wrote:

>
> On Thu, Mar 7, 2019 at 12:35 PM Matthew Woodcraft <matthew at woodcraft.me.uk>
> wrote:
>
>>
>> One part of this PEP stands out to me:
>>
>> | We should not be moving all open issues to GitHub. Issues with little
>> | or no activity should just be closed. Issues with no decision made for
>> | years should just be closed.
>>
>> I strongly advise against closing bug reports just because they're old.
>>
>> I know that the Python developers value trying to be a welcoming
>> community. To many people, having a bug report that they put some effort
>> into closed for no reason other than the passage of time feels like a
>> slap in the face which stings harder than, for example, intemperate
>> words on a mailing list.
>>
>> This is even more true if there won't be an option to re-open the bug,
>> which seems to be what the PEP is saying will be the case.
>>
>> If a bug has been around for a long time and hasn't been fixed, the most
>> useful information for the bug tracker to contain is "this bug has been
>> around for a long time and it hasn't been fixed". Leaving the bug open
>> is the simplest way to achieve that.
>>
>> (I think the above only goes for issues which are actually reporting
>> bugs. Wishlist items are a different matter.)
>>
>> -M-
>>
>
>
> Thanks. A similar argument had been made by several other core devs in
> person during Language summit 2018 as well as during the drafting of PEP
> 581, that we shouldn't be closing issues blindly.
>
> I hear you (all) and I see the point. I agree that we shouldn't just be
> closing all issues. I will edit the PEP sometime later today (or later this
> weekend).
>

yay thanks! :)

*(because I fixed this SourceForge issue number era
bug https://bugs.python.org/issue1054041
<https://bugs.python.org/issue1054041> in 3.8 :)*
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190307/683658d1/attachment.html>

From mariatta at python.org  Thu Mar  7 18:34:01 2019
From: mariatta at python.org (Mariatta)
Date: Thu, 7 Mar 2019 15:34:01 -0800
Subject: [Python-Dev] PEP 581: Using GitHub Issues for CPython
In-Reply-To: <CAGE7PNLMGuJgmYgsZH635YANK71RO6oohh7EgjFGo3UsRrouNw@mail.gmail.com>
References: <1551988232.oqg8xuvpxk.astroid@golux.woodcraft.me.uk>
 <CAGbohnbjzWaaMa3z_Sj=48HOD0YBSYyZB5eNKiUO8CZ7tV9oxw@mail.gmail.com>
 <CAGE7PNLMGuJgmYgsZH635YANK71RO6oohh7EgjFGo3UsRrouNw@mail.gmail.com>
Message-ID: <CAGbohnb+gx9_Ye-Ad9Qo68GWQCEiexYiv294nZxcgtxOsmREiQ@mail.gmail.com>

I've made the PR about "not closing all issues":
https://github.com/python/peps/pull/917/files


?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190307/ba8700e8/attachment.html>

From greg.ewing at canterbury.ac.nz  Thu Mar  7 18:34:46 2019
From: greg.ewing at canterbury.ac.nz (Greg Ewing)
Date: Fri, 08 Mar 2019 12:34:46 +1300
Subject: [Python-Dev] configparser: should optionxform be idempotent?
In-Reply-To: <CAEfz+Twwyt_U=hgm2SUwP_NPefE2n6KSduFBqaOg6-K4c-NNgQ@mail.gmail.com>
References: <CAEfz+Twwyt_U=hgm2SUwP_NPefE2n6KSduFBqaOg6-K4c-NNgQ@mail.gmail.com>
Message-ID: <5C81AA96.7020204@canterbury.ac.nz>

Inada Naoki wrote:

> a)  Document "optionxform must be idempotent".

> b) Ensure all APIs calls optionxform exactly once, and document
 >    [that it must be idempotent in certain special situations].

I think the question that needs to be asked is whether optionxform
is meant to be a canonicalising operation, or a transformation
from an external to an internal form.

Although the docs don't say so explicitly, it seems clear to me
that the author of the module was thinking of it as a transformation
to a canonical form. If that's what is intended, then idempotency
is pretty much implied, from the definition of what canonical
means. If something is already in canonical form, nothing needs
to be done.

The behaviour with regard to initialising from a dict that was
raised in https://bugs.python.org/issue35838#msg334439 is probably
an oversight, but there are at least two other ways that the
module assumes idempotency:

1) The API does not provide any way of accessing an option
*without* applying the transformation. This is a problem if e.g.
you want to iterate over the keys and write values back.

2) The write() method writes out the transformed versions of
option names. If this output is read back in, the transformation
will necessarily be applied a second time. There doesn't seem
to be any workaround for this.

There may also be other ways in which idempotency is assumed
that I haven't thought of.

So, rather than try to have the docs list all the things that
non-idempotency could break, it would be easier to simply
document that idempotency is assumed.

-- 
Greg

From barry at python.org  Thu Mar  7 18:35:42 2019
From: barry at python.org (Barry Warsaw)
Date: Thu, 7 Mar 2019 15:35:42 -0800
Subject: [Python-Dev] PEP 581: Using GitHub Issues for CPython
In-Reply-To: <CAGbohnbP0vZ-+RHV+B3gWGg5P-LOWrTtRBG38cRfNkbm8m+G2A@mail.gmail.com>
References: <CAGbohnZMUfGwzfhzqp1QEyhuuVEFeAWe8XVs+=p_MqZ2zkq+ew@mail.gmail.com>
 <CANc-5UwodQb0uLPA1viNk4wx5hvvmKbHOOGjejY6Peh8a_5syg@mail.gmail.com>
 <CAGbohnbP0vZ-+RHV+B3gWGg5P-LOWrTtRBG38cRfNkbm8m+G2A@mail.gmail.com>
Message-ID: <4CF3BECF-9E75-4FAF-90AB-131034282956@python.org>

On Mar 7, 2019, at 14:36, Mariatta <mariatta at python.org> wrote:

> I was not involved in core Python development back then, so if it is really important and if people think such paragraph needs to be part of the PEP, then perhaps someone else more knowledgeable will need to help with this.
> 
> Personally, I don't think it was a horrible mistake. I believe the core devs back then carefully considered all options and decided that bpo/roundup was the way to go. And I really don't want to give that impression to the readers of this PEP that "I" or "core devs" now think it was a horrible mistake. If there is specific parts of the PEP that gives people that impression, then I'd definitely want to work and improve that.

I did a little bit of archive archeology (always a frightening and humbling black hole spelunking expedition), and here?s a brief history AFAICT.  Dates are approximate.

5/2000 - we move all development (CVS at the time, and bug tracking) to SourceForge.  This roughly coincided with PythonLabs leaving CNRI, so clearly we couldn?t continue running infra off of their systems.

10/2005 - we move to Subversion

9/2006 - we begin to discuss moving off of the SF bug tracker.  I believe that Thomas Wouters, Martin von Loewis, Brett Cannon (big surprise! :), and myself were involved in that effort, with Richard Jones (original author of Roundup) recusing himself.  The candidates were Roundup, Trac, Jira, and Launchpad.  I think Brett did the first round of feature reviews and comparisons.  David Goodger was also involved.  We did want it to be written in Python and we preferred running it on python.org infra, but neither of these were required criteria.

Jira and Roundup made the first cuts, with Launchpad and Trac being discarded as ?having issues? (I don?t have access in memory or emails to any of those details).  Jira was deemed pretty complex, but Atlassian offered hosting.  Roundup was ?not as polished" back then, but that wasn?t necessarily a negative.  It was easy to use and host, and had a complimentary feature set, but we felt like we needed volunteers to help us keep it going.  Richard Jones of course did fantastic work on the software itself, and we did manage to, um, round up enough volunteers to make it a viable choice.

10/2006 - the decision was made to move to Roundup, and we decided to accept Upfront?s offer to host the instance.

3/2007 - new-bugs-announce was created and notifications of new bugs was redirected to that mailing list.

I?ll disappear down that archive rabbit hole now, which in some cases goes back to 1995.  There are so many fun and scary paths to explore.  See you in 6 months.

jeremy-is-salty-ly y?rs,
-Barry

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: Message signed with OpenPGP
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190307/40a8bc55/attachment-0001.sig>

From greg.ewing at canterbury.ac.nz  Thu Mar  7 18:56:13 2019
From: greg.ewing at canterbury.ac.nz (Greg Ewing)
Date: Fri, 08 Mar 2019 12:56:13 +1300
Subject: [Python-Dev] configparser: should optionxform be idempotent?
In-Reply-To: <CACac1F9y6W8cbkyVLXf1M8UVxExDU=Z8Csvz50NVcF6xqhYu+g@mail.gmail.com>
References: <CAEfz+Twwyt_U=hgm2SUwP_NPefE2n6KSduFBqaOg6-K4c-NNgQ@mail.gmail.com>
 <CACac1F_5MsNeC-pGO7kQRCt7HEAx8yFE2UyVD9i-CFQ3ZDfF8w@mail.gmail.com>
 <20190307123950.GL4465@ando.pearwood.info>
 <CACac1F9y6W8cbkyVLXf1M8UVxExDU=Z8Csvz50NVcF6xqhYu+g@mail.gmail.com>
Message-ID: <5C81AF9D.2060002@canterbury.ac.nz>

Paul Moore wrote:
> There's a subtle difference in the mathematical
> and computing meanings [of idempotent] (around functions
 > with side-effects, which aren't a thing in maths)

Not really an issue here, since optionxform shouldn't be having
side effects if it's sane.

In any case, the word is easy enough to avoid in this case.
We could say something like:

    "The optionxform function transforms option names to a
    canonical form. If the name is already in canonical form,
    it should be returned unchanged."

-- 
Greg

From steve at pearwood.info  Thu Mar  7 19:12:37 2019
From: steve at pearwood.info (Steven D'Aprano)
Date: Fri, 8 Mar 2019 11:12:37 +1100
Subject: [Python-Dev] configparser: should optionxform be idempotent?
In-Reply-To: <5C81AF9D.2060002@canterbury.ac.nz>
References: <CAEfz+Twwyt_U=hgm2SUwP_NPefE2n6KSduFBqaOg6-K4c-NNgQ@mail.gmail.com>
 <CACac1F_5MsNeC-pGO7kQRCt7HEAx8yFE2UyVD9i-CFQ3ZDfF8w@mail.gmail.com>
 <20190307123950.GL4465@ando.pearwood.info>
 <CACac1F9y6W8cbkyVLXf1M8UVxExDU=Z8Csvz50NVcF6xqhYu+g@mail.gmail.com>
 <5C81AF9D.2060002@canterbury.ac.nz>
Message-ID: <20190308001237.GO4465@ando.pearwood.info>

On Fri, Mar 08, 2019 at 12:56:13PM +1300, Greg Ewing wrote:

> In any case, the word is easy enough to avoid in this case.

I don't think we should avoid using standard terminology even if we can. 
Knowledge of standard terminology is useful, and we don't generally make 
a practice of talking about (e.g.) "simultaneously running subtasks" 
when we can say "threads" instead.

You are happy to use the jargon terms "function" and "canonical form" 
without explanation, which I think proves that one person's jargon is 
another's obvious, clear, precise technical terminology.


> We could say something like:
> 
>    "The optionxform function transforms option names to a
>    canonical form. If the name is already in canonical form,
>    it should be returned unchanged."

How about:

    "The optionxform function transforms option names to a
    canonical form. This should be an idempotent function: 
    if the name is already in canonical form, it should be 
    returned unchanged."


requires six extra words, but it uses the correct technical term which 
will be familiar to some proportion of users, while also explaining the 
term for those who aren't familiar with it. We all win!


-- 
Steven

From brett at python.org  Thu Mar  7 19:36:22 2019
From: brett at python.org (Brett Cannon)
Date: Thu, 7 Mar 2019 16:36:22 -0800
Subject: [Python-Dev] PEP 581: Using GitHub Issues for CPython
In-Reply-To: <4CF3BECF-9E75-4FAF-90AB-131034282956@python.org>
References: <CAGbohnZMUfGwzfhzqp1QEyhuuVEFeAWe8XVs+=p_MqZ2zkq+ew@mail.gmail.com>
 <CANc-5UwodQb0uLPA1viNk4wx5hvvmKbHOOGjejY6Peh8a_5syg@mail.gmail.com>
 <CAGbohnbP0vZ-+RHV+B3gWGg5P-LOWrTtRBG38cRfNkbm8m+G2A@mail.gmail.com>
 <4CF3BECF-9E75-4FAF-90AB-131034282956@python.org>
Message-ID: <CAP1=2W76XdXv4j6Km91ALyr3vSsTtALG_4BNiDUTi2VQOntcLQ@mail.gmail.com>

I'll start by saying I don't think a history lesson is important for this
PEP. This is simply a matter of evaluating whether Roundup or GitHub issues
is better for us and in the future. There's no real mistakes to watch out
for or anything (and if there is it's that self-hosting has a cost ;) .

On Thu, Mar 7, 2019 at 3:38 PM Barry Warsaw <barry at python.org> wrote:

> On Mar 7, 2019, at 14:36, Mariatta <mariatta at python.org> wrote:
>
> > I was not involved in core Python development back then, so if it is
> really important and if people think such paragraph needs to be part of the
> PEP, then perhaps someone else more knowledgeable will need to help with
> this.
> >
> > Personally, I don't think it was a horrible mistake. I believe the core
> devs back then carefully considered all options and decided that
> bpo/roundup was the way to go. And I really don't want to give that
> impression to the readers of this PEP that "I" or "core devs" now think it
> was a horrible mistake. If there is specific parts of the PEP that gives
> people that impression, then I'd definitely want to work and improve that.
>
> I did a little bit of archive archeology (always a frightening and
> humbling black hole spelunking expedition), and here?s a brief history
> AFAICT.  Dates are approximate.
>
> 5/2000 - we move all development (CVS at the time, and bug tracking) to
> SourceForge.  This roughly coincided with PythonLabs leaving CNRI, so
> clearly we couldn?t continue running infra off of their systems.
>
> 10/2005 - we move to Subversion
>
> 9/2006 - we begin to discuss moving off of the SF bug tracker.  I believe
> that Thomas Wouters, Martin von Loewis, Brett Cannon (big surprise! :), and
> myself were involved in that effort, with Richard Jones (original author of
> Roundup) recusing himself.  The candidates were Roundup, Trac, Jira, and
> Launchpad.  I think Brett did the first round of feature reviews and
> comparisons.  David Goodger was also involved.  We did want it to be
> written in Python and we preferred running it on python.org infra, but
> neither of these were required criteria.
>

This was actually my first infrastructure project and how I ended up on the
PSF board and the head of the infrastructure group. :)


>
> Jira and Roundup made the first cuts, with Launchpad and Trac being
> discarded as ?having issues? (I don?t have access in memory or emails to
> any of those details).  Jira was deemed pretty complex, but Atlassian
> offered hosting.  Roundup was ?not as polished" back then, but that wasn?t
> necessarily a negative.  It was easy to use and host, and had a
> complimentary feature set, but we felt like we needed volunteers to help us
> keep it going.  Richard Jones of course did fantastic work on the software
> itself, and we did manage to, um, round up enough volunteers to make it a
> viable choice.
>
> 10/2006 - the decision was made to move to Roundup, and we decided to
> accept Upfront?s offer to host the instance.


You're missing the step of "the decision was made to move to Jira and
people flipped out." :) We actually said Jira was our choice unless enough
people came forward to volunteer to help support us using Roundup. In the
end enough people did step forward and people didn't like us using Java and
a closed-source solution, so we went with Roundup (this is when RMS got
involved and asked us to reconsider; this is also when I learned that
volunteers saying they will help with something doesn't mean they actually
will, especially when they have no established reputation ;) .

The original announcement can be found at
https://mail.python.org/pipermail/python-dev/2006-October/069139.html.

-Brett


> 3/2007 - new-bugs-announce was created and notifications of new bugs was
> redirected to that mailing list.
>
> I?ll disappear down that archive rabbit hole now, which in some cases goes
> back to 1995.  There are so many fun and scary paths to explore.  See you
> in 6 months.
>
> jeremy-is-salty-ly y?rs,
> -Barry
>
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/brett%40python.org
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190307/56c8ede0/attachment.html>

From brett at python.org  Thu Mar  7 19:38:53 2019
From: brett at python.org (Brett Cannon)
Date: Thu, 7 Mar 2019 16:38:53 -0800
Subject: [Python-Dev] PEP 12 updated with templates for header fields and
 sections
Message-ID: <CAP1=2W77qwvoqraaGCRUsA_C_Y8yr1MTLKUvG8t1s+0jRSBuug@mail.gmail.com>

https://github.com/python/peps/blob/master/pep-0012.rst now has a complete
list of header fields along with format clues for easier copy-and-paste use
in creating a new PEP. There is also a section template with one-liner
explanations for what each section is for so people don't accidentally
leave anything out. They are not in a single, unified template to copy to
partially make sure people actually read the PEP before they start writing.
:)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190307/cd2f20e9/attachment.html>

From steve at pearwood.info  Thu Mar  7 20:42:21 2019
From: steve at pearwood.info (Steven D'Aprano)
Date: Fri, 8 Mar 2019 12:42:21 +1100
Subject: [Python-Dev] Using CLA assistant for Python contributions
In-Reply-To: <CAGbohnbpnjLcbXHy9x6CtOY9KRRu5NEasUnkoQ0r32iq7STV7w@mail.gmail.com>
References: <CAGbohnbpnjLcbXHy9x6CtOY9KRRu5NEasUnkoQ0r32iq7STV7w@mail.gmail.com>
Message-ID: <20190308014221.GB12502@ando.pearwood.info>

On Thu, Mar 07, 2019 at 10:49:50AM -0800, Mariatta wrote:

> Unless I hear strong opposition (with reasons) from Python Steering
> Council, Python core developers, and active core contributors, I plan to
> switch us over to to CLA assistant in the coming week (before my OOOS of
> March 18)

OOOS? Object Oriented Operating System?


> How this will affect all contributors to Python old and new:
> 
> - you will need to sign the CLA again, even if you've signed it before (in
> bpo). It will take you several clicks, 

If this is a Github thing, it will probably take me a lot more than 
several clicks. It will probably take me a whole OS upgrade.


> but then you'll do this only once,
> and it takes effect immediately. (instead of waiting for a PSF staff to
> check for it)

I don't have an opinion on the specific technology you use for future 
CLAs. If CLA Assistant is the tool you want to use for future 
contributors, then go for it.

But I think it is ... I need a word weaker than rude ... ill-mannered(?) 
to ask people to re-sign an agreement they have already signed, without 
a really good reason.

I suppose it can be forgiven if:

- the signing process is straight-forward and easy;
- and supporting the legacy CLAs is particularly difficult;

but if the existing CLAs haven't expired, haven't been revoked, and 
there's no legal reason why they are no longer in force, then why 
are you asking us to re-sign?

I will if I really must, but I'll feel put out over it.


-- 
Steven

From mariatta at python.org  Thu Mar  7 21:22:11 2019
From: mariatta at python.org (Mariatta)
Date: Thu, 7 Mar 2019 18:22:11 -0800
Subject: [Python-Dev] Using CLA assistant for Python contributions
In-Reply-To: <20190308014221.GB12502@ando.pearwood.info>
References: <CAGbohnbpnjLcbXHy9x6CtOY9KRRu5NEasUnkoQ0r32iq7STV7w@mail.gmail.com>
 <20190308014221.GB12502@ando.pearwood.info>
Message-ID: <CAGbohnbkxefa=LDAbh+yKfxmchQMugqbDTwVnWqFQX2hrAiQGQ@mail.gmail.com>

>
> I plan to
> > switch us over to to CLA assistant in the coming week (before my OOOS of
> > March 18)
> OOOS?


My Out Of Open Source aka I'm not doing any volunteer activities for 6
weeks (details:
https://discuss.python.org/t/mariatta-will-be-ooos-out-of-open-source-starting-march-18-may-9th-2019/973/3
)



> - the signing process is straight-forward and easy;


Yes it really is straight forward and easy. Everything happens on the
browser on GitHub. If you can open GitHub webpage then you can sign the CLA
via CLA assistant, no additional program/downloading/command line is
needed. It can be done with computer or your modern smartphone or
tablet/iPad with internet connection.


?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190307/45cddafe/attachment.html>

From mariatta at python.org  Thu Mar  7 21:30:00 2019
From: mariatta at python.org (Mariatta)
Date: Thu, 7 Mar 2019 18:30:00 -0800
Subject: [Python-Dev] Using CLA assistant for Python contributions
In-Reply-To: <CAGbohnbkxefa=LDAbh+yKfxmchQMugqbDTwVnWqFQX2hrAiQGQ@mail.gmail.com>
References: <CAGbohnbpnjLcbXHy9x6CtOY9KRRu5NEasUnkoQ0r32iq7STV7w@mail.gmail.com>
 <20190308014221.GB12502@ando.pearwood.info>
 <CAGbohnbkxefa=LDAbh+yKfxmchQMugqbDTwVnWqFQX2hrAiQGQ@mail.gmail.com>
Message-ID: <CAGbohnb68713hzrXXxWPrHtd+su0xRWrUYmEGBF6jJ=po1CbJw@mail.gmail.com>

Thought I'll be a little more clearer: you'll need to re-sign the CLA only
for your future contributions (aka when you make new pull request to
Python).

Your previous CLA record are still available for The PSF, we're just not
going to export over data from existing CLA host to CLA assistant.
?
?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190307/99530d8e/attachment.html>

From songofacandy at gmail.com  Thu Mar  7 21:51:25 2019
From: songofacandy at gmail.com (Inada Naoki)
Date: Fri, 8 Mar 2019 11:51:25 +0900
Subject: [Python-Dev] configparser: should optionxform be idempotent?
In-Reply-To: <20190308001237.GO4465@ando.pearwood.info>
References: <CAEfz+Twwyt_U=hgm2SUwP_NPefE2n6KSduFBqaOg6-K4c-NNgQ@mail.gmail.com>
 <CACac1F_5MsNeC-pGO7kQRCt7HEAx8yFE2UyVD9i-CFQ3ZDfF8w@mail.gmail.com>
 <20190307123950.GL4465@ando.pearwood.info>
 <CACac1F9y6W8cbkyVLXf1M8UVxExDU=Z8Csvz50NVcF6xqhYu+g@mail.gmail.com>
 <5C81AF9D.2060002@canterbury.ac.nz> <20190308001237.GO4465@ando.pearwood.info>
Message-ID: <CAEfz+TzEXdrD0-XMJh9MSftjm+tU-9Bqjzo+FRpcAmFsb9dMkw@mail.gmail.com>

>
> > We could say something like:
> >
> >    "The optionxform function transforms option names to a
> >    canonical form. If the name is already in canonical form,
> >    it should be returned unchanged."
>
> How about:
>
>     "The optionxform function transforms option names to a
>     canonical form. This should be an idempotent function:
>     if the name is already in canonical form, it should be
>     returned unchanged."
>
>
> requires six extra words, but it uses the correct technical term which
> will be familiar to some proportion of users, while also explaining the
> term for those who aren't familiar with it. We all win!
>

Thank you for suggestions.

Personally speaking, I think technical jargon is much easier than
normal English idioms or complex English syntax.

I learned "idempotent" long ago while learning HTTP.  On the other hand,
I don't know normal English idioms even 5-year children who speaks
English at home knows.

Technical jargon is good tool to communicate with people uses English
only for programming.  It shows the meaning very clearly with few words.

So I agree with you.  If reader may not know tech jargon widely used,
teach it instead of avoid it.

Regards,
-- 
Inada Naoki  <songofacandy at gmail.com>

From tir.karthi at gmail.com  Fri Mar  8 01:49:00 2019
From: tir.karthi at gmail.com (Karthikeyan)
Date: Fri, 8 Mar 2019 12:19:00 +0530
Subject: [Python-Dev] PEP 581: Using GitHub Issues for CPython
In-Reply-To: <CAGbohnZMUfGwzfhzqp1QEyhuuVEFeAWe8XVs+=p_MqZ2zkq+ew@mail.gmail.com>
References: <CAGbohnZMUfGwzfhzqp1QEyhuuVEFeAWe8XVs+=p_MqZ2zkq+ew@mail.gmail.com>
Message-ID: <CAAjsFLRbO9myg_2VhOZJP+_EvTg3cXE3nKf+t6KOxa4sV6jOpg@mail.gmail.com>

On Fri, Mar 8, 2019 at 12:41 AM Mariatta <mariatta at python.org> wrote:

> I'd like to formally present to Python-dev PEP 581: Using GitHub Issues
> for CPython
>
> Full text: https://www.python.org/dev/peps/pep-0581/
>
>
Thanks a lot for doing this!

* The current bug tracker has low contributions and moving to a place like
GitHub would open up to a lot of opportunities like integrations, webhooks
where people can build custom workflow etc. along with reducing the
maintenance burden on the team.
* GitHub also allows markdown and syntax highlighting on code snippets
would be much easier to read compared to current tracker. In some cases
GitHub can even inline the code for a permalink to a single line which adds
more context. Also support for editing comments to fix minor typos links
are great. Emoji support :)
* The current bpo search is surprisingly very effective though it just does
substring search across comments and patches I believe. If not I can google
keywords with site:bugs.python.org to get relevant results. I expect search
to be better on GitHub but worth experimenting since searching to get
related issues/discussion helps a lot in triaging.

Some points worth considering and some of them are addressed in the PEP
already.

* Moving to GitHub also comes at a cost of accessibility where there might
be people posting questions that are more suitable for stackoverflow,
python-list etc. Thus there might be more incoming issues that would
require more effort on triaging.
* There could be explicit guidelines on when a triager should close an
issue and current bpo supports custom fields for resolution, state of the
issue (open/close/pending/needs-test/patch-review)  that are updated.
Besides closing the issue there could be labels or a comment format to
describe the rationale and resolution.
* There could also be guidelines on when to lock the thread since there
could be cases where security issues or issues that can trigger heated
arguments are posted. It could get even more attention when it's posted on
Reddit or hackernews attracting unwanted attention e.g. security issues in
npm posted to reddit. Someone can chime in to lock it but guidelines on
when to do this would be helpful so that decision is not based on personal
opinion to lock it.
* Extended discussions in some cases along with no proper support for
threading could result in lot of duplicated messages that would be hard to
scroll through. It's a problem with current tracker too but something that
can come up where people will use +1 comments instead of using thumbs up
emoji. Rust community had some similar concerns since they do RFC
discussions on GitHub that result in 200+ comments. Though we don't do PEP
discussions some bugs can result in this.
* I wish python-bug-list, weekly summary continues to be integrated with
GitHub too since some of us don't want to watch the repo to get all the
activity along with pull requests and just want to track activity on issues.
* Currently there is some link rot on bpo for svn related links, broken
patch file links etc. Moving to GitHub I guess they are handled like magic
links for PEPs, bpo-NNNN, etc. that are mentioned in the PEP 581.

Personally, I think more people will love it once they get to use it so if
something like 100 issues can be migrated to a sample repo with labels,
content etc. As a shameless plug I tried migrating around 150 issues in
current bpo to GitLab sometime back with components as labels. Though an
apple to oranges comparison (GitLab UI vs GitHub UI) I personally find the
UI (also GitHub UI) very easy to navigate in terms of clicking on labels,
search, sort, filter etc. in https://gitlab.com/tirkarthi/python-bugs/issues
and the issue is more easy to read with markdown support for code where I
added highlight to snippet
https://gitlab.com/tirkarthi/python-bugs/issues/140

-- 
Regards,
Karthikeyan S
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190308/88e103cb/attachment-0001.html>

From p.f.moore at gmail.com  Fri Mar  8 02:25:37 2019
From: p.f.moore at gmail.com (Paul Moore)
Date: Fri, 8 Mar 2019 07:25:37 +0000
Subject: [Python-Dev] Using CLA assistant for Python contributions
In-Reply-To: <CAGbohnb68713hzrXXxWPrHtd+su0xRWrUYmEGBF6jJ=po1CbJw@mail.gmail.com>
References: <CAGbohnbpnjLcbXHy9x6CtOY9KRRu5NEasUnkoQ0r32iq7STV7w@mail.gmail.com>
 <20190308014221.GB12502@ando.pearwood.info>
 <CAGbohnbkxefa=LDAbh+yKfxmchQMugqbDTwVnWqFQX2hrAiQGQ@mail.gmail.com>
 <CAGbohnb68713hzrXXxWPrHtd+su0xRWrUYmEGBF6jJ=po1CbJw@mail.gmail.com>
Message-ID: <CACac1F_fB3uSb=z8zhj6M1PtNgkj3RhJRc7gM8afkpTxsHVfXQ@mail.gmail.com>

On Fri, 8 Mar 2019 at 02:32, Mariatta <mariatta at python.org> wrote:
>
> Thought I'll be a little more clearer: you'll need to re-sign the CLA only for your future contributions (aka when you make new pull request to Python).

My preference would be to just re-sign the CLA *immediately*, and not
wait for when I have a PR - I presume that would be
possible/supported. Instructions on how to do so when the switchover
happens would be useful.

Paul

PS I would also prefer not to have to re-sign, but just have my
existing confirmation carried over. I don't *know* if there are any
implications at my end around re-signing, and my preference is simply
to not ask that question (on the basis of why make things harder for
myself). But if it's needed, then fair enough.

From p.f.moore at gmail.com  Fri Mar  8 02:30:09 2019
From: p.f.moore at gmail.com (Paul Moore)
Date: Fri, 8 Mar 2019 07:30:09 +0000
Subject: [Python-Dev] configparser: should optionxform be idempotent?
In-Reply-To: <5C81AF9D.2060002@canterbury.ac.nz>
References: <CAEfz+Twwyt_U=hgm2SUwP_NPefE2n6KSduFBqaOg6-K4c-NNgQ@mail.gmail.com>
 <CACac1F_5MsNeC-pGO7kQRCt7HEAx8yFE2UyVD9i-CFQ3ZDfF8w@mail.gmail.com>
 <20190307123950.GL4465@ando.pearwood.info>
 <CACac1F9y6W8cbkyVLXf1M8UVxExDU=Z8Csvz50NVcF6xqhYu+g@mail.gmail.com>
 <5C81AF9D.2060002@canterbury.ac.nz>
Message-ID: <CACac1F8Ob5JdVzBEK0N9V26_VXJPB6G_D2c+Gv_FNfFZYfCSRQ@mail.gmail.com>

On Thu, 7 Mar 2019 at 23:58, Greg Ewing <greg.ewing at canterbury.ac.nz> wrote:
>
> Paul Moore wrote:
> > There's a subtle difference in the mathematical
> > and computing meanings [of idempotent] (around functions
>  > with side-effects, which aren't a thing in maths)
>
> Not really an issue here, since optionxform shouldn't be having
> side effects if it's sane.
>
> In any case, the word is easy enough to avoid in this case.
> We could say something like:
>
>     "The optionxform function transforms option names to a
>     canonical form. If the name is already in canonical form,
>     it should be returned unchanged."
>

Precisely. +1 on this wording if we choose to go this way.

If someone *really* wants to link the idea to the term "idempotent"
then a simple "(i.e., the function must be idempotent)" would be
sufficient to confirm for people who know the term, avoid making it
unclear for people who don't, and teach people who don't the meaning
of the term.

Paul

From p.f.moore at gmail.com  Fri Mar  8 02:33:26 2019
From: p.f.moore at gmail.com (Paul Moore)
Date: Fri, 8 Mar 2019 07:33:26 +0000
Subject: [Python-Dev] configparser: should optionxform be idempotent?
In-Reply-To: <CAEfz+TzEXdrD0-XMJh9MSftjm+tU-9Bqjzo+FRpcAmFsb9dMkw@mail.gmail.com>
References: <CAEfz+Twwyt_U=hgm2SUwP_NPefE2n6KSduFBqaOg6-K4c-NNgQ@mail.gmail.com>
 <CACac1F_5MsNeC-pGO7kQRCt7HEAx8yFE2UyVD9i-CFQ3ZDfF8w@mail.gmail.com>
 <20190307123950.GL4465@ando.pearwood.info>
 <CACac1F9y6W8cbkyVLXf1M8UVxExDU=Z8Csvz50NVcF6xqhYu+g@mail.gmail.com>
 <5C81AF9D.2060002@canterbury.ac.nz> <20190308001237.GO4465@ando.pearwood.info>
 <CAEfz+TzEXdrD0-XMJh9MSftjm+tU-9Bqjzo+FRpcAmFsb9dMkw@mail.gmail.com>
Message-ID: <CACac1F-FKU_WPMuaqDN1PpoQW4vOr42eRJeBU5TM7YDZ3NmccQ@mail.gmail.com>

On Fri, 8 Mar 2019 at 02:54, Inada Naoki <songofacandy at gmail.com> wrote:
>
> Personally speaking, I think technical jargon is much easier than
> normal English idioms or complex English syntax.
>
> I learned "idempotent" long ago while learning HTTP.  On the other hand,
> I don't know normal English idioms even 5-year children who speaks
> English at home knows.
>
> Technical jargon is good tool to communicate with people uses English
> only for programming.  It shows the meaning very clearly with few words.

Thanks for the reminder that the trade-off is different for
non-English speakers - and my apologies for not taking that into
account.

> So I agree with you.  If reader may not know tech jargon widely used,
> teach it instead of avoid it.

Your point is taken, let's include the term in the explanation, but
let's also spell out the behaviour for people who don't know the term
(or who simply find it less familiar because it's not something
commonly used in areas they work in).

Paul


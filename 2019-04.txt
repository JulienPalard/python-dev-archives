From J.Demeyer at UGent.be  Mon Apr  1 01:31:03 2019
From: J.Demeyer at UGent.be (Jeroen Demeyer)
Date: Mon, 1 Apr 2019 07:31:03 +0200
Subject: [Python-Dev] PEP 580/590 discussion
In-Reply-To: <5C9FEF82.50207@UGent.be>
References: <CADiSq7f7GRJjZmoLAxpN5hovMT5=M73aJUi14HHFDNG=hssV7w@mail.gmail.com>
 <6c8356e3-f9b2-c39e-63c4-17f146d326b7@hotpy.org>
 <CA+=+wqBsUKWHRqjhRFShmY77vaxDPTFaafWtOB8dnyXQSthiZw@mail.gmail.com>
 <15b8a3d7-00ed-a5eb-475c-a3adee671b5f@hotpy.org> <5C9FEF82.50207@UGent.be>
Message-ID: <5CA1A217.1030007@UGent.be>

I added benchmarks for PEP 590:

https://gist.github.com/jdemeyer/f0d63be8f30dc34cc989cd11d43df248

From songofacandy at gmail.com  Mon Apr  1 04:26:31 2019
From: songofacandy at gmail.com (Inada Naoki)
Date: Mon, 1 Apr 2019 17:26:31 +0900
Subject: [Python-Dev] Removing PendingDeprecationWarning
In-Reply-To: <CADiSq7etd9fs2OmmoWMYzuzLxe793PpmCd=8Mrv+tdmFjwdZ=Q@mail.gmail.com>
References: <CAEfz+Tzht97YUsYXFjErc4uKP3J89Yx2ycqhbfk=OkY0w37Yog@mail.gmail.com>
 <CADiSq7d-01UmD9tDg-VEotMGpUSpXgbH8TuuDQFCKWi7jC-39Q@mail.gmail.com>
 <CAEfz+Tzak3XDzSqV=JwWOZN4MkEK8RCTh7rQuNZijVbZ3pE_Aw@mail.gmail.com>
 <CADiSq7eagL+3ZSPvveUocF9-3OB5B_ryyH0DNMTZD72sOJoG7w@mail.gmail.com>
 <CAEfz+Tzj5uh3K9yOF-k+1S1_s_32CSz2_Ad4kB6WH+Y7m_c1BA@mail.gmail.com>
 <CAEfz+TxwTgN=cu0t1OoKqNdJTSrNpvYkVvqUoTHOsE4RgQA9OA@mail.gmail.com>
 <18ccdacf-8fc8-5130-b4ba-89df84e02987@python.org>
 <CAEfz+TytJj=oMXKUE5T8dJj0Jq6ZRp6Uex-JSwmpSaOt39Mx2Q@mail.gmail.com>
 <CADiSq7etd9fs2OmmoWMYzuzLxe793PpmCd=8Mrv+tdmFjwdZ=Q@mail.gmail.com>
Message-ID: <CAEfz+TzAv_oHVk0k2Bnh1KKETCdG=u63kR=bZrsCt2WT+e+QEQ@mail.gmail.com>

On Sat, Mar 30, 2019 at 7:31 PM Nick Coghlan <ncoghlan at gmail.com> wrote:
>
> That's just a documentation fix: "If you're not sure whether to use
> DeprecationWarning or PendingDeprecationWarning, use
> DeprecationWarning".
>

Current proposed patch is:

"""
.. note::
   PendingDeprecationWarning was introduced as an "ignored by default"
   version of DeprecationWarning. But :exc:`DeprecationWarning` is also
   ignored by default since Python 2.7 and 3.2.
   There is not much difference between PendingDeprecationWarning and
   DeprecationWarning nowadays. DeprecationWarning is recommended
   in general.
"""

https://github.com/python/cpython/pull/12505/files#diff-4d7187c7266c3f79727d358de3b3d228

-- 
Inada Naoki  <songofacandy at gmail.com>

From steve.dower at python.org  Mon Apr  1 12:12:26 2019
From: steve.dower at python.org (Steve Dower)
Date: Mon, 1 Apr 2019 09:12:26 -0700
Subject: [Python-Dev] Strange umask(?)/st_mode issue
In-Reply-To: <CAGE7PNLeN1bRFMQMuQ6AFrYYwEzcPYVDhy5hXG-FbRju5FDpCA@mail.gmail.com>
References: <13f98061-6f64-2e8b-de66-d84a7be00a17@python.org>
 <20190330023947.GA62291@cskk.homeip.net>
 <55e6f051-179d-73b4-4cca-b91c5c81b498@python.org>
 <3210441d-6094-b53e-6bf7-4b7c4cfb16ea@python.org>
 <CAGE7PNLeN1bRFMQMuQ6AFrYYwEzcPYVDhy5hXG-FbRju5FDpCA@mail.gmail.com>
Message-ID: <c478fae6-349e-022e-3b70-81470c0a0b5a@python.org>

On 30Mar2019 1130, Gregory P. Smith wrote:
> I wouldn't expect it to be the case in a CI environment but I believe a 
> umask can be overridden if the filesystem is mounted and configured with 
> acls set?? (oh, hah, Ivan just said the same thing)

Yep, it appears this is the case. The Pipelines team got back to me and 
it seems to be a known issue - the workaround they gave me was to run 
"sudo setfacl -Rb /home/vsts" at the start, so I've merged that in for 
now (to master and 3.7).

Cheers,
Steve

From steve.dower at python.org  Mon Apr  1 12:31:36 2019
From: steve.dower at python.org (Steve Dower)
Date: Mon, 1 Apr 2019 09:31:36 -0700
Subject: [Python-Dev] PEP 578: Python Runtime Audit Hooks
In-Reply-To: <8466c9c4-b5dc-c6c5-6fe4-a49dc2f4f968@python.org>
References: <daa13e96-fa07-8703-4d73-234a862baf05@python.org>
 <2cb3740e-ebc2-1839-1d2e-73d1b9f0a445@python.org>
 <ad05e257-d046-bba8-b070-c24c80a1521e@python.org>
 <8466c9c4-b5dc-c6c5-6fe4-a49dc2f4f968@python.org>
Message-ID: <f87504d1-4cc0-e74c-d32e-1e06cde29c39@python.org>

On 31Mar2019 0538, Christian Heimes wrote:
> I don't like the fact that the PEP requires users to learn and use an
> additional layer to handle native code. Although we cannot provide a
> fully secure hook for native code, we could at least try to provide a
> best effort hook and document the limitations. A bit more information
> would make the verified open function more useful, too.

So instead they need to learn a significantly more complicated API? :) 
(I was very happy to be able to say "it's the same as open(p, 'rb')").

> PyObject *PyImport_OpenForExecution(
>      const char *path,
>      const char *intent,
>      int flags,
>      PyObject *context
> )
> 
> - Path is an absolute (!) file path. The PEP doesn't specify if the file
> name is relative or absolute. IMO it should be always absolute.

Yeah, this is fair enough. I'll add it as a requirement.

> - The new intent argument lets the caller pass information how it
> intents to use the file, e.g. pythoncode, zipimport, nativecode (for
> loading a shared library/DLL), ctypes, ... This allows the verify hook
> to react on the intent and provide different verifications for e.g.
> Python code and native modules.

I had an intent argument at one point and the feedback I got (from teams 
who wanted to implement it) is that they wouldn't trust it anyway :)

In each case there should be associated audit events for tracking the 
intent (and interrupting at that point if it doesn't like the intended 
action), but for the simple case of "let me open this specific file" it 
doesn't really add much. And it almost certainly shouldn't impact 
decision making.

> - The flags argument is for additional flags, e.g. return an opened file
> or None, open the file in text or binary mode, ...

This just makes it harder for the hook implementer - now you have to 
allow encoding/errors arguments and probably more. And as mentioned 
above, there should be an audit event showing the intent before this 
call, and a hook can reject it at that point (rather than verify without 
actually returning the verified content).

> - Context is an optional Python object from the caller's context. For
> the import system, it could be the loader instance.

I think the audit event covers this, unless you have some way of using 
this context in mind that I can't think of?

Cheers,
Steve


From steve.dower at python.org  Mon Apr  1 13:42:58 2019
From: steve.dower at python.org (Steve Dower)
Date: Mon, 1 Apr 2019 10:42:58 -0700
Subject: [Python-Dev] PEP 578: Python Runtime Audit Hooks
In-Reply-To: <6ded2c50-bf28-1376-7b0c-9cc6839be56b@python.org>
References: <daa13e96-fa07-8703-4d73-234a862baf05@python.org>
 <2cb3740e-ebc2-1839-1d2e-73d1b9f0a445@python.org>
 <ad05e257-d046-bba8-b070-c24c80a1521e@python.org>
 <CADiSq7ftogxBEZMu1suwMhpyBPehPteqU4EJr4YqxprpFYP-Nw@mail.gmail.com>
 <6ded2c50-bf28-1376-7b0c-9cc6839be56b@python.org>
Message-ID: <16bc5fae-47c0-e9f6-da60-e0e46cb84c78@python.org>

On 30Mar2019 0913, Steve Dower wrote:
> On 30Mar.2019 0747, Nick Coghlan wrote:
>> I like this PEP in principle, but the specific "open_for_import" name
>> bothers me a lot, as it implies that "importing" is the only situation
>> where a file will be opened for code execution.
>>
>> If this part of the API were lower down the stack (e.g.
>> "_io.open_for_code_execution") then I think it would make more sense -
>> APIs like tokenize.open(), runpy.run_path(), PyRun_SimpleFile(),
>> shelve, etc, could use that, without having to introduce a dependency
>> on importlib to get access to the functionality.
> 
> It was called "open_for_exec" at one point, though I forget exactly why
> we changed it. But I have no problem with moving it. Something like this?
> 
> PyImport_OpenForImport -> PyIO_OpenForExec
> PyImport_SetOpenForImportHook -> PyIO_SetOpenForExecHook
> importlib.util.open_for_import -> _io.open_for_exec
> 
> Or more in line with Nick's suggestion:
> 
> PyImport_OpenForImport -> PyIO_OpenExecutableCode
> PyImport_SetOpenForImportHook -> PyIO_SetOpenExecutableCodeHook
> importlib.util.open_for_import -> _io.open_executable_code
> 
> I dropped "For", but I don't really care that much about the name. I'd
> be okay dropping either "executable" or "code" as well - I don't really
> have a good sense of which will make people more likely to use this
> correctly.

Looking at what we already have, perhaps putting it under 
"PyFile_OpenForExecute" would make the most sense? We don't currently 
have any public "PyIO" types or functions.

Bikeshedding now, but as I'm the only one really participating in it, I 
think it's allowed :)

Cheers,
Steve


From cs at cskk.id.au  Mon Apr  1 18:35:39 2019
From: cs at cskk.id.au (Cameron Simpson)
Date: Tue, 2 Apr 2019 09:35:39 +1100
Subject: [Python-Dev] Strange umask(?)/st_mode issue
In-Reply-To: <c478fae6-349e-022e-3b70-81470c0a0b5a@python.org>
References: <c478fae6-349e-022e-3b70-81470c0a0b5a@python.org>
Message-ID: <20190401223539.GA47505@cskk.homeip.net>

On 01Apr2019 09:12, Steve Dower <steve.dower at python.org> wrote:
>On 30Mar2019 1130, Gregory P. Smith wrote:
>>I wouldn't expect it to be the case in a CI environment but I 
>>believe a umask can be overridden if the filesystem is mounted and 
>>configured with acls set?? (oh, hah, Ivan just said the same thing)
>
>Yep, it appears this is the case. The Pipelines team got back to me 
>and it seems to be a known issue - the workaround they gave me was to 
>run "sudo setfacl -Rb /home/vsts" at the start, so I've merged that in 
>for now (to master and 3.7).

Could that be done _without_ sudo to just the local directory containing 
the test tar file? If that works then you don't need any nasty 
privileged sudo use (which will just break on platforms without sudo 
anyway).

Cheers,
Cameron Simpson <cs at cskk.id.au>

From steve.dower at python.org  Mon Apr  1 18:44:13 2019
From: steve.dower at python.org (Steve Dower)
Date: Mon, 1 Apr 2019 15:44:13 -0700
Subject: [Python-Dev] Strange umask(?)/st_mode issue
In-Reply-To: <20190401223539.GA47505@cskk.homeip.net>
References: <c478fae6-349e-022e-3b70-81470c0a0b5a@python.org>
 <20190401223539.GA47505@cskk.homeip.net>
Message-ID: <ab393c80-d5c3-e723-43a9-bccd35936813@python.org>

On 01Apr2019 1535, Cameron Simpson wrote:
> On 01Apr2019 09:12, Steve Dower <steve.dower at python.org> wrote:
>> On 30Mar2019 1130, Gregory P. Smith wrote:
>>> I wouldn't expect it to be the case in a CI environment but I believe 
>>> a umask can be overridden if the filesystem is mounted and configured 
>>> with acls set?? (oh, hah, Ivan just said the same thing)
>>
>> Yep, it appears this is the case. The Pipelines team got back to me 
>> and it seems to be a known issue - the workaround they gave me was to 
>> run "sudo setfacl -Rb /home/vsts" at the start, so I've merged that in 
>> for now (to master and 3.7).
> 
> Could that be done _without_ sudo to just the local directory containing 
> the test tar file? If that works then you don't need any nasty 
> privileged sudo use (which will just break on platforms without sudo 
> anyway).

I tried something similar to that and it didn't work. My guess is it's 
to do with the actual mount point? (I also tried without sudo at first, 
and when I didn't work, I tried it with sudo. I hear that's how to 
decide whether you need it or not ;) )

In any case, it only applies to the Azure Pipelines build definition, so 
there aren't any other platforms where it'll be used.

Cheers,
Steve

From cs at cskk.id.au  Mon Apr  1 19:49:29 2019
From: cs at cskk.id.au (Cameron Simpson)
Date: Tue, 2 Apr 2019 10:49:29 +1100
Subject: [Python-Dev] Strange umask(?)/st_mode issue
In-Reply-To: <ab393c80-d5c3-e723-43a9-bccd35936813@python.org>
References: <ab393c80-d5c3-e723-43a9-bccd35936813@python.org>
Message-ID: <20190401234929.GA53667@cskk.homeip.net>

On 01Apr2019 15:44, Steve Dower <steve.dower at python.org> wrote:
>On 01Apr2019 1535, Cameron Simpson wrote:
>>On 01Apr2019 09:12, Steve Dower <steve.dower at python.org> wrote:
>>>On 30Mar2019 1130, Gregory P. Smith wrote:
>>>>I wouldn't expect it to be the case in a CI environment but I 
>>>>believe a umask can be overridden if the filesystem is mounted 
>>>>and configured with acls set?? (oh, hah, Ivan just said the same 
>>>>thing)
>>>
>>>Yep, it appears this is the case. The Pipelines team got back to 
>>>me and it seems to be a known issue - the workaround they gave me 
>>>was to run "sudo setfacl -Rb /home/vsts" at the start, so I've 
>>>merged that in for now (to master and 3.7).
>>
>>Could that be done _without_ sudo to just the local directory 
>>containing the test tar file? If that works then you don't need any 
>>nasty privileged sudo use (which will just break on platforms 
>>without sudo anyway).
>
>I tried something similar to that and it didn't work. My guess is it's 
>to do with the actual mount point? (I also tried without sudo at 
>first, and when I didn't work, I tried it with sudo. I hear that's how 
>to decide whether you need it or not ;) )
>
>In any case, it only applies to the Azure Pipelines build definition, 
>so there aren't any other platforms where it'll be used.

Ok then.

Curious: is the sudo now in the build setup? I'm just thinking that this 
isn't a tarfile specific fix but a "get correct POSIX umask semantics" 
fix, so it should apply to the entire environment.

Or am I naive?

Cheers,
Cameron Simpson <cs at cskk.id.au>

From greg at krypto.org  Mon Apr  1 19:59:43 2019
From: greg at krypto.org (Gregory P. Smith)
Date: Mon, 1 Apr 2019 16:59:43 -0700
Subject: [Python-Dev] Strange umask(?)/st_mode issue
In-Reply-To: <20190401234929.GA53667@cskk.homeip.net>
References: <ab393c80-d5c3-e723-43a9-bccd35936813@python.org>
 <20190401234929.GA53667@cskk.homeip.net>
Message-ID: <CAGE7PNJFPQjKL2NJUFggPFYeBUufisxzEhPnmfJyCt44ew6rOQ@mail.gmail.com>

On Mon, Apr 1, 2019 at 4:49 PM Cameron Simpson <cs at cskk.id.au> wrote:

> On 01Apr2019 15:44, Steve Dower <steve.dower at python.org> wrote:
> >On 01Apr2019 1535, Cameron Simpson wrote:
> >>On 01Apr2019 09:12, Steve Dower <steve.dower at python.org> wrote:
> >>>On 30Mar2019 1130, Gregory P. Smith wrote:
> >>>>I wouldn't expect it to be the case in a CI environment but I
> >>>>believe a umask can be overridden if the filesystem is mounted
> >>>>and configured with acls set?  (oh, hah, Ivan just said the same
> >>>>thing)
> >>>
> >>>Yep, it appears this is the case. The Pipelines team got back to
> >>>me and it seems to be a known issue - the workaround they gave me
> >>>was to run "sudo setfacl -Rb /home/vsts" at the start, so I've
> >>>merged that in for now (to master and 3.7).
> >>
> >>Could that be done _without_ sudo to just the local directory
> >>containing the test tar file? If that works then you don't need any
> >>nasty privileged sudo use (which will just break on platforms
> >>without sudo anyway).
> >
> >I tried something similar to that and it didn't work. My guess is it's
> >to do with the actual mount point? (I also tried without sudo at
> >first, and when I didn't work, I tried it with sudo. I hear that's how
> >to decide whether you need it or not ;) )
> >
> >In any case, it only applies to the Azure Pipelines build definition,
> >so there aren't any other platforms where it'll be used.
>
> Ok then.
>
> Curious: is the sudo now in the build setup? I'm just thinking that this
> isn't a tarfile specific fix but a "get correct POSIX umask semantics"
> fix, so it should apply to the entire environment.
>
> Or am I naive?
>

I'm reading between the lines and assuming we're not the only user of their
CI complaining about this environment change. ;)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190401/ebd27f4d/attachment.html>

From vano at mail.mipt.ru  Mon Apr  1 23:14:00 2019
From: vano at mail.mipt.ru (Ivan Pozdeev)
Date: Tue, 2 Apr 2019 06:14:00 +0300
Subject: [Python-Dev] Strange umask(?)/st_mode issue
In-Reply-To: <ab393c80-d5c3-e723-43a9-bccd35936813@python.org>
References: <c478fae6-349e-022e-3b70-81470c0a0b5a@python.org>
 <20190401223539.GA47505@cskk.homeip.net>
 <ab393c80-d5c3-e723-43a9-bccd35936813@python.org>
Message-ID: <67704a69-45aa-47dc-8b97-e18e886752bf@mail.mipt.ru>

On 02.04.2019 1:44, Steve Dower wrote:
> On 01Apr2019 1535, Cameron Simpson wrote:
>> On 01Apr2019 09:12, Steve Dower <steve.dower at python.org> wrote:
>>> On 30Mar2019 1130, Gregory P. Smith wrote:
>>>> I wouldn't expect it to be the case in a CI environment but I believe a umask can be overridden if the filesystem is mounted and 
>>>> configured with acls set? (oh, hah, Ivan just said the same thing)
>>>
>>> Yep, it appears this is the case. The Pipelines team got back to me and it seems to be a known issue - the workaround they gave me was 
>>> to run "sudo setfacl -Rb /home/vsts" at the start, so I've merged that in for now (to master and 3.7).
>>
>> Could that be done _without_ sudo to just the local directory containing the test tar file? If that works then you don't need any nasty 
>> privileged sudo use (which will just break on platforms without sudo anyway).
>
> I tried something similar to that and it didn't work. My guess is it's to do with the actual mount point? (I also tried without sudo at 
> first, and when I didn't work, I tried it with sudo. I hear that's how to decide whether you need it or not ;) )
>
> In any case, it only applies to the Azure Pipelines build definition, so there aren't any other platforms where it'll be used.
>
https://github.com/python/cpython/pull/12655
> Cheers,
> Steve
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe: https://mail.python.org/mailman/options/python-dev/vano%40mail.mipt.ru

-- 
Regards,
Ivan


From Peixing.Xin at windriver.com  Tue Apr  2 05:46:14 2019
From: Peixing.Xin at windriver.com (Xin, Peixing)
Date: Tue, 2 Apr 2019 09:46:14 +0000
Subject: [Python-Dev] =?windows-1252?q?how_to_rerun_the_job_=93Azure_Pipe?=
 =?windows-1252?q?lines_PR=94=3F?=
Message-ID: <8488FBC4EAAC5941BA4B85DD1ECCF1870133BAAF35@ALA-MBD.corp.ad.wrs.com>

Hi, Experts:

Anyone can tell how to rerun the job ?Azure Pipelines PR? for my PR? Sometimes my PR failed but this is caused by externals. The next day this external issue was fixed then I might want to rerun this specific job on my PR to get the new result. How can I reach this?

[cid:image001.png at 01D4E97B.F67B1E20]

Thanks,
Peixing

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190402/86d08742/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: image001.png
Type: image/png
Size: 4252 bytes
Desc: image001.png
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190402/86d08742/attachment.png>

From tir.karthi at gmail.com  Tue Apr  2 08:22:56 2019
From: tir.karthi at gmail.com (Karthikeyan)
Date: Tue, 2 Apr 2019 17:52:56 +0530
Subject: [Python-Dev] 
	=?utf-8?q?how_to_rerun_the_job_=E2=80=9CAzure_Pipel?=
	=?utf-8?b?aW5lcyBQUuKAnT8=?=
In-Reply-To: <8488FBC4EAAC5941BA4B85DD1ECCF1870133BAAF35@ALA-MBD.corp.ad.wrs.com>
References: <8488FBC4EAAC5941BA4B85DD1ECCF1870133BAAF35@ALA-MBD.corp.ad.wrs.com>
Message-ID: <CAAjsFLQJ+jDk4N+h=pct+r2W4R87dPZ5uDacJvCQ2ZdbedE5Bw@mail.gmail.com>

Closing and re-opening the PR will trigger the CI run again that might help
in this case but it will run all the jobs.

-- 
Regards,
Karthikeyan S
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190402/582c7a43/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: image001.png
Type: image/png
Size: 4252 bytes
Desc: not available
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190402/582c7a43/attachment-0001.png>

From cspealma at redhat.com  Tue Apr  2 11:17:20 2019
From: cspealma at redhat.com (Calvin Spealman)
Date: Tue, 2 Apr 2019 11:17:20 -0400
Subject: [Python-Dev] PEP-582 and multiple Python installations
Message-ID: <CACo5Rz4X+d7mQ1EH=w4geg2q=PMVvrnm3L2sD5+wyd42B_LvsQ@mail.gmail.com>

 (I originally posted this to python-ideas, where I was told none of this
PEP's authors subscribe so probably no one will see it there, so I'm
posting it here to raise the issue where it can get seen and hopefully
discussed)

While the PEP does show the version number as part of the path to the
actual packages, implying support for multiple versions, this doesn't seem
to be spelled out in the actual text. Presumably __pypackages__/3.8/ might
sit beside __pypackages__/3.9/, etc. to keep future versions capable of
installing packages for each version, the way virtualenv today is bound to
one version of Python.

I'd like to raise a potential edge case that might be a problem, and likely
an increasingly common one: users with multiple installations of the *same*
version of Python. This is actually a common setup for Windows users who
use WSL, Microsoft's Linux-on-Windows solution, as you could have both the
Windows and Linux builds of a given Python version installed on the same
machine. The currently implied support for multiple versions would not be
able to separate these and could create problems if users pip install a
Windows binary package through Powershell and then try to run a script in
Bash from the same directory, causing the Linux version of Python to try to
use Windows python packages.

I'm not actually sure what the solution here is. Mostly I wanted to raise
the concern, because I'm very keen on WSL being a great entry path for new
developers and I want to make that a better experience, not a more
confusing one. Maybe that version number could include some other unique
identify, maybe based on Python's own executable. A hash maybe? I don't
know if anything like that already exists to uniquely identify a Python
build or installation.


-- 

CALVIN SPEALMAN

SENIOR QUALITY ENGINEER

cspealma at redhat.com  M: +1.336.210.5107
<https://red.ht/sig>
TRIED. TESTED. TRUSTED. <https://redhat.com/trusted>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190402/fee4fe99/attachment.html>

From steve.dower at python.org  Tue Apr  2 12:09:30 2019
From: steve.dower at python.org (Steve Dower)
Date: Tue, 2 Apr 2019 09:09:30 -0700
Subject: [Python-Dev] 
 =?utf-8?q?how_to_rerun_the_job_=E2=80=9CAzure_Pipel?=
 =?utf-8?b?aW5lcyBQUuKAnT8=?=
In-Reply-To: <CAAjsFLQJ+jDk4N+h=pct+r2W4R87dPZ5uDacJvCQ2ZdbedE5Bw@mail.gmail.com>
References: <8488FBC4EAAC5941BA4B85DD1ECCF1870133BAAF35@ALA-MBD.corp.ad.wrs.com>
 <CAAjsFLQJ+jDk4N+h=pct+r2W4R87dPZ5uDacJvCQ2ZdbedE5Bw@mail.gmail.com>
Message-ID: <05055b7d-922f-2b93-4425-4068564313ad@python.org>

On 02Apr2019 0522, Karthikeyan wrote:
> Closing and re-opening the PR will trigger the CI run again that might 
> help in this case but it will run all the jobs.

Yes, I believe this is still the best way to re-run Pipelines jobs.

For people with logins (not yet everyone in the GitHub org, but I hear 
that's coming) you can requeue the build, but last time I tried it 
didn't sync back to the pull request properly (I think it needs GitHub 
to cooperate, which is why triggering it from GitHub works best.)

The Pipelines team is aware of this and working on it, so I expect the 
integration to improve over time. For now, close/reopen the PR.

Cheers,
Steve

From steve.dower at python.org  Tue Apr  2 12:10:59 2019
From: steve.dower at python.org (Steve Dower)
Date: Tue, 2 Apr 2019 09:10:59 -0700
Subject: [Python-Dev] PEP-582 and multiple Python installations
In-Reply-To: <CACo5Rz4X+d7mQ1EH=w4geg2q=PMVvrnm3L2sD5+wyd42B_LvsQ@mail.gmail.com>
References: <CACo5Rz4X+d7mQ1EH=w4geg2q=PMVvrnm3L2sD5+wyd42B_LvsQ@mail.gmail.com>
Message-ID: <2b889555-db6f-6c69-0347-ebb89d6fec21@python.org>

On 02Apr2019 0817, Calvin Spealman wrote:
> (I originally posted this to python-ideas, where I was told none of this 
> PEP's authors subscribe so probably no one will see it there, so I'm 
> posting it here to raise the issue where it can get seen and hopefully 
> discussed)

Correct, thanks for posting. (I thought we had a "discussions-to" tag 
with distutils-sig on it, but apparently not.)

> While the PEP does show the version number as part of the path to the 
> actual packages, implying support for multiple versions, this doesn't 
> seem to be spelled out in the actual text. Presumably 
> __pypackages__/3.8/ might sit beside __pypackages__/3.9/, etc. to keep 
> future versions capable of installing packages for each version, the way 
> virtualenv today is bound to one version of Python.
> 
> I'd like to raise a potential edge case that might be a problem, and 
> likely an increasingly common one: users with multiple installations of 
> the *same* version of Python. This is actually a common setup for 
> Windows users who use WSL, Microsoft's Linux-on-Windows solution, as you 
> could have both the Windows and Linux builds of a given Python version 
> installed on the same machine. The currently implied support for 
> multiple versions would not be able to separate these and could create 
> problems if users pip install a Windows binary package through 
> Powershell and then try to run a script in Bash from the same directory, 
> causing the Linux version of Python to try to use Windows python packages.
> 
> I'm not actually sure what the solution here is. Mostly I wanted to 
> raise the concern, because I'm very keen on WSL being a great entry path 
> for new developers and I want to make that a better experience, not a 
> more confusing one. Maybe that version number could include some other 
> unique identify, maybe based on Python's own executable. A hash maybe? I 
> don't know if anything like that already exists to uniquely identify a 
> Python build or installation.

Yes, this is a situation we're aware of, and it's caught in the conflict 
of "who is this feature meant to support".

Since all platforms have a unique extension module suffix (e.g. 
"module.cp38-win32.pyd"), it would be possible to support this with 
"fat" packages that include all binaries (or some clever way of merging 
wheels for multiple platforms).

And since this is already in CPython itself, it leads to about the only 
reasonable solution - instead of "3.8", use the extension module suffix 
"cp38-win32". (Wheel tags are not in core CPython, so we can't use those.)

But while this seems obvious, it also reintroduces problems that this 
has the potential to fix - suddenly, just like installing into your 
global environment, your packages are not project-specific anymore but 
are Python-specific. Which is one of the major confusions people run 
into ("I pip installed X but now can't import it in python").

So the main points of discussion right now are "whose problem does this 
solve" and "when do we tell people they need a full venv". And that 
discussion is mostly happening at 
https://discuss.python.org/t/pep-582-python-local-packages-directory/963/

Cheers,
Steve

From pviktori at redhat.com  Tue Apr  2 08:49:56 2019
From: pviktori at redhat.com (Petr Viktorin)
Date: Tue, 2 Apr 2019 14:49:56 +0200
Subject: [Python-Dev] PEP 590 discussion
In-Reply-To: <5C9FEF82.50207@UGent.be>
References: <CADiSq7f7GRJjZmoLAxpN5hovMT5=M73aJUi14HHFDNG=hssV7w@mail.gmail.com>
 <6c8356e3-f9b2-c39e-63c4-17f146d326b7@hotpy.org>
 <CA+=+wqBsUKWHRqjhRFShmY77vaxDPTFaafWtOB8dnyXQSthiZw@mail.gmail.com>
 <15b8a3d7-00ed-a5eb-475c-a3adee671b5f@hotpy.org> <5C9FEF82.50207@UGent.be>
Message-ID: <d28319ff-a8aa-f218-b8ed-1d489ff9e324@redhat.com>

On 3/30/19 11:36 PM, Jeroen Demeyer wrote:
> On 2019-03-30 17:30, Mark Shannon wrote:
>> 2. The claim that PEP 580 allows "certain optimizations because other
>> code can make assumptions" is flawed. In general, the caller cannot make
>> assumptions about the callee or vice-versa. Python is a dynamic language.
> 
> PEP 580 is meant for extension classes, not Python classes. Extension 
> classes are not dynamic. When you implement tp_call in a given way, the 
> user cannot change it. So if a class implements the C call protocol or 
> the vectorcall protocol, callers can make assumptions about what that 
> means.
> 
>> PEP 579 is mainly a list of supposed flaws with the
>> 'builtin_function_or_method' class.
>> The general thrust of PEP 579 seems to be that builtin-functions and
>> builtin-methods should be more flexible and extensible than they are. I
>> don't agree. If you want different behaviour, then use a different
>> object. Don't try an cram all this extra behaviour into a pre-existing
>> object.
> 
> I think that there is a misunderstanding here. I fully agree with the 
> "use a different object" solution. This isn't a new solution: it's 
> already possible to implement those different objects (Cython does it). 
> It's just that this solution comes at a performance cost and that's what 
> we want to avoid.

It does seem like there is some misunderstanding.

PEP 580 defines a CCall structure, which includes the function pointer, 
flags, "self" and "parent". Like the current implementation, it has 
various METH_ flags for various C signatures. When called, the info from 
CCall is matched up (in relatively complex ways) to what the C function 
expects.

PEP 590 only adds the "vectorcall". It does away with flags and only has 
one C signatures, which is designed to fit all the existing ones, and is 
well optimized. Storing the "self"/"parent", and making sure they're 
passed to the C function is the responsibility of the callable object.
There's an optimization for "self" (offsetting using 
PY_VECTORCALL_ARGUMENTS_OFFSET), and any supporting info can be provided 
as part of "self".

>> I'll reiterate that PEP 590 is more general than PEP 580 and that once
>> the callable's code has access to the callable object (as both PEPs
>> allow) then anything is possible. You can't can get more extensible than
>> that.

Anything is possible, but if one of the possibilities becomes common and 
useful, PEP 590 would make it hard to optimize for it.
Python has grown many "METH_*" signatures over the years as we found 
more things that need to be passed to callables. Why would 
"METH_VECTORCALL" be the last? If it won't (if you think about it as one 
more way to call functions), then dedicating a tp_* slot to it sounds 
quite expensive.


In one of the ways to call C functions in PEP 580, the function gets 
access to:
- the arguments,
- "self", the object
- the class that the method was found in (which is not necessarily 
type(self))
I still have to read the details, but when combined with 
LOAD_METHOD/CALL_METHOD optimization (avoiding creation of a "bound 
method" object), it seems impossible to do this efficiently with just 
the callable's code and callable's object.


> I would argue the opposite: PEP 590 defines a fixed protocol that is not 
> easy to extend. PEP 580 on the other hand uses a new data structure 
> PyCCallDef which could easily be extended in the future (this will 
> intentionally never be part of the stable ABI, so we can do that).
> 
> I have also argued before that the generality of PEP 590 is a bad thing 
> rather than a good thing: by defining a more rigid protocol as in PEP 
> 580, more optimizations are possible.
>
>> PEP 580 has the same limitation for the same reasons. The limitation is
>> necessary for correctness if an object supports calls via `__call__` and
>> through another calling convention.
> 
> I don't think that this limitation is needed in either PEP. As I 
> explained at the top of this email, it can easily be solved by not using 
> the protocol for Python classes. What is wrong with my proposal in PEP 
> 580: https://www.python.org/dev/peps/pep-0580/#inheritance


I'll add Jeroen's notes from the review of the proposed PEP 590
(https://github.com/python/peps/pull/960):

The statement "PEP 580 is specifically targetted at function-like 
objects, and doesn't support other callables like classes, partial 
functions, or proxies" is factually false. The motivation for PEP 580 is 
certainly function/method-like objects but it's a general protocol that 
every class can implement. For certain classes, it may not be easy or 
desirable to do that but it's always possible.

Given that `PY_METHOD_DESCRIPTOR` is a flag for tp_flags, shouldn't it 
be called `Py_TPFLAGS_METHOD_DESCRIPTOR` or something?

Py_TPFLAGS_HAVE_VECTOR_CALL should be Py_TPFLAGS_HAVE_VECTORCALL, to be 
consistent with tp_vectorcall_offset and other uses of "vectorcall" (not 
"vector call")


And mine, so far:

I'm not clear on the constness of the "args" array.
If it is mutable (PyObject **), you can't, for example, directly pass a 
tuple's storage (or any other array that could be used in the call).
If it is not (PyObject * const *), you can't insert the "self" argument in.
The reference implementations seems to be inconsistent here. What's the 
intention?


From mark at hotpy.org  Tue Apr  2 15:38:23 2019
From: mark at hotpy.org (Mark Shannon)
Date: Tue, 2 Apr 2019 20:38:23 +0100
Subject: [Python-Dev] PEP 580/590 discussion
In-Reply-To: <5CA1A217.1030007@UGent.be>
References: <CADiSq7f7GRJjZmoLAxpN5hovMT5=M73aJUi14HHFDNG=hssV7w@mail.gmail.com>
 <6c8356e3-f9b2-c39e-63c4-17f146d326b7@hotpy.org>
 <CA+=+wqBsUKWHRqjhRFShmY77vaxDPTFaafWtOB8dnyXQSthiZw@mail.gmail.com>
 <15b8a3d7-00ed-a5eb-475c-a3adee671b5f@hotpy.org> <5C9FEF82.50207@UGent.be>
 <5CA1A217.1030007@UGent.be>
Message-ID: <ce2d2166-b928-2ee5-18a1-71215daafa83@hotpy.org>

Hi,

On 01/04/2019 6:31 am, Jeroen Demeyer wrote:
> I added benchmarks for PEP 590:
> 
> https://gist.github.com/jdemeyer/f0d63be8f30dc34cc989cd11d43df248

Thanks. As expected for calls to C function for both PEPs and master 
perform about the same, as they are using almost the same calling 
convention under the hood.

As an example of the advantage that a general fast calling convention 
gives you, I have implemented the vectorcall versions of list() and range()

https://github.com/markshannon/cpython/compare/vectorcall-minimal...markshannon:vectorcall-examples

Which gives a roughly 30% reduction in time for creating ranges, or 
lists from small tuples.

https://gist.github.com/markshannon/5cef3a74369391f6ef937d52cca9bfc8

Cheers,
Mark.

From mark at hotpy.org  Tue Apr  2 17:12:11 2019
From: mark at hotpy.org (Mark Shannon)
Date: Tue, 2 Apr 2019 22:12:11 +0100
Subject: [Python-Dev] PEP 590 discussion
In-Reply-To: <d28319ff-a8aa-f218-b8ed-1d489ff9e324@redhat.com>
References: <CADiSq7f7GRJjZmoLAxpN5hovMT5=M73aJUi14HHFDNG=hssV7w@mail.gmail.com>
 <6c8356e3-f9b2-c39e-63c4-17f146d326b7@hotpy.org>
 <CA+=+wqBsUKWHRqjhRFShmY77vaxDPTFaafWtOB8dnyXQSthiZw@mail.gmail.com>
 <15b8a3d7-00ed-a5eb-475c-a3adee671b5f@hotpy.org> <5C9FEF82.50207@UGent.be>
 <d28319ff-a8aa-f218-b8ed-1d489ff9e324@redhat.com>
Message-ID: <421f8182-4bc8-b8cf-82d6-ca4a4fbd2013@hotpy.org>

Hi,

On 02/04/2019 1:49 pm, Petr Viktorin wrote:
> On 3/30/19 11:36 PM, Jeroen Demeyer wrote:
>> On 2019-03-30 17:30, Mark Shannon wrote:
>>> 2. The claim that PEP 580 allows "certain optimizations because other
>>> code can make assumptions" is flawed. In general, the caller cannot make
>>> assumptions about the callee or vice-versa. Python is a dynamic 
>>> language.
>>
>> PEP 580 is meant for extension classes, not Python classes. Extension 
>> classes are not dynamic. When you implement tp_call in a given way, 
>> the user cannot change it. So if a class implements the C call 
>> protocol or the vectorcall protocol, callers can make assumptions 
>> about what that means.
>>
>>> PEP 579 is mainly a list of supposed flaws with the
>>> 'builtin_function_or_method' class.
>>> The general thrust of PEP 579 seems to be that builtin-functions and
>>> builtin-methods should be more flexible and extensible than they are. I
>>> don't agree. If you want different behaviour, then use a different
>>> object. Don't try an cram all this extra behaviour into a pre-existing
>>> object.
>>
>> I think that there is a misunderstanding here. I fully agree with the 
>> "use a different object" solution. This isn't a new solution: it's 
>> already possible to implement those different objects (Cython does 
>> it). It's just that this solution comes at a performance cost and 
>> that's what we want to avoid.
> 
> It does seem like there is some misunderstanding.
> 
> PEP 580 defines a CCall structure, which includes the function pointer, 
> flags, "self" and "parent". Like the current implementation, it has 
> various METH_ flags for various C signatures. When called, the info from 
> CCall is matched up (in relatively complex ways) to what the C function 
> expects.
> 
> PEP 590 only adds the "vectorcall". It does away with flags and only has 
> one C signatures, which is designed to fit all the existing ones, and is 
> well optimized. Storing the "self"/"parent", and making sure they're 
> passed to the C function is the responsibility of the callable object.
> There's an optimization for "self" (offsetting using 
> PY_VECTORCALL_ARGUMENTS_OFFSET), and any supporting info can be provided 
> as part of "self". >
>>> I'll reiterate that PEP 590 is more general than PEP 580 and that once
>>> the callable's code has access to the callable object (as both PEPs
>>> allow) then anything is possible. You can't can get more extensible than
>>> that.
> 
> Anything is possible, but if one of the possibilities becomes common and 
> useful, PEP 590 would make it hard to optimize for it.
> Python has grown many "METH_*" signatures over the years as we found 
> more things that need to be passed to callables. Why would 
> "METH_VECTORCALL" be the last? If it won't (if you think about it as one 
> more way to call functions), then dedicating a tp_* slot to it sounds 
> quite expensive.

I doubt METH_VECTORCALL will be the last.
Let me give you an example: It is quite common for a function to take 
two arguments, so we might want add a METH_OO flag for builtin-functions 
with 2 parameters.

To support this in PEP 590, you would make exactly the same change as 
you would now; which is to add another case to the switch statement in 
_PyCFunction_FastCallKeywords.
For PEP 580, you would add another case to the switch in PyCCall_FastCall.

No difference really.

PEP 580 uses a slot as well. It's only 8 bytes per class.

> 
> 
> In one of the ways to call C functions in PEP 580, the function gets 
> access to:
> - the arguments,
> - "self", the object
> - the class that the method was found in (which is not necessarily 
> type(self))
> I still have to read the details, but when combined with 
> LOAD_METHOD/CALL_METHOD optimization (avoiding creation of a "bound 
> method" object), it seems impossible to do this efficiently with just 
> the callable's code and callable's object.

It is possible, and relatively straightforward.
Why do you think it is impossible?

> 
> 
>> I would argue the opposite: PEP 590 defines a fixed protocol that is 
>> not easy to extend. PEP 580 on the other hand uses a new data 
>> structure PyCCallDef which could easily be extended in the future 
>> (this will intentionally never be part of the stable ABI, so we can do 
>> that).
>>
>> I have also argued before that the generality of PEP 590 is a bad 
>> thing rather than a good thing: by defining a more rigid protocol as 
>> in PEP 580, more optimizations are possible.
>>
>>> PEP 580 has the same limitation for the same reasons. The limitation is
>>> necessary for correctness if an object supports calls via `__call__` and
>>> through another calling convention.
>>
>> I don't think that this limitation is needed in either PEP. As I 
>> explained at the top of this email, it can easily be solved by not 
>> using the protocol for Python classes. What is wrong with my proposal 
>> in PEP 580: https://www.python.org/dev/peps/pep-0580/#inheritance
> 
> 
> I'll add Jeroen's notes from the review of the proposed PEP 590
> (https://github.com/python/peps/pull/960):
> 
> The statement "PEP 580 is specifically targetted at function-like 
> objects, and doesn't support other callables like classes, partial 
> functions, or proxies" is factually false. The motivation for PEP 580 is 
> certainly function/method-like objects but it's a general protocol that 
> every class can implement. For certain classes, it may not be easy or 
> desirable to do that but it's always possible. >
> Given that `PY_METHOD_DESCRIPTOR` is a flag for tp_flags, shouldn't it 
> be called `Py_TPFLAGS_METHOD_DESCRIPTOR` or something?
> 
> Py_TPFLAGS_HAVE_VECTOR_CALL should be Py_TPFLAGS_HAVE_VECTORCALL, to be 
> consistent with tp_vectorcall_offset and other uses of "vectorcall" (not 
> "vector call")
> 

Thanks for the comments, I'll update the PEP when I get the chance.

> 
> And mine, so far:
> 
> I'm not clear on the constness of the "args" array.
> If it is mutable (PyObject **), you can't, for example, directly pass a 
> tuple's storage (or any other array that could be used in the call).
> If it is not (PyObject * const *), you can't insert the "self" argument in.
> The reference implementations seems to be inconsistent here. What's the 
> intention?
> 

I'll make it clearer in the PEP.
My thinking was that if `PY_VECTORCALL_ARGUMENTS_OFFSET` is set then the 
caller is allowing the callee to mutate element -1.
It would make sense to generalise that to any element of the vector 
(including -1).
When passing the contents of a tuple, `PY_VECTORCALL_ARGUMENTS_OFFSET` 
should not be set, and thus the vector could not be mutated.


Cheers,
Mark.

From J.Demeyer at UGent.be  Wed Apr  3 01:33:49 2019
From: J.Demeyer at UGent.be (Jeroen Demeyer)
Date: Wed, 3 Apr 2019 07:33:49 +0200
Subject: [Python-Dev] PEP 590 discussion
In-Reply-To: <421f8182-4bc8-b8cf-82d6-ca4a4fbd2013@hotpy.org>
References: <CADiSq7f7GRJjZmoLAxpN5hovMT5=M73aJUi14HHFDNG=hssV7w@mail.gmail.com>
 <6c8356e3-f9b2-c39e-63c4-17f146d326b7@hotpy.org>
 <CA+=+wqBsUKWHRqjhRFShmY77vaxDPTFaafWtOB8dnyXQSthiZw@mail.gmail.com>
 <15b8a3d7-00ed-a5eb-475c-a3adee671b5f@hotpy.org> <5C9FEF82.50207@UGent.be>
 <d28319ff-a8aa-f218-b8ed-1d489ff9e324@redhat.com>
 <421f8182-4bc8-b8cf-82d6-ca4a4fbd2013@hotpy.org>
Message-ID: <5CA445BD.4040705@UGent.be>

>> In one of the ways to call C functions in PEP 580, the function gets
>> access to:
>> - the arguments,
>> - "self", the object
>> - the class that the method was found in (which is not necessarily
>> type(self))
>> I still have to read the details, but when combined with
>> LOAD_METHOD/CALL_METHOD optimization (avoiding creation of a "bound
>> method" object), it seems impossible to do this efficiently with just
>> the callable's code and callable's object.
>
> It is possible, and relatively straightforward.

Access to the class isn't possible currently and also not with PEP 590. 
But it's easy enough to fix that: PEP 573 adds a new METH_METHOD flag to 
change the signature of the C function (not the vectorcall wrapper). PEP 
580 supports this "out of the box" because I'm reusing the class also to 
do type checks. But this shouldn't be an argument for or against either PEP.

From J.Demeyer at UGent.be  Wed Apr  3 01:43:28 2019
From: J.Demeyer at UGent.be (Jeroen Demeyer)
Date: Wed, 3 Apr 2019 07:43:28 +0200
Subject: [Python-Dev] PEP 580/590 discussion
In-Reply-To: <ce2d2166-b928-2ee5-18a1-71215daafa83@hotpy.org>
References: <CADiSq7f7GRJjZmoLAxpN5hovMT5=M73aJUi14HHFDNG=hssV7w@mail.gmail.com>
 <6c8356e3-f9b2-c39e-63c4-17f146d326b7@hotpy.org>
 <CA+=+wqBsUKWHRqjhRFShmY77vaxDPTFaafWtOB8dnyXQSthiZw@mail.gmail.com>
 <15b8a3d7-00ed-a5eb-475c-a3adee671b5f@hotpy.org> <5C9FEF82.50207@UGent.be>
 <5CA1A217.1030007@UGent.be> <ce2d2166-b928-2ee5-18a1-71215daafa83@hotpy.org>
Message-ID: <5CA44800.9050901@UGent.be>

On 2019-04-02 21:38, Mark Shannon wrote:
> Hi,
>
> On 01/04/2019 6:31 am, Jeroen Demeyer wrote:
>> I added benchmarks for PEP 590:
>>
>> https://gist.github.com/jdemeyer/f0d63be8f30dc34cc989cd11d43df248
>
> Thanks. As expected for calls to C function for both PEPs and master
> perform about the same, as they are using almost the same calling
> convention under the hood.

While they are "about the same", in general PEP 580 is slightly faster 
than master and PEP 590. And PEP 590 actually has a minor slow-down for 
METH_VARARGS calls.

I think that this happens because PEP 580 has less levels of indirection 
than PEP 590. The vectorcall protocol (PEP 590) changes a slower level 
(tp_call) by a faster level (vectorcall), while PEP 580 just removes 
that level entirely: it calls the C function directly.

This shows that PEP 580 is really meant to have maximal performance in 
all cases, accidentally even making existing code faster.


Jeroen.

From J.Demeyer at UGent.be  Wed Apr  3 11:41:06 2019
From: J.Demeyer at UGent.be (Jeroen Demeyer)
Date: Wed, 3 Apr 2019 17:41:06 +0200
Subject: [Python-Dev] PEP 590 vs. bpo-29259
In-Reply-To: <5CA445BD.4040705@UGent.be>
References: <CADiSq7f7GRJjZmoLAxpN5hovMT5=M73aJUi14HHFDNG=hssV7w@mail.gmail.com>
 <6c8356e3-f9b2-c39e-63c4-17f146d326b7@hotpy.org>
 <CA+=+wqBsUKWHRqjhRFShmY77vaxDPTFaafWtOB8dnyXQSthiZw@mail.gmail.com>
 <15b8a3d7-00ed-a5eb-475c-a3adee671b5f@hotpy.org> <5C9FEF82.50207@UGent.be>
 <d28319ff-a8aa-f218-b8ed-1d489ff9e324@redhat.com>
 <421f8182-4bc8-b8cf-82d6-ca4a4fbd2013@hotpy.org> <5CA445BD.4040705@UGent.be>
Message-ID: <5CA4D412.7050906@UGent.be>

As I'm reading the PEP 590 reference implementation, it strikes me how 
similar it is to https://bugs.python.org/issue29259

The main difference is that bpo-29259 has a per-class pointer 
tp_fastcall instead of a per-object pointer. But actually, the PEP 590 
reference implementation does not make much use of the per-object 
pointer: for all classes except "type", the vectorcall wrapper is the 
same for all objects of a given type.

One thing that bpo-29259 did not realize is that existing optimizations 
could be dropped in favor of using tp_fastcall. For example, bpo-29259 
has code like

     if (PyFunction_Check(callable)) {
         return _PyFunction_FastCallKeywords(...);
     }
     if (PyCFunction_Check(callable)) {
         return _PyCFunction_FastCallKeywords(...);
     }
     else if (PyType_HasFeature(..., Py_TPFLAGS_HAVE_FASTCALL) ...)

but the first 2 branches are superfluous given the third.

Anyway, this is just putting PEP 590 a bit in perspective. It doesn't 
say anything about the merits of PEP 590.


Jeroen.

From J.Demeyer at UGent.be  Thu Apr  4 07:51:40 2019
From: J.Demeyer at UGent.be (Jeroen Demeyer)
Date: Thu, 4 Apr 2019 13:51:40 +0200
Subject: [Python-Dev] Deprecating "instance method" class
Message-ID: <5CA5EFCC.2030400@UGent.be>

During my investigations related to low-level function/method classes, I 
came across the "instance method" class. There is a C API for it: 
https://docs.python.org/3.7/c-api/method.html
However, it's not used/exposed anywhere in CPython, except as 
_testcapi.instancemethod (for testing its functionality)

This class was discussed at 
https://mail.python.org/pipermail/python-3000/2007-December/011456.html 
and implemented in https://bugs.python.org/issue1587
Reading that old thread, there are use cases presented related to 
classic classes, wrapping Kogut 
(http://kokogut.sourceforge.net/kogut.html) objects and Pyrex. But 
classic classes no longer exist and the latter two use cases aren't 
actually needed if you read the thread to the end. So there are no 
surviving use cases from that thread.

Does anybody know actual use cases or any code in the wild using it? To 
me, the fact that it's only exposed in the C API is a good sign that 
it's not really useful.

So, should we deprecate the instance method class?


Jeroen.

From christian at python.org  Thu Apr  4 08:09:44 2019
From: christian at python.org (Christian Heimes)
Date: Thu, 4 Apr 2019 14:09:44 +0200
Subject: [Python-Dev] Deprecating "instance method" class
In-Reply-To: <5CA5EFCC.2030400@UGent.be>
References: <5CA5EFCC.2030400@UGent.be>
Message-ID: <q84s68$3k09$1@blaine.gmane.org>

On 04/04/2019 13.51, Jeroen Demeyer wrote:
> During my investigations related to low-level function/method classes, I
> came across the "instance method" class. There is a C API for it:
> https://docs.python.org/3.7/c-api/method.html
> However, it's not used/exposed anywhere in CPython, except as
> _testcapi.instancemethod (for testing its functionality)
> 
> This class was discussed at
> https://mail.python.org/pipermail/python-3000/2007-December/011456.html
> and implemented in https://bugs.python.org/issue1587
> Reading that old thread, there are use cases presented related to
> classic classes, wrapping Kogut
> (http://kokogut.sourceforge.net/kogut.html) objects and Pyrex. But
> classic classes no longer exist and the latter two use cases aren't
> actually needed if you read the thread to the end. So there are no
> surviving use cases from that thread.
> 
> Does anybody know actual use cases or any code in the wild using it? To
> me, the fact that it's only exposed in the C API is a good sign that
> it's not really useful.

You are drawing the wrong conclusion here. The feature was explicitly
designed for C code and C API wrappers like swig and Cython to make
adaption to Python 3 simpler. I implemented it when I removed unbound
methods.

> So, should we deprecate the instance method class?

I couldn't find any current code that uses PyInstanceMethod_New. Let's
deprecate the feature and schedule it for removal in 3.10.

Christian


From J.Demeyer at UGent.be  Thu Apr  4 09:45:03 2019
From: J.Demeyer at UGent.be (Jeroen Demeyer)
Date: Thu, 4 Apr 2019 15:45:03 +0200
Subject: [Python-Dev] Deprecating "instance method" class
In-Reply-To: <q84s68$3k09$1@blaine.gmane.org>
References: <5CA5EFCC.2030400@UGent.be> <q84s68$3k09$1@blaine.gmane.org>
Message-ID: <5CA60A5F.7060406@UGent.be>

On 2019-04-04 14:09, Christian Heimes wrote:
> I couldn't find any current code that uses PyInstanceMethod_New. Let's
> deprecate the feature and schedule it for removal in 3.10.

Done at https://github.com/python/cpython/pull/12685

From chris.barker at noaa.gov  Thu Apr  4 12:02:00 2019
From: chris.barker at noaa.gov (Chris Barker - NOAA Federal)
Date: Thu, 4 Apr 2019 09:02:00 -0700
Subject: [Python-Dev] PEP-582 and multiple Python installations
In-Reply-To: <CACo5Rz4X+d7mQ1EH=w4geg2q=PMVvrnm3L2sD5+wyd42B_LvsQ@mail.gmail.com>
References: <CACo5Rz4X+d7mQ1EH=w4geg2q=PMVvrnm3L2sD5+wyd42B_LvsQ@mail.gmail.com>
Message-ID: <CALGmxE+OwQqu066xa2xc_LBj8ZYgtdTvf3gXNWTJ54-n2tP5Nw@mail.gmail.com>

> I'd like to raise a potential edge case that might be a problem, and likely an increasingly common one: users with multiple installations of the *same* version of Python.

I would suggest that that use case is best addressed by a system that
isolates the entire python environment, such as conda.

> This is actually a common setup for Windows users who use WSL, Microsoft's Linux-on-Windows solution, as you could have both the Windows and Linux builds of a given Python version installed on the same machine.

Sure, but Isn?t the WSL subsystem pretty isolated already? Would
native Windows and WSL users be running in the same dir?

That being said, I?m pretty skeptical of the PEP ? I understand the
motivation ? I make a point of avoiding virtual environments in my
intro classes, but at some point folks will need to learn them.

I?ve had students think that virtualenv was a part of (or required by)
e.g. flask, because the tutorials include it in the setup.

But I think environments really need to be more distinct, not less,
I?m quite concerned about mingling them in one place.

Maybe I?m reading it wrong, but it seems that this could create
serious clashes with other ?environment? systems, such as conda.

I suppose one could say: ?don?t do that? ? I.e. don?t create a
__pypackages__ dir if you are going to use conda ? but many folks want
the same source to be runnable in multiple ?styles? of Python.

Also, I see a major benefit for teaching,  but it does go a bit
against my philosophy of not hiding important details from newbies ?
that is, don?t teach using an approach that is not suitable for
production.

And newbies could be really confused by the fact that pip installs
stuff differently depending on what dir they are in and what is in
that dir.

The PEP is listed as a draft ? anyone know what?s going on with it?

-CHB

From chris.barker at noaa.gov  Thu Apr  4 18:54:46 2019
From: chris.barker at noaa.gov (Chris Barker)
Date: Thu, 4 Apr 2019 15:54:46 -0700
Subject: [Python-Dev] PEP-582 and multiple Python installations
In-Reply-To: <CALGmxE+OwQqu066xa2xc_LBj8ZYgtdTvf3gXNWTJ54-n2tP5Nw@mail.gmail.com>
References: <CACo5Rz4X+d7mQ1EH=w4geg2q=PMVvrnm3L2sD5+wyd42B_LvsQ@mail.gmail.com>
 <CALGmxE+OwQqu066xa2xc_LBj8ZYgtdTvf3gXNWTJ54-n2tP5Nw@mail.gmail.com>
Message-ID: <CALGmxEL0Z3+aOZW5boZb2sjDJhHWrtpt6ugnQvyO343FEjo0LA@mail.gmail.com>

Sorry somehow missed Steve Dower's post:

 that
discussion is mostly happening at
https://discuss.python.org/t/pep-582-python-local-packages-directory/963/

I"ll go there to comment.

-CHB


On Thu, Apr 4, 2019 at 9:02 AM Chris Barker - NOAA Federal <
chris.barker at noaa.gov> wrote:

>
> > I'd like to raise a potential edge case that might be a problem, and
> likely an increasingly common one: users with multiple installations of the
> *same* version of Python.
>
> I would suggest that that use case is best addressed by a system that
> isolates the entire python environment, such as conda.
>
> > This is actually a common setup for Windows users who use WSL,
> Microsoft's Linux-on-Windows solution, as you could have both the Windows
> and Linux builds of a given Python version installed on the same machine.
>
> Sure, but Isn?t the WSL subsystem pretty isolated already? Would native
> Windows and WSL users be running in the same dir?
>
> That being said, I?m pretty skeptical of the PEP ? I understand the
> motivation ? I make a point of avoiding virtual environments in my intro
> classes, but at some point folks will need to learn them.
>
> I?ve had students think that virtualenv was a part of (or required by)
> e.g. flask, because the tutorials include it in the setup.
>
> But I think environments really need to be more distinct, not less, I?m
> quite concerned about mingling them in one place.
>
> Maybe I?m reading it wrong, but it seems that this could create serious
> clashes with other ?environment? systems, such as conda.
>
> I suppose one could say: ?don?t do that? ? I.e. don?t create a
> __pypackages__ dir if you are going to use conda ? but many folks want the
> same source to be runnable in multiple ?styles? of Python.
>
> Also, I see a major benefit for teaching,  but it does go a bit against my
> philosophy of not hiding important details from newbies ? that is, don?t
> teach using an approach that is not suitable for production.
>
> And newbies could be really confused by the fact that pip installs stuff
> differently depending on what dir they are in and what is in that dir.
>
> The PEP is listed as a draft ? anyone know what?s going on with it?
>
> -CHB
>
>

-- 

Christopher Barker, Ph.D.
Oceanographer

Emergency Response Division
NOAA/NOS/OR&R            (206) 526-6959   voice
7600 Sand Point Way NE   (206) 526-6329   fax
Seattle, WA  98115       (206) 526-6317   main reception

Chris.Barker at noaa.gov
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190404/f12f4b09/attachment.html>

From greg.ewing at canterbury.ac.nz  Thu Apr  4 18:57:00 2019
From: greg.ewing at canterbury.ac.nz (Greg Ewing)
Date: Fri, 05 Apr 2019 11:57:00 +1300
Subject: [Python-Dev] Deprecating "instance method" class
In-Reply-To: <q84s68$3k09$1@blaine.gmane.org>
References: <5CA5EFCC.2030400@UGent.be> <q84s68$3k09$1@blaine.gmane.org>
Message-ID: <5CA68BBC.8060205@canterbury.ac.nz>

Christian Heimes wrote:
> I couldn't find any current code that uses PyInstanceMethod_New. Let's
> deprecate the feature and schedule it for removal in 3.10.

If it's designed for use by things outside of CPython, how
can you be sure nothing is using it?

-- 
Greg

From J.Demeyer at UGent.be  Fri Apr  5 02:07:25 2019
From: J.Demeyer at UGent.be (Jeroen Demeyer)
Date: Fri, 5 Apr 2019 08:07:25 +0200
Subject: [Python-Dev] Deprecating "instance method" class
In-Reply-To: <5CA68BBC.8060205@canterbury.ac.nz>
References: <5CA5EFCC.2030400@UGent.be> <q84s68$3k09$1@blaine.gmane.org>
 <5CA68BBC.8060205@canterbury.ac.nz>
Message-ID: <5CA6F09D.3000900@UGent.be>

On 2019-04-05 00:57, Greg Ewing wrote:
> If it's designed for use by things outside of CPython, how
> can you be sure nothing is using it?

Of course I'm not sure. However:

1. So far, nobody in this thread knows of any code using it.

2. So far, nobody in this thread knows any use case for it.

And if we end up deprecating and it was a mistake, we can easily revert 
the deprecation.

From storchaka at gmail.com  Fri Apr  5 08:10:54 2019
From: storchaka at gmail.com (Serhiy Storchaka)
Date: Fri, 5 Apr 2019 15:10:54 +0300
Subject: [Python-Dev] Deprecating "instance method" class
In-Reply-To: <5CA6F09D.3000900@UGent.be>
References: <5CA5EFCC.2030400@UGent.be> <q84s68$3k09$1@blaine.gmane.org>
 <5CA68BBC.8060205@canterbury.ac.nz> <5CA6F09D.3000900@UGent.be>
Message-ID: <q87d3q$6eob$1@blaine.gmane.org>

05.04.19 09:07, Jeroen Demeyer ????:
> On 2019-04-05 00:57, Greg Ewing wrote:
>> If it's designed for use by things outside of CPython, how
>> can you be sure nothing is using it?
> 
> Of course I'm not sure. However:
> 
> 1. So far, nobody in this thread knows of any code using it.
> 
> 2. So far, nobody in this thread knows any use case for it.
> 
> And if we end up deprecating and it was a mistake, we can easily revert 
> the deprecation.

I have a use case. I did not know this before, but it can be used to 
implement accelerated versions of separate methods instead of the whole 
class. I'm going to use it to further optimize total_ordering.

Thanks Josh Rosenberg for the tip.


From J.Demeyer at UGent.be  Fri Apr  5 07:27:17 2019
From: J.Demeyer at UGent.be (Jeroen Demeyer)
Date: Fri, 5 Apr 2019 13:27:17 +0200
Subject: [Python-Dev] Deprecating "instance method" class
In-Reply-To: <q87d3q$6eob$1@blaine.gmane.org>
References: <5CA5EFCC.2030400@UGent.be> <q84s68$3k09$1@blaine.gmane.org>
 <5CA68BBC.8060205@canterbury.ac.nz> <5CA6F09D.3000900@UGent.be>
 <q87d3q$6eob$1@blaine.gmane.org>
Message-ID: <5CA73B95.6040509@UGent.be>

On 2019-04-05 14:10, Serhiy Storchaka wrote:
> it can be used to
> implement accelerated versions of separate methods instead of the whole
> class.

Could you elaborate? I'm curious what you mean.

> I'm going to use it to further optimize total_ordering.

There are so many ways in which total_ordering is inefficient. If you 
really want it to be efficient, you should just implement it in C.

From storchaka at gmail.com  Fri Apr  5 09:13:26 2019
From: storchaka at gmail.com (Serhiy Storchaka)
Date: Fri, 5 Apr 2019 16:13:26 +0300
Subject: [Python-Dev] Deprecating "instance method" class
In-Reply-To: <5CA73B95.6040509@UGent.be>
References: <5CA5EFCC.2030400@UGent.be> <q84s68$3k09$1@blaine.gmane.org>
 <5CA68BBC.8060205@canterbury.ac.nz> <5CA6F09D.3000900@UGent.be>
 <q87d3q$6eob$1@blaine.gmane.org> <5CA73B95.6040509@UGent.be>
Message-ID: <q87gp1$7elo$1@blaine.gmane.org>

05.04.19 14:27, Jeroen Demeyer ????:
> On 2019-04-05 14:10, Serhiy Storchaka wrote:
>> it can be used to
>> implement accelerated versions of separate methods instead of the whole
>> class.
> 
> Could you elaborate? I'm curious what you mean.

It is easy to implement a function in C. But there is a difference 
between functions implemented in Python and C -- the latter are not 
descriptors. They behave like static methods when assigned to a class 
attribute, i.e. there is no implicit passing of the "self" argument.

>> I'm going to use it to further optimize total_ordering.
> 
> There are so many ways in which total_ordering is inefficient. If you 
> really want it to be efficient, you should just implement it in C.

Yes, this is what I want to do. I did not do this only because 
implementing method-like functions which which do not belong to concrete 
class implemented in C is not convention. But PyInstanceMethod_New() 
should help.


From J.Demeyer at UGent.be  Fri Apr  5 08:33:29 2019
From: J.Demeyer at UGent.be (Jeroen Demeyer)
Date: Fri, 5 Apr 2019 14:33:29 +0200
Subject: [Python-Dev] Deprecating "instance method" class
In-Reply-To: <q87gp1$7elo$1@blaine.gmane.org>
References: <5CA5EFCC.2030400@UGent.be> <q84s68$3k09$1@blaine.gmane.org>
 <5CA68BBC.8060205@canterbury.ac.nz> <5CA6F09D.3000900@UGent.be>
 <q87d3q$6eob$1@blaine.gmane.org> <5CA73B95.6040509@UGent.be>
 <q87gp1$7elo$1@blaine.gmane.org>
Message-ID: <5CA74B19.70806@UGent.be>

On 2019-04-05 15:13, Serhiy Storchaka wrote:
> It is easy to implement a function in C.

Why does it need to be a PyCFunction? You could put an actual method 
descriptor in the class. In other words, use PyDescr_NewMethod() instead 
of PyCFunction_New() + PyInstanceMethod_New(). It's probably going to be 
faster too since the instancemethod adds an unoptimized extra level of 
indirection.

> Yes, this is what I want to do. I did not do this only because
> implementing method-like functions which which do not belong to concrete
> class implemented in C is not convention.

Sure, you could implement separate methods like __gt__ in C, but that's 
still less efficient than just implementing a specific tp_richcompare 
for total_ordering and then having the usual wrapper descriptors for __gt__.

From guido at python.org  Fri Apr  5 11:46:00 2019
From: guido at python.org (Guido van Rossum)
Date: Fri, 5 Apr 2019 08:46:00 -0700
Subject: [Python-Dev] Deprecating "instance method" class
In-Reply-To: <5CA74B19.70806@UGent.be>
References: <5CA5EFCC.2030400@UGent.be> <q84s68$3k09$1@blaine.gmane.org>
 <5CA68BBC.8060205@canterbury.ac.nz> <5CA6F09D.3000900@UGent.be>
 <q87d3q$6eob$1@blaine.gmane.org> <5CA73B95.6040509@UGent.be>
 <q87gp1$7elo$1@blaine.gmane.org> <5CA74B19.70806@UGent.be>
Message-ID: <CAP7+vJ++UWWSyaBwdpH2Kuu5tZ=s+2GvB=LnF8a4POy1BMv5nQ@mail.gmail.com>

Let's stop here. This API is doing no harm, it's not a maintenance burden,
clearly *some* folks have a use for it. Let's just keep it, okay? There are
bigger fish to fry.

On Fri, Apr 5, 2019 at 5:36 AM Jeroen Demeyer <J.Demeyer at ugent.be> wrote:

> On 2019-04-05 15:13, Serhiy Storchaka wrote:
> > It is easy to implement a function in C.
>
> Why does it need to be a PyCFunction? You could put an actual method
> descriptor in the class. In other words, use PyDescr_NewMethod() instead
> of PyCFunction_New() + PyInstanceMethod_New(). It's probably going to be
> faster too since the instancemethod adds an unoptimized extra level of
> indirection.
>
> > Yes, this is what I want to do. I did not do this only because
> > implementing method-like functions which which do not belong to concrete
> > class implemented in C is not convention.
>
> Sure, you could implement separate methods like __gt__ in C, but that's
> still less efficient than just implementing a specific tp_richcompare
> for total_ordering and then having the usual wrapper descriptors for
> __gt__.
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/guido%40python.org
>


-- 
--Guido van Rossum (python.org/~guido)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190405/614afc50/attachment.html>

From vstinner at redhat.com  Fri Apr  5 12:00:31 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Fri, 5 Apr 2019 18:00:31 +0200
Subject: [Python-Dev] New Python Initialization API
In-Reply-To: <6a17e990-7e2a-0544-1e8e-9b16d05e4df6@python.org>
References: <CA+3bQGHabA_eeDbTQ_KGSTgq9UKEdMuTDTbDXSMgs61SPGPmkQ@mail.gmail.com>
 <70c245c7-8f40-a51b-934b-af958f7cd849@python.org>
 <CAP1=2W6+udqgYbXCvGQAg4tbuKdU8LfrDeCrrvwMoxtZZ7UN1g@mail.gmail.com>
 <CA+3bQGG3BAp_4pEqkY9JiJOEStkX4KA=cdaYbTv30FospKC-7w@mail.gmail.com>
 <119e26f0-d826-7e13-aa4a-e0a67bea3265@python.org>
 <CA+3bQGE+vLcsWpkQvSu_ThNvq3DYAR0pL=Z92FFLAUb+fVm2JQ@mail.gmail.com>
 <91eec784-28ab-024f-42a6-8a1e5d37d9bf@python.org>
 <6a17e990-7e2a-0544-1e8e-9b16d05e4df6@python.org>
Message-ID: <CA+3bQGG+rpjpfnrdRCG-mfY7yszzVHMnuF1dniFP0FXpri3M0g@mail.gmail.com>

Le dim. 31 mars 2019 ? 01:49, Steve Dower <steve.dower at python.org> a ?crit :
> Here is my first review of https://www.python.org/dev/peps/pep-0587/ and
> in general I think it's very good.

Ah nice, that's a good start :-) Thanks for reviewing it.

Your email is long, and answer makes it even longer, so I will reply
in multiple emails.


> > ``PyWideCharList`` is a list of ``wchar_t*`` strings.
>
> I always forget whether "const" is valid in C99, but if it is, can we
> make this a list of const strings?

Short answer: no :-(

This structure mostly exists to simplify the implementation. Sadly,
"const PyWideCharList" doesn't automatically make PyWideCharList.items
an array of "const wchar_t*". I tried some hacks to have an array of
const strings... but it would be very complicated and not natural at
all in C.

Sadly, it's way more simple to have "wchar_t*" in practice.


> I also prefer a name like ``PyWideStringList``, since that's what it is
> (the other places we use WideChar in the C API refer only to a single
> string, as far as I'm aware).

I'm fine with this name.


> > ``PyInitError`` is a structure to store an error message or an exit code
> > for the Python Initialization.
>
> I love this struct! Currently it's private, but I wonder whether it's
> worth making it public as PyError (or PyErrorInfo)?

The PEP 587 makes the structure public, but I'm not sure about calling
it PyError because PyInitError also allows to exit Python with an exit
status which is something specific to the initialization.

If you want to use a structure to reporting errors, I would prefer to
add a new simpler PyError structure to only report an error message,
but never exit Python. PyInitError use case is really specific to
Python initialization.

Moreover, the API is inefficient since it is returned by copy, not by
reference. That's fine for Python initialization which only happens once
and is not part of "hot code".

I'm not sure if PyError would need to store the C function name where the
error is triggered. Usually, we try hard to hide Python internals to the
user.


> > * ``exitcode`` (``int``): if greater or equal to zero, argument passed to
> >  ``exit()``
>
> Windows is likely to need/want negative exit codes, as many system
> errors are represented as 0x80000000|(source of error)|(specific code).

Hum, int was used in Python 3.6 code base. We change change
PyInitError.exitcode type to DWORD on Windows, but use int on Unix.
We can add a private field to check if the error is an error message or an
exit code. Or maybe check if the error message is NULL or not.

Py_INIT_ERR(MSG) must never be called with Py_INIT_ERR(NULL) and it should
be called with a static string, not with a dynamically allocated string
(since the API doesn't allow to release memory).


> > * ``user_err`` (int): if non-zero, the error is caused by the user
> >   configuration, otherwise it's an internal Python error.
>
> Maybe we could just encode this as "positive exitcode is user error,
> negative is internal error"? I'm pretty sure struct return values are
> passed by reference in most C calling conventions, so the size of the
> struct isn't a big deal, but without a proper bool type it may look like
> this is a second error code (like errno/winerror in a few places).

Honestly, I'm not sure that we really have to distinguish "user error" and
"internal error". It's an old debate about calling abort()/DebugBreak() or
not. It seems like most users are annoyed by getting a coredump on Unix
when abort() is called.

Maybe we should just remove Py_INIT_USER_ERR(), always use Py_INIT_ERR(),
and never call abort()/DebugBreak() in Py_ExitInitError().

Or does anyone see a good reason to trigger a debugger on an
initialization error?

See https://bugs.python.org/issue19983 discussion:
"When interrupted during startup, Python should not call abort() but exit()"

Note: I'm not talking about Py_FatalError() here, this one will not
change.

Victor

From vstinner at redhat.com  Fri Apr  5 12:12:50 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Fri, 5 Apr 2019 18:12:50 +0200
Subject: [Python-Dev] New Python Initialization API
In-Reply-To: <6a17e990-7e2a-0544-1e8e-9b16d05e4df6@python.org>
References: <CA+3bQGHabA_eeDbTQ_KGSTgq9UKEdMuTDTbDXSMgs61SPGPmkQ@mail.gmail.com>
 <70c245c7-8f40-a51b-934b-af958f7cd849@python.org>
 <CAP1=2W6+udqgYbXCvGQAg4tbuKdU8LfrDeCrrvwMoxtZZ7UN1g@mail.gmail.com>
 <CA+3bQGG3BAp_4pEqkY9JiJOEStkX4KA=cdaYbTv30FospKC-7w@mail.gmail.com>
 <119e26f0-d826-7e13-aa4a-e0a67bea3265@python.org>
 <CA+3bQGE+vLcsWpkQvSu_ThNvq3DYAR0pL=Z92FFLAUb+fVm2JQ@mail.gmail.com>
 <91eec784-28ab-024f-42a6-8a1e5d37d9bf@python.org>
 <6a17e990-7e2a-0544-1e8e-9b16d05e4df6@python.org>
Message-ID: <CA+3bQGGJKOwCbnpRz2VxU5vA3xeOxfB-C8xx+3fpSKEzqg7qeQ@mail.gmail.com>

About PyPreConfig and encodings.

> The appendix is excellent, by the way. Very useful detail to have
> written down.

Thanks. The appendix is based on Include/cpython/coreconfig.h comments
which is now my reference documentation. By the way, this header file
contains more information about PyConfig fields than the PEP 587. For
example, the comment on filesystem_encoding and filesystem_errors lists
every single cases and exceptions (it describes the implementation).


> > ``PyPreConfig`` structure is used to pre-initialize Python:
> >
> > * Set the memory allocator
> > * Configure the LC_CTYPE locale
> > * Set the UTF-8 mode
>
> I think we should have the isolated flag in here - oh wait, we do - I
> think we should have the isolated/use_environment options listed in this
> list :)

My introduction paragraph only explains the changes made by
Py_PreInitialize(): calling Py_PreInitialize() doesn't "isolate"
Python.

PyPreConfig.isolated is used to decide if Python reads environment
variables or not. Examples: PYTHONMALLOC, PYTHONUTF8, PYTHONDEVMODE (which
has an impact on PyPreConfig.allocator), PYTHONCOERCECLOCALE, etc.

That's why isolated and use_environment are present in PyPreConfig and
PyConfig. In practice, values should be equal in both structures.
Moreover, if PyConfig.isolated is equal to 1, Py_InitializeFromConfig()
updates _PyRuntime.preconfig.isolated to 1 ;-)


> > * ``PyInitError Py_PreInitialize(const PyPreConfig *config)``
> > * ``PyInitError Py_PreInitializeFromArgs( const PyPreConfig *config,
> int argc, char **argv)``
> > * ``PyInitError Py_PreInitializeFromWideArgs( const PyPreConfig
> *config, int argc, wchar_t **argv)``
>
> I hope to one day be able to support multiple runtimes per process - can
> we have an opaque PyRuntime object exposed publicly now and passed into
> these functions?

I hesitated to include a "_PyRuntimeState*" parameter somewhere, but I
chose to not do so.

Currently, there is a single global variable _PyRuntime which has the type
_PyRuntimeState. The _PyRuntime_Initialize() API is designed around this
global variable. For example, _PyRuntimeState contains the registry of
interpreters: you don't want to have multiple registries :-)

I understood that we should only have a single instance of
_PyRuntimeState. So IMHO it's fine to keep it private at this point.
There is no need to expose it in the API.


> (FWIW, I think we're a long way from being able to support multiple
> runtimes *simultaneously*, so the initial implementation here would be
> to have a PyRuntime_Create() that returns our global one once and then
> errors until it's finalised. The migration path is probably to enable
> switching of the current runtime via a dedicated function (i.e. one
> active at a time, probably with thread local storage), since we have no
> "context" parameter for C API functions, and obviously there are still
> complexities such as poorly written extension modules that nonetheless
> can be dealt with in embedding scenarios by simply not using them. This
> doesn't seem like an unrealistic future, *unless* we add a whole lot of
> new APIs now that can't allow it :) )

FYI I tried to design an internal API with a "context" to pass
_PyRuntimeState, PyPreConfig, _PyConfig, the current interpreter, etc.

=> https://bugs.python.org/issue35265

My first need was to pass a memory allocator to Py_DecodeLocale().

There are 2 possible implementations:

* Modify *all* functions to add a new "context" parameter and modify *all*
  functions to pass this parameter to sub-functions.
* Store the current "context" as a thread local variable or something like
  that.

I wrote a proof-of-concept of the first option: the implementation was
very painful to write: a lot of changes which looks useless and a lot
of new private functions which to pass the argument. I had to modify
way too much code. I gave up.

For the second option: well, there is no API change needed!
It can be done later.
Moreover, we already have such API! PyThreadState_Get() gets the Python
thread state of the current thread: the current interpreter can be
accessed from there.


> > ``PyPreConfig`` fields:
> >
> > * ``coerce_c_locale_warn``: if non-zero, emit a warning if the C locale
> >   is coerced.
> > * ``coerce_c_locale``: if equals to 2, coerce the C locale; if equals to
> >   1, read the LC_CTYPE to decide if it should be coerced.
>
> Can we use another value for coerce_c_locale to determine whether to
> warn or not? Save a field.

coerce_c_locale is already complex, it can have 4 values: -1, 0, 1 and 2.
I prefer keep a separated field.

Moreover, I understood that you might want to coerce the C locale *and*
get the warning, or get the warning but *not* coerce the locale.


> > * ``legacy_windows_fs_encoding`` (Windows only): if non-zero, set the
> >   Python filesystem encoding to ``"mbcs"``.
> > * ``utf8_mode``: if non-zero, enable the UTF-8 mode
>
> Why not just set the encodings here?

For different technical reasons, you simply cannot specify an encoding
name. You can also pass options to tell Python that you have some
preferences (PyPreConfig and PyConfig fields).

Python doesn't support any encoding and encoding errors combinations. In
practice, it only supports a narrow set of choices. The main implementation are
Py_EncodeLocale() and Py_DecodeLocale() functions which uses the C codec
of the current locale encoding to implement the filesystem encoding,
before the codec implemented in Python can be used.

Basically, only the current locale encoding or UTF-8 are supported.
If you want UTF-8, enable the UTF-8 Mode.

To load the Python codec, you need importlib. importlib needs to access
the filesystem which requires a codec to encode/decode file names
(PyConfig.module_search_paths uses Unicode wchar_t* strings, but the C API
only supports bytes char* strings).

Py_PreInitialize() doesn't set the filesystem encoding. It initializes the
LC_CTYPE locale and Python global configuration variables (Py_UTF8Mode and
Py_LegacyWindowsFSEncodingFlag).


> Obviously we are not ready to import most encodings after pre
> initialization, but I think that's okay. Embedders who set something
> outside the range of what can be used without importing encodings will
> get an error to that effect if we try.

You need a C implementation of the Python filesystem encoding very early
in Python initialization. You cannot start with one encoding and "later"
switch the encoding. I tried multiple times the last 10 years and I always
failed to do that. All attempts failed with mojibake at different
levels.

Unix pays the price of its history. Windows is a very different story:
there are API to access the filesystem with Unicode strings,
there is no such "bootstrap problem" for importlib.


> In fact, I'd be totally okay with letting embedders specify their own
> function pointer here to do encoding/decoding between Unicode and the OS
> preferred encoding.

In my experience, when someone wants to get a specific encoding: they
only want UTF-8. There is now the UTF-8 Mode which ignores the locale
and forces the usage of UTF-8.

I'm not sure that there is a need to have a custom codec. Moreover, if
there an API to pass a codec in C, you will need to expose it somehow
at the Python level for os.fsencode() and os.fsdecode().

Currently, Python ensures during early stage of startup that
codecs.lookup(sys.getfilesystemencoding()) works: there is a existing
Python codec for the requested filesystem encoding.

Victor

From vstinner at redhat.com  Fri Apr  5 12:22:17 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Fri, 5 Apr 2019 18:22:17 +0200
Subject: [Python-Dev] New Python Initialization API
In-Reply-To: <6a17e990-7e2a-0544-1e8e-9b16d05e4df6@python.org>
References: <CA+3bQGHabA_eeDbTQ_KGSTgq9UKEdMuTDTbDXSMgs61SPGPmkQ@mail.gmail.com>
 <70c245c7-8f40-a51b-934b-af958f7cd849@python.org>
 <CAP1=2W6+udqgYbXCvGQAg4tbuKdU8LfrDeCrrvwMoxtZZ7UN1g@mail.gmail.com>
 <CA+3bQGG3BAp_4pEqkY9JiJOEStkX4KA=cdaYbTv30FospKC-7w@mail.gmail.com>
 <119e26f0-d826-7e13-aa4a-e0a67bea3265@python.org>
 <CA+3bQGE+vLcsWpkQvSu_ThNvq3DYAR0pL=Z92FFLAUb+fVm2JQ@mail.gmail.com>
 <91eec784-28ab-024f-42a6-8a1e5d37d9bf@python.org>
 <6a17e990-7e2a-0544-1e8e-9b16d05e4df6@python.org>
Message-ID: <CA+3bQGH6j2-hx_MyZSKdUF6YY3qBuWUhrLksRyensXb6=T1qCw@mail.gmail.com>

> > Example of Python initialization enabling the isolated mode::
> >
> >     PyConfig config = PyConfig_INIT;
> >     config.isolated = 1;
>
> Haven't we already used extenal values by this point that should have
> been isolated?

On this specific example, "config.isolated = 1;" ensures that
Py_PreInitialize() is also called internally with
"PyPreConfig.isolated = 1".


> I'd rather have the isolation up front. Or better yet,
> make isolation the default unless you call one of the "FromArgs"
> functions, and then we don't actually need the config setting at all.

While there are supporters of an "isolated Python" (sometimes called
"system python"), the fact that it doesn't exist in any Linux distribution
nor on any other operating system (Windows, macOS, FreeBSD), whereas it's
already doable in Python 3.6 with Py_IsolatedFlag=1 makes me think that
users like the ability to control Python with environment variables and
configuration files.

I would prefer to leave Python as not isolated by default. It's just a
matter of comment line arguments.


> > * The PEP 432 stores ``PYTHONCASEOK`` into the config. Do we need
> >   to add something for that into ``PyConfig``? How would it be exposed
> >   at the Python level for ``importlib``? Passed as an argument to
> >   ``importlib._bootstrap._setup()`` maybe? It can be added later if
> >   needed.
>
> Could we convert it into an xoption? It's very rarely used, to my knowledge.

The first question is if there is any need for an embedder to change
this option. Currently, importlib._bootstrap_external._install() reads
the environment variable and it's the only way to control the option.

... By the way, importlib reads PYTHONCASEOK environment varaible even
if isolated mode is enabled (sys.flags.isolated is equal to 1). Is it
a bug? :-)

Victor

From vstinner at redhat.com  Fri Apr  5 12:24:27 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Fri, 5 Apr 2019 18:24:27 +0200
Subject: [Python-Dev] New Python Initialization API
In-Reply-To: <6a17e990-7e2a-0544-1e8e-9b16d05e4df6@python.org>
References: <CA+3bQGHabA_eeDbTQ_KGSTgq9UKEdMuTDTbDXSMgs61SPGPmkQ@mail.gmail.com>
 <70c245c7-8f40-a51b-934b-af958f7cd849@python.org>
 <CAP1=2W6+udqgYbXCvGQAg4tbuKdU8LfrDeCrrvwMoxtZZ7UN1g@mail.gmail.com>
 <CA+3bQGG3BAp_4pEqkY9JiJOEStkX4KA=cdaYbTv30FospKC-7w@mail.gmail.com>
 <119e26f0-d826-7e13-aa4a-e0a67bea3265@python.org>
 <CA+3bQGE+vLcsWpkQvSu_ThNvq3DYAR0pL=Z92FFLAUb+fVm2JQ@mail.gmail.com>
 <91eec784-28ab-024f-42a6-8a1e5d37d9bf@python.org>
 <6a17e990-7e2a-0544-1e8e-9b16d05e4df6@python.org>
Message-ID: <CA+3bQGFu43P7ZoJ6-TDsNEU8d_ZsAJZG=9b83WXsq25hbkiP4Q@mail.gmail.com>

> I think my biggest point (about halfway down) is that I'd rather use
> argv/environ/etc. to *initialize* PyConfig and then only use the config
> for initializing the runtime. That way it's more transparent for users
> and more difficult for us to add options that embedders can't access.

I chose to exclude PyConfig_Read() function from the PEP to try to start
with the bare minimum public API and see how far we can go with that.

The core of the PEP 587 implementation are PyPreConfig_Read() and
PyConfig_Read() functions (currently called _PyPreConfig_Read() and
_PyCoreConfig_Read()): they populate all fields so the read config becomes
the reference config which will be applied.

For example, PyConfig_Read() fills module_search_paths, from other
PyConfig fields: it will become sys.path.

I spent a lot of time to rework deeply the implementation of
PyConfig_Read() to make sure that it has no side effect. Reading and
writing the configuration are now strictly separated. So it is safe
to call PyConfig_Read(), modify PyConfig afterwards, and pass the modified
config to Py_InitializeFromConfig().

Do you think that exposing PyConfig_Read() would solve some of your
problems?


> Currently you have three functions, that take a PyConfig and optionally
> also use the environment/argv to figure out the settings:
>
> > * ``PyInitError Py_InitializeFromConfig(const PyConfig *config)``
> > * ``PyInitError Py_InitializeFromArgs(const PyConfig *config, int
> argc, char **argv)``
> > * ``PyInitError Py_InitializeFromWideArgs(const PyConfig *config, int
> argc, wchar_t **argv)``
>
> I would much prefer to see this flipped around, so that there is one
> initialize function taking PyConfig, and two functions that will fill
> out the PyConfig based on the environment:
>
> (note two of the "const"s are gone)
>
> * ``PyInitError Py_SetConfigFromArgs(PyConfig *config, int argc, char
> **argv)``
> * ``PyInitError Py_SetConfigFromWideArgs(PyConfig *config, int argc,
> wchar_t **argv)``
> * ``PyInitError Py_InitializeFromConfig(const PyConfig *config)``

This implementation evolved *A LOT* last months. I was *very confused*
until the pre-initialization phase was introduced which solved a lot
of bootstrap issues.

After I wrote down the PEP and read it again, I also came to the same
conclusion: Py_InitializeFromConfig(config) should be enough, and we can
add helper functions to set arguments on PyConfig (as you showed).

Victor

From vstinner at redhat.com  Fri Apr  5 12:36:37 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Fri, 5 Apr 2019 18:36:37 +0200
Subject: [Python-Dev] New Python Initialization API
In-Reply-To: <6a17e990-7e2a-0544-1e8e-9b16d05e4df6@python.org>
References: <CA+3bQGHabA_eeDbTQ_KGSTgq9UKEdMuTDTbDXSMgs61SPGPmkQ@mail.gmail.com>
 <70c245c7-8f40-a51b-934b-af958f7cd849@python.org>
 <CAP1=2W6+udqgYbXCvGQAg4tbuKdU8LfrDeCrrvwMoxtZZ7UN1g@mail.gmail.com>
 <CA+3bQGG3BAp_4pEqkY9JiJOEStkX4KA=cdaYbTv30FospKC-7w@mail.gmail.com>
 <119e26f0-d826-7e13-aa4a-e0a67bea3265@python.org>
 <CA+3bQGE+vLcsWpkQvSu_ThNvq3DYAR0pL=Z92FFLAUb+fVm2JQ@mail.gmail.com>
 <91eec784-28ab-024f-42a6-8a1e5d37d9bf@python.org>
 <6a17e990-7e2a-0544-1e8e-9b16d05e4df6@python.org>
Message-ID: <CA+3bQGHvsUDfRm1MwHejznunO71fu2bpk-4Mxf52gjsJ2+k0jw@mail.gmail.com>

For the PyMainConfig structure idea, I cannot comment at this point. I
need more time to think about it.


About the "path configuration" fields, maybe a first step to enhance
the API would be to add the the following function:

PyInitError PyConfig_ComputePath(PyConfig *config, const wchar *home);

where home can be NULL (and PyConfig.module_search_paths_env field
goes away: the function reads PYTHONPATH env var internally).

This function would "compute the path configuration", what's currently
listed in _PyCoreConfig under:

    /* Path configuration outputs */
    int use_module_search_paths;  /* If non-zero, use module_search_paths */
    _PyWstrList module_search_paths;  /* sys.path paths. Computed if
                                       use_module_search_paths is equal
                                       to zero. */

    wchar_t *executable;    /* sys.executable */
    wchar_t *prefix;        /* sys.prefix */
    wchar_t *base_prefix;   /* sys.base_prefix */
    wchar_t *exec_prefix;   /* sys.exec_prefix */
    wchar_t *base_exec_prefix;  /* sys.base_exec_prefix */
#ifdef MS_WINDOWS
    wchar_t *dll_path;      /* Windows DLL path */
#endif

Victor

From storchaka at gmail.com  Fri Apr  5 13:53:10 2019
From: storchaka at gmail.com (Serhiy Storchaka)
Date: Fri, 5 Apr 2019 20:53:10 +0300
Subject: [Python-Dev] Deprecating "instance method" class
In-Reply-To: <5CA74B19.70806@UGent.be>
References: <5CA5EFCC.2030400@UGent.be> <q84s68$3k09$1@blaine.gmane.org>
 <5CA68BBC.8060205@canterbury.ac.nz> <5CA6F09D.3000900@UGent.be>
 <q87d3q$6eob$1@blaine.gmane.org> <5CA73B95.6040509@UGent.be>
 <q87gp1$7elo$1@blaine.gmane.org> <5CA74B19.70806@UGent.be>
Message-ID: <q8815h$751n$1@blaine.gmane.org>

05.04.19 15:33, Jeroen Demeyer ????:
> On 2019-04-05 15:13, Serhiy Storchaka wrote:
>> It is easy to implement a function in C.
> 
> Why does it need to be a PyCFunction? You could put an actual method 
> descriptor in the class. In other words, use PyDescr_NewMethod() instead 
> of PyCFunction_New() + PyInstanceMethod_New(). It's probably going to be 
> faster too since the instancemethod adds an unoptimized extra level of 
> indirection.

PyDescr_NewMethod() takes PyTypeObject* which is not known at that 
moment. But maybe passing &PyBaseObject_Type will make a trick. I need 
to try.

>> Yes, this is what I want to do. I did not do this only because
>> implementing method-like functions which which do not belong to concrete
>> class implemented in C is not convention.
> 
> Sure, you could implement separate methods like __gt__ in C, but that's 
> still less efficient than just implementing a specific tp_richcompare 
> for total_ordering and then having the usual wrapper descriptors for 
> __gt__.

At Python level we can monkeypatch __gt__, but not tp_richcompare.

In any case, removing a C API is a large breakage, and it is better to 
avoid it unless that API is inherently broken.


From christian at python.org  Fri Apr  5 13:00:00 2019
From: christian at python.org (Christian Heimes)
Date: Fri, 5 Apr 2019 19:00:00 +0200
Subject: [Python-Dev] Deprecating "instance method" class
In-Reply-To: <CAP7+vJ++UWWSyaBwdpH2Kuu5tZ=s+2GvB=LnF8a4POy1BMv5nQ@mail.gmail.com>
References: <5CA5EFCC.2030400@UGent.be> <q84s68$3k09$1@blaine.gmane.org>
 <5CA68BBC.8060205@canterbury.ac.nz> <5CA6F09D.3000900@UGent.be>
 <q87d3q$6eob$1@blaine.gmane.org> <5CA73B95.6040509@UGent.be>
 <q87gp1$7elo$1@blaine.gmane.org> <5CA74B19.70806@UGent.be>
 <CAP7+vJ++UWWSyaBwdpH2Kuu5tZ=s+2GvB=LnF8a4POy1BMv5nQ@mail.gmail.com>
Message-ID: <52930d72-803b-0f8b-b338-a96e914ff2eb@python.org>

On 05/04/2019 17.46, Guido van Rossum wrote:
> Let's stop here. This API is doing no harm, it's not a maintenance
> burden, clearly *some* folks have a use for it. Let's just keep it,
> okay? There are bigger fish to fry.

Sounds good to me. My code is 12 years ago and I can't remember any
complain. I have closed the BPO issue and PR.

From J.Demeyer at UGent.be  Fri Apr  5 13:56:08 2019
From: J.Demeyer at UGent.be (Jeroen Demeyer)
Date: Fri, 5 Apr 2019 19:56:08 +0200
Subject: [Python-Dev] Deprecating "instance method" class
In-Reply-To: <q8815h$751n$1@blaine.gmane.org>
References: <5CA5EFCC.2030400@UGent.be> <q84s68$3k09$1@blaine.gmane.org>
 <5CA68BBC.8060205@canterbury.ac.nz> <5CA6F09D.3000900@UGent.be>
 <q87d3q$6eob$1@blaine.gmane.org> <5CA73B95.6040509@UGent.be>
 <q87gp1$7elo$1@blaine.gmane.org> <5CA74B19.70806@UGent.be>
 <q8815h$751n$1@blaine.gmane.org>
Message-ID: <5CA796B8.1000202@UGent.be>

On 2019-04-05 19:53, Serhiy Storchaka wrote:
> At Python level we can monkeypatch __gt__, but not tp_richcompare.

Sure, but you're planning to use C anyway so that's not really an argument.

From status at bugs.python.org  Fri Apr  5 14:07:47 2019
From: status at bugs.python.org (Python tracker)
Date: Fri,  5 Apr 2019 18:07:47 +0000 (UTC)
Subject: [Python-Dev] Summary of Python tracker Issues
Message-ID: <20190405180747.30B2D52B1D6@bugs.ams1.psf.io>


ACTIVITY SUMMARY (2019-03-29 - 2019-04-05)
Python tracker at https://bugs.python.org/

To view or respond to any of the issues listed below, click on the issue.
Do NOT respond to this message.

Issues counts and deltas:
  open    7056 ( +8)
  closed 41231 (+55)
  total  48287 (+63)

Open issues with patches: 2816 


Issues opened (44)
==================

#36260: Cpython/Lib vulnerability found and request a patch submission
https://bugs.python.org/issue36260  reopened by krnick

#36474: RecursionError resets trace function set via sys.settrace
https://bugs.python.org/issue36474  opened by blueyed

#36475: PyEval_AcquireLock() and PyEval_AcquireThread() do not handle 
https://bugs.python.org/issue36475  opened by eric.snow

#36476: Runtime finalization assumes all other threads have exited.
https://bugs.python.org/issue36476  opened by eric.snow

#36478: backport of pickle fixes to Python 3.5.7 uses C99 for loops
https://bugs.python.org/issue36478  opened by Anthony Sottile

#36479: Exit threads when interpreter is finalizing rather than runtim
https://bugs.python.org/issue36479  opened by eric.snow

#36481: telnetlib process_rawq() callback
https://bugs.python.org/issue36481  opened by Quanthir

#36484: Can't reorder TLS 1.3 ciphersuites
https://bugs.python.org/issue36484  opened by Eman Alashwali

#36485: Establish a uniform way to clear all caches in a given module
https://bugs.python.org/issue36485  opened by serhiy.storchaka

#36486: Bugs and inconsistencies in unicodedata
https://bugs.python.org/issue36486  opened by dscorbett

#36487: Make C-API docs  clear about what the "main" interpreter is
https://bugs.python.org/issue36487  opened by nanjekyejoannah

#36488: os.sendfile() on BSD and macOS does not return bytes sent on E
https://bugs.python.org/issue36488  opened by giampaolo.rodola

#36489: add filename_extension_map and/or content-types_map dict(s) to
https://bugs.python.org/issue36489  opened by Daniel Black

#36490: Modernize function signature format in Archiving section of sh
https://bugs.python.org/issue36490  opened by CAM-Gerlach

#36494: bdb.Bdb.set_trace: should set f_trace_lines = True
https://bugs.python.org/issue36494  opened by blueyed

#36495: Out-of-bounds array reads in Python/ast.c
https://bugs.python.org/issue36495  opened by blarsen

#36497: Undocumented behavior in csv.Sniffer (preferred delimiters)
https://bugs.python.org/issue36497  opened by thomas

#36500: Add "regen-*" equivalent projects for Windows builds
https://bugs.python.org/issue36500  opened by anthony shaw

#36501: Remove POSIX.1e ACLs in tests that rely on default permissions
https://bugs.python.org/issue36501  opened by Ivan.Pozdeev

#36502: The behavior of str.isspace() for U+00A0 and U+202F is differe
https://bugs.python.org/issue36502  opened by Jun

#36503: remove references to aix3 and aix4 in \*.py
https://bugs.python.org/issue36503  opened by Michael.Felt

#36504: Signed integer overflow in _ctypes.c's PyCArrayType_new()
https://bugs.python.org/issue36504  opened by ZackerySpytz

#36506: [security] CVE-2019-10268: An arbitrary execution vulnerabilit
https://bugs.python.org/issue36506  opened by bigbigliang

#36508: python-config --ldflags must not contain LINKFORSHARED ("-Xlin
https://bugs.python.org/issue36508  opened by vstinner

#36509: Add iot layout for windows iot containers
https://bugs.python.org/issue36509  opened by Paul Monson

#36511: Add Windows ARM32 buildbot
https://bugs.python.org/issue36511  opened by Paul Monson

#36512: future_factory argument for Thread/ProcessPoolExecutor
https://bugs.python.org/issue36512  opened by stefanhoelzl

#36513: Add support for building arm32 nuget package
https://bugs.python.org/issue36513  opened by Paul Monson

#36515: unaligned memory access in the _sha3 extension
https://bugs.python.org/issue36515  opened by doko

#36516: Python Launcher can not recognize pyw file as Python GUI Scrip
https://bugs.python.org/issue36516  opened by gjj2828

#36517: typing.NamedTuple does not support mixins
https://bugs.python.org/issue36517  opened by rectalogic

#36518: Avoid conflicts when pass arbitrary keyword arguments to Pytho
https://bugs.python.org/issue36518  opened by serhiy.storchaka

#36519: Blake2b/s implementations have minor GIL issues
https://bugs.python.org/issue36519  opened by gwk

#36520: Email header folded incorrectly
https://bugs.python.org/issue36520  opened by Jonathan Horn

#36521: Consider removing docstrings from co_consts in code objects
https://bugs.python.org/issue36521  opened by rhettinger

#36523: missing docs for IOBase writelines
https://bugs.python.org/issue36523  opened by Marcin Niemira

#36527: unused parameter warnings in Include/object.h (affecting build
https://bugs.python.org/issue36527  opened by AMDmi3

#36528: Remove duplicate tests in Lib/tests/re_tests.py
https://bugs.python.org/issue36528  opened by xtreak

#36529: Python from WindowsStore: can't install package using "-m pip"
https://bugs.python.org/issue36529  opened by Ilya Kazakevich

#36531: PyType_FromSpec wrong behavior with multiple Py_tp_members
https://bugs.python.org/issue36531  opened by eelizondo

#36532: Example of logging.formatter with new str.format style
https://bugs.python.org/issue36532  opened by spaceman_spiff

#36533: logging regression with threading + fork are mixed in 3.7.1rc2
https://bugs.python.org/issue36533  opened by gregory.p.smith

#36534: tarfile: handling Windows (path) illegal characters in archive
https://bugs.python.org/issue36534  opened by CristiFati

#36535: Windows build failure when use the code from the GitHub master
https://bugs.python.org/issue36535  opened by Manjusaka



Most recent 15 issues with no replies (15)
==========================================

#36535: Windows build failure when use the code from the GitHub master
https://bugs.python.org/issue36535

#36531: PyType_FromSpec wrong behavior with multiple Py_tp_members
https://bugs.python.org/issue36531

#36529: Python from WindowsStore: can't install package using "-m pip"
https://bugs.python.org/issue36529

#36528: Remove duplicate tests in Lib/tests/re_tests.py
https://bugs.python.org/issue36528

#36527: unused parameter warnings in Include/object.h (affecting build
https://bugs.python.org/issue36527

#36523: missing docs for IOBase writelines
https://bugs.python.org/issue36523

#36520: Email header folded incorrectly
https://bugs.python.org/issue36520

#36517: typing.NamedTuple does not support mixins
https://bugs.python.org/issue36517

#36516: Python Launcher can not recognize pyw file as Python GUI Scrip
https://bugs.python.org/issue36516

#36515: unaligned memory access in the _sha3 extension
https://bugs.python.org/issue36515

#36513: Add support for building arm32 nuget package
https://bugs.python.org/issue36513

#36512: future_factory argument for Thread/ProcessPoolExecutor
https://bugs.python.org/issue36512

#36511: Add Windows ARM32 buildbot
https://bugs.python.org/issue36511

#36509: Add iot layout for windows iot containers
https://bugs.python.org/issue36509

#36503: remove references to aix3 and aix4 in \*.py
https://bugs.python.org/issue36503



Most recent 15 issues waiting for review (15)
=============================================

#36532: Example of logging.formatter with new str.format style
https://bugs.python.org/issue36532

#36531: PyType_FromSpec wrong behavior with multiple Py_tp_members
https://bugs.python.org/issue36531

#36528: Remove duplicate tests in Lib/tests/re_tests.py
https://bugs.python.org/issue36528

#36527: unused parameter warnings in Include/object.h (affecting build
https://bugs.python.org/issue36527

#36523: missing docs for IOBase writelines
https://bugs.python.org/issue36523

#36518: Avoid conflicts when pass arbitrary keyword arguments to Pytho
https://bugs.python.org/issue36518

#36516: Python Launcher can not recognize pyw file as Python GUI Scrip
https://bugs.python.org/issue36516

#36515: unaligned memory access in the _sha3 extension
https://bugs.python.org/issue36515

#36513: Add support for building arm32 nuget package
https://bugs.python.org/issue36513

#36512: future_factory argument for Thread/ProcessPoolExecutor
https://bugs.python.org/issue36512

#36509: Add iot layout for windows iot containers
https://bugs.python.org/issue36509

#36508: python-config --ldflags must not contain LINKFORSHARED ("-Xlin
https://bugs.python.org/issue36508

#36504: Signed integer overflow in _ctypes.c's PyCArrayType_new()
https://bugs.python.org/issue36504

#36503: remove references to aix3 and aix4 in \*.py
https://bugs.python.org/issue36503

#36501: Remove POSIX.1e ACLs in tests that rely on default permissions
https://bugs.python.org/issue36501



Top 10 most discussed issues (10)
=================================

#36485: Establish a uniform way to clear all caches in a given module
https://bugs.python.org/issue36485  13 msgs

#36466: Adding a way to strip annotations from compiled bytecode
https://bugs.python.org/issue36466  12 msgs

#36469: Stuck during interpreter exit, attempting to take the GIL
https://bugs.python.org/issue36469  10 msgs

#36506: [security] CVE-2019-10268: An arbitrary execution vulnerabilit
https://bugs.python.org/issue36506   8 msgs

#6721: Locks in the standard library should be sanitized on fork
https://bugs.python.org/issue6721   7 msgs

#36533: logging regression with threading + fork are mixed in 3.7.1rc2
https://bugs.python.org/issue36533   6 msgs

#35866: concurrent.futures deadlock
https://bugs.python.org/issue35866   5 msgs

#36384: ipaddress Should not reject IPv4 addresses with leading zeroes
https://bugs.python.org/issue36384   5 msgs

#30661: Support tarfile.PAX_FORMAT in shutil.make_archive
https://bugs.python.org/issue30661   4 msgs

#35224: PEP 572: Assignment Expressions
https://bugs.python.org/issue35224   4 msgs



Issues closed (53)
==================

#17110: sys.argv docs should explaining how to handle encoding issues
https://bugs.python.org/issue17110  closed by inada.naoki

#20844: SyntaxError: encoding problem: iso-8859-1 on Windows
https://bugs.python.org/issue20844  closed by inada.naoki

#21269: Provide args and kwargs attributes on mock call objects
https://bugs.python.org/issue21269  closed by xtreak

#22831: Use "with" to avoid possible fd leaks
https://bugs.python.org/issue22831  closed by serhiy.storchaka

#24214: UTF-8 incremental decoder doesn't support surrogatepass correc
https://bugs.python.org/issue24214  closed by serhiy.storchaka

#25451: tkinter: PhotoImage transparency methods
https://bugs.python.org/issue25451  closed by serhiy.storchaka

#29202: Improve dict iteration
https://bugs.python.org/issue29202  closed by inada.naoki

#31182: Suggested Enhancements to zipfile & tarfile command line inter
https://bugs.python.org/issue31182  closed by brett.cannon

#32413: Document that locals() may return globals()
https://bugs.python.org/issue32413  closed by brett.cannon

#32531: gdb.execute can not put string value.
https://bugs.python.org/issue32531  closed by berker.peksag

#32538: Multiprocessing Manager on 3D list - no change of the list pos
https://bugs.python.org/issue32538  closed by berker.peksag

#33261: inspect.isgeneratorfunction fails on hand-created methods
https://bugs.python.org/issue33261  closed by petr.viktorin

#34430: Symmetrical chaining futures in asyncio.future.wrap_future
https://bugs.python.org/issue34430  closed by huji

#35272: sqlite3 get the connected database url
https://bugs.python.org/issue35272  closed by berker.peksag

#35403: support application/wasm in mimetypes and http.server
https://bugs.python.org/issue35403  closed by martin.panter

#35838: ConfigParser: document optionxform must be idempotent
https://bugs.python.org/issue35838  closed by inada.naoki

#36010: Please provide a .zip Windows release of Python that is not cr
https://bugs.python.org/issue36010  closed by steve.dower

#36026: Different error message when sys.settrace is used
https://bugs.python.org/issue36026  closed by inada.naoki

#36085: Enable better DLL resolution
https://bugs.python.org/issue36085  closed by steve.dower

#36157: Document PyInterpreterState_Main().
https://bugs.python.org/issue36157  closed by eric.snow

#36293: Nonblocking read sys.stdin raises error
https://bugs.python.org/issue36293  closed by martin.panter

#36322: Argument typo in dbm.ndbm.open
https://bugs.python.org/issue36322  closed by brett.cannon

#36377: Python 'datastructures.html' docs page needs improvement becau
https://bugs.python.org/issue36377  closed by rhettinger

#36404: Document PendingDeprecationWarning is not so useful.
https://bugs.python.org/issue36404  closed by inada.naoki

#36426: exec() issue when used inside function
https://bugs.python.org/issue36426  closed by ncoghlan

#36434: Zipfile breaks if signalled during write()
https://bugs.python.org/issue36434  closed by serhiy.storchaka

#36440: more helpful diagnostics for parser module
https://bugs.python.org/issue36440  closed by pablogsal

#36442: Different ValueError for the same operation in List and Tuple
https://bugs.python.org/issue36442  closed by serhiy.storchaka

#36445: bus error in test_gil test on armhf running with 64bit kernel
https://bugs.python.org/issue36445  closed by doko

#36448: Message "You will need to rebuild pythoncore to see the change
https://bugs.python.org/issue36448  closed by steve.dower

#36468: Treeview: wrong color change
https://bugs.python.org/issue36468  closed by ned.deily

#36472: Some old PR with CLA not signed
https://bugs.python.org/issue36472  closed by brett.cannon

#36473: dictkeysobject: Add maximum iteration check for .values() and 
https://bugs.python.org/issue36473  closed by inada.naoki

#36477: Subinterpreters are not finalized during runtime finalization.
https://bugs.python.org/issue36477  closed by eric.snow

#36480: .strip() unexpected output on Windows
https://bugs.python.org/issue36480  closed by eric.smith

#36482: let struct's internal cache use FIFO policy
https://bugs.python.org/issue36482  closed by rhettinger

#36483: Missing line in documentation example
https://bugs.python.org/issue36483  closed by martin.panter

#36491: sum function's start optional parameter documented in help but
https://bugs.python.org/issue36491  closed by rhettinger

#36492: Deprecate passing some conflicting arguments by keyword
https://bugs.python.org/issue36492  closed by serhiy.storchaka

#36493: Add math.midpoint(a,b) function
https://bugs.python.org/issue36493  closed by scoder

#36496: Local variables can be used uninitialized in _PyPreConfig_Read
https://bugs.python.org/issue36496  closed by vstinner

#36498: combining dict comprehensing and lists lead to IndexError
https://bugs.python.org/issue36498  closed by SilentGhost

#36499: unpickling of a datetime object in 3.5 fails when pickled with
https://bugs.python.org/issue36499  closed by josh.r

#36505: PYTHON-CAN with vector
https://bugs.python.org/issue36505  closed by SilentGhost

#36507: frozenset type breaks ZFC
https://bugs.python.org/issue36507  closed by rhettinger

#36510: Regular Expression Dot-Star patter matching  - re- text skippi
https://bugs.python.org/issue36510  closed by SilentGhost

#36514: -m switch revisited
https://bugs.python.org/issue36514  closed by ronaldoussoren

#36522: http/client.py does not print duplicate header values in debug
https://bugs.python.org/issue36522  closed by serhiy.storchaka

#36524: identity operator
https://bugs.python.org/issue36524  closed by SilentGhost

#36525: Deprecate instancemethod
https://bugs.python.org/issue36525  closed by christian.heimes

#36526: python crash when loading some .pyc file
https://bugs.python.org/issue36526  closed by serhiy.storchaka

#36530: Document codecs decode_encode() and encode_decode() APIs
https://bugs.python.org/issue36530  closed by gregory.p.smith

#36536: is there a python implementation of the cpython commandline in
https://bugs.python.org/issue36536  closed by larry

From J.Demeyer at UGent.be  Fri Apr  5 14:29:00 2019
From: J.Demeyer at UGent.be (Jeroen Demeyer)
Date: Fri, 5 Apr 2019 20:29:00 +0200
Subject: [Python-Dev] Deprecating "instance method" class
In-Reply-To: <CAP7+vJ++UWWSyaBwdpH2Kuu5tZ=s+2GvB=LnF8a4POy1BMv5nQ@mail.gmail.com>
References: <5CA5EFCC.2030400@UGent.be> <q84s68$3k09$1@blaine.gmane.org>
 <5CA68BBC.8060205@canterbury.ac.nz> <5CA6F09D.3000900@UGent.be>
 <q87d3q$6eob$1@blaine.gmane.org> <5CA73B95.6040509@UGent.be>
 <q87gp1$7elo$1@blaine.gmane.org> <5CA74B19.70806@UGent.be>
 <CAP7+vJ++UWWSyaBwdpH2Kuu5tZ=s+2GvB=LnF8a4POy1BMv5nQ@mail.gmail.com>
Message-ID: <5CA79E6C.904@UGent.be>

On 2019-04-05 17:46, Guido van Rossum wrote:
> This API is doing no harm, it's not a maintenance
> burden

What if the following happens?

1. For some reason (possibly because of this thread), people discover 
instancemethod and start using it.

2. People realize that it's slow.

3. It needs to be made more efficient, causing new code bloat and 
maintenance burden.

> clearly *some* folks have a use for it.

I'm not convinced. I don't think that instancemethod is the right 
solution for functools.total_ordering for example.


Jeroen.

From brett at python.org  Fri Apr  5 15:58:47 2019
From: brett at python.org (Brett Cannon)
Date: Fri, 5 Apr 2019 12:58:47 -0700
Subject: [Python-Dev] Deprecating "instance method" class
In-Reply-To: <5CA79E6C.904@UGent.be>
References: <5CA5EFCC.2030400@UGent.be> <q84s68$3k09$1@blaine.gmane.org>
 <5CA68BBC.8060205@canterbury.ac.nz> <5CA6F09D.3000900@UGent.be>
 <q87d3q$6eob$1@blaine.gmane.org> <5CA73B95.6040509@UGent.be>
 <q87gp1$7elo$1@blaine.gmane.org> <5CA74B19.70806@UGent.be>
 <CAP7+vJ++UWWSyaBwdpH2Kuu5tZ=s+2GvB=LnF8a4POy1BMv5nQ@mail.gmail.com>
 <5CA79E6C.904@UGent.be>
Message-ID: <CAP1=2W5sTRvOgMLtWn7-UKa=wHZ4-JTOSypcZrTnN1ejNdJ+iw@mail.gmail.com>

On Fri, Apr 5, 2019 at 11:30 AM Jeroen Demeyer <J.Demeyer at ugent.be> wrote:

> On 2019-04-05 17:46, Guido van Rossum wrote:
> > This API is doing no harm, it's not a maintenance
> > burden
>
> What if the following happens?
>
> 1. For some reason (possibly because of this thread), people discover
> instancemethod and start using it.
>
> 2. People realize that it's slow.
>
> 3. It needs to be made more efficient, causing new code bloat and
> maintenance burden.
>

Then we can consider improving the documentation if there are performance
implications. But the point is if there's code out there already using it
without issue then ripping it out of the C API is painful since we don't
have nearly as good of a deprecation setup as we do in Python code. Not
everything about the C APi is about performance.

-Brett


>
> > clearly *some* folks have a use for it.
>
> I'm not convinced.


OK, but as of right now others like me are convinced and we typically err
on the side of backwards-compatibility in these kinds of situations.

-Brett


> I don't think that instancemethod is the right
> solution for functools.total_ordering for example.
>
>
> Jeroen.
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/brett%40python.org
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190405/0a9627bc/attachment.html>

From J.Demeyer at UGent.be  Fri Apr  5 16:09:48 2019
From: J.Demeyer at UGent.be (Jeroen Demeyer)
Date: Fri, 5 Apr 2019 22:09:48 +0200
Subject: [Python-Dev] Deprecating "instance method" class
In-Reply-To: <CAP1=2W5sTRvOgMLtWn7-UKa=wHZ4-JTOSypcZrTnN1ejNdJ+iw@mail.gmail.com>
References: <5CA5EFCC.2030400@UGent.be> <q84s68$3k09$1@blaine.gmane.org>
 <5CA68BBC.8060205@canterbury.ac.nz> <5CA6F09D.3000900@UGent.be>
 <q87d3q$6eob$1@blaine.gmane.org> <5CA73B95.6040509@UGent.be>
 <q87gp1$7elo$1@blaine.gmane.org> <5CA74B19.70806@UGent.be>
 <CAP7+vJ++UWWSyaBwdpH2Kuu5tZ=s+2GvB=LnF8a4POy1BMv5nQ@mail.gmail.com>
 <5CA79E6C.904@UGent.be>
 <CAP1=2W5sTRvOgMLtWn7-UKa=wHZ4-JTOSypcZrTnN1ejNdJ+iw@mail.gmail.com>
Message-ID: <5CA7B60C.1060605@UGent.be>

On 2019-04-05 21:58, Brett Cannon wrote:
> Then we can consider improving the documentation if there are
> performance implications.

Sure, we could write in the docs something like "Don't use this, this is 
not what you want. It's slow and there are better alternatives like 
method descriptors". Should I do that (with better wording of course)?

> since we don't have nearly as good of a deprecation setup as we
> do in Python code.

I don't get this. One can easily raise a DeprecationWarning from C code, 
there is plenty of code already doing that.


Jeroen.

From brett at python.org  Fri Apr  5 20:30:31 2019
From: brett at python.org (Brett Cannon)
Date: Fri, 5 Apr 2019 17:30:31 -0700
Subject: [Python-Dev] Deprecating "instance method" class
In-Reply-To: <5CA7B60C.1060605@UGent.be>
References: <5CA5EFCC.2030400@UGent.be> <q84s68$3k09$1@blaine.gmane.org>
 <5CA68BBC.8060205@canterbury.ac.nz> <5CA6F09D.3000900@UGent.be>
 <q87d3q$6eob$1@blaine.gmane.org> <5CA73B95.6040509@UGent.be>
 <q87gp1$7elo$1@blaine.gmane.org> <5CA74B19.70806@UGent.be>
 <CAP7+vJ++UWWSyaBwdpH2Kuu5tZ=s+2GvB=LnF8a4POy1BMv5nQ@mail.gmail.com>
 <5CA79E6C.904@UGent.be>
 <CAP1=2W5sTRvOgMLtWn7-UKa=wHZ4-JTOSypcZrTnN1ejNdJ+iw@mail.gmail.com>
 <5CA7B60C.1060605@UGent.be>
Message-ID: <CAP1=2W5w6qsdc3u0Kn4tp5=V3zt7LTumPL17pLzN3Q6i6G9nZQ@mail.gmail.com>

On Fri, Apr 5, 2019 at 1:11 PM Jeroen Demeyer <J.Demeyer at ugent.be> wrote:

> On 2019-04-05 21:58, Brett Cannon wrote:
> > Then we can consider improving the documentation if there are
> > performance implications.
>
> Sure, we could write in the docs something like "Don't use this, this is
> not what you want. It's slow and there are better alternatives like
> method descriptors". Should I do that (with better wording of course)?
>

Up to you. Obviously help is always  appreciated, just a question of who
feels qualified to review the PR.


>
> > since we don't have nearly as good of a deprecation setup as we
> > do in Python code.
>
> I don't get this. One can easily raise a DeprecationWarning from C code,
> there is plenty of code already doing that.
>

True. I personally prefer compile-time warnings for that sort of thing, but
you're right we can do it at the Python "level" with a raise of a
DeprecationWarning on those instances.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190405/bf387f19/attachment.html>

From doko at ubuntu.com  Fri Apr  5 22:39:49 2019
From: doko at ubuntu.com (Matthias Klose)
Date: Sat, 6 Apr 2019 04:39:49 +0200
Subject: [Python-Dev] PEP-582 and multiple Python installations
In-Reply-To: <2b889555-db6f-6c69-0347-ebb89d6fec21@python.org>
References: <CACo5Rz4X+d7mQ1EH=w4geg2q=PMVvrnm3L2sD5+wyd42B_LvsQ@mail.gmail.com>
 <2b889555-db6f-6c69-0347-ebb89d6fec21@python.org>
Message-ID: <46858269-5ce0-5f70-9a08-f22135b5c1e9@ubuntu.com>

On 02.04.19 18:10, Steve Dower wrote:
> On 02Apr2019 0817, Calvin Spealman wrote:
>> (I originally posted this to python-ideas, where I was told none of this PEP's
>> authors subscribe so probably no one will see it there, so I'm posting it here
>> to raise the issue where it can get seen and hopefully discussed)
> 
> Correct, thanks for posting. (I thought we had a "discussions-to" tag with
> distutils-sig on it, but apparently not.)
> 
>> While the PEP does show the version number as part of the path to the actual
>> packages, implying support for multiple versions, this doesn't seem to be
>> spelled out in the actual text. Presumably __pypackages__/3.8/ might sit
>> beside __pypackages__/3.9/, etc. to keep future versions capable of installing
>> packages for each version, the way virtualenv today is bound to one version of
>> Python.
>>
>> I'd like to raise a potential edge case that might be a problem, and likely an
>> increasingly common one: users with multiple installations of the *same*
>> version of Python. This is actually a common setup for Windows users who use
>> WSL, Microsoft's Linux-on-Windows solution, as you could have both the Windows
>> and Linux builds of a given Python version installed on the same machine. The
>> currently implied support for multiple versions would not be able to separate
>> these and could create problems if users pip install a Windows binary package
>> through Powershell and then try to run a script in Bash from the same
>> directory, causing the Linux version of Python to try to use Windows python
>> packages.
>>
>> I'm not actually sure what the solution here is. Mostly I wanted to raise the
>> concern, because I'm very keen on WSL being a great entry path for new
>> developers and I want to make that a better experience, not a more confusing
>> one. Maybe that version number could include some other unique identify, maybe
>> based on Python's own executable. A hash maybe? I don't know if anything like
>> that already exists to uniquely identify a Python build or installation.
> 
> Yes, this is a situation we're aware of, and it's caught in the conflict of "who
> is this feature meant to support".

This smells the same like mixing system installed python packages (deb/rpm) with
one managed by pip, and pip touching system installed packages.

> Since all platforms have a unique extension module suffix (e.g.
> "module.cp38-win32.pyd"), it would be possible to support this with "fat"
> packages that include all binaries (or some clever way of merging wheels for
> multiple platforms).

unfortunately not. The Android developers opted out of that, reverting that
change.  Also how would you differentiate win32 builds for different
architectures? But maybe this is already done.

> And since this is already in CPython itself, it leads to about the only
> reasonable solution - instead of "3.8", use the extension module suffix
> "cp38-win32". (Wheel tags are not in core CPython, so we can't use those.)
> 
> But while this seems obvious, it also reintroduces problems that this has the
> potential to fix - suddenly, just like installing into your global environment,
> your packages are not project-specific anymore but are Python-specific. Which is
> one of the major confusions people run into ("I pip installed X but now can't
> import it in python").
> 
> So the main points of discussion right now are "whose problem does this solve"
> and "when do we tell people they need a full venv". And that discussion is
> mostly happening at
> https://discuss.python.org/t/pep-582-python-local-packages-directory/963/
> 
> Cheers,
> Steve
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe: https://mail.python.org/mailman/options/python-dev/doko%40ubuntu.com


From songofacandy at gmail.com  Sat Apr  6 01:09:37 2019
From: songofacandy at gmail.com (Inada Naoki)
Date: Sat, 6 Apr 2019 14:09:37 +0900
Subject: [Python-Dev] New Python Initialization API
In-Reply-To: <CA+3bQGGJKOwCbnpRz2VxU5vA3xeOxfB-C8xx+3fpSKEzqg7qeQ@mail.gmail.com>
References: <CA+3bQGHabA_eeDbTQ_KGSTgq9UKEdMuTDTbDXSMgs61SPGPmkQ@mail.gmail.com>
 <70c245c7-8f40-a51b-934b-af958f7cd849@python.org>
 <CAP1=2W6+udqgYbXCvGQAg4tbuKdU8LfrDeCrrvwMoxtZZ7UN1g@mail.gmail.com>
 <CA+3bQGG3BAp_4pEqkY9JiJOEStkX4KA=cdaYbTv30FospKC-7w@mail.gmail.com>
 <119e26f0-d826-7e13-aa4a-e0a67bea3265@python.org>
 <CA+3bQGE+vLcsWpkQvSu_ThNvq3DYAR0pL=Z92FFLAUb+fVm2JQ@mail.gmail.com>
 <91eec784-28ab-024f-42a6-8a1e5d37d9bf@python.org>
 <6a17e990-7e2a-0544-1e8e-9b16d05e4df6@python.org>
 <CA+3bQGGJKOwCbnpRz2VxU5vA3xeOxfB-C8xx+3fpSKEzqg7qeQ@mail.gmail.com>
Message-ID: <CAEfz+TwZrMDcQSHeyS2wJQMsqD2xO9ieiUfoJ02gC5tZaMv2=w@mail.gmail.com>

On Sat, Apr 6, 2019 at 1:13 AM Victor Stinner <vstinner at redhat.com> wrote:
>
> > > ``PyPreConfig`` fields:
> > >
> > > * ``coerce_c_locale_warn``: if non-zero, emit a warning if the C locale
> > >   is coerced.
> > > * ``coerce_c_locale``: if equals to 2, coerce the C locale; if equals to
> > >   1, read the LC_CTYPE to decide if it should be coerced.
> >
> > Can we use another value for coerce_c_locale to determine whether to
> > warn or not? Save a field.
>
> coerce_c_locale is already complex, it can have 4 values: -1, 0, 1 and 2.
> I prefer keep a separated field.
>
> Moreover, I understood that you might want to coerce the C locale *and*
> get the warning, or get the warning but *not* coerce the locale.
>

Are these configurations are really needed?

Applications embedding Python may not initialize Python interpreter at first.
For example, vim initializes Python when Python is used first time.

On the other hand, C locale coercion should be done ASAP application starts.

I think dedicated API for coercing C locale is better than preconfig.

// When application starts:
Py_CoerceCLocale(warn=0);

// later...
Py_Initialize();

-- 
Inada Naoki  <songofacandy at gmail.com>

From vstinner at redhat.com  Sat Apr  6 09:37:28 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Sat, 6 Apr 2019 15:37:28 +0200
Subject: [Python-Dev] New Python Initialization API
In-Reply-To: <CAEfz+TwZrMDcQSHeyS2wJQMsqD2xO9ieiUfoJ02gC5tZaMv2=w@mail.gmail.com>
References: <CA+3bQGHabA_eeDbTQ_KGSTgq9UKEdMuTDTbDXSMgs61SPGPmkQ@mail.gmail.com>
 <70c245c7-8f40-a51b-934b-af958f7cd849@python.org>
 <CAP1=2W6+udqgYbXCvGQAg4tbuKdU8LfrDeCrrvwMoxtZZ7UN1g@mail.gmail.com>
 <CA+3bQGG3BAp_4pEqkY9JiJOEStkX4KA=cdaYbTv30FospKC-7w@mail.gmail.com>
 <119e26f0-d826-7e13-aa4a-e0a67bea3265@python.org>
 <CA+3bQGE+vLcsWpkQvSu_ThNvq3DYAR0pL=Z92FFLAUb+fVm2JQ@mail.gmail.com>
 <91eec784-28ab-024f-42a6-8a1e5d37d9bf@python.org>
 <6a17e990-7e2a-0544-1e8e-9b16d05e4df6@python.org>
 <CA+3bQGGJKOwCbnpRz2VxU5vA3xeOxfB-C8xx+3fpSKEzqg7qeQ@mail.gmail.com>
 <CAEfz+TwZrMDcQSHeyS2wJQMsqD2xO9ieiUfoJ02gC5tZaMv2=w@mail.gmail.com>
Message-ID: <CA+3bQGFEtz-PT_yoCtdqzXo2iEMyZSppAoRdKoMqbhO0vQF6hg@mail.gmail.com>

Maybe I should clarify in the PEP 587 Rationale what are the use cases for
the API. Embeding Python is one kind of use case, but writing your own
Python with a specific config like "isolated Python" or "system Python" is
also a valid use case. For a custom Python, you might want to get C locale
coercion and UTF-8 Mode.

The most common case is to embed Python in an application like Blender or
vim: the application already executes a lot of code and manipulated strings
and encoding before Python is initialized, so Python must not coerce the C
locale in that case. That's why Nick and me decided to disable C loclae
coercion and UTF-8 Mode by default when the C API is used.

Victor

Le samedi 6 avril 2019, Inada Naoki <songofacandy at gmail.com> a ?crit :
> On Sat, Apr 6, 2019 at 1:13 AM Victor Stinner <vstinner at redhat.com> wrote:
>>
>> > > ``PyPreConfig`` fields:
>> > >
>> > > * ``coerce_c_locale_warn``: if non-zero, emit a warning if the C
locale
>> > >   is coerced.
>> > > * ``coerce_c_locale``: if equals to 2, coerce the C locale; if
equals to
>> > >   1, read the LC_CTYPE to decide if it should be coerced.
>> >
>> > Can we use another value for coerce_c_locale to determine whether to
>> > warn or not? Save a field.
>>
>> coerce_c_locale is already complex, it can have 4 values: -1, 0, 1 and 2.
>> I prefer keep a separated field.
>>
>> Moreover, I understood that you might want to coerce the C locale *and*
>> get the warning, or get the warning but *not* coerce the locale.
>>
>
> Are these configurations are really needed?
>
> Applications embedding Python may not initialize Python interpreter at
first.
> For example, vim initializes Python when Python is used first time.
>
> On the other hand, C locale coercion should be done ASAP application
starts.
>
> I think dedicated API for coercing C locale is better than preconfig.
>
> // When application starts:
> Py_CoerceCLocale(warn=0);
>
> // later...
> Py_Initialize();
>
> --
> Inada Naoki  <songofacandy at gmail.com>
>

-- 
Night gathers, and now my watch begins. It shall not end until my death.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190406/39bde335/attachment.html>

From ncoghlan at gmail.com  Sat Apr  6 22:45:36 2019
From: ncoghlan at gmail.com (Nick Coghlan)
Date: Sun, 7 Apr 2019 12:45:36 +1000
Subject: [Python-Dev] New Python Initialization API
In-Reply-To: <CA+3bQGGJKOwCbnpRz2VxU5vA3xeOxfB-C8xx+3fpSKEzqg7qeQ@mail.gmail.com>
References: <CA+3bQGHabA_eeDbTQ_KGSTgq9UKEdMuTDTbDXSMgs61SPGPmkQ@mail.gmail.com>
 <70c245c7-8f40-a51b-934b-af958f7cd849@python.org>
 <CAP1=2W6+udqgYbXCvGQAg4tbuKdU8LfrDeCrrvwMoxtZZ7UN1g@mail.gmail.com>
 <CA+3bQGG3BAp_4pEqkY9JiJOEStkX4KA=cdaYbTv30FospKC-7w@mail.gmail.com>
 <119e26f0-d826-7e13-aa4a-e0a67bea3265@python.org>
 <CA+3bQGE+vLcsWpkQvSu_ThNvq3DYAR0pL=Z92FFLAUb+fVm2JQ@mail.gmail.com>
 <91eec784-28ab-024f-42a6-8a1e5d37d9bf@python.org>
 <6a17e990-7e2a-0544-1e8e-9b16d05e4df6@python.org>
 <CA+3bQGGJKOwCbnpRz2VxU5vA3xeOxfB-C8xx+3fpSKEzqg7qeQ@mail.gmail.com>
Message-ID: <CADiSq7ddOeocCAQWT6eLu74oDhyDmj=jxQ8PQSJ9YWFNra7ZCA@mail.gmail.com>

On Sat, 6 Apr 2019 at 02:16, Victor Stinner <vstinner at redhat.com> wrote:
> > > ``PyPreConfig`` fields:
> > >
> > > * ``coerce_c_locale_warn``: if non-zero, emit a warning if the C locale
> > >   is coerced.
> > > * ``coerce_c_locale``: if equals to 2, coerce the C locale; if equals to
> > >   1, read the LC_CTYPE to decide if it should be coerced.
> >
> > Can we use another value for coerce_c_locale to determine whether to
> > warn or not? Save a field.
>
> coerce_c_locale is already complex, it can have 4 values: -1, 0, 1 and 2.
> I prefer keep a separated field.
>
> Moreover, I understood that you might want to coerce the C locale *and*
> get the warning, or get the warning but *not* coerce the locale.

Yeah, that's how they ended up being two different fields in the first
place. However, I wonder if the two fields might be better named:

* warn_on_legacy_c_locale
* coerce_legacy_c_locale

Neither set: legacy C locale is left alone
Only warning flag set: complain about the legacy C locale on stderr
Only coercion flag set: silently attempt to coerce the legacy C locale
to a UTF-8 based one
Both flags set: attempt the coercion, and then complain about it on
stderr (regardless of whether the coercion succeeded or not)

The original PEP 580 implementation tried to keep the config API
simpler by always complaining, but that turned out to break the world
(plenty of contexts where things get upset by unexpected output on
stderr).

Cheers,
Nick.

-- 
Nick Coghlan   |   ncoghlan at gmail.com   |   Brisbane, Australia

From ncoghlan at gmail.com  Sat Apr  6 22:49:10 2019
From: ncoghlan at gmail.com (Nick Coghlan)
Date: Sun, 7 Apr 2019 12:49:10 +1000
Subject: [Python-Dev] New Python Initialization API
In-Reply-To: <CADiSq7ddOeocCAQWT6eLu74oDhyDmj=jxQ8PQSJ9YWFNra7ZCA@mail.gmail.com>
References: <CA+3bQGHabA_eeDbTQ_KGSTgq9UKEdMuTDTbDXSMgs61SPGPmkQ@mail.gmail.com>
 <70c245c7-8f40-a51b-934b-af958f7cd849@python.org>
 <CAP1=2W6+udqgYbXCvGQAg4tbuKdU8LfrDeCrrvwMoxtZZ7UN1g@mail.gmail.com>
 <CA+3bQGG3BAp_4pEqkY9JiJOEStkX4KA=cdaYbTv30FospKC-7w@mail.gmail.com>
 <119e26f0-d826-7e13-aa4a-e0a67bea3265@python.org>
 <CA+3bQGE+vLcsWpkQvSu_ThNvq3DYAR0pL=Z92FFLAUb+fVm2JQ@mail.gmail.com>
 <91eec784-28ab-024f-42a6-8a1e5d37d9bf@python.org>
 <6a17e990-7e2a-0544-1e8e-9b16d05e4df6@python.org>
 <CA+3bQGGJKOwCbnpRz2VxU5vA3xeOxfB-C8xx+3fpSKEzqg7qeQ@mail.gmail.com>
 <CADiSq7ddOeocCAQWT6eLu74oDhyDmj=jxQ8PQSJ9YWFNra7ZCA@mail.gmail.com>
Message-ID: <CADiSq7c3beA7A-8asxKnXV_cVj-ai6nafbaPLZ5qfX2GfPoDVQ@mail.gmail.com>

On Sun, 7 Apr 2019 at 12:45, Nick Coghlan <ncoghlan at gmail.com> wrote:
> The original PEP 580 implementation tried to keep the config API
> simpler by always complaining, but that turned out to break the world
> (plenty of contexts where things get upset by unexpected output on
> stderr).

Err, PEP 538. No idea why my brain swapped in the wrong PEP number :)

Cheers,
Nick.

-- 
Nick Coghlan   |   ncoghlan at gmail.com   |   Brisbane, Australia

From storchaka at gmail.com  Sun Apr  7 03:48:45 2019
From: storchaka at gmail.com (Serhiy Storchaka)
Date: Sun, 7 Apr 2019 10:48:45 +0300
Subject: [Python-Dev] Deprecating "instance method" class
In-Reply-To: <5CA796B8.1000202@UGent.be>
References: <5CA5EFCC.2030400@UGent.be> <q84s68$3k09$1@blaine.gmane.org>
 <5CA68BBC.8060205@canterbury.ac.nz> <5CA6F09D.3000900@UGent.be>
 <q87d3q$6eob$1@blaine.gmane.org> <5CA73B95.6040509@UGent.be>
 <q87gp1$7elo$1@blaine.gmane.org> <5CA74B19.70806@UGent.be>
 <q8815h$751n$1@blaine.gmane.org> <5CA796B8.1000202@UGent.be>
Message-ID: <q8c6g7$33m5$1@blaine.gmane.org>

05.04.19 20:56, Jeroen Demeyer ????:
> On 2019-04-05 19:53, Serhiy Storchaka wrote:
>> At Python level we can monkeypatch __gt__, but not tp_richcompare.
> 
> Sure, but you're planning to use C anyway so that's not really an argument.

total_ordering monkeypatches the decorated class. I'm planning to 
implement in C methods that implement __gt__ in terms of __lt__ etc.


From J.Demeyer at UGent.be  Sun Apr  7 03:15:57 2019
From: J.Demeyer at UGent.be (Jeroen Demeyer)
Date: Sun, 7 Apr 2019 09:15:57 +0200
Subject: [Python-Dev] Deprecating "instance method" class
In-Reply-To: <q8c6g7$33m5$1@blaine.gmane.org>
References: <5CA5EFCC.2030400@UGent.be> <q84s68$3k09$1@blaine.gmane.org>
 <5CA68BBC.8060205@canterbury.ac.nz> <5CA6F09D.3000900@UGent.be>
 <q87d3q$6eob$1@blaine.gmane.org> <5CA73B95.6040509@UGent.be>
 <q87gp1$7elo$1@blaine.gmane.org> <5CA74B19.70806@UGent.be>
 <q8815h$751n$1@blaine.gmane.org> <5CA796B8.1000202@UGent.be>
 <q8c6g7$33m5$1@blaine.gmane.org>
Message-ID: <5CA9A3AD.1010300@UGent.be>

On 2019-04-07 09:48, Serhiy Storchaka wrote:
> total_ordering monkeypatches the decorated class. I'm planning to
> implement in C methods that implement __gt__ in terms of __lt__ etc.

Yes, I understood that. I'm just saying: if you want to make it fast, 
that's not the best solution. The fastest would be to implement 
tp_richcompare from scratch (instead of relying on slot_tp_richcompare 
dispatching to methods).

From xdegaye at gmail.com  Sun Apr  7 07:31:13 2019
From: xdegaye at gmail.com (Xavier de Gaye)
Date: Sun, 7 Apr 2019 13:31:13 +0200
Subject: [Python-Dev] bedevere pipelines hang on github
Message-ID: <CAN4cRFyRxOHZFY+9dvd3hMvs+cRxKTbbtWM9LYb4yACX97nwKQ@mail.gmail.com>

bedevere/issue-number and bedevere/news are not triggered for some
reason at https://github.com/python/cpython/pull/12708 and hang
forever with "Expected ? Waiting for status to be reported ".

Xavier

From lisandrosnik at gmail.com  Sun Apr  7 07:40:32 2019
From: lisandrosnik at gmail.com (Lysandros Nikolaou)
Date: Sun, 7 Apr 2019 13:40:32 +0200
Subject: [Python-Dev] bedevere pipelines hang on github
In-Reply-To: <CAN4cRFyRxOHZFY+9dvd3hMvs+cRxKTbbtWM9LYb4yACX97nwKQ@mail.gmail.com>
References: <CAN4cRFyRxOHZFY+9dvd3hMvs+cRxKTbbtWM9LYb4yACX97nwKQ@mail.gmail.com>
Message-ID: <CANiJEH_eZpUNAYeP69SBMPYMg1dTo1k4Cue8pUDp_Pgp=i615A@mail.gmail.com>

There is an issue with bedevere at the moment. As described by Mariatta in
https://github.com/python/bedevere/issues/162 it is still not clear, if
this is our issue or GitHub's. I may have some time to look into it a bit
later.

On Sun, Apr 7, 2019 at 1:32 PM Xavier de Gaye <xdegaye at gmail.com> wrote:

> bedevere/issue-number and bedevere/news are not triggered for some
> reason at https://github.com/python/cpython/pull/12708 and hang
> forever with "Expected ? Waiting for status to be reported ".
>
> Xavier
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/lisandrosnik%40gmail.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190407/e13f8857/attachment.html>

From tir.karthi at gmail.com  Sun Apr  7 23:38:16 2019
From: tir.karthi at gmail.com (Karthikeyan)
Date: Mon, 8 Apr 2019 09:08:16 +0530
Subject: [Python-Dev] bedevere pipelines hang on github
In-Reply-To: <CANiJEH_eZpUNAYeP69SBMPYMg1dTo1k4Cue8pUDp_Pgp=i615A@mail.gmail.com>
References: <CAN4cRFyRxOHZFY+9dvd3hMvs+cRxKTbbtWM9LYb4yACX97nwKQ@mail.gmail.com>
 <CANiJEH_eZpUNAYeP69SBMPYMg1dTo1k4Cue8pUDp_Pgp=i615A@mail.gmail.com>
Message-ID: <CAAjsFLT1hcu9K_p+ZLTjX1_+mYPYUTjW1esKghae5br=JY4sog@mail.gmail.com>

This seems to be fixed now :
https://github.com/python/core-workflow/issues/321

Regards,
Karthikeyan S
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190408/b75c1036/attachment.html>


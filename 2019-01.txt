From mertz at gnosis.cx  Wed Jan  2 12:34:55 2019
From: mertz at gnosis.cx (David Mertz)
Date: Wed, 2 Jan 2019 12:34:55 -0500
Subject: [Python-Dev] Interested in serving on Steering Council
Message-ID: <CAEbHw4bhjt3k-Q57BnSWw150B2Pint1465ick+775i-eaYeVBA@mail.gmail.com>

Hi Core Developers,

First thing: I am *not* a CPython committer.  I think most of you who are
will be somewhat familiar with me though.

Second: I was a Director of the PSF for a long while, and continue to chair
some Working Groups.  I've been mentioned in some PEPs.  I have written a
lot of articles and have given a lot of talks about Python, including about
recent or pending PEPs and similar matters.  I continue to work and train
around Python and open source (now with a focus on "data science", whatever
that is).

Third: I follow python-ideas and python-dev rather closely, and fairly
often contribute ideas to those lists.

Fourth: As I read PEP 8016, I cannot nominate myself to the Steering
Committee.  That seems good and proper to me.  But I believe I would be a
relevant and helpful member of the future Steering Committee if someone
wishes to nominate me and if the voters wish to elect me.

Thanks, David Mertz...

-- 
Keeping medicines from the bloodstreams of the sick; food
from the bellies of the hungry; books from the hands of the
uneducated; technology from the underdeveloped; and putting
advocates of freedom in prisons.  Intellectual property is
to the 21st century what the slave trade was to the 16th.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190102/bd4b3ea4/attachment.html>

From solipsis at pitrou.net  Wed Jan  2 13:15:17 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Wed, 2 Jan 2019 19:15:17 +0100
Subject: [Python-Dev] Interested in serving on Steering Council
References: <CAEbHw4bhjt3k-Q57BnSWw150B2Pint1465ick+775i-eaYeVBA@mail.gmail.com>
Message-ID: <20190102191517.7fc2094c@fsol>

On Wed, 2 Jan 2019 12:34:55 -0500
David Mertz <mertz at gnosis.cx> wrote:
> Hi Core Developers,
> 
> First thing: I am *not* a CPython committer.  I think most of you who are
> will be somewhat familiar with me though.
> 
> Second: I was a Director of the PSF for a long while, and continue to chair
> some Working Groups.  I've been mentioned in some PEPs.  I have written a
> lot of articles and have given a lot of talks about Python, including about
> recent or pending PEPs and similar matters.  I continue to work and train
> around Python and open source (now with a focus on "data science", whatever
> that is).
> 
> Third: I follow python-ideas and python-dev rather closely, and fairly
> often contribute ideas to those lists.
> 
> Fourth: As I read PEP 8016, I cannot nominate myself to the Steering
> Committee.  That seems good and proper to me.  But I believe I would be a
> relevant and helpful member of the future Steering Committee if someone
> wishes to nominate me and if the voters wish to elect me.

The primary question I would ask an external candidate is: how is it
that you never became a core developer (which implies some amount of
effort and dedication) but nevertheless would be willing to spend the
effort and dedication needed for serving on a Steering Council (*)?

(*) (or Committee, I don't remember :-))

Regards

Antoine.



From paul at ganssle.io  Wed Jan  2 14:15:43 2019
From: paul at ganssle.io (Paul Ganssle)
Date: Wed, 2 Jan 2019 14:15:43 -0500
Subject: [Python-Dev] Return type of datetime subclasses added to timedelta
Message-ID: <1059740e-cc65-205d-5986-a9397463a315@ganssle.io>

Happy New Year everyone!

I would like to start a thread here for wider feedback on my proposal to
change the return type of the addition operation between a datetime
subclass and a timedelta. Currently, adding a timedelta to a subclass of
datetime /always/ returns a datetime rather than an instance of the
datetime subclass.

I have an open PR implementing this, PR #10902
<https://github.com/python/cpython/pull/10902>, but I know it's a major
change so I did not want to move forward without more discussion. I
first brought this up on datetime-SIG
<https://mail.python.org/archives/list/datetime-sig at python.org/thread/TGB3VZS5EKM4R2VFUA44323FZFRN2DSJ/>
[1], and we decided to move the discussion over here because the people
most likely to object to the change would be on this list and not on
datetime-SIG.

In addition to the datetime-SIG thread, you may find a detailed
rationale for the change in bpo-35364
<https://bugs.python.org/issue35364#msg331065> [2],? and a rationale for
why we would want to (and arguably already /do/) support subclassing
datetime in bpo-32417 <https://bugs.python.org/issue32417#msg331353> [3].

A short version of the strongest rationale for changing how this works
is that it is causing inconsistencies in how subclassing is handled in
alternate constructors of datetime. For a given subclass of datetime
(which I will call DateTimeSub), nearly all alternate constructors
already support subclasses correctly - DateTimeSub.fromtimestamp(x) will
return a DateTimeSub, for example. However, because DateTimeSub +
timedelta returns datetime, any alternate constructor implemented in
terms of timedelta additions will leak that implementation detail by
returning a datetime object instead of the subclass. The biggest problem
is that datetime.fromutc is defined in terms of timedelta addition, so
DateTimeSub.now() returns a DateTimeSub object, but
DateTimeSub.now(timezone.utc) returns a datetime object! This is one of
the most annoying things to work around when building a datetime
subclass, and I don't know of any situation where someone /wants/ their
subclass to be lost on addition with a timedelta.

From my understanding, this has been discussed before and the original
objection was that this implementation assumes that the datetime
subclass has a constructor with the same (or a sufficiently similar)
signature as datetime. This may be a legitimate gripe, but unfortunately
that ship has sailed long ago. All of datetime's alternate constructors
make this assumption. Any subclass that does not meet this requirement
must have worked around it long ago (or they don't care about alternate
constructors).

Thanks for your attention, I look forward to your replies.

Best,

Paul

[1]
https://mail.python.org/archives/list/datetime-sig at python.org/thread/TGB3VZS5EKM4R2VFUA44323FZFRN2DSJ/

[2] https://bugs.python.org/issue35364#msg331065

[3] https://bugs.python.org/issue32417#msg331353


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190102/87450a51/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: OpenPGP digital signature
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190102/87450a51/attachment.sig>

From steve.dower at python.org  Thu Jan  3 22:27:10 2019
From: steve.dower at python.org (Steve Dower)
Date: Fri, 4 Jan 2019 14:27:10 +1100
Subject: [Python-Dev] Interested in serving on Steering Council
In-Reply-To: <20190102191517.7fc2094c@fsol>
References: <CAEbHw4bhjt3k-Q57BnSWw150B2Pint1465ick+775i-eaYeVBA@mail.gmail.com>
 <20190102191517.7fc2094c@fsol>
Message-ID: <cb08756a-cf4b-f6ad-5147-7ef3e41f4c95@python.org>

On 03Jan.2019 0515, Antoine Pitrou wrote:
> The primary question I would ask an external candidate is: how is it
> that you never became a core developer (which implies some amount of
> effort and dedication) but nevertheless would be willing to spend the
> effort and dedication needed for serving on a Steering Council (*)?
> 
> (*) (or Committee, I don't remember :-)
David may of course provide an answer for himself, but allow me to
provide my answer (and this is why I pushed for allowing external
nominations).

Historically, the only reason to become a core committer was to commit
code. Some of us no doubt desired or demonstrated greater influence, but
all of us have committed code or reviewed and merged PRs, either
directly to CPython or one of the related projects.

This is not a job for everyone, but it's been the only job we had on offer.

The closest alternative job was to be elected to the board of the Python
Software Foundation. But this is still not a job for everyone. They also
are not considered core committers, despite making significant
contributions.

We now have a new job on offer. Exactly what that job involves isn't
quite defined yet, but it will certainly include some amount of
project/program/process management, likely some customer/user engagement
(or relationship management, if you prefer), and potentially some
independent decision making.

Guido is the only core developer who has previously contributed to
Python in this way (whatever "this way" turns out to mean). The rest of
us happily worked under "someone else" doing it.

Meanwhile, many non-core committers in the Python community have spent
their time building companies, consulting businesses or educational
courses. Spending time writing code and reviewing PRs is not how they
want to contribute, and so they have contributed in other ways -
including writing and often reviewing PEPs. There was no need for them
to be a core committer, since they weren't doing any of the
committer-specific tasks.

In the PEP 8016 discussions (pre vote), we agreed that if we chose to
elect someone who is not currently a core developer, we would also
probably vote to make them a core developer, so there is no harm in
allowing externals to be nominated. Also since the core committers are
voluntarily submitting to their guidance, it makes sense that voting to
elect/dissolve is restricted to us.

In summary, members of the Steering Council are filling a new role with
only one explicit precedent within the core committers. The
qualifications are different, and so the pool of candidates is
different. The existing core committers will submit to the Steering
Council, and so are the ones who elect them.

(Note that I've carefully used "core committer" and "core developer"
above. I believe it's very important to distinguish between "write
access on GitHub" and "project decision maker", and no reason to force
an arbitrary overlap.)

Cheers,
Steve

From solipsis at pitrou.net  Fri Jan  4 05:04:54 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Fri, 4 Jan 2019 11:04:54 +0100
Subject: [Python-Dev] Interested in serving on Steering Council
In-Reply-To: <cb08756a-cf4b-f6ad-5147-7ef3e41f4c95@python.org>
References: <CAEbHw4bhjt3k-Q57BnSWw150B2Pint1465ick+775i-eaYeVBA@mail.gmail.com>
 <20190102191517.7fc2094c@fsol>
 <cb08756a-cf4b-f6ad-5147-7ef3e41f4c95@python.org>
Message-ID: <20190104110454.045cb0de@fsol>

On Fri, 4 Jan 2019 14:27:10 +1100
Steve Dower <steve.dower at python.org> wrote:
> 
> We now have a new job on offer. Exactly what that job involves isn't
> quite defined yet, but it will certainly include some amount of
> project/program/process management, likely some customer/user engagement
> (or relationship management, if you prefer), and potentially some
> independent decision making.
> 
> Guido is the only core developer who has previously contributed to
> Python in this way (whatever "this way" turns out to mean).

Not exactly.  Nick's role on packaging comes to mind.  More modestly,
several of us have served as BDFL delegates, have steered various
processes (such as VCS migration), and/or have been responsible
(officially or not) for subparts of the project (such as documentation,
buildbots, version control...).

> In the PEP 8016 discussions (pre vote), we agreed that if we chose to
> elect someone who is not currently a core developer, we would also
> probably vote to make them a core developer, so there is no harm in
> allowing externals to be nominated.

The Council is going to be a 5-person body, some some amount of
involvement and dedication is expected from each of the Council's
members if we want it to function correctly (it's probably not just a
supervision body where you can participate in a meeting every 3 months,
answer a couple e-mails and call it done).

I already have a hard time imagining my level of involvement being
enough for candidating on the Council.  So I would be skeptical of
voting for someone who hasn't submitted a single patch to the codebase
in 10+ years, for example.

Moreover, someone who has never contributed to the codebase hasn't
really experienced how contributing works, which doesn't make them a
very good candidate for managing contributors, IMHO.

Regards

Antoine.

From status at bugs.python.org  Fri Jan  4 13:07:38 2019
From: status at bugs.python.org (Python tracker)
Date: Fri, 04 Jan 2019 18:07:38 +0000
Subject: [Python-Dev] Summary of Python tracker Issues
Message-ID: <20190104180738.1.A332AF26462CD784@roundup.psfhosted.org>


ACTIVITY SUMMARY (2018-12-28 - 2019-01-04)
Python tracker at https://bugs.python.org/

To view or respond to any of the issues listed below, click on the issue.
Do NOT respond to this message.

Issues counts and deltas:
  open    6922 (+19)
  closed 40487 (+34)
  total  47409 (+53)

Open issues with patches: 2748 


Issues opened (34)
==================

#35606: Add prod() function to the math module
https://bugs.python.org/issue35606  opened by rhettinger

#35608: python3 multiprocessing queue deadlock when use thread and pro
https://bugs.python.org/issue35608  opened by beruhan

#35610: IDLE: replace use of EditorWindow.context_use_ps1
https://bugs.python.org/issue35610  opened by terry.reedy

#35611: open doesn't call IncrementalEncoder with final=True
https://bugs.python.org/issue35611  opened by haney

#35615: "RuntimeError: Dictionary changed size during iteration" when 
https://bugs.python.org/issue35615  opened by ltfish

#35616: Change references to '4.0'.
https://bugs.python.org/issue35616  opened by terry.reedy

#35617: unittest discover does not work with implicit namespaces
https://bugs.python.org/issue35617  opened by Simon Fagerholm

#35618: Allow users to set suffix list in cookiejar policy
https://bugs.python.org/issue35618  opened by xtreak

#35619: Support custom data descriptors in pydoc
https://bugs.python.org/issue35619  opened by serhiy.storchaka

#35620: asyncio test failure on appveyor
https://bugs.python.org/issue35620  opened by terry.reedy

#35621: asyncio.create_subprocess_exec() only works with main event lo
https://bugs.python.org/issue35621  opened by sth

#35622: Add support for Linux SCHED_DEADLINE
https://bugs.python.org/issue35622  opened by mb_

#35624: Shelve sync issues while using Gevent
https://bugs.python.org/issue35624  opened by Oded Engel

#35625: documentation of list, set & dict comprehension make no mentio
https://bugs.python.org/issue35625  opened by bzip2

#35627: multiprocessing.queue in 3.7.2 doesn't behave as it was in 3.7
https://bugs.python.org/issue35627  opened by June Kim

#35628: Allow lazy loading of translations in gettext.
https://bugs.python.org/issue35628  opened by s-ball

#35629: hang and/or leaked processes with multiprocessing.Pool(...).im
https://bugs.python.org/issue35629  opened by Anthony Sottile

#35632: support unparse for Suite ast
https://bugs.python.org/issue35632  opened by thautwarm

#35633: test_eintr fails on AIX since fcntl functions were modified
https://bugs.python.org/issue35633  opened by Michael.Felt

#35634: kwargs regression when there are multiple entries with the sam
https://bugs.python.org/issue35634  opened by iceboy

#35635: asyncio.create_subprocess_exec() only works in main thread
https://bugs.python.org/issue35635  opened by stefan

#35636: remove redundant check in unicode_hash(PyObject *self)
https://bugs.python.org/issue35636  opened by Ma Lin

#35638: Introduce fixed point locale aware format type for floating po
https://bugs.python.org/issue35638  opened by steelman

#35639: Lowecasing Unicode Characters
https://bugs.python.org/issue35639  opened by kingofsevens

#35640: Allow passing PathLike arguments to SimpleHTTPRequestHandler
https://bugs.python.org/issue35640  opened by eamanu

#35642: _asynciomodule.c compiled in both pythoncore.vcxproj and _asyn
https://bugs.python.org/issue35642  opened by Gregory.Szorc

#35644: venv doesn't work on Windows when no venvlauncher executable p
https://bugs.python.org/issue35644  opened by Ray Donnelly

#35647: Cookie path check returns incorrect results
https://bugs.python.org/issue35647  opened by xtreak

#35649: http.client doesn't close. Infinite loop
https://bugs.python.org/issue35649  opened by skorpeo

#35651: PEP 257 (active) references PEP 258 (rejected) as if it were a
https://bugs.python.org/issue35651  opened by ExplodingCabbage

#35652: Add use_srcentry parameter to shutil.copytree() II
https://bugs.python.org/issue35652  opened by flokX

#35654: Remove 'guarantee' that sorting only relies on __lt__ from sor
https://bugs.python.org/issue35654  opened by mjpieters

#35656: More matchers in unittest.mock
https://bugs.python.org/issue35656  opened by Petter S

#35657: multiprocessing.Process.join() ignores timeout if child proces
https://bugs.python.org/issue35657  opened by Huazuo Gao



Most recent 15 issues with no replies (15)
==========================================

#35656: More matchers in unittest.mock
https://bugs.python.org/issue35656

#35652: Add use_srcentry parameter to shutil.copytree() II
https://bugs.python.org/issue35652

#35651: PEP 257 (active) references PEP 258 (rejected) as if it were a
https://bugs.python.org/issue35651

#35647: Cookie path check returns incorrect results
https://bugs.python.org/issue35647

#35642: _asynciomodule.c compiled in both pythoncore.vcxproj and _asyn
https://bugs.python.org/issue35642

#35640: Allow passing PathLike arguments to SimpleHTTPRequestHandler
https://bugs.python.org/issue35640

#35635: asyncio.create_subprocess_exec() only works in main thread
https://bugs.python.org/issue35635

#35632: support unparse for Suite ast
https://bugs.python.org/issue35632

#35628: Allow lazy loading of translations in gettext.
https://bugs.python.org/issue35628

#35625: documentation of list, set & dict comprehension make no mentio
https://bugs.python.org/issue35625

#35622: Add support for Linux SCHED_DEADLINE
https://bugs.python.org/issue35622

#35621: asyncio.create_subprocess_exec() only works with main event lo
https://bugs.python.org/issue35621

#35619: Support custom data descriptors in pydoc
https://bugs.python.org/issue35619

#35618: Allow users to set suffix list in cookiejar policy
https://bugs.python.org/issue35618

#35610: IDLE: replace use of EditorWindow.context_use_ps1
https://bugs.python.org/issue35610



Most recent 15 issues waiting for review (15)
=============================================

#35652: Add use_srcentry parameter to shutil.copytree() II
https://bugs.python.org/issue35652

#35642: _asynciomodule.c compiled in both pythoncore.vcxproj and _asyn
https://bugs.python.org/issue35642

#35638: Introduce fixed point locale aware format type for floating po
https://bugs.python.org/issue35638

#35636: remove redundant check in unicode_hash(PyObject *self)
https://bugs.python.org/issue35636

#35633: test_eintr fails on AIX since fcntl functions were modified
https://bugs.python.org/issue35633

#35619: Support custom data descriptors in pydoc
https://bugs.python.org/issue35619

#35617: unittest discover does not work with implicit namespaces
https://bugs.python.org/issue35617

#35616: Change references to '4.0'.
https://bugs.python.org/issue35616

#35615: "RuntimeError: Dictionary changed size during iteration" when 
https://bugs.python.org/issue35615

#35610: IDLE: replace use of EditorWindow.context_use_ps1
https://bugs.python.org/issue35610

#35606: Add prod() function to the math module
https://bugs.python.org/issue35606

#35605: backported patch requires new sphinx, minimum sphinx version w
https://bugs.python.org/issue35605

#35603: table header in output of difflib.HtmlDiff.make_table is not e
https://bugs.python.org/issue35603

#35598: IDLE: Modernize config_key module
https://bugs.python.org/issue35598

#35596: Fatal Python error: initfsencoding: unable to load the file sy
https://bugs.python.org/issue35596



Top 10 most discussed issues (10)
=================================

#35598: IDLE: Modernize config_key module
https://bugs.python.org/issue35598  11 msgs

#35638: Introduce fixed point locale aware format type for floating po
https://bugs.python.org/issue35638  10 msgs

#35431: Add a function for computing binomial coefficients to the math
https://bugs.python.org/issue35431   9 msgs

#35636: remove redundant check in unicode_hash(PyObject *self)
https://bugs.python.org/issue35636   9 msgs

#35605: backported patch requires new sphinx, minimum sphinx version w
https://bugs.python.org/issue35605   8 msgs

#35214: Get the test suite passing with clang Memory Sanitizer enabled
https://bugs.python.org/issue35214   7 msgs

#35644: venv doesn't work on Windows when no venvlauncher executable p
https://bugs.python.org/issue35644   7 msgs

#35603: table header in output of difflib.HtmlDiff.make_table is not e
https://bugs.python.org/issue35603   6 msgs

#35608: python3 multiprocessing queue deadlock when use thread and pro
https://bugs.python.org/issue35608   6 msgs

#35654: Remove 'guarantee' that sorting only relies on __lt__ from sor
https://bugs.python.org/issue35654   6 msgs



Issues closed (34)
==================

#19120: shlex.shlex.lineno reports a different number depending on the
https://bugs.python.org/issue19120  closed by cheryl.sabella

#20182: Derby #13: Convert 50 sites to Argument Clinic across 5 files
https://bugs.python.org/issue20182  closed by taleinat

#20849: add exist_ok to shutil.copytree
https://bugs.python.org/issue20849  closed by giampaolo.rodola

#28503: [Patch] '_crypt' module: fix implicit declaration of crypt(), 
https://bugs.python.org/issue28503  closed by gregory.p.smith

#32492: C Fast path for namedtuple's property/itemgetter pair
https://bugs.python.org/issue32492  closed by rhettinger

#33234: Improve list() pre-sizing for inputs with known lengths
https://bugs.python.org/issue33234  closed by pablogsal

#33987: IDLE: use ttk.Frame for ttk widgets
https://bugs.python.org/issue33987  closed by terry.reedy

#34055: IDLE: erroneous 'smart' indents in shell
https://bugs.python.org/issue34055  closed by terry.reedy

#35225: test_faulthandler fails under ubsan
https://bugs.python.org/issue35225  closed by gregory.p.smith

#35570: 2to3 creates code using deprecated imp module
https://bugs.python.org/issue35570  closed by terry.reedy

#35583: (glibc2.28/MIPS32EL) python 3.7.x interpreter segmentation fau
https://bugs.python.org/issue35583  closed by broly

#35588: Speed up mod/divmod/floordiv for Fraction type
https://bugs.python.org/issue35588  closed by serhiy.storchaka

#35594: Python script generating Segmentation Fault
https://bugs.python.org/issue35594  closed by terry.reedy

#35601: Race condition in test_signal_handling_args x86-64 High Sierra
https://bugs.python.org/issue35601  closed by pablogsal

#35602: cleanup code may fail in test_asyncio.test_unix_events.Selecto
https://bugs.python.org/issue35602  closed by pablogsal

#35607: python3 multiprocessing queue deadlock when use thread and pro
https://bugs.python.org/issue35607  closed by beruhan

#35609: Improve of abc.py docstring
https://bugs.python.org/issue35609  closed by serhiy.storchaka

#35612: Text wrap over text containing tab character
https://bugs.python.org/issue35612  closed by Devika Sondhi

#35613: Escaping string containing invalid characters as per XML
https://bugs.python.org/issue35613  closed by ned.deily

#35614: Broken help() on metaclasses
https://bugs.python.org/issue35614  closed by ncoghlan

#35623: Segfault in test_bigmem.ListTest.test_sort
https://bugs.python.org/issue35623  closed by benjamin.peterson

#35626: Python dictreader KeyError issue
https://bugs.python.org/issue35626  closed by eric.smith

#35630: Missing code tag for "python3" in README.rst
https://bugs.python.org/issue35630  closed by benjamin.peterson

#35631: Improve typing docs wrt abstract/concrete collection types
https://bugs.python.org/issue35631  closed by levkivskyi

#35637: Factorial should be able to evaluate float arguments
https://bugs.python.org/issue35637  closed by serhiy.storchaka

#35641: IDLE: calltips not properly formatted for functions without do
https://bugs.python.org/issue35641  closed by taleinat

#35643: SyntaxWarning: invalid escape sequence in Modules/_sha3/cleanu
https://bugs.python.org/issue35643  closed by benjamin.peterson

#35645: Alarm usage
https://bugs.python.org/issue35645  closed by steven.daprano

#35646: python -v writes to stderr
https://bugs.python.org/issue35646  closed by eric.smith

#35648: Add use_srcentry parameter to shutil.copytree()
https://bugs.python.org/issue35648  closed by flokX

#35650: cygwin treats X and X.exe as the same file
https://bugs.python.org/issue35650  closed by zach.ware

#35653: All regular expression match groups are the empty string
https://bugs.python.org/issue35653  closed by mrabarnett

#35655: documentation have wrong info about fibo module examples
https://bugs.python.org/issue35655  closed by christian.heimes

#35658: Reggie_Linear_Regression_Solution.ipynb devide by 10 diff with
https://bugs.python.org/issue35658  closed by steven.daprano

From mertz at gnosis.cx  Fri Jan  4 15:24:20 2019
From: mertz at gnosis.cx (David Mertz)
Date: Fri, 4 Jan 2019 15:24:20 -0500
Subject: [Python-Dev] Interested in serving on Steering Council
In-Reply-To: <cb08756a-cf4b-f6ad-5147-7ef3e41f4c95@python.org>
References: <CAEbHw4bhjt3k-Q57BnSWw150B2Pint1465ick+775i-eaYeVBA@mail.gmail.com>
 <20190102191517.7fc2094c@fsol>
 <cb08756a-cf4b-f6ad-5147-7ef3e41f4c95@python.org>
Message-ID: <CAEbHw4b-dWKeYWaYoGBS1HMxJjuN0gquM99mKfuNvvU3wmwzGQ@mail.gmail.com>

I do not wish to presume too much on the judgement of the core developers.
But I thank Steve Dower for his characterizations which pretty much exactly
explain why I've had those involvements with the Python community and
language I have had, and haven't done other things.

I've been part of the Python community since 1998, but really active in it
since about 2001.  During the early 2000s, I wrote a large number of widely
read articles promoting Python, often delving into explaining semi-obscure
features and language design issues.  Most of these were with in my column
_Charming Python_.  I believe that several changes in Python itself?such as
making coroutines easier to use and the design of metaclasses and class
decorators?were significantly influenced by things I wrote on the topics.

Mostly in the period after writing that column, i.e. during the 2010s, I
served as a Director of the PSF; both before and since my time as a
Director, I've chaired several PSF committees.  That likewise felt like a
way I could advance Python best, but from more of an organizational or
social perspective than a technical one.  It is interesting to me that
whereas when I started volunteering for the PSF, there was significant
overlap between the PSF board and the core-committers, I think there is
little or no overlap today.  For better or worse, PSF is much more
community than technical today.  I feel like my own skills and interest
remain somewhat at the intersection of those aspects of Python.

I did not choose during that time, nor since, to become a CPython core
developer.  I've certainly contributed to other projects in the Python
ecosystem (I'm not sure if those are "related projects" in the sense Steve
mentions).  Part of that is time commitment needed, but more of it is my
personal strategic choices about what I could best do to advance Python in
the world.  I've felt I can do more by writing, speaking, and participating
in the PSF, than I would have by working on the CPython code base itself.

In particular, I always felt that I am not nearly as strong of a *C*
developer as are most core developers.  In Python itself, yes, but not in
C.  I am certain that I could have found some small bug to fix or small
feature to add, and gotten it accepted.  But doing that would have taken me
comparatively more effort than it would many others; I felt that effort was
better targeted towards educating Python users and teaching the user-level
language design choices Python has made.

If the core developers feel that the overwhelming qualification for the
Steering Committee is familiarity with the C code base of CPython, then
indeed I am not the best candidate for that.  If language design issues are
more important?and especially if thinking about Python's place among users
and industry are important, then I think I'm a very good candidate for the
role.  In particular, I believe my judgement about "Is this feature good
for Python users?" would be as good as that of most anyone (maybe other
than Guido); but I recognize that my judgement about "Is this feature
straightforward to implement in CPython?" or "What are the performance
implications of this features?" are weaker than those of most core
developers.  Not to say I have *no* instinct about those other questions,
but I know to defer.

Best, David...


> (*) (or Committee, I don't remember :-)
> David may of course provide an answer for himself, but allow me to
> provide my answer (and this is why I pushed for allowing external
> nominations).
>
> Historically, the only reason to become a core committer was to commit
> code. Some of us no doubt desired or demonstrated greater influence, but
> all of us have committed code or reviewed and merged PRs, either
> directly to CPython or one of the related projects.
>
> This is not a job for everyone, but it's been the only job we had on offer.
>
> The closest alternative job was to be elected to the board of the Python
> Software Foundation. But this is still not a job for everyone. They also
> are not considered core committers, despite making significant
> contributions.
>
> We now have a new job on offer. Exactly what that job involves isn't
> quite defined yet, but it will certainly include some amount of
> project/program/process management, likely some customer/user engagement
> (or relationship management, if you prefer), and potentially some
> independent decision making.
>
> Guido is the only core developer who has previously contributed to
> Python in this way (whatever "this way" turns out to mean). The rest of
> us happily worked under "someone else" doing it.
>
> Meanwhile, many non-core committers in the Python community have spent
> their time building companies, consulting businesses or educational
> courses. Spending time writing code and reviewing PRs is not how they
> want to contribute, and so they have contributed in other ways -
> including writing and often reviewing PEPs. There was no need for them
> to be a core committer, since they weren't doing any of the
> committer-specific tasks.
>
> In the PEP 8016 discussions (pre vote), we agreed that if we chose to
> elect someone who is not currently a core developer, we would also
> probably vote to make them a core developer, so there is no harm in
> allowing externals to be nominated. Also since the core committers are
> voluntarily submitting to their guidance, it makes sense that voting to
> elect/dissolve is restricted to us.
>
> In summary, members of the Steering Council are filling a new role with
> only one explicit precedent within the core committers. The
> qualifications are different, and so the pool of candidates is
> different. The existing core committers will submit to the Steering
> Council, and so are the ones who elect them.
>
> (Note that I've carefully used "core committer" and "core developer"
> above. I believe it's very important to distinguish between "write
> access on GitHub" and "project decision maker", and no reason to force
> an arbitrary overlap.)
>
> Cheers,
> Steve
>


-- 
Keeping medicines from the bloodstreams of the sick; food
from the bellies of the hungry; books from the hands of the
uneducated; technology from the underdeveloped; and putting
advocates of freedom in prisons.  Intellectual property is
to the 21st century what the slave trade was to the 16th.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190104/30ae92e5/attachment.html>

From solipsis at pitrou.net  Fri Jan  4 15:36:05 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Fri, 4 Jan 2019 21:36:05 +0100
Subject: [Python-Dev] Interested in serving on Steering Council
In-Reply-To: <CAEbHw4b-dWKeYWaYoGBS1HMxJjuN0gquM99mKfuNvvU3wmwzGQ@mail.gmail.com>
References: <CAEbHw4bhjt3k-Q57BnSWw150B2Pint1465ick+775i-eaYeVBA@mail.gmail.com>
 <20190102191517.7fc2094c@fsol>
 <cb08756a-cf4b-f6ad-5147-7ef3e41f4c95@python.org>
 <CAEbHw4b-dWKeYWaYoGBS1HMxJjuN0gquM99mKfuNvvU3wmwzGQ@mail.gmail.com>
Message-ID: <20190104213605.57fba25b@fsol>


Hi David,

On Fri, 4 Jan 2019 15:24:20 -0500
David Mertz <mertz at gnosis.cx> wrote:
> 
> I've been part of the Python community since 1998, but really active in it
> since about 2001.  During the early 2000s, I wrote a large number of widely
> read articles promoting Python, often delving into explaining semi-obscure
> features and language design issues.  Most of these were with in my column
> _Charming Python_.  I believe that several changes in Python itself?such as
> making coroutines easier to use and the design of metaclasses and class
> decorators?were significantly influenced by things I wrote on the topics.
> [snip]

Those are useful things to know, thank you.

> If the core developers feel that the overwhelming qualification for the
> Steering Committee is familiarity with the C code base of CPython, then
> indeed I am not the best candidate for that.

Obviously not the overwhelming qualification (though at least _some_ of
the committee members would have to be familiar with the C code base, I
think).

> If language design issues are
> more important?and especially if thinking about Python's place among users
> and industry are important, then I think I'm a very good candidate for the
> role.

That, but I think also familiarity with the development and
contribution process, will definitely play a role.  In other words, if
some external candidate gets elected I would hope they take the time to
become familiar with how things work in that regard, and try to
contribute themselves (not necessarily to make important contributions
to the codebase but to understand the daily routine).

Regards

Antoine.

From alexander.belopolsky at gmail.com  Sat Jan  5 03:55:44 2019
From: alexander.belopolsky at gmail.com (Alexander Belopolsky)
Date: Sat, 5 Jan 2019 11:55:44 +0300
Subject: [Python-Dev] Return type of datetime subclasses added to
 timedelta
In-Reply-To: <1059740e-cc65-205d-5986-a9397463a315@ganssle.io>
References: <1059740e-cc65-205d-5986-a9397463a315@ganssle.io>
Message-ID: <CAP7h-xa-Dp8TXrm7Oa=jDwf0wyBfVy-6zK08w219q0jVaYACiQ@mail.gmail.com>

On Wed, Jan 2, 2019 at 10:18 PM Paul Ganssle <paul at ganssle.io> wrote:

> .. the original objection was that this implementation assumes that the
> datetime subclass has a constructor with the same (or a sufficiently
> similar) signature as datetime.
>
While this was used as a possible rationale for the way standard types
behave, the main objection to changing datetime classes is that it will
make them behave differently from builtins.  For example:

>>> class F(float):
...     pass
...
>>> type(F.fromhex('AA'))
<class '__main__.F'>
>>> type(F(1) + F(2))
<class 'float'>

This may be a legitimate gripe, but unfortunately that ship has sailed long
> ago. All of datetime's alternate constructors make this assumption. Any
> subclass that does not meet this requirement must have worked around it
> long ago (or they don't care about alternate constructors).
>

This is right, but the same argument is equally applicable to int, float,
etc. subclasses.  If you want to limit your change to datetime types you
should explain what makes these types special.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190105/2b3720ca/attachment.html>


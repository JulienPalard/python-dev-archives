From emmanuelarias30 at gmail.com  Fri Feb  1 06:57:10 2019
From: emmanuelarias30 at gmail.com (eamanu15)
Date: Fri, 1 Feb 2019 08:57:10 -0300
Subject: [Python-Dev] How to update namedtuple asdict() to use dict
 instead of OrderedDict
In-Reply-To: <mailman.7678.1548891690.4818.python-dev@python.org>
References: <mailman.7678.1548891690.4818.python-dev@python.org>
Message-ID: <CACttXDOnRQMpNPSDTNCMaVvAeyKoNWgUx68ybKGiAVyqOYXVZg@mail.gmail.com>

Hi!


> Option 4) Just make the change directly in 3.8,  s/OrderedDict/dict/, and
> be done will it.  This gives users the benefits right away and doesn't
> annoy them with warnings that they likely don't care about.   There is some
> precedent for this.  To make namedtuple class creation faster, the
> *verbose* option was dropped without any deprecation period.  It looks like
> no one missed that feature at all, but they did get the immediate benefit
> of faster import times.  In the case of using regular dicts in named
> tuples, people will get immediate and significant space savings as well as
> a speed benefit.
>

 +1 for option 4

Regards!
eamanu
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190201/3fd10274/attachment.html>

From status at bugs.python.org  Fri Feb  1 13:07:59 2019
From: status at bugs.python.org (Python tracker)
Date: Fri, 01 Feb 2019 18:07:59 +0000
Subject: [Python-Dev] Summary of Python tracker Issues
Message-ID: <20190201180759.1.9D569A7627081917@roundup.psfhosted.org>


ACTIVITY SUMMARY (2019-01-25 - 2019-02-01)
Python tracker at https://bugs.python.org/

To view or respond to any of the issues listed below, click on the issue.
Do NOT respond to this message.

Issues counts and deltas:
  open    6985 (+32)
  closed 40649 (+23)
  total  47634 (+55)

Open issues with patches: 2775 


Issues opened (45)
==================

#25592: distutils docs: data_files always uses sys.prefix
https://bugs.python.org/issue25592  reopened by pitrou

#30670: pprint for dict in sorted order or insert order?
https://bugs.python.org/issue30670  reopened by josephsmeng

#35829: datetime: parse "Z" timezone suffix in fromisoformat()
https://bugs.python.org/issue35829  opened by rdb

#35830: building multiple (binary) packages from a single project
https://bugs.python.org/issue35830  opened by stefan

#35832: Installation error
https://bugs.python.org/issue35832  opened by Stefano Bonalumi

#35833: IDLE: revise doc for control chars sent to Shell
https://bugs.python.org/issue35833  opened by Dude Roast

#35834: get_type_hints exposes an instance of ForwardRef (internal cla
https://bugs.python.org/issue35834  opened by Lincoln Quirk

#35838: ConfigParser calls optionxform twice when assigning dict
https://bugs.python.org/issue35838  opened by Phil Kang

#35839: Suggestion: Ignore sys.modules entries with no __spec__ attrib
https://bugs.python.org/issue35839  opened by ncoghlan

#35840: Control flow inconsistency on closed asyncio stream
https://bugs.python.org/issue35840  opened by schlamar

#35841: Datetime strftime() does not return correct week numbers for 2
https://bugs.python.org/issue35841  opened by tr12

#35843: importlib.util docs for namespace packages innaccurate
https://bugs.python.org/issue35843  opened by Anthony Sottile

#35844: Calling `Multiprocessing.Queue.close()` too quickly causes int
https://bugs.python.org/issue35844  opened by charmonium

#35845: Can't read a F-contiguous memoryview in physical order
https://bugs.python.org/issue35845  opened by pitrou

#35846: Incomplete documentation for re.sub
https://bugs.python.org/issue35846  opened by pbugnion

#35847: RISC-V needs CTYPES_PASS_BY_REF_HACK
https://bugs.python.org/issue35847  opened by schwab

#35848: readinto is not a method on io.TextIOBase
https://bugs.python.org/issue35848  opened by steverpalmer

#35849: Added thousands separators to Lib/pstats.py final report
https://bugs.python.org/issue35849  opened by addons_zz

#35851: Make search result in online docs keep their position when sea
https://bugs.python.org/issue35851  opened by roelschroeven

#35852: Fixed tests regenerating using CRLF when running it on Windows
https://bugs.python.org/issue35852  opened by addons_zz

#35854: EnvBuilder and venv symlinks do not work on Windows on 3.7.2
https://bugs.python.org/issue35854  opened by steve.dower

#35855: IDLE squeezer: improve unsqueezing and autosqueeze default
https://bugs.python.org/issue35855  opened by terry.reedy

#35856: bundled pip syntaxwarning
https://bugs.python.org/issue35856  opened by Dima.Tisnek

#35857: Stacktrace shows lines from updated file on disk, not code act
https://bugs.python.org/issue35857  opened by Steve Pryde

#35859: Capture behavior depends on the order of an alternation
https://bugs.python.org/issue35859  opened by davisjam

#35860: ProcessPoolExecutor subprocesses crash & break pool when raisi
https://bugs.python.org/issue35860  opened by underyx

#35861: test_named_expressions raises SyntaxWarning
https://bugs.python.org/issue35861  opened by xtreak

#35862: Change the environment for a new process
https://bugs.python.org/issue35862  opened by r-or

#35866: concurrent.futures deadlock
https://bugs.python.org/issue35866  opened by jwilk

#35867: NameError is not caught at Task execution
https://bugs.python.org/issue35867  opened by Sampsa Riikonen

#35868: Support ALL_PROXY environment variable in urllib
https://bugs.python.org/issue35868  opened by Oleh Khoma

#35869: io.BufferReader.read() returns None
https://bugs.python.org/issue35869  opened by steverpalmer

#35870: readline() specification is unclear
https://bugs.python.org/issue35870  opened by porton

#35871: Pdb NameError in generator param and list comprehension
https://bugs.python.org/issue35871  opened by jayanth

#35872: Creating venv from venv no longer works in 3.7.2
https://bugs.python.org/issue35872  opened by schlamar

#35873: Controlling venv from venv no longer works in 3.7.2
https://bugs.python.org/issue35873  opened by schlamar

#35874: Clarify that the (...) convertor to PyArg_ParseTuple... accept
https://bugs.python.org/issue35874  opened by Antony.Lee

#35875: Crash - algos.cp36-win_amd64.pyd  join.cp36-win_amd64.pyd
https://bugs.python.org/issue35875  opened by AxelArnoldBangert

#35876: test_start_new_session for posix_spawnp fails
https://bugs.python.org/issue35876  opened by pablogsal

#35877: parenthesis is mandatory for named expressions in while statem
https://bugs.python.org/issue35877  opened by xtreak

#35878: ast.c: end_col_offset may be used uninitialized in this functi
https://bugs.python.org/issue35878  opened by vstinner

#35879: test_type_comments leaks references
https://bugs.python.org/issue35879  opened by vstinner

#35880: math.sin has no backward error; this isn't documented
https://bugs.python.org/issue35880  opened by jneb

#35882: distutils fails with UnicodeEncodeError with strange filename 
https://bugs.python.org/issue35882  opened by scjody

#35883: Change invalid unicode characters to replacement characters in
https://bugs.python.org/issue35883  opened by Neui



Most recent 15 issues with no replies (15)
==========================================

#35882: distutils fails with UnicodeEncodeError with strange filename 
https://bugs.python.org/issue35882

#35878: ast.c: end_col_offset may be used uninitialized in this functi
https://bugs.python.org/issue35878

#35874: Clarify that the (...) convertor to PyArg_ParseTuple... accept
https://bugs.python.org/issue35874

#35873: Controlling venv from venv no longer works in 3.7.2
https://bugs.python.org/issue35873

#35867: NameError is not caught at Task execution
https://bugs.python.org/issue35867

#35860: ProcessPoolExecutor subprocesses crash & break pool when raisi
https://bugs.python.org/issue35860

#35852: Fixed tests regenerating using CRLF when running it on Windows
https://bugs.python.org/issue35852

#35844: Calling `Multiprocessing.Queue.close()` too quickly causes int
https://bugs.python.org/issue35844

#35827: C API dictionary views type checkers are not documented
https://bugs.python.org/issue35827

#35813: shared memory construct to avoid need for serialization betwee
https://bugs.python.org/issue35813

#35812: Don't log an exception from the main coroutine in asyncio.run(
https://bugs.python.org/issue35812

#35807: Update bundled pip to 19.0
https://bugs.python.org/issue35807

#35803: Test and document that `dir=...` in tempfile may be PathLike
https://bugs.python.org/issue35803

#35801: venv in 3.7 references python3 executable
https://bugs.python.org/issue35801

#35792: Specifying AbstractEventLoop.run_in_executor as a coroutine co
https://bugs.python.org/issue35792



Most recent 15 issues waiting for review (15)
=============================================

#35877: parenthesis is mandatory for named expressions in while statem
https://bugs.python.org/issue35877

#35876: test_start_new_session for posix_spawnp fails
https://bugs.python.org/issue35876

#35862: Change the environment for a new process
https://bugs.python.org/issue35862

#35861: test_named_expressions raises SyntaxWarning
https://bugs.python.org/issue35861

#35854: EnvBuilder and venv symlinks do not work on Windows on 3.7.2
https://bugs.python.org/issue35854

#35852: Fixed tests regenerating using CRLF when running it on Windows
https://bugs.python.org/issue35852

#35849: Added thousands separators to Lib/pstats.py final report
https://bugs.python.org/issue35849

#35847: RISC-V needs CTYPES_PASS_BY_REF_HACK
https://bugs.python.org/issue35847

#35843: importlib.util docs for namespace packages innaccurate
https://bugs.python.org/issue35843

#35826: Typo in example for async with statement with condition
https://bugs.python.org/issue35826

#35824: http.cookies._CookiePattern modifying regular expressions
https://bugs.python.org/issue35824

#35823: Use vfork() in subprocess on Linux
https://bugs.python.org/issue35823

#35813: shared memory construct to avoid need for serialization betwee
https://bugs.python.org/issue35813

#35810: Object Initialization Bug with Heap-allocated Types
https://bugs.python.org/issue35810

#35803: Test and document that `dir=...` in tempfile may be PathLike
https://bugs.python.org/issue35803



Top 10 most discussed issues (10)
=================================

#35431: Add a function for computing binomial coefficients to the math
https://bugs.python.org/issue35431  12 msgs

#25592: distutils docs: data_files always uses sys.prefix
https://bugs.python.org/issue25592  10 msgs

#35857: Stacktrace shows lines from updated file on disk, not code act
https://bugs.python.org/issue35857  10 msgs

#35854: EnvBuilder and venv symlinks do not work on Windows on 3.7.2
https://bugs.python.org/issue35854   7 msgs

#35848: readinto is not a method on io.TextIOBase
https://bugs.python.org/issue35848   6 msgs

#35859: Capture behavior depends on the order of an alternation
https://bugs.python.org/issue35859   6 msgs

#35823: Use vfork() in subprocess on Linux
https://bugs.python.org/issue35823   5 msgs

#35829: datetime: parse "Z" timezone suffix in fromisoformat()
https://bugs.python.org/issue35829   5 msgs

#30670: pprint for dict in sorted order or insert order?
https://bugs.python.org/issue30670   4 msgs

#32834: test_gdb fails with Posix locale in 3.7
https://bugs.python.org/issue32834   4 msgs



Issues closed (22)
==================

#2212: Cookie.BaseCookie has ambiguous unicode handling
https://bugs.python.org/issue2212  closed by martin.panter

#29235: Allow profile/cProfile to be used as context managers
https://bugs.python.org/issue29235  closed by cheryl.sabella

#34003: csv.DictReader can return basic dict instead of OrderedDict
https://bugs.python.org/issue34003  closed by rhettinger

#35196: IDLE text squeezer is too aggressive and is slow
https://bugs.python.org/issue35196  closed by terry.reedy

#35717: enum.Enum error on sys._getframe(2)
https://bugs.python.org/issue35717  closed by vstinner

#35769: IDLE: change new file name from  ''Untitled" to "untitled"
https://bugs.python.org/issue35769  closed by cheryl.sabella

#35780: Recheck logic in the C version of the lru_cache()
https://bugs.python.org/issue35780  closed by rhettinger

#35797: concurrent.futures.ProcessPoolExecutor does not work in venv o
https://bugs.python.org/issue35797  closed by steve.dower

#35811: py.exe should unset the __PYVENV_LAUNCHER__ environment variab
https://bugs.python.org/issue35811  closed by steve.dower

#35825: Py_UNICODE_SIZE=4 fails to link on Windows
https://bugs.python.org/issue35825  closed by inada.naoki

#35831: Format Spec example says limited to 3.1+ but works in 2.7
https://bugs.python.org/issue35831  closed by fdrake

#35835: There is no mention of breakpoint() in the pdb documentation
https://bugs.python.org/issue35835  closed by Mariatta

#35836: ZeroDivisionError class should have a __name__ attr
https://bugs.python.org/issue35836  closed by steven.daprano

#35837: smtpd PureProxy breaks on mail_options keyword argument
https://bugs.python.org/issue35837  closed by r.david.murray

#35842: A potential bug about use of uninitialised variable
https://bugs.python.org/issue35842  closed by josh.r

#35850: CKAN installation went on script error
https://bugs.python.org/issue35850  closed by christian.heimes

#35853: Extend the functools module with more higher order function co
https://bugs.python.org/issue35853  closed by rhettinger

#35858: Consider adding the option of running shell/console commands i
https://bugs.python.org/issue35858  closed by jcrmatos

#35863: email.headers wraps headers badly
https://bugs.python.org/issue35863  closed by r.david.murray

#35864: Replace OrderedDict with regular dict in namedtuple's _asdict(
https://bugs.python.org/issue35864  closed by rhettinger

#35865: configparser document refers about random dict order
https://bugs.python.org/issue35865  closed by inada.naoki

#35881: test_type_comments leaks references and memory blocks
https://bugs.python.org/issue35881  closed by vstinner

From solipsis at pitrou.net  Sun Feb  3 10:19:25 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Sun, 3 Feb 2019 16:19:25 +0100
Subject: [Python-Dev] Difference between Include/internal and
 Include/cpython ?
Message-ID: <20190203161925.0115cf68@fsol>


Hello,

Can someone explain why we have two separate directories
Include/internal and Include/cpython?  What is the rule for declaring an
API inside one or another?

At first sight, it seems to me we're having gratuitous complication
here.  For example, I notice that PyFloat_Fini() is declared in
Include/cpython/pylifecycle.h but PyLong_Fini() is declared in
Include/internal/pycore_pylifecycle.h?

(and why the additional "pycore_XXX.h" naming convention for some of
those files?)

Regards

Antoine.



From ammar at ammaraskar.com  Sun Feb  3 11:10:16 2019
From: ammar at ammaraskar.com (Ammar Askar)
Date: Sun, 3 Feb 2019 11:10:16 -0500
Subject: [Python-Dev] Difference between Include/internal and
 Include/cpython ?
In-Reply-To: <20190203161925.0115cf68@fsol>
References: <20190203161925.0115cf68@fsol>
Message-ID: <CAG74Ji=7_uj67Wpybd1M0OM78R=u-KY22sxHQmSrs0OqEydAmg@mail.gmail.com>

This is the discussion where it was named:
https://discuss.python.org/t/poll-what-is-your-favorite-name-for-the-new-include-subdirectory/477?u=ammaraskar
and the bug explaining the motivation: https://bugs.python.org/issue35134

>(and why the additional "pycore_XXX.h" naming convention for some ofthose files?)

"* Include/internal/pycore_*.h is the "internal" API"

On Sun, Feb 3, 2019 at 10:20 AM Antoine Pitrou <solipsis at pitrou.net> wrote:
>
>
> Hello,
>
> Can someone explain why we have two separate directories
> Include/internal and Include/cpython?  What is the rule for declaring an
> API inside one or another?
>
> At first sight, it seems to me we're having gratuitous complication
> here.  For example, I notice that PyFloat_Fini() is declared in
> Include/cpython/pylifecycle.h but PyLong_Fini() is declared in
> Include/internal/pycore_pylifecycle.h?
>
> (and why the additional "pycore_XXX.h" naming convention for some of
> those files?)
>
> Regards
>
> Antoine.
>
>
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe: https://mail.python.org/mailman/options/python-dev/ammar%40ammaraskar.com

From solipsis at pitrou.net  Sun Feb  3 11:43:28 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Sun, 3 Feb 2019 17:43:28 +0100
Subject: [Python-Dev] Difference between Include/internal and
 Include/cpython ?
In-Reply-To: <CAG74Ji=7_uj67Wpybd1M0OM78R=u-KY22sxHQmSrs0OqEydAmg@mail.gmail.com>
References: <20190203161925.0115cf68@fsol>
 <CAG74Ji=7_uj67Wpybd1M0OM78R=u-KY22sxHQmSrs0OqEydAmg@mail.gmail.com>
Message-ID: <20190203174328.482c8175@fsol>


But in practice the distinction doesn't seem very conclusive.  Some
internal APIs end up in either of those two directories without any
clear reason why.

Regards

Antoine.


On Sun, 3 Feb 2019 11:10:16 -0500
Ammar Askar <ammar at ammaraskar.com> wrote:
> This is the discussion where it was named:
> https://discuss.python.org/t/poll-what-is-your-favorite-name-for-the-new-include-subdirectory/477?u=ammaraskar
> and the bug explaining the motivation: https://bugs.python.org/issue35134
> 
> >(and why the additional "pycore_XXX.h" naming convention for some ofthose files?)  
> 
> "* Include/internal/pycore_*.h is the "internal" API"
> 
> On Sun, Feb 3, 2019 at 10:20 AM Antoine Pitrou <solipsis at pitrou.net> wrote:
> >
> >
> > Hello,
> >
> > Can someone explain why we have two separate directories
> > Include/internal and Include/cpython?  What is the rule for declaring an
> > API inside one or another?
> >
> > At first sight, it seems to me we're having gratuitous complication
> > here.  For example, I notice that PyFloat_Fini() is declared in
> > Include/cpython/pylifecycle.h but PyLong_Fini() is declared in
> > Include/internal/pycore_pylifecycle.h?
> >
> > (and why the additional "pycore_XXX.h" naming convention for some of
> > those files?)
> >
> > Regards
> >
> > Antoine.
> >
> >
> > _______________________________________________
> > Python-Dev mailing list
> > Python-Dev at python.org
> > https://mail.python.org/mailman/listinfo/python-dev
> > Unsubscribe: https://mail.python.org/mailman/options/python-dev/ammar%40ammaraskar.com  


From solipsis at pitrou.net  Sun Feb  3 16:03:40 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Sun, 3 Feb 2019 22:03:40 +0100
Subject: [Python-Dev] Asking for reversion
Message-ID: <20190203220340.3158b236@fsol>


Hello,

I'd like to ask for the reversion of the changes done in
https://github.com/python/cpython/pull/11664

The reason is simple: the PR isn't complete, it lacks docs and tests.
It also didn't pass any review (this was pointed by Ronald), even
though it adds 1300 lines of code.  No programmer is perfect, so it's
statistically likely that the PR is defective.

With git, forks and branches, we definitely don't need to commit
unfinished PRs to the main repo.  It's perfectly fine to maintain
some non-trivial piece of work in a separate fork.  People do it on a
regular basis (for example I have currently two such
long-lived branches: one for PEP 556 and one for PEP 574).


Also, this is not the first time this happened.  Another
multiprocessing PR was merged some years ago without any docs or tests:
https://bugs.python.org/issue28053

Today that work /still/ lacks docs or tests, and there is a suspicion
that it doesn't work as intended (see issue comments).  It's probably
too late to revert it, but it's definitely a slippery slope.

Regards

Antoine.



From vstinner at redhat.com  Sun Feb  3 17:22:25 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Sun, 3 Feb 2019 23:22:25 +0100
Subject: [Python-Dev] Difference between Include/internal and
 Include/cpython ?
In-Reply-To: <20190203161925.0115cf68@fsol>
References: <20190203161925.0115cf68@fsol>
Message-ID: <CA+3bQGFFd2B2jyEe4ZHSLDiBpmHntPjhT8j7kwfjmZX3Za9+Cw@mail.gmail.com>

Hi Antoine,

The rules to decide what goes where have been discussed in the issues which
created Include/cpython/ and the issue moving more headers to
Include/internal/.

In short, internal/ should not be used outside CPython codebase. In Python
3.7, these headers were even not installed. I chose to install them because
I moved more headers into internal/ which is a backward incompatible
change. You should not use these headers outside CPython code base, but the
typical use case to use them are debug tools: debugger, tracer and
profiler. The internal/ subdir is not included in Python default search
path when you use python-config --cflags for example. It is a deliberate
choice that these headers are not easily accessible.

There file names are prefixed by pycore_ for practical reasons: if 2 header
files have the same name in internal/ and Include/, the C preprocessor can
pick the wrong one. See the internal/ issue which gives a concrete example
(but in Python 3.7).

cpython/ is just a practical separation to force developers to decide if a
new API is part of the stable API or not. Previously, too many APIs have
been added to the stable API by mistake (not on purpose).

About inconsistencies, I invite you to open issues. I worked by small
steps. I tried to not move too much code from "one API" (stable, cpython,
internal) to another. IMHO all _Init() and _Fini() APIs must be internal.
For historical reasons, they are even part of the public API (!) which is a
mistake. I don't see the point of calling them explicitly.

I tried to take notes at https://pythoncapi.readthedocs.io/ for the
rationale, examples and track progess, but I didn't update this site with
the work I did last 6 months.

I hope that it makes more sense to you now?

Victor


Le dimanche 3 f?vrier 2019, Antoine Pitrou <solipsis at pitrou.net> a ?crit :
>
> Hello,
>
> Can someone explain why we have two separate directories
> Include/internal and Include/cpython?  What is the rule for declaring an
> API inside one or another?
>
> At first sight, it seems to me we're having gratuitous complication
> here.  For example, I notice that PyFloat_Fini() is declared in
> Include/cpython/pylifecycle.h but PyLong_Fini() is declared in
> Include/internal/pycore_pylifecycle.h?
>
> (and why the additional "pycore_XXX.h" naming convention for some of
> those files?)
>
> Regards
>
> Antoine.
>
>
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
https://mail.python.org/mailman/options/python-dev/vstinner%40redhat.com
>

-- 
Night gathers, and now my watch begins. It shall not end until my death.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190203/1a603779/attachment.html>

From barry at python.org  Sun Feb  3 17:25:00 2019
From: barry at python.org (Barry Warsaw)
Date: Sun, 3 Feb 2019 14:25:00 -0800
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <20190203220340.3158b236@fsol>
References: <20190203220340.3158b236@fsol>
Message-ID: <714898D1-F99E-46CE-BE12-AC885629E49F@python.org>

On Feb 3, 2019, at 13:03, Antoine Pitrou <solipsis at pitrou.net> wrote:
> 
> I'd like to ask for the reversion of the changes done in
> https://github.com/python/cpython/pull/11664
> 
> The reason is simple: the PR isn't complete, it lacks docs and tests.
> It also didn't pass any review (this was pointed by Ronald), even
> though it adds 1300 lines of code.  No programmer is perfect, so it's
> statistically likely that the PR is defective.

I concur.  I actually think CI shouldn?t even pass without sufficiently covering tests and docs (sans a ?trivial? or other short circuiting label), but that might be unpopular.

-Barry

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: Message signed with OpenPGP
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190203/fac72696/attachment.sig>

From solipsis at pitrou.net  Sun Feb  3 17:40:59 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Sun, 3 Feb 2019 23:40:59 +0100
Subject: [Python-Dev] Difference between Include/internal and
 Include/cpython ?
In-Reply-To: <CA+3bQGFFd2B2jyEe4ZHSLDiBpmHntPjhT8j7kwfjmZX3Za9+Cw@mail.gmail.com>
References: <20190203161925.0115cf68@fsol>
 <CA+3bQGFFd2B2jyEe4ZHSLDiBpmHntPjhT8j7kwfjmZX3Za9+Cw@mail.gmail.com>
Message-ID: <20190203234059.2ba49a84@fsol>

On Sun, 3 Feb 2019 23:22:25 +0100
Victor Stinner <vstinner at redhat.com> wrote:
> Hi Antoine,
> 
> The rules to decide what goes where have been discussed in the issues which
> created Include/cpython/ and the issue moving more headers to
> Include/internal/.
> 
> In short, internal/ should not be used outside CPython codebase. In Python
> 3.7, these headers were even not installed. I chose to install them because
> I moved more headers into internal/ which is a backward incompatible
> change. You should not use these headers outside CPython code base, but the
> typical use case to use them are debug tools: debugger, tracer and
> profiler. The internal/ subdir is not included in Python default search
> path when you use python-config --cflags for example. It is a deliberate
> choice that these headers are not easily accessible.
> 
> There file names are prefixed by pycore_ for practical reasons: if 2 header
> files have the same name in internal/ and Include/, the C preprocessor can
> pick the wrong one. See the internal/ issue which gives a concrete example
> (but in Python 3.7).
> 
> cpython/ is just a practical separation to force developers to decide if a
> new API is part of the stable API or not. Previously, too many APIs have
> been added to the stable API by mistake (not on purpose).

Hmm, I see.  Thanks for the explanation.

Regards

Antoine.

From tjreedy at udel.edu  Sun Feb  3 19:31:18 2019
From: tjreedy at udel.edu (Terry Reedy)
Date: Sun, 3 Feb 2019 19:31:18 -0500
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <20190203220340.3158b236@fsol>
References: <20190203220340.3158b236@fsol>
Message-ID: <q3814o$2ben$1@blaine.gmane.org>

On 2/3/2019 4:03 PM, Antoine Pitrou wrote:
> 
> Hello,
> 
> I'd like to ask for the reversion of the changes done in
> https://github.com/python/cpython/pull/11664
> 
> The reason is simple: [over 1000 lines not reviewed, no tests, no docs]

Aside from the technical reasons Antoine gave, which I agree with, I 
think the merge was legally questionable, as a non-contributor is listed 
as a copyright holder.  Message 334805. https://bugs.python.org/issue35813

-- 
Terry Jan Reedy


From guido at python.org  Sun Feb  3 19:49:13 2019
From: guido at python.org (Guido van Rossum)
Date: Sun, 3 Feb 2019 16:49:13 -0800
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <q3814o$2ben$1@blaine.gmane.org>
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
Message-ID: <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>

I think this is now up to the 3.8 release manager.

On Sun, Feb 3, 2019 at 4:34 PM Terry Reedy <tjreedy at udel.edu> wrote:

> On 2/3/2019 4:03 PM, Antoine Pitrou wrote:
> >
> > Hello,
> >
> > I'd like to ask for the reversion of the changes done in
> > https://github.com/python/cpython/pull/11664
> >
> > The reason is simple: [over 1000 lines not reviewed, no tests, no docs]
>
> Aside from the technical reasons Antoine gave, which I agree with, I
> think the merge was legally questionable, as a non-contributor is listed
> as a copyright holder.  Message 334805. https://bugs.python.org/issue35813
>
> --
> Terry Jan Reedy
>
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/guido%40python.org
>


-- 
--Guido van Rossum (python.org/~guido)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190203/9b50a6b1/attachment.html>

From guido at python.org  Sun Feb  3 19:55:43 2019
From: guido at python.org (Guido van Rossum)
Date: Sun, 3 Feb 2019 16:55:43 -0800
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
 <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
Message-ID: <CAP7+vJ+Q=6eCoSwwa91+cShAkjA03Y-r+HpOu2y8sGmgtDcFpw@mail.gmail.com>

Also, did anyone ask Davin directly to roll it back?

On Sun, Feb 3, 2019 at 4:49 PM Guido van Rossum <guido at python.org> wrote:

> I think this is now up to the 3.8 release manager.
>
> On Sun, Feb 3, 2019 at 4:34 PM Terry Reedy <tjreedy at udel.edu> wrote:
>
>> On 2/3/2019 4:03 PM, Antoine Pitrou wrote:
>> >
>> > Hello,
>> >
>> > I'd like to ask for the reversion of the changes done in
>> > https://github.com/python/cpython/pull/11664
>> >
>> > The reason is simple: [over 1000 lines not reviewed, no tests, no docs]
>>
>> Aside from the technical reasons Antoine gave, which I agree with, I
>> think the merge was legally questionable, as a non-contributor is listed
>> as a copyright holder.  Message 334805.
>> https://bugs.python.org/issue35813
>>
>> --
>> Terry Jan Reedy
>>
>> _______________________________________________
>> Python-Dev mailing list
>> Python-Dev at python.org
>> https://mail.python.org/mailman/listinfo/python-dev
>> Unsubscribe:
>> https://mail.python.org/mailman/options/python-dev/guido%40python.org
>>
>
>
> --
> --Guido van Rossum (python.org/~guido)
>


-- 
--Guido van Rossum (python.org/~guido)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190203/8a917c64/attachment.html>

From tjreedy at udel.edu  Sun Feb  3 20:40:54 2019
From: tjreedy at udel.edu (Terry Reedy)
Date: Sun, 3 Feb 2019 20:40:54 -0500
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <CAP7+vJ+Q=6eCoSwwa91+cShAkjA03Y-r+HpOu2y8sGmgtDcFpw@mail.gmail.com>
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
 <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
 <CAP7+vJ+Q=6eCoSwwa91+cShAkjA03Y-r+HpOu2y8sGmgtDcFpw@mail.gmail.com>
Message-ID: <q38577$1qlm$2@blaine.gmane.org>

On 2/3/2019 7:55 PM, Guido van Rossum wrote:
> Also, did anyone ask Davin directly to roll it back?

Antoine posted on the issue, along with Robert O.  Robert reviewed and 
make several suggestions.

-- 
Terry Jan Reedy


From raymond.hettinger at gmail.com  Sun Feb  3 20:52:55 2019
From: raymond.hettinger at gmail.com (Raymond Hettinger)
Date: Sun, 3 Feb 2019 17:52:55 -0800
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <20190203220340.3158b236@fsol>
References: <20190203220340.3158b236@fsol>
Message-ID: <E19DF3D1-2FB4-4350-A0FF-B20A45A52C92@gmail.com>



> On Feb 3, 2019, at 1:03 PM, Antoine Pitrou <solipsis at pitrou.net> wrote:
> 
> I'd like to ask for the reversion of the changes done in
> https://github.com/python/cpython/pull/11664

Please work *with* Davin on this one.

It was only recently that you edited his name out of the list of maintainers for multiprocessing even though that is what he's been working on for the last two years and at the last two sprints.  I'd like to see more team work here rather than applying social pressures via python-dev (which is a *very* public list). 


Raymond


From raymond.hettinger at gmail.com  Sun Feb  3 21:10:43 2019
From: raymond.hettinger at gmail.com (Raymond Hettinger)
Date: Sun, 3 Feb 2019 18:10:43 -0800
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <q38577$1qlm$2@blaine.gmane.org>
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
 <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
 <CAP7+vJ+Q=6eCoSwwa91+cShAkjA03Y-r+HpOu2y8sGmgtDcFpw@mail.gmail.com>
 <q38577$1qlm$2@blaine.gmane.org>
Message-ID: <8933B3A4-DE0D-47AD-8A5A-10E7B54023D7@gmail.com>


> On Feb 3, 2019, at 5:40 PM, Terry Reedy <tjreedy at udel.edu> wrote:
> 
> On 2/3/2019 7:55 PM, Guido van Rossum wrote:
>> Also, did anyone ask Davin directly to roll it back?
> 
> Antoine posted on the issue, along with Robert O.  Robert reviewed and make several suggestions.

I think the PR sat in a stable state for many months, and it looks like RO's review comments came *after* the commit.  

FWIW, with dataclasses we decided to get the PR committed early, long before most of the tests and all of the docs. The principle was that bigger changes needed to go in as early as possible in the release cycle so that we could thoroughly exercise it (something that almost never happens while something is in the PR stage).  It would be great if the same came happen here.  IIRC, shared memory has long been the holy grail for multiprocessing, helping to mitigate its principle disadvantage (the cost of moving data between processes).  It's something we really want.

But let's see what the 3.8 release manager has to say.


Raymond



From python+python_dev at discontinuity.net  Sun Feb  3 22:12:38 2019
From: python+python_dev at discontinuity.net (Davin Potts)
Date: Sun, 3 Feb 2019 21:12:38 -0600
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <8933B3A4-DE0D-47AD-8A5A-10E7B54023D7@gmail.com>
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
 <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
 <CAP7+vJ+Q=6eCoSwwa91+cShAkjA03Y-r+HpOu2y8sGmgtDcFpw@mail.gmail.com>
 <q38577$1qlm$2@blaine.gmane.org>
 <8933B3A4-DE0D-47AD-8A5A-10E7B54023D7@gmail.com>
Message-ID: <CABHLM6sxvXGUc+V78X=94K+Gvv3mDnmoLRCzmb_BhFhi=m0P+w@mail.gmail.com>

I am attempting to do the right thing and am following the advice of other
core devs in what I have done thus far.

Borrowing heavily from what I've added to issue35813 just now:

This work is the result of ~1.5 years of development effort, much of it
accomplished at the last two core dev sprints.  The code behind it has been
stable since September 2018 and tested as an independently installable
package by multiple people.

I was encouraged by Lukasz, Yury, and others to check in this code early,
not waiting for tests and docs, in order to both solicit more feedback and
provide for broader testing.  I understand that doing such a thing is not
at all a novelty.  Thankfully it is doing that -- I hope that feedback
remains constructive and supportive.

There are some tests to be found in a branch (enh-tests-shmem) of
github.com/applio/cpython which I think should become more comprehensive
before inclusion.  Temporarily deferring and not including them as part of
the first alpha should reduce the complexity of that release.

Regarding the BSD license on the C code being adopted, my conversations
with Brett and subsequently Van have not raised concerns, far from it --
there is a process which is being followed to the letter.  If there are
other reasons to object to the thoughtful adoption of code licensed like
this one, that deserves a decoupled and larger discussion first.


Davin

On Sun, Feb 3, 2019 at 8:12 PM Raymond Hettinger <
raymond.hettinger at gmail.com> wrote:

>
> > On Feb 3, 2019, at 5:40 PM, Terry Reedy <tjreedy at udel.edu> wrote:
> >
> > On 2/3/2019 7:55 PM, Guido van Rossum wrote:
> >> Also, did anyone ask Davin directly to roll it back?
> >
> > Antoine posted on the issue, along with Robert O.  Robert reviewed and
> make several suggestions.
>
> I think the PR sat in a stable state for many months, and it looks like
> RO's review comments came *after* the commit.
>
> FWIW, with dataclasses we decided to get the PR committed early, long
> before most of the tests and all of the docs. The principle was that bigger
> changes needed to go in as early as possible in the release cycle so that
> we could thoroughly exercise it (something that almost never happens while
> something is in the PR stage).  It would be great if the same came happen
> here.  IIRC, shared memory has long been the holy grail for
> multiprocessing, helping to mitigate its principle disadvantage (the cost
> of moving data between processes).  It's something we really want.
>
> But let's see what the 3.8 release manager has to say.
>
>
> Raymond
>
>
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/python%2Bpython_dev%40discontinuity.net
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190203/82686044/attachment.html>

From python+python_dev at discontinuity.net  Sun Feb  3 22:25:27 2019
From: python+python_dev at discontinuity.net (Davin Potts)
Date: Sun, 3 Feb 2019 21:25:27 -0600
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <CABHLM6sxvXGUc+V78X=94K+Gvv3mDnmoLRCzmb_BhFhi=m0P+w@mail.gmail.com>
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
 <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
 <CAP7+vJ+Q=6eCoSwwa91+cShAkjA03Y-r+HpOu2y8sGmgtDcFpw@mail.gmail.com>
 <q38577$1qlm$2@blaine.gmane.org>
 <8933B3A4-DE0D-47AD-8A5A-10E7B54023D7@gmail.com>
 <CABHLM6sxvXGUc+V78X=94K+Gvv3mDnmoLRCzmb_BhFhi=m0P+w@mail.gmail.com>
Message-ID: <CABHLM6uum1CvxdO6ywkGjQfWBKQ=KPNVF9yxOE2jVt_iDybjhQ@mail.gmail.com>

On 2/3/2019 7:55 PM, Guido van Rossum wrote:
> Also, did anyone ask Davin directly to roll it back?

Simply put:  no.  There have been a number of reactionary comments in the
last 16 hours but no attempt to reach out to me directly during that time.


On Sun, Feb 3, 2019 at 8:12 PM Raymond Hettinger <
raymond.hettinger at gmail.com> wrote:
> It was only recently that you edited his name out of the list of
maintainers for multiprocessing
> even though that is what he's been working on for the last two years and
at the last two sprints.

I think it would be best to discuss Antoine's decision to take this
particular action without first consulting me, elsewhere and not part of
this thread.


As I said, I am happy to do the most constructive thing possible and I
sought the advice of those I highly respect first before doing as I have.


Davin


On Sun, Feb 3, 2019 at 9:12 PM Davin Potts <
python+python_dev at discontinuity.net> wrote:

> I am attempting to do the right thing and am following the advice of other
> core devs in what I have done thus far.
>
> Borrowing heavily from what I've added to issue35813 just now:
>
> This work is the result of ~1.5 years of development effort, much of it
> accomplished at the last two core dev sprints.  The code behind it has been
> stable since September 2018 and tested as an independently installable
> package by multiple people.
>
> I was encouraged by Lukasz, Yury, and others to check in this code early,
> not waiting for tests and docs, in order to both solicit more feedback and
> provide for broader testing.  I understand that doing such a thing is not
> at all a novelty.  Thankfully it is doing that -- I hope that feedback
> remains constructive and supportive.
>
> There are some tests to be found in a branch (enh-tests-shmem) of
> github.com/applio/cpython which I think should become more comprehensive
> before inclusion.  Temporarily deferring and not including them as part of
> the first alpha should reduce the complexity of that release.
>
> Regarding the BSD license on the C code being adopted, my conversations
> with Brett and subsequently Van have not raised concerns, far from it --
> there is a process which is being followed to the letter.  If there are
> other reasons to object to the thoughtful adoption of code licensed like
> this one, that deserves a decoupled and larger discussion first.
>
>
> Davin
>
> On Sun, Feb 3, 2019 at 8:12 PM Raymond Hettinger <
> raymond.hettinger at gmail.com> wrote:
>
>>
>> > On Feb 3, 2019, at 5:40 PM, Terry Reedy <tjreedy at udel.edu> wrote:
>> >
>> > On 2/3/2019 7:55 PM, Guido van Rossum wrote:
>> >> Also, did anyone ask Davin directly to roll it back?
>> >
>> > Antoine posted on the issue, along with Robert O.  Robert reviewed and
>> make several suggestions.
>>
>> I think the PR sat in a stable state for many months, and it looks like
>> RO's review comments came *after* the commit.
>>
>> FWIW, with dataclasses we decided to get the PR committed early, long
>> before most of the tests and all of the docs. The principle was that bigger
>> changes needed to go in as early as possible in the release cycle so that
>> we could thoroughly exercise it (something that almost never happens while
>> something is in the PR stage).  It would be great if the same came happen
>> here.  IIRC, shared memory has long been the holy grail for
>> multiprocessing, helping to mitigate its principle disadvantage (the cost
>> of moving data between processes).  It's something we really want.
>>
>> But let's see what the 3.8 release manager has to say.
>>
>>
>> Raymond
>>
>>
>> _______________________________________________
>> Python-Dev mailing list
>> Python-Dev at python.org
>> https://mail.python.org/mailman/listinfo/python-dev
>> Unsubscribe:
>> https://mail.python.org/mailman/options/python-dev/python%2Bpython_dev%40discontinuity.net
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190203/07919728/attachment.html>

From barry at python.org  Mon Feb  4 00:52:40 2019
From: barry at python.org (Barry Warsaw)
Date: Sun, 3 Feb 2019 21:52:40 -0800
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <8933B3A4-DE0D-47AD-8A5A-10E7B54023D7@gmail.com>
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
 <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
 <CAP7+vJ+Q=6eCoSwwa91+cShAkjA03Y-r+HpOu2y8sGmgtDcFpw@mail.gmail.com>
 <q38577$1qlm$2@blaine.gmane.org>
 <8933B3A4-DE0D-47AD-8A5A-10E7B54023D7@gmail.com>
Message-ID: <80174879-97D5-4516-97DF-093C980F363D@python.org>

On Feb 3, 2019, at 18:10, Raymond Hettinger <raymond.hettinger at gmail.com> wrote:
> 
> FWIW, with dataclasses we decided to get the PR committed early, long before most of the tests and all of the docs. The principle was that bigger changes needed to go in as early as possible in the release cycle so that we could thoroughly exercise it (something that almost never happens while something is in the PR stage).

I think that should generally be the exception, but if it does happen, there ought to be a release blocker issue for the tests and docs.  The problem then is if those things *don?t* happen and we get too late in the release cycle to roll the change back.

-Barry

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: Message signed with OpenPGP
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190203/3a966141/attachment.sig>

From ronaldoussoren at mac.com  Mon Feb  4 01:53:49 2019
From: ronaldoussoren at mac.com (Ronald Oussoren)
Date: Mon, 4 Feb 2019 07:53:49 +0100
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <8933B3A4-DE0D-47AD-8A5A-10E7B54023D7@gmail.com>
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
 <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
 <CAP7+vJ+Q=6eCoSwwa91+cShAkjA03Y-r+HpOu2y8sGmgtDcFpw@mail.gmail.com>
 <q38577$1qlm$2@blaine.gmane.org>
 <8933B3A4-DE0D-47AD-8A5A-10E7B54023D7@gmail.com>
Message-ID: <90A448A1-9854-4D66-A6E7-A1F97FEBC3B0@mac.com>


> On 4 Feb 2019, at 03:10, Raymond Hettinger <raymond.hettinger at gmail.com> wrote:
> 
> 
>> On Feb 3, 2019, at 5:40 PM, Terry Reedy <tjreedy at udel.edu> wrote:
>> 
>> On 2/3/2019 7:55 PM, Guido van Rossum wrote:
>>> Also, did anyone ask Davin directly to roll it back?
>> 
>> Antoine posted on the issue, along with Robert O.  Robert reviewed and make several suggestions.

@Terry: Robert is usually called Ronald :-)

> 
> I think the PR sat in a stable state for many months, and it looks like RO's review comments came *after* the commit.  

That?s because I only noticed the PR after commit: The PR was merged within an hour of creating the BPO issue. 

> 
> FWIW, with dataclasses we decided to get the PR committed early, long before most of the tests and all of the docs. The principle was that bigger changes needed to go in as early as possible in the release cycle so that we could thoroughly exercise it (something that almost never happens while something is in the PR stage).  It would be great if the same came happen here.  IIRC, shared memory has long been the holy grail for multiprocessing, helping to mitigate its principle disadvantage (the cost of moving data between processes).  It's something we really want.

But with dataclasses there was public discussion on the API.  This is a new API with no documentation in a part of the library that is known to be complex in nature.

Ronald
--

Twitter: @ronaldoussoren
Blog: https://blog.ronaldoussoren.net/

From ronaldoussoren at mac.com  Mon Feb  4 04:23:09 2019
From: ronaldoussoren at mac.com (Ronald Oussoren)
Date: Mon, 4 Feb 2019 10:23:09 +0100
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <CABHLM6uum1CvxdO6ywkGjQfWBKQ=KPNVF9yxOE2jVt_iDybjhQ@mail.gmail.com>
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
 <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
 <CAP7+vJ+Q=6eCoSwwa91+cShAkjA03Y-r+HpOu2y8sGmgtDcFpw@mail.gmail.com>
 <q38577$1qlm$2@blaine.gmane.org>
 <8933B3A4-DE0D-47AD-8A5A-10E7B54023D7@gmail.com>
 <CABHLM6sxvXGUc+V78X=94K+Gvv3mDnmoLRCzmb_BhFhi=m0P+w@mail.gmail.com>
 <CABHLM6uum1CvxdO6ywkGjQfWBKQ=KPNVF9yxOE2jVt_iDybjhQ@mail.gmail.com>
Message-ID: <2CCB0A9B-3B0B-460B-86FD-DE441F64B459@mac.com>



> On 4 Feb 2019, at 04:25, Davin Potts <python+python_dev at discontinuity.net> wrote:
> 
> On 2/3/2019 7:55 PM, Guido van Rossum wrote:
> > Also, did anyone ask Davin directly to roll it back?
> 
> Simply put:  no.  There have been a number of reactionary comments in the last 16 hours but no attempt to reach out to me directly during that time.
> 

I asked a question about the commit yesterday night in the tracker and was waiting for a response (which I fully expected to take some time due to timezone differences and this being a volunteer driven project). 

Ronald

From solipsis at pitrou.net  Mon Feb  4 04:27:44 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Mon, 4 Feb 2019 10:27:44 +0100
Subject: [Python-Dev] Asking for reversion
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
 <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
 <CAP7+vJ+Q=6eCoSwwa91+cShAkjA03Y-r+HpOu2y8sGmgtDcFpw@mail.gmail.com>
 <q38577$1qlm$2@blaine.gmane.org>
 <8933B3A4-DE0D-47AD-8A5A-10E7B54023D7@gmail.com>
 <CABHLM6sxvXGUc+V78X=94K+Gvv3mDnmoLRCzmb_BhFhi=m0P+w@mail.gmail.com>
 <CABHLM6uum1CvxdO6ywkGjQfWBKQ=KPNVF9yxOE2jVt_iDybjhQ@mail.gmail.com>
Message-ID: <20190204102744.18e0b141@fsol>

On Sun, 3 Feb 2019 21:25:27 -0600
Davin Potts <python+python_dev at discontinuity.net> wrote:
> On 2/3/2019 7:55 PM, Guido van Rossum wrote:
> > Also, did anyone ask Davin directly to roll it back?  
> 
> Simply put:  no.  There have been a number of reactionary comments in the
> last 16 hours but no attempt to reach out to me directly during that time.

By construction, if I post a comment on an issue you opened yourself on
the bug tracker, you are receiving those comments.

I'm not sure why a private message would be necessary.  Generally, we
refrain from doing things in private except if there are personal
issues.

Regards

Antoine.



From solipsis at pitrou.net  Mon Feb  4 04:33:22 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Mon, 4 Feb 2019 10:33:22 +0100
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <E19DF3D1-2FB4-4350-A0FF-B20A45A52C92@gmail.com>
References: <20190203220340.3158b236@fsol>
 <E19DF3D1-2FB4-4350-A0FF-B20A45A52C92@gmail.com>
Message-ID: <20190204103322.5b549fd1@fsol>

On Sun, 3 Feb 2019 17:52:55 -0800
Raymond Hettinger <raymond.hettinger at gmail.com> wrote:
> > On Feb 3, 2019, at 1:03 PM, Antoine Pitrou <solipsis at pitrou.net> wrote:
> > 
> > I'd like to ask for the reversion of the changes done in
> > https://github.com/python/cpython/pull/11664  
> 
> Please work *with* Davin on this one.

You know, Raymond, I'm a volunteer and I dedicate my time to whatever I
want.  If someone pushes some unfinished work, it is perfectly normal
to ask for reversion instead of feeling obliged to finish the work
myself.

Regards

Antoine.

From solipsis at pitrou.net  Mon Feb  4 04:31:02 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Mon, 4 Feb 2019 10:31:02 +0100
Subject: [Python-Dev] Asking for reversion
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
 <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
 <CAP7+vJ+Q=6eCoSwwa91+cShAkjA03Y-r+HpOu2y8sGmgtDcFpw@mail.gmail.com>
 <q38577$1qlm$2@blaine.gmane.org>
 <8933B3A4-DE0D-47AD-8A5A-10E7B54023D7@gmail.com>
Message-ID: <20190204103102.76c74feb@fsol>

On Sun, 3 Feb 2019 18:10:43 -0800
Raymond Hettinger <raymond.hettinger at gmail.com> wrote:
> > On Feb 3, 2019, at 5:40 PM, Terry Reedy <tjreedy at udel.edu> wrote:
> > 
> > On 2/3/2019 7:55 PM, Guido van Rossum wrote:  
> >> Also, did anyone ask Davin directly to roll it back?  
> > 
> > Antoine posted on the issue, along with Robert O.  Robert reviewed and make several suggestions.  
> 
> I think the PR sat in a stable state for many months, 

According to Github, it was opened 11 days ago.
The first commit itself is 12 days old (again according to Github):
https://github.com/python/cpython/pull/11664/commits/90f4a6cb2da8e187fa38b05c3f347cd602dd69c5

Now, perhaps the work itself is much older.

But regardless, you cannot expect someone to take notice of a PR or
issue if they are not put in CC.  It is very much against our usual
conventions to check in large pieces of code without asking anyone for
review.

Regards

Antoine.



From solipsis at pitrou.net  Mon Feb  4 04:39:06 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Mon, 4 Feb 2019 10:39:06 +0100
Subject: [Python-Dev] Asking for reversion
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
 <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
 <CAP7+vJ+Q=6eCoSwwa91+cShAkjA03Y-r+HpOu2y8sGmgtDcFpw@mail.gmail.com>
 <q38577$1qlm$2@blaine.gmane.org>
 <8933B3A4-DE0D-47AD-8A5A-10E7B54023D7@gmail.com>
 <CABHLM6sxvXGUc+V78X=94K+Gvv3mDnmoLRCzmb_BhFhi=m0P+w@mail.gmail.com>
Message-ID: <20190204103906.13a8e20d@fsol>

On Sun, 3 Feb 2019 21:12:38 -0600
Davin Potts <python+python_dev at discontinuity.net> wrote:
> 
> I was encouraged by Lukasz, Yury, and others to check in this code early,
> not waiting for tests and docs, in order to both solicit more feedback and
> provide for broader testing.

For the record: submitting a PR without tests or docs is perfectly
fine, and a reasonable way to ask for feedback.  Merging that PR is
not, usually (especially as you didn't wait for feedback).

So there might have been a misunderstanding between you and
Lukasz, Yury and the "others".  Or perhaps this is another instance of
taking a disruptive decision in private...

Regards

Antoine.



From lukasz at langa.pl  Mon Feb  4 05:36:47 2019
From: lukasz at langa.pl (=?utf-8?Q?=C5=81ukasz_Langa?=)
Date: Mon, 4 Feb 2019 11:36:47 +0100
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
 <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
Message-ID: <DED40378-CFE8-46ED-B0C4-014F9FE2936A@langa.pl>


> On 4 Feb 2019, at 01:49, Guido van Rossum <guido at python.org> wrote:
> 
> I think this is now up to the 3.8 release manager.

I responded on the tracker: https://bugs.python.org/issue35813#msg334817

I wrote:

> @Davin, in what time can you fill in the missing tests and documentation?  If this is something you finish do before alpha2, I'm inclined to leave the change in.
> 
> As it stands, I missed the controversy yesterday as I was busy making my first release.  So the merge *got released* in alpha1.  I would prefer to fix the missing pieces forward instead of reverting and re-submitting which will only thrash blame and history at this point.
> 
> FTR, I do agree with Antoine, Ronald and others that in the future such big changes should be as close to their ready state at merge time.



@Raymond, would you be willing to work with Davin on finishing this work in time for alpha2?


- ?
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: Message signed with OpenPGP
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190204/c31e3315/attachment.sig>

From solipsis at pitrou.net  Mon Feb  4 05:37:16 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Mon, 4 Feb 2019 11:37:16 +0100
Subject: [Python-Dev] About multiprocessing maintainership
Message-ID: <20190204113716.4368387b@fsol>


Hello,

In a recent message, Raymond dramatically pretends that I would have
"edited out" Davin of the maintainers list for the multiprocessing
module.

What I did (*) is different: I asked to mark Davin inactive and to stop
auto-assigning him on bug tracker issues.  Davin was /still/ listed in
the experts list, along with me and others.  IOW, there was no "editing
out".

(*) https://github.com/python/devguide/pull/435

The reason I did this is simple: Davin does not do, and has almost
never done, any actual maintenance work on multiprocessing (if you are
not convinced, just go through the git history, and the PRs that were
merged in the ~4 last years).  He usually does not respond to tracker
issues opened by users.  He does not review PRs.  The only sizable
piece of work he committed is, as I mentioned in the previous thread,
still untested and undocumented.

Auto-assigning someone who never (AFAICT) responds to issues ultimately
does a disservice to users, whose complaints go unanswered; while other
people, who /do/ respond to users, are not aware of those stale issues.

Regards

Antoine.



From stephane at wirtel.be  Mon Feb  4 05:58:27 2019
From: stephane at wirtel.be (Stephane Wirtel)
Date: Mon, 4 Feb 2019 11:58:27 +0100
Subject: [Python-Dev] Why a merge for 3.8.0a1?
Message-ID: <20190204105827.GA24384@xps>

Hi all,

After a git pull, I have seen there is a merge for v3.8.0a1 by ?ukasz
Langa, why? I think the code should keep a linear commit and in this
case, it's against the "commit&squash" of CPython and Github :/

Thank you for your response.

St?phane

-- 
St?phane Wirtel - https://wirtel.be - @matrixise

From lukasz at langa.pl  Mon Feb  4 06:03:08 2019
From: lukasz at langa.pl (=?utf-8?Q?=C5=81ukasz_Langa?=)
Date: Mon, 4 Feb 2019 12:03:08 +0100
Subject: [Python-Dev] Why a merge for 3.8.0a1?
In-Reply-To: <20190204105827.GA24384@xps>
References: <20190204105827.GA24384@xps>
Message-ID: <30BDE9B6-C213-4A3E-ADD8-0FCB3E3385D0@langa.pl>


> On 4 Feb 2019, at 11:58, Stephane Wirtel <stephane at wirtel.be> wrote:
> 
> Hi all,
> 
> After a git pull, I have seen there is a merge for v3.8.0a1 by ?ukasz
> Langa, why? I think the code should keep a linear commit and in this
> case, it's against the "commit&squash" of CPython and Github :/
> 
> Thank you for your response.

Tagging a release is different from a regular PR in the sense that you want the commit hash that you tagged as a given version to *remain the same*. In the mean time, other developers can (and will!) merge pull requests. If you were to rebase *the release tag* over their changes, the commit hash wouldn't match anymore. If you were to rebase *their changes* over your release tag, you'd have to force-push to update their changes.

This is described in PEP 101.

- ?
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: Message signed with OpenPGP
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190204/673eae3c/attachment.sig>

From lukasz at langa.pl  Mon Feb  4 06:32:25 2019
From: lukasz at langa.pl (=?utf-8?Q?=C5=81ukasz_Langa?=)
Date: Mon, 4 Feb 2019 12:32:25 +0100
Subject: [Python-Dev] [RELEASE] Python 3.8.0a1 is now available for testing
Message-ID: <C9EA8FEA-C427-41FD-8566-0201F0AA42EA@langa.pl>

I packaged my first release. *wipes sweat off of face*

Go get it here:
https://www.python.org/downloads/release/python-380a1/

Python 3.8.0a1 is the first of four planned alpha releases of Python 3.8,
the next feature release of Python.  During the alpha phase, Python 3.8
remains under heavy development: additional features will be added
and existing features may be modified or deleted.  Please keep in mind
that this is a preview release and its use is not recommended for
production environments.  The next preview release, 3.8.0a2, is planned
for 2019-02-24.

Apart from building the Mac installers, Ned helped me a lot with the
process, thank you!  Ernest was super quick providing me with all
required access and fixing a Unicode problem I found in Salt,
thank you!

Finally, this release was made on a train to D?sseldorf. There's a PyPy
sprint there. The train is pretty cool, makes this "Wasm! Wasm!" sound.

- ?

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: Message signed with OpenPGP
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190204/25489a0b/attachment.sig>

From stephane at wirtel.be  Mon Feb  4 07:50:51 2019
From: stephane at wirtel.be (Stephane Wirtel)
Date: Mon, 4 Feb 2019 13:50:51 +0100
Subject: [Python-Dev] Why a merge for 3.8.0a1?
In-Reply-To: <30BDE9B6-C213-4A3E-ADD8-0FCB3E3385D0@langa.pl>
References: <20190204105827.GA24384@xps>
 <30BDE9B6-C213-4A3E-ADD8-0FCB3E3385D0@langa.pl>
Message-ID: <20190204125051.GA29197@xps>

On 02/04, ?ukasz Langa wrote:
>
>> On 4 Feb 2019, at 11:58, Stephane Wirtel <stephane at wirtel.be> wrote:
>>
>> Hi all,
>>
>> After a git pull, I have seen there is a merge for v3.8.0a1 by ?ukasz
>> Langa, why? I think the code should keep a linear commit and in this
>> case, it's against the "commit&squash" of CPython and Github :/
>>
>> Thank you for your response.
>
>Tagging a release is different from a regular PR in the sense that you want the commit hash that you tagged as a given version to *remain the same*. In the mean time, other developers can (and will!) merge pull requests. If you were to rebase *the release tag* over their changes, the commit hash wouldn't match anymore. If you were to rebase *their changes* over your release tag, you'd have to force-push to update their changes.
>
>This is described in PEP 101.
>
>- ?

Hi ?ukasz,

Thank you for this explanation and I have checked the PEP 101 and also
the way for 3.7 and there is also a merge.

Thanks, today, I have learned one thing.

Have a nice day,

PS: Really sorry for this bad ping but I wanted to have an explanation.

St?phane



-- 
St?phane Wirtel - https://wirtel.be - @matrixise

From stephane at wirtel.be  Mon Feb  4 08:02:38 2019
From: stephane at wirtel.be (Stephane Wirtel)
Date: Mon, 4 Feb 2019 14:02:38 +0100
Subject: [Python-Dev] [RELEASE] Python 3.8.0a1 is now available for
 testing
In-Reply-To: <C9EA8FEA-C427-41FD-8566-0201F0AA42EA@langa.pl>
References: <C9EA8FEA-C427-41FD-8566-0201F0AA42EA@langa.pl>
Message-ID: <20190204130238.GB29197@xps>

On 02/04, ?ukasz Langa wrote:
>I packaged my first release. *wipes sweat off of face*
>
>Go get it here:
>https://www.python.org/downloads/release/python-380a1/
>
>Python 3.8.0a1 is the first of four planned alpha releases of Python 3.8,
>the next feature release of Python.  During the alpha phase, Python 3.8
>remains under heavy development: additional features will be added
>and existing features may be modified or deleted.  Please keep in mind
>that this is a preview release and its use is not recommended for
>production environments.  The next preview release, 3.8.0a2, is planned
>for 2019-02-24.
>
>Apart from building the Mac installers, Ned helped me a lot with the
>process, thank you!  Ernest was super quick providing me with all
>required access and fixing a Unicode problem I found in Salt,
>thank you!
>
>Finally, this release was made on a train to D?sseldorf. There's a PyPy
>sprint there. The train is pretty cool, makes this "Wasm! Wasm!" sound.
>
>- ?
>

Hi Lukasz,

Just one idea, we could create a Docker image with this alpha version.

This Docker image could be used with the CI of the main projects and the
test suites of these projects.

If we have some issues, we should create an issue for python 3.8.0a1.

Good idea?

Have a nice day,

St?phane

-- 
St?phane Wirtel - https://wirtel.be - @matrixise

From stephane at wirtel.be  Mon Feb  4 08:33:38 2019
From: stephane at wirtel.be (Stephane Wirtel)
Date: Mon, 4 Feb 2019 14:33:38 +0100
Subject: [Python-Dev] [RELEASE] Python 3.8.0a1 is now available for
 testing
In-Reply-To: <20190204130238.GB29197@xps>
References: <C9EA8FEA-C427-41FD-8566-0201F0AA42EA@langa.pl>
 <20190204130238.GB29197@xps>
Message-ID: <20190204133338.GA32737@xps>

It's unofficial but I used the Dockerfile for 3.7 and created this
Docker image:  

https://cloud.docker.com/u/matrixise/repository/docker/matrixise/python

docker pull matrixise/python:3.8.0a1

I am not an expert about the releasing of a Docker image but we could
work with that and try to improve it.

If one person use Gitlab-CI, this person can add a new test for this
version and use this image (matrixise/python:3.8.0a1) or an official
image, just for the tests...

St?phane


-- 
St?phane Wirtel - https://wirtel.be - @matrixise

From stephane at wirtel.be  Mon Feb  4 08:41:11 2019
From: stephane at wirtel.be (Stephane Wirtel)
Date: Mon, 4 Feb 2019 14:41:11 +0100
Subject: [Python-Dev] [RELEASE] Python 3.8.0a1 is now available for
 testing
In-Reply-To: <20190204133338.GA32737@xps>
References: <C9EA8FEA-C427-41FD-8566-0201F0AA42EA@langa.pl>
 <20190204130238.GB29197@xps> <20190204133338.GA32737@xps>
Message-ID: <20190204134111.GA2035@xps>

On 02/04, Stephane Wirtel wrote:
>It's unofficial but I used the Dockerfile for 3.7 and created this
>Docker image:
>
>https://cloud.docker.com/u/matrixise/repository/docker/matrixise/python
Sorry: here is the right link

https://hub.docker.com/r/matrixise/python


-- 
St?phane Wirtel - https://wirtel.be - @matrixise

From paul at ganssle.io  Mon Feb  4 08:48:05 2019
From: paul at ganssle.io (Paul Ganssle)
Date: Mon, 4 Feb 2019 08:48:05 -0500
Subject: [Python-Dev] Return type of datetime subclasses added to
 timedelta
In-Reply-To: <CAP7+vJKbQeTgROAtNLvXMwK5xjO8V=pCCs-CHpGAnt+G5TZcyg@mail.gmail.com>
References: <1059740e-cc65-205d-5986-a9397463a315@ganssle.io>
 <CAP7h-xa-Dp8TXrm7Oa=jDwf0wyBfVy-6zK08w219q0jVaYACiQ@mail.gmail.com>
 <bb5120e0-159e-106d-04c6-2a15f7398966@ganssle.io>
 <CAP7+vJL3JrRFstg_QNdq5C4kHkxdsbKyACJBxWSPUbyuTjao3g@mail.gmail.com>
 <2415dd60-b6b4-30b0-90d2-c0c8b22314c7@ganssle.io>
 <CAP7+vJKbQeTgROAtNLvXMwK5xjO8V=pCCs-CHpGAnt+G5TZcyg@mail.gmail.com>
Message-ID: <8faf2a5b-305c-e83b-33bd-e5eacc8609a7@ganssle.io>

Hey all,

This thread about the return type of datetime operations seems to have
stopped without any explicit decision - I think I responded to everyone
who had objections, but I think only Guido has given a +1 to whether or
not we should go ahead.

Have we got agreement to go ahead with this change? Are we still
targeting Python 3.8 here?

For those who don't want to dig through your old e-mails, here's the
archive link for this thread:
https://mail.python.org/pipermail/python-dev/2019-January/155984.html

If you want to start commenting on the actual implementation, it's
available here (though it's pretty simple):
https://github.com/python/cpython/pull/10902

Best,

Paul


On 1/6/19 7:17 PM, Guido van Rossum wrote:
> OK, I concede your point (and indeed I only tested this on 3.6). If we
> could break the backward compatibility for now() we presumably can
> break it for this purpose.
>
> On Sun, Jan 6, 2019 at 11:02 AM Paul Ganssle <paul at ganssle.io
> <mailto:paul at ganssle.io>> wrote:
>
>     I did address this in the original post - the assumption that the
>     subclass constructor will have the same arguments as the base
>     constructor is baked into many alternate constructors of datetime.
>     I acknowledge that this is a breaking change, but it is a small
>     one - anyone creating such a subclass that /cannot/ handled the
>     class being created this way would be broken in myriad ways.
>
>     We have also in recent years changed several alternate
>     constructors (including `replace`) to retain the original
>     subclass, which by your same standard would be a breaking change.
>     I believe there have been no complaints. In fact, between Python
>     3.6 and 3.7, the very example you showed broke:
>
>     Python 3.6.6:
>
>     >>> class D(datetime.datetime):
>     ...???? def __new__(cls):
>     ...???????? return cls.now()
>     ...
>     >>> D()
>     D(2019, 1, 6, 13, 49, 38, 842033)
>
>     Python 3.7.2:
>
>     >>> class D(datetime.datetime):
>     ...???? def __new__(cls):
>     ...???????? return cls.now()
>     ...
>     >>> D()
>     Traceback (most recent call last):
>     ? File "<stdin>", line 1, in <module>
>     ? File "<stdin>", line 3, in __new__
>     TypeError: __new__() takes 1 positional argument but 9 were given
>
>
>     We haven't seen any bug reports about this sort of thing; what we
>     /have/ been getting is bug reports that subclassing datetime
>     doesn't retain the subclass in various ways (because people /are/
>     using datetime subclasses). This is likely to cause very little in
>     the way of problems, but it will improve convenience for people
>     making datetime subclasses and almost certainly performance for
>     people using them (e.g. pendulum and arrow, which now need to take
>     a slow pure python route in many situations to work around this
>     problem).
>
>     If we're /really/ concerned with this backward compatibility
>     breaking, we could do the equivalent of:
>
>     try:
>     ??? return new_behavior(...)
>     except TypeError:
>     ??? warnings.warn("The semantics of timedelta addition have "
>     ????????????????? "changed in a way that raises an error in "
>     ????????????????? "this subclass. Please implement __add__ "
>     ????????????????? "if you need the old behavior.", DeprecationWarning)
>
>     Then after a suitable notice period drop the warning and turn it
>     to a hard error.
>
>     Best,
>
>     Paul
>
>     On 1/6/19 1:43 PM, Guido van Rossum wrote:
>>     I don't think datetime and builtins like int necessarily need to
>>     be aligned. But I do see a problem -- the __new__ and __init__
>>     methods defined in the subclass (if any) should allow for being
>>     called with the same signature as the base datetime class.
>>     Currently you can have a subclass of datetime whose __new__ has
>>     no arguments (or, more realistically, interprets its arguments
>>     differently). Instances of such a class can still be added to a
>>     timedelta. The proposal would cause this to break (since such an
>>     addition has to create a new instance, which calls __new__ and
>>     __init__). Since this is a backwards incompatibility, I don't see
>>     how it can be done -- and I also don't see many use cases, so I
>>     think it's not worth pursuing further.
>>
>>     Note that the same problem already happens with the
>>     .fromordinal() class method, though it doesn't happen with
>>     .fromdatetime() or .now():
>>
>>     >>> class D(datetime.datetime):
>>     ...?? def __new__(cls): return cls.now()
>>     ...
>>     >>> D()
>>     D(2019, 1, 6, 10, 33, 37, 161606)
>>     >>> D.fromordinal(100)
>>     Traceback (most recent call last):
>>     ? File "<stdin>", line 1, in <module>
>>     TypeError: __new__() takes 1 positional argument but 4 were given
>>     >>> D.fromtimestamp(123456789)
>>     D(1973, 11, 29, 13, 33, 9)
>>     >>>
>>
>>     On Sun, Jan 6, 2019 at 9:05 AM Paul Ganssle <paul at ganssle.io
>>     <mailto:paul at ganssle.io>> wrote:
>>
>>         I can think of many reasons why datetime is different from
>>         builtins, though to be honest I'm not sure that consistency
>>         for its own sake is really a strong argument for keeping a
>>         counter-intuitive behavior - and to be honest I'm open to the
>>         idea that /all/ arithmetic types /should/ have some form of
>>         this change.
>>
>>         That said, I would say that the biggest difference between
>>         datetime and builtins (other than the fact that datetime is
>>         /not/ a builtin, and as such doesn't necessarily need to be
>>         categorized in this group), is that unlike almost all other
>>         arithmetic types, /datetime/ has a special, dedicated type
>>         for describing differences in datetimes. Using your example
>>         of a float subclass, consider that without the behavior of
>>         "addition of floats returns floats", it would be hard to
>>         predict what would happen in this situation:
>>
>>         >>> F(1.2) + 3.4
>>
>>         Would that always return a float, even though F(1.2) + F(3.4)
>>         returns an F? Would that return an F because F is the
>>         left-hand operand? Would it return a float because float is
>>         the right-hand operand? Would you walk the MROs and find the
>>         lowest type in common between the operands and return that?
>>         It's not entirely clear which subtype predominates. With
>>         datetime, you have:
>>
>>         datetime - datetime -> timedelta
>>         datetime ? timedelta -> datetime
>>         timedelta ? timedelta -> timedelta
>>
>>         There's no operation between two datetime objects that would
>>         return a datetime object, so it's always clear: operations
>>         between datetime subclasses return timedelta, operations
>>         between a datetime object and a timedelta return the subclass
>>         of the datetime that it was added to or subtracted from.
>>
>>         Of course, the real way to resolve whether datetime should be
>>         different from int/float/string/etc is to look at why this
>>         choice was actually made for those types in the first place,
>>         and decide whether datetime is like them /in this respect/.
>>         The heterogeneous operations problem may be a reasonable
>>         justification for leaving the other builtins alone but
>>         changing datetime, but if someone knows of other fundamental
>>         reasons why the decision to have arithmetic operations always
>>         create the base class was chosen, please let me know.
>>
>>         Best,
>>         Paul
>>
>>         On 1/5/19 3:55 AM, Alexander Belopolsky wrote:
>>>
>>>
>>>         On Wed, Jan 2, 2019 at 10:18 PM Paul Ganssle
>>>         <paul at ganssle.io <mailto:paul at ganssle.io>> wrote:
>>>
>>>             .. the original objection was that this implementation
>>>             assumes that the datetime subclass has a constructor
>>>             with the same (or a sufficiently similar) signature as
>>>             datetime.
>>>
>>>         While this was used as a possible rationale for the way
>>>         standard types behave, the main objection to changing
>>>         datetime classes is that it will make them behave
>>>         differently from builtins.? For example:
>>>
>>>         >>> class F(float):
>>>         ...? ? ?pass
>>>         ...
>>>         >>> type(F.fromhex('AA'))
>>>         <class '__main__.F'>
>>>         >>> type(F(1) + F(2))
>>>         <class 'float'>
>>>
>>>             This may be a legitimate gripe, but unfortunately that
>>>             ship has sailed long ago. All of datetime's alternate
>>>             constructors make this assumption. Any subclass that
>>>             does not meet this requirement must have worked around
>>>             it long ago (or they don't care about alternate
>>>             constructors).
>>>
>>>
>>>         This is right, but the same argument is equally applicable
>>>         to int, float, etc. subclasses.? If you want to limit your
>>>         change to datetime types you should explain what makes these
>>>         types special.??
>>         _______________________________________________
>>         Python-Dev mailing list
>>         Python-Dev at python.org <mailto:Python-Dev at python.org>
>>         https://mail.python.org/mailman/listinfo/python-dev
>>         Unsubscribe:
>>         https://mail.python.org/mailman/options/python-dev/guido%40python.org
>>
>>
>>
>>     -- 
>>     --Guido van Rossum (python.org/~guido <http://python.org/~guido>)
>     _______________________________________________
>     Python-Dev mailing list
>     Python-Dev at python.org <mailto:Python-Dev at python.org>
>     https://mail.python.org/mailman/listinfo/python-dev
>     Unsubscribe:
>     https://mail.python.org/mailman/options/python-dev/guido%40python.org
>
>
>
> -- 
> --Guido van Rossum (python.org/~guido <http://python.org/~guido>)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190204/221d897c/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: OpenPGP digital signature
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190204/221d897c/attachment-0001.sig>

From stephane at wirtel.be  Mon Feb  4 09:26:08 2019
From: stephane at wirtel.be (Stephane Wirtel)
Date: Mon, 4 Feb 2019 15:26:08 +0100
Subject: [Python-Dev] [RELEASE] Python 3.8.0a1 is now available for
 testing
In-Reply-To: <C9EA8FEA-C427-41FD-8566-0201F0AA42EA@langa.pl>
References: <C9EA8FEA-C427-41FD-8566-0201F0AA42EA@langa.pl>
Message-ID: <20190204142608.GB2035@xps>

Hi ?ukasz,

I have some issues with pytest and this release, you can see this BPO

https://bugs.python.org/issue35895

Have a nice day and thank you for your job.

St?phane

-- 
St?phane Wirtel - https://wirtel.be - @matrixise

From python+python_dev at discontinuity.net  Mon Feb  4 10:24:38 2019
From: python+python_dev at discontinuity.net (Davin Potts)
Date: Mon, 4 Feb 2019 09:24:38 -0600
Subject: [Python-Dev] About multiprocessing maintainership
In-Reply-To: <20190204113716.4368387b@fsol>
References: <20190204113716.4368387b@fsol>
Message-ID: <CABHLM6v8agqyvVSG4gRT4b8qT-mOajAoin6e_ygfUx5g3nQn8A@mail.gmail.com>

Antoine's change to the devguide was made on the basis that "he doesn't
contribute anymore" which, going by Antoine's own description in this
thread, he contradicts.

My current effort, mentioned in Antoine's other thread, is not my single
largest contribution.  I have been impressed by the volume of time that
Antoine is able to spend on the issue tracker. Because he and I generally
agree on what actions to take on an issue, when he is quick to jump on
issues it is uncommon for me to feel the need to say something myself just
to play a numbers game or to make my presence felt -- that's part of being
a team.  There have been incidents where I disagree with Antoine and
explain the reasoning in an issue but later Antoine goes on to do whatever
he wants, disregarding what I wrote -- because I am not in a position to
necessarily react or respond as frequently, I've generally only discovered
this much later.  I regard this latter interaction as unhealthy.

I have been part of several group discussions (among core developers) now
regarding how to balance the efforts of contributors with copious time to
devote versus those which must be extra judicious in how they spend their
more limited time.  We recognize this as an ongoing concern and here it is
again.  If we are supportive of one another, we can find a way to work
through such things.

I joined the core developer team to help others and give back especially
when it involved the then-neglected multiprocessing module.  When I am
personally attacked in a discussion on an issue by someone I do not know,
it hurts and demoralizes me -- I know that all of the core developers
experience this.  When I am spending time on multiprocessing only to be
surprised by a claim that I don't contribute anymore, it hurts and
demoralizes me.  When I read hand-picked statistics to support a slanted
narrative designed to belittle my contributions, it hurts and demoralizes
me.  I know different people react to such things differently but in my
case I have occasionally needed to take time away from cpython to detox --
in 2018, such incidents led to my losing more than a month of time more
than once.

Regarding support for one another:  At the core developer sprint last year,
I volunteered to remotely host Antoine on my laptop so that he could
video-conference into the governance discussions we were having there.  A
few weeks later, Antoine is "editing me out" of the maintainers list
without any further communication.  If we only let the loudest people
contribute then we lose the quiet contributors and push them out.



Davin



On Mon, Feb 4, 2019 at 4:39 AM Antoine Pitrou <solipsis at pitrou.net> wrote:

>
> Hello,
>
> In a recent message, Raymond dramatically pretends that I would have
> "edited out" Davin of the maintainers list for the multiprocessing
> module.
>
> What I did (*) is different: I asked to mark Davin inactive and to stop
> auto-assigning him on bug tracker issues.  Davin was /still/ listed in
> the experts list, along with me and others.  IOW, there was no "editing
> out".
>
> (*) https://github.com/python/devguide/pull/435
>
> The reason I did this is simple: Davin does not do, and has almost
> never done, any actual maintenance work on multiprocessing (if you are
> not convinced, just go through the git history, and the PRs that were
> merged in the ~4 last years).  He usually does not respond to tracker
> issues opened by users.  He does not review PRs.  The only sizable
> piece of work he committed is, as I mentioned in the previous thread,
> still untested and undocumented.
>
> Auto-assigning someone who never (AFAICT) responds to issues ultimately
> does a disservice to users, whose complaints go unanswered; while other
> people, who /do/ respond to users, are not aware of those stale issues.
>
> Regards
>
> Antoine.
>
>
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/python%2Bpython_dev%40discontinuity.net
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190204/566a0498/attachment.html>

From zachary.ware+pydev at gmail.com  Mon Feb  4 10:45:39 2019
From: zachary.ware+pydev at gmail.com (Zachary Ware)
Date: Mon, 4 Feb 2019 09:45:39 -0600
Subject: [Python-Dev] About multiprocessing maintainership
In-Reply-To: <20190204113716.4368387b@fsol>
References: <20190204113716.4368387b@fsol>
Message-ID: <CAKJDb-NK74X2=hEvwPQ+avGj1gsWYP9U5SgeKky=YB1YvzAVnA@mail.gmail.com>

On Mon, Feb 4, 2019 at 4:39 AM Antoine Pitrou <solipsis at pitrou.net> wrote:
> What I did (*) is different: I asked to mark Davin inactive and to stop
> auto-assigning him on bug tracker issues.  Davin was /still/ listed in
> the experts list, along with me and others.  IOW, there was no "editing
> out".

Auto-assignment (and auto-add-to-nosy-list, for that matter) is
handled by the "components" of the bug tracker, see
bugs.python.org/component.  The experts list is used just for
populating the auto-completion for the nosy-list (that is, typing
"multi" in the nosy list entry field brings up "multiprocessing:
davin,pitrou" currently).  Marking a dev as "(inactive)" in the
experts list removes them from that auto-completion.

We've long discussed the possibility of rearranging how bpo does
auto-nosy/auto-assign such that a reporter can tag the affected
module(s) and auto-nosy based on the experts list.  That would take
significant effort which probably isn't worth doing unless PEP581
winds up rejected, but in the meantime we could easily add a
`multiprocessing` component that does whatever auto-nosy and/or
auto-assignment we want.

-- 
Zach

From antoine at python.org  Mon Feb  4 10:48:17 2019
From: antoine at python.org (Antoine Pitrou)
Date: Mon, 4 Feb 2019 16:48:17 +0100
Subject: [Python-Dev] About multiprocessing maintainership
In-Reply-To: <CABHLM6v8agqyvVSG4gRT4b8qT-mOajAoin6e_ygfUx5g3nQn8A@mail.gmail.com>
References: <20190204113716.4368387b@fsol>
 <CABHLM6v8agqyvVSG4gRT4b8qT-mOajAoin6e_ygfUx5g3nQn8A@mail.gmail.com>
Message-ID: <84b82b3a-55be-91a2-3388-7e3c5360d1d7@python.org>


Hello Davin,

I would like this discussion to be constructive and not vindicative.  So
I would ask that we leave personal attacks out of this.

> I have been part of several group discussions (among core developers)
> now regarding how to balance the efforts of contributors with copious
> time to devote versus those which must be extra judicious in how they
> spend their more limited time.

It is a misconception to think that I would have "copious time" to
devote to the bug tracker and general contribution work.  I don't.

Actually, I find I am not responsive enough on such issues when they
fall in my areas of expertise.  For users and contributors, it is
generally demotivating to have to wait several weeks before a response
comes.

> A few weeks later, Antoine is "editing me out" of the
> maintainers list without any further communication.

You haven't been "edited out".  You were left in the maintainers list
(really an "experts list"), together with Richard Oudkirk who is the
original author of multiprocessing, but also Jesse Noller and me.

Again, I have found that frequently multiprocessing issues get
neglected.  This is in part because you are auto-assigned on such
issues, and therefore users and other contributors think you'll deal
with the issues, which you don't.

I could not guess by myself that you have been busy working in private
on a feature for the past 1.5 years.  So by all accounts you definitely
seemed to be "inactive" as far as multiprocessing maintenance goes.

My concern is to improve the likelihood of users getting a response on
multiprocessing issues.  One important factor is to be honest to users
who is actually available to respond to issues.

If you have another suggestion as to how act on this, please do.

Regards

Antoine.

From guido at python.org  Mon Feb  4 11:38:34 2019
From: guido at python.org (Guido van Rossum)
Date: Mon, 4 Feb 2019 08:38:34 -0800
Subject: [Python-Dev] Return type of datetime subclasses added to
 timedelta
In-Reply-To: <8faf2a5b-305c-e83b-33bd-e5eacc8609a7@ganssle.io>
References: <1059740e-cc65-205d-5986-a9397463a315@ganssle.io>
 <CAP7h-xa-Dp8TXrm7Oa=jDwf0wyBfVy-6zK08w219q0jVaYACiQ@mail.gmail.com>
 <bb5120e0-159e-106d-04c6-2a15f7398966@ganssle.io>
 <CAP7+vJL3JrRFstg_QNdq5C4kHkxdsbKyACJBxWSPUbyuTjao3g@mail.gmail.com>
 <2415dd60-b6b4-30b0-90d2-c0c8b22314c7@ganssle.io>
 <CAP7+vJKbQeTgROAtNLvXMwK5xjO8V=pCCs-CHpGAnt+G5TZcyg@mail.gmail.com>
 <8faf2a5b-305c-e83b-33bd-e5eacc8609a7@ganssle.io>
Message-ID: <CAP7+vJLc3N4wHzZxKCmT-C61X9YeTjVh4MT0OdTV7Lt2PbdKQw@mail.gmail.com>

I recommend that you submit a PR so we can get it into 3.8 alpha 2.

On Mon, Feb 4, 2019 at 5:50 AM Paul Ganssle <paul at ganssle.io> wrote:

> Hey all,
>
> This thread about the return type of datetime operations seems to have
> stopped without any explicit decision - I think I responded to everyone who
> had objections, but I think only Guido has given a +1 to whether or not we
> should go ahead.
>
> Have we got agreement to go ahead with this change? Are we still targeting
> Python 3.8 here?
>
> For those who don't want to dig through your old e-mails, here's the
> archive link for this thread:
> https://mail.python.org/pipermail/python-dev/2019-January/155984.html
>
> If you want to start commenting on the actual implementation, it's
> available here (though it's pretty simple):
> https://github.com/python/cpython/pull/10902
>
> Best,
>
> Paul
>
>
> On 1/6/19 7:17 PM, Guido van Rossum wrote:
>
> OK, I concede your point (and indeed I only tested this on 3.6). If we
> could break the backward compatibility for now() we presumably can break it
> for this purpose.
>
> On Sun, Jan 6, 2019 at 11:02 AM Paul Ganssle <paul at ganssle.io> wrote:
>
>> I did address this in the original post - the assumption that the
>> subclass constructor will have the same arguments as the base constructor
>> is baked into many alternate constructors of datetime. I acknowledge that
>> this is a breaking change, but it is a small one - anyone creating such a
>> subclass that *cannot* handled the class being created this way would be
>> broken in myriad ways.
>>
>> We have also in recent years changed several alternate constructors
>> (including `replace`) to retain the original subclass, which by your same
>> standard would be a breaking change. I believe there have been no
>> complaints. In fact, between Python 3.6 and 3.7, the very example you
>> showed broke:
>>
>> Python 3.6.6:
>>
>> >>> class D(datetime.datetime):
>> ...     def __new__(cls):
>> ...         return cls.now()
>> ...
>> >>> D()
>> D(2019, 1, 6, 13, 49, 38, 842033)
>>
>> Python 3.7.2:
>>
>> >>> class D(datetime.datetime):
>> ...     def __new__(cls):
>> ...         return cls.now()
>> ...
>> >>> D()
>> Traceback (most recent call last):
>>   File "<stdin>", line 1, in <module>
>>   File "<stdin>", line 3, in __new__
>> TypeError: __new__() takes 1 positional argument but 9 were given
>>
>>
>> We haven't seen any bug reports about this sort of thing; what we *have*
>> been getting is bug reports that subclassing datetime doesn't retain the
>> subclass in various ways (because people *are* using datetime
>> subclasses). This is likely to cause very little in the way of problems,
>> but it will improve convenience for people making datetime subclasses and
>> almost certainly performance for people using them (e.g. pendulum and
>> arrow, which now need to take a slow pure python route in many situations
>> to work around this problem).
>>
>> If we're *really* concerned with this backward compatibility breaking,
>> we could do the equivalent of:
>>
>> try:
>>     return new_behavior(...)
>> except TypeError:
>>     warnings.warn("The semantics of timedelta addition have "
>>                   "changed in a way that raises an error in "
>>                   "this subclass. Please implement __add__ "
>>                   "if you need the old behavior.", DeprecationWarning)
>>
>> Then after a suitable notice period drop the warning and turn it to a
>> hard error.
>>
>> Best,
>>
>> Paul
>> On 1/6/19 1:43 PM, Guido van Rossum wrote:
>>
>> I don't think datetime and builtins like int necessarily need to be
>> aligned. But I do see a problem -- the __new__ and __init__ methods defined
>> in the subclass (if any) should allow for being called with the same
>> signature as the base datetime class. Currently you can have a subclass of
>> datetime whose __new__ has no arguments (or, more realistically, interprets
>> its arguments differently). Instances of such a class can still be added to
>> a timedelta. The proposal would cause this to break (since such an addition
>> has to create a new instance, which calls __new__ and __init__). Since this
>> is a backwards incompatibility, I don't see how it can be done -- and I
>> also don't see many use cases, so I think it's not worth pursuing further.
>>
>> Note that the same problem already happens with the .fromordinal() class
>> method, though it doesn't happen with .fromdatetime() or .now():
>>
>> >>> class D(datetime.datetime):
>> ...   def __new__(cls): return cls.now()
>> ...
>> >>> D()
>> D(2019, 1, 6, 10, 33, 37, 161606)
>> >>> D.fromordinal(100)
>> Traceback (most recent call last):
>>   File "<stdin>", line 1, in <module>
>> TypeError: __new__() takes 1 positional argument but 4 were given
>> >>> D.fromtimestamp(123456789)
>> D(1973, 11, 29, 13, 33, 9)
>> >>>
>>
>> On Sun, Jan 6, 2019 at 9:05 AM Paul Ganssle <paul at ganssle.io> wrote:
>>
>>> I can think of many reasons why datetime is different from builtins,
>>> though to be honest I'm not sure that consistency for its own sake is
>>> really a strong argument for keeping a counter-intuitive behavior - and to
>>> be honest I'm open to the idea that *all* arithmetic types *should*
>>> have some form of this change.
>>>
>>> That said, I would say that the biggest difference between datetime and
>>> builtins (other than the fact that datetime is *not* a builtin, and as
>>> such doesn't necessarily need to be categorized in this group), is that
>>> unlike almost all other arithmetic types, *datetime* has a special,
>>> dedicated type for describing differences in datetimes. Using your example
>>> of a float subclass, consider that without the behavior of "addition of
>>> floats returns floats", it would be hard to predict what would happen in
>>> this situation:
>>>
>>> >>> F(1.2) + 3.4
>>>
>>> Would that always return a float, even though F(1.2) + F(3.4) returns an
>>> F? Would that return an F because F is the left-hand operand? Would it
>>> return a float because float is the right-hand operand? Would you walk the
>>> MROs and find the lowest type in common between the operands and return
>>> that? It's not entirely clear which subtype predominates. With datetime,
>>> you have:
>>>
>>> datetime - datetime -> timedelta
>>> datetime ? timedelta -> datetime
>>> timedelta ? timedelta -> timedelta
>>>
>>> There's no operation between two datetime objects that would return a
>>> datetime object, so it's always clear: operations between datetime
>>> subclasses return timedelta, operations between a datetime object and a
>>> timedelta return the subclass of the datetime that it was added to or
>>> subtracted from.
>>>
>>> Of course, the real way to resolve whether datetime should be different
>>> from int/float/string/etc is to look at why this choice was actually made
>>> for those types in the first place, and decide whether datetime is like
>>> them *in this respect*. The heterogeneous operations problem may be a
>>> reasonable justification for leaving the other builtins alone but changing
>>> datetime, but if someone knows of other fundamental reasons why the
>>> decision to have arithmetic operations always create the base class was
>>> chosen, please let me know.
>>>
>>> Best,
>>> Paul
>>> On 1/5/19 3:55 AM, Alexander Belopolsky wrote:
>>>
>>>
>>>
>>> On Wed, Jan 2, 2019 at 10:18 PM Paul Ganssle <paul at ganssle.io> wrote:
>>>
>>>> .. the original objection was that this implementation assumes that the
>>>> datetime subclass has a constructor with the same (or a sufficiently
>>>> similar) signature as datetime.
>>>>
>>> While this was used as a possible rationale for the way standard types
>>> behave, the main objection to changing datetime classes is that it will
>>> make them behave differently from builtins.  For example:
>>>
>>> >>> class F(float):
>>> ...     pass
>>> ...
>>> >>> type(F.fromhex('AA'))
>>> <class '__main__.F'>
>>> >>> type(F(1) + F(2))
>>> <class 'float'>
>>>
>>> This may be a legitimate gripe, but unfortunately that ship has sailed
>>>> long ago. All of datetime's alternate constructors make this assumption.
>>>> Any subclass that does not meet this requirement must have worked around it
>>>> long ago (or they don't care about alternate constructors).
>>>>
>>>
>>> This is right, but the same argument is equally applicable to int,
>>> float, etc. subclasses.  If you want to limit your change to datetime types
>>> you should explain what makes these types special.
>>>
>>> _______________________________________________
>>> Python-Dev mailing list
>>> Python-Dev at python.org
>>> https://mail.python.org/mailman/listinfo/python-dev
>>> Unsubscribe:
>>> https://mail.python.org/mailman/options/python-dev/guido%40python.org
>>>
>>
>>
>> --
>> --Guido van Rossum (python.org/~guido)
>>
>> _______________________________________________
>> Python-Dev mailing list
>> Python-Dev at python.org
>> https://mail.python.org/mailman/listinfo/python-dev
>> Unsubscribe:
>> https://mail.python.org/mailman/options/python-dev/guido%40python.org
>>
>
>
> --
> --Guido van Rossum (python.org/~guido)
>
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/guido%40python.org
>


-- 
--Guido van Rossum (python.org/~guido)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190204/c0888c88/attachment-0001.html>

From paul at ganssle.io  Mon Feb  4 11:39:24 2019
From: paul at ganssle.io (Paul Ganssle)
Date: Mon, 4 Feb 2019 11:39:24 -0500
Subject: [Python-Dev] Return type of datetime subclasses added to
 timedelta
In-Reply-To: <CAP7+vJLc3N4wHzZxKCmT-C61X9YeTjVh4MT0OdTV7Lt2PbdKQw@mail.gmail.com>
References: <1059740e-cc65-205d-5986-a9397463a315@ganssle.io>
 <CAP7h-xa-Dp8TXrm7Oa=jDwf0wyBfVy-6zK08w219q0jVaYACiQ@mail.gmail.com>
 <bb5120e0-159e-106d-04c6-2a15f7398966@ganssle.io>
 <CAP7+vJL3JrRFstg_QNdq5C4kHkxdsbKyACJBxWSPUbyuTjao3g@mail.gmail.com>
 <2415dd60-b6b4-30b0-90d2-c0c8b22314c7@ganssle.io>
 <CAP7+vJKbQeTgROAtNLvXMwK5xjO8V=pCCs-CHpGAnt+G5TZcyg@mail.gmail.com>
 <8faf2a5b-305c-e83b-33bd-e5eacc8609a7@ganssle.io>
 <CAP7+vJLc3N4wHzZxKCmT-C61X9YeTjVh4MT0OdTV7Lt2PbdKQw@mail.gmail.com>
Message-ID: <c1f442eb-16ca-6282-38cf-268a2ced6f67@ganssle.io>

There's already a PR, actually, #10902:
https://github.com/python/cpython/pull/10902

Victor reviewed and approved it, I think before I started this thread,
so now it's just waiting on merge.

On 2/4/19 11:38 AM, Guido van Rossum wrote:
> I recommend that you submit a PR so we can get it into 3.8 alpha 2.
>
> On Mon, Feb 4, 2019 at 5:50 AM Paul Ganssle <paul at ganssle.io
> <mailto:paul at ganssle.io>> wrote:
>
>     Hey all,
>
>     This thread about the return type of datetime operations seems to
>     have stopped without any explicit decision - I think I responded
>     to everyone who had objections, but I think only Guido has given a
>     +1 to whether or not we should go ahead.
>
>     Have we got agreement to go ahead with this change? Are we still
>     targeting Python 3.8 here?
>
>     For those who don't want to dig through your old e-mails, here's
>     the archive link for this thread:
>     https://mail.python.org/pipermail/python-dev/2019-January/155984.html
>
>     If you want to start commenting on the actual implementation, it's
>     available here (though it's pretty simple):
>     https://github.com/python/cpython/pull/10902
>
>     Best,
>
>     Paul
>
>
>     On 1/6/19 7:17 PM, Guido van Rossum wrote:
>>     OK, I concede your point (and indeed I only tested this on 3.6).
>>     If we could break the backward compatibility for now() we
>>     presumably can break it for this purpose.
>>
>>     On Sun, Jan 6, 2019 at 11:02 AM Paul Ganssle <paul at ganssle.io
>>     <mailto:paul at ganssle.io>> wrote:
>>
>>         I did address this in the original post - the assumption that
>>         the subclass constructor will have the same arguments as the
>>         base constructor is baked into many alternate constructors of
>>         datetime. I acknowledge that this is a breaking change, but
>>         it is a small one - anyone creating such a subclass that
>>         /cannot/ handled the class being created this way would be
>>         broken in myriad ways.
>>
>>         We have also in recent years changed several alternate
>>         constructors (including `replace`) to retain the original
>>         subclass, which by your same standard would be a breaking
>>         change. I believe there have been no complaints. In fact,
>>         between Python 3.6 and 3.7, the very example you showed broke:
>>
>>         Python 3.6.6:
>>
>>         >>> class D(datetime.datetime):
>>         ...???? def __new__(cls):
>>         ...???????? return cls.now()
>>         ...
>>         >>> D()
>>         D(2019, 1, 6, 13, 49, 38, 842033)
>>
>>         Python 3.7.2:
>>
>>         >>> class D(datetime.datetime):
>>         ...???? def __new__(cls):
>>         ...???????? return cls.now()
>>         ...
>>         >>> D()
>>         Traceback (most recent call last):
>>         ? File "<stdin>", line 1, in <module>
>>         ? File "<stdin>", line 3, in __new__
>>         TypeError: __new__() takes 1 positional argument but 9 were given
>>
>>
>>         We haven't seen any bug reports about this sort of thing;
>>         what we /have/ been getting is bug reports that subclassing
>>         datetime doesn't retain the subclass in various ways (because
>>         people /are/ using datetime subclasses). This is likely to
>>         cause very little in the way of problems, but it will improve
>>         convenience for people making datetime subclasses and almost
>>         certainly performance for people using them (e.g. pendulum
>>         and arrow, which now need to take a slow pure python route in
>>         many situations to work around this problem).
>>
>>         If we're /really/ concerned with this backward compatibility
>>         breaking, we could do the equivalent of:
>>
>>         try:
>>         ??? return new_behavior(...)
>>         except TypeError:
>>         ??? warnings.warn("The semantics of timedelta addition have "
>>         ????????????????? "changed in a way that raises an error in "
>>         ????????????????? "this subclass. Please implement __add__ "
>>         ????????????????? "if you need the old behavior.",
>>         DeprecationWarning)
>>
>>         Then after a suitable notice period drop the warning and turn
>>         it to a hard error.
>>
>>         Best,
>>
>>         Paul
>>
>>         On 1/6/19 1:43 PM, Guido van Rossum wrote:
>>>         I don't think datetime and builtins like int necessarily
>>>         need to be aligned. But I do see a problem -- the __new__
>>>         and __init__ methods defined in the subclass (if any) should
>>>         allow for being called with the same signature as the base
>>>         datetime class. Currently you can have a subclass of
>>>         datetime whose __new__ has no arguments (or, more
>>>         realistically, interprets its arguments differently).
>>>         Instances of such a class can still be added to a timedelta.
>>>         The proposal would cause this to break (since such an
>>>         addition has to create a new instance, which calls __new__
>>>         and __init__). Since this is a backwards incompatibility, I
>>>         don't see how it can be done -- and I also don't see many
>>>         use cases, so I think it's not worth pursuing further.
>>>
>>>         Note that the same problem already happens with the
>>>         .fromordinal() class method, though it doesn't happen with
>>>         .fromdatetime() or .now():
>>>
>>>         >>> class D(datetime.datetime):
>>>         ...?? def __new__(cls): return cls.now()
>>>         ...
>>>         >>> D()
>>>         D(2019, 1, 6, 10, 33, 37, 161606)
>>>         >>> D.fromordinal(100)
>>>         Traceback (most recent call last):
>>>         ? File "<stdin>", line 1, in <module>
>>>         TypeError: __new__() takes 1 positional argument but 4 were
>>>         given
>>>         >>> D.fromtimestamp(123456789)
>>>         D(1973, 11, 29, 13, 33, 9)
>>>         >>>
>>>
>>>         On Sun, Jan 6, 2019 at 9:05 AM Paul Ganssle <paul at ganssle.io
>>>         <mailto:paul at ganssle.io>> wrote:
>>>
>>>             I can think of many reasons why datetime is different
>>>             from builtins, though to be honest I'm not sure that
>>>             consistency for its own sake is really a strong argument
>>>             for keeping a counter-intuitive behavior - and to be
>>>             honest I'm open to the idea that /all/ arithmetic types
>>>             /should/ have some form of this change.
>>>
>>>             That said, I would say that the biggest difference
>>>             between datetime and builtins (other than the fact that
>>>             datetime is /not/ a builtin, and as such doesn't
>>>             necessarily need to be categorized in this group), is
>>>             that unlike almost all other arithmetic types,
>>>             /datetime/ has a special, dedicated type for describing
>>>             differences in datetimes. Using your example of a float
>>>             subclass, consider that without the behavior of
>>>             "addition of floats returns floats", it would be hard to
>>>             predict what would happen in this situation:
>>>
>>>             >>> F(1.2) + 3.4
>>>
>>>             Would that always return a float, even though F(1.2) +
>>>             F(3.4) returns an F? Would that return an F because F is
>>>             the left-hand operand? Would it return a float because
>>>             float is the right-hand operand? Would you walk the MROs
>>>             and find the lowest type in common between the operands
>>>             and return that? It's not entirely clear which subtype
>>>             predominates. With datetime, you have:
>>>
>>>             datetime - datetime -> timedelta
>>>             datetime ? timedelta -> datetime
>>>             timedelta ? timedelta -> timedelta
>>>
>>>             There's no operation between two datetime objects that
>>>             would return a datetime object, so it's always clear:
>>>             operations between datetime subclasses return timedelta,
>>>             operations between a datetime object and a timedelta
>>>             return the subclass of the datetime that it was added to
>>>             or subtracted from.
>>>
>>>             Of course, the real way to resolve whether datetime
>>>             should be different from int/float/string/etc is to look
>>>             at why this choice was actually made for those types in
>>>             the first place, and decide whether datetime is like
>>>             them /in this respect/. The heterogeneous operations
>>>             problem may be a reasonable justification for leaving
>>>             the other builtins alone but changing datetime, but if
>>>             someone knows of other fundamental reasons why the
>>>             decision to have arithmetic operations always create the
>>>             base class was chosen, please let me know.
>>>
>>>             Best,
>>>             Paul
>>>
>>>             On 1/5/19 3:55 AM, Alexander Belopolsky wrote:
>>>>
>>>>
>>>>             On Wed, Jan 2, 2019 at 10:18 PM Paul Ganssle
>>>>             <paul at ganssle.io <mailto:paul at ganssle.io>> wrote:
>>>>
>>>>                 .. the original objection was that this
>>>>                 implementation assumes that the datetime subclass
>>>>                 has a constructor with the same (or a sufficiently
>>>>                 similar) signature as datetime.
>>>>
>>>>             While this was used as a possible rationale for the way
>>>>             standard types behave, the main objection to changing
>>>>             datetime classes is that it will make them behave
>>>>             differently from builtins.? For example:
>>>>
>>>>             >>> class F(float):
>>>>             ...? ? ?pass
>>>>             ...
>>>>             >>> type(F.fromhex('AA'))
>>>>             <class '__main__.F'>
>>>>             >>> type(F(1) + F(2))
>>>>             <class 'float'>
>>>>
>>>>                 This may be a legitimate gripe, but unfortunately
>>>>                 that ship has sailed long ago. All of datetime's
>>>>                 alternate constructors make this assumption. Any
>>>>                 subclass that does not meet this requirement must
>>>>                 have worked around it long ago (or they don't care
>>>>                 about alternate constructors).
>>>>
>>>>
>>>>             This is right, but the same argument is equally
>>>>             applicable to int, float, etc. subclasses.? If you want
>>>>             to limit your change to datetime types you should
>>>>             explain what makes these types special.??
>>>             _______________________________________________
>>>             Python-Dev mailing list
>>>             Python-Dev at python.org <mailto:Python-Dev at python.org>
>>>             https://mail.python.org/mailman/listinfo/python-dev
>>>             Unsubscribe:
>>>             https://mail.python.org/mailman/options/python-dev/guido%40python.org
>>>
>>>
>>>
>>>         -- 
>>>         --Guido van Rossum (python.org/~guido
>>>         <http://python.org/~guido>)
>>         _______________________________________________
>>         Python-Dev mailing list
>>         Python-Dev at python.org <mailto:Python-Dev at python.org>
>>         https://mail.python.org/mailman/listinfo/python-dev
>>         Unsubscribe:
>>         https://mail.python.org/mailman/options/python-dev/guido%40python.org
>>
>>
>>
>>     -- 
>>     --Guido van Rossum (python.org/~guido <http://python.org/~guido>)
>     _______________________________________________
>     Python-Dev mailing list
>     Python-Dev at python.org <mailto:Python-Dev at python.org>
>     https://mail.python.org/mailman/listinfo/python-dev
>     Unsubscribe:
>     https://mail.python.org/mailman/options/python-dev/guido%40python.org
>
>
>
> -- 
> --Guido van Rossum (python.org/~guido <http://python.org/~guido>)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190204/2ad41e88/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: OpenPGP digital signature
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190204/2ad41e88/attachment.sig>

From solipsis at pitrou.net  Mon Feb  4 12:10:44 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Mon, 4 Feb 2019 18:10:44 +0100
Subject: [Python-Dev] About multiprocessing maintainership
References: <20190204113716.4368387b@fsol>
 <CAKJDb-NK74X2=hEvwPQ+avGj1gsWYP9U5SgeKky=YB1YvzAVnA@mail.gmail.com>
Message-ID: <20190204181044.306a2dfe@fsol>

On Mon, 4 Feb 2019 09:45:39 -0600
Zachary Ware <zachary.ware+pydev at gmail.com> wrote:
> On Mon, Feb 4, 2019 at 4:39 AM Antoine Pitrou <solipsis at pitrou.net> wrote:
> > What I did (*) is different: I asked to mark Davin inactive and to stop
> > auto-assigning him on bug tracker issues.  Davin was /still/ listed in
> > the experts list, along with me and others.  IOW, there was no "editing
> > out".  
> 
> Auto-assignment (and auto-add-to-nosy-list, for that matter) is
> handled by the "components" of the bug tracker, see
> bugs.python.org/component.  The experts list is used just for
> populating the auto-completion for the nosy-list (that is, typing
> "multi" in the nosy list entry field brings up "multiprocessing:
> davin,pitrou" currently).  Marking a dev as "(inactive)" in the
> experts list removes them from that auto-completion.

Thanks for the clarification.

In any case, here is how things usually happen.  A user files a bug
report for a certain module M.  A triager takes notice, looks up the
relevant expert(s) in the developer's guide.  If an expert is listed
with issue assignment allowed (the asterisk "*" besides the name), then
the triager assumes that expert is available and assigns the issue to
them.  If the expert with an asterisk doesn't respond to the issue,
the issue may very well get forgotten.

So it's important that experts with an asterisk are actually available
to deal with user reports.

Regards

Antoine.



From barry at python.org  Mon Feb  4 13:14:41 2019
From: barry at python.org (Barry Warsaw)
Date: Mon, 4 Feb 2019 10:14:41 -0800
Subject: [Python-Dev] [RELEASE] Python 3.8.0a1 is now available for
 testing
In-Reply-To: <20190204130238.GB29197@xps>
References: <C9EA8FEA-C427-41FD-8566-0201F0AA42EA@langa.pl>
 <20190204130238.GB29197@xps>
Message-ID: <23ED9695-7715-40DE-9DD5-F6A3C482612F@python.org>

On Feb 4, 2019, at 05:02, Stephane Wirtel <stephane at wirtel.be> wrote:
> 
> Just one idea, we could create a Docker image with this alpha version.
> 
> This Docker image could be used with the CI of the main projects and the
> test suites of these projects.
> 
> If we have some issues, we should create an issue for python 3.8.0a1.

The time machine strikes again!

https://gitlab.com/python-devs/ci-images/tree/master

We call these ?semi-official?!  The current image takes a slightly different approach, by including all the latest Python versions from 2.7, and 3.4-3.8, plus git head.  I just pushed an update for the latest Python 3.8 alpha and 3.7.2.  It?s building now, but the image should be published on quay.io as soon as that?s done.

Contributions most welcome!

-Barry

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: Message signed with OpenPGP
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190204/5f4e4bb6/attachment.sig>

From ericsnowcurrently at gmail.com  Mon Feb  4 13:35:48 2019
From: ericsnowcurrently at gmail.com (Eric Snow)
Date: Mon, 4 Feb 2019 11:35:48 -0700
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <DED40378-CFE8-46ED-B0C4-014F9FE2936A@langa.pl>
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
 <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
 <DED40378-CFE8-46ED-B0C4-014F9FE2936A@langa.pl>
Message-ID: <CALFfu7AbrJAYNByJfZD3x+zDAR70VQiN0C4KSCLe4wCBK9=95Q@mail.gmail.com>

The main problem here seems to be a shortage of communication. :/
Also, I agree on the exceptional nature of merging incomplete PRs.

-eric

On Mon, Feb 4, 2019 at 3:37 AM ?ukasz Langa <lukasz at langa.pl> wrote:
>
>
> > On 4 Feb 2019, at 01:49, Guido van Rossum <guido at python.org> wrote:
> >
> > I think this is now up to the 3.8 release manager.
>
> I responded on the tracker: https://bugs.python.org/issue35813#msg334817
>
> I wrote:
>
> > @Davin, in what time can you fill in the missing tests and documentation?  If this is something you finish do before alpha2, I'm inclined to leave the change in.
> >
> > As it stands, I missed the controversy yesterday as I was busy making my first release.  So the merge *got released* in alpha1.  I would prefer to fix the missing pieces forward instead of reverting and re-submitting which will only thrash blame and history at this point.
> >
> > FTR, I do agree with Antoine, Ronald and others that in the future such big changes should be as close to their ready state at merge time.
>
>
>
> @Raymond, would you be willing to work with Davin on finishing this work in time for alpha2?
>
>
> - ?
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe: https://mail.python.org/mailman/options/python-dev/ericsnowcurrently%40gmail.com

From guido at python.org  Mon Feb  4 14:19:16 2019
From: guido at python.org (Guido van Rossum)
Date: Mon, 4 Feb 2019 11:19:16 -0800
Subject: [Python-Dev] Return type of datetime subclasses added to
 timedelta
In-Reply-To: <c1f442eb-16ca-6282-38cf-268a2ced6f67@ganssle.io>
References: <1059740e-cc65-205d-5986-a9397463a315@ganssle.io>
 <CAP7h-xa-Dp8TXrm7Oa=jDwf0wyBfVy-6zK08w219q0jVaYACiQ@mail.gmail.com>
 <bb5120e0-159e-106d-04c6-2a15f7398966@ganssle.io>
 <CAP7+vJL3JrRFstg_QNdq5C4kHkxdsbKyACJBxWSPUbyuTjao3g@mail.gmail.com>
 <2415dd60-b6b4-30b0-90d2-c0c8b22314c7@ganssle.io>
 <CAP7+vJKbQeTgROAtNLvXMwK5xjO8V=pCCs-CHpGAnt+G5TZcyg@mail.gmail.com>
 <8faf2a5b-305c-e83b-33bd-e5eacc8609a7@ganssle.io>
 <CAP7+vJLc3N4wHzZxKCmT-C61X9YeTjVh4MT0OdTV7Lt2PbdKQw@mail.gmail.com>
 <c1f442eb-16ca-6282-38cf-268a2ced6f67@ganssle.io>
Message-ID: <CAP7+vJ+3iMvjm5Ef5Bd=K_CBhxPwzxp1c0OC-f5sgGzJXnMK0A@mail.gmail.com>

OK, I approved the PR. Can some other core dev ensure that it gets merged?
No backports though!

On Mon, Feb 4, 2019 at 8:46 AM Paul Ganssle <paul at ganssle.io> wrote:

> There's already a PR, actually, #10902:
> https://github.com/python/cpython/pull/10902
>
> Victor reviewed and approved it, I think before I started this thread, so
> now it's just waiting on merge.
> On 2/4/19 11:38 AM, Guido van Rossum wrote:
>
> I recommend that you submit a PR so we can get it into 3.8 alpha 2.
>
> On Mon, Feb 4, 2019 at 5:50 AM Paul Ganssle <paul at ganssle.io> wrote:
>
>> Hey all,
>>
>> This thread about the return type of datetime operations seems to have
>> stopped without any explicit decision - I think I responded to everyone who
>> had objections, but I think only Guido has given a +1 to whether or not we
>> should go ahead.
>>
>> Have we got agreement to go ahead with this change? Are we still
>> targeting Python 3.8 here?
>>
>> For those who don't want to dig through your old e-mails, here's the
>> archive link for this thread:
>> https://mail.python.org/pipermail/python-dev/2019-January/155984.html
>>
>> If you want to start commenting on the actual implementation, it's
>> available here (though it's pretty simple):
>> https://github.com/python/cpython/pull/10902
>>
>> Best,
>>
>> Paul
>>
>>
>> On 1/6/19 7:17 PM, Guido van Rossum wrote:
>>
>> OK, I concede your point (and indeed I only tested this on 3.6). If we
>> could break the backward compatibility for now() we presumably can break it
>> for this purpose.
>>
>> On Sun, Jan 6, 2019 at 11:02 AM Paul Ganssle <paul at ganssle.io> wrote:
>>
>>> I did address this in the original post - the assumption that the
>>> subclass constructor will have the same arguments as the base constructor
>>> is baked into many alternate constructors of datetime. I acknowledge that
>>> this is a breaking change, but it is a small one - anyone creating such a
>>> subclass that *cannot* handled the class being created this way would
>>> be broken in myriad ways.
>>>
>>> We have also in recent years changed several alternate constructors
>>> (including `replace`) to retain the original subclass, which by your same
>>> standard would be a breaking change. I believe there have been no
>>> complaints. In fact, between Python 3.6 and 3.7, the very example you
>>> showed broke:
>>>
>>> Python 3.6.6:
>>>
>>> >>> class D(datetime.datetime):
>>> ...     def __new__(cls):
>>> ...         return cls.now()
>>> ...
>>> >>> D()
>>> D(2019, 1, 6, 13, 49, 38, 842033)
>>>
>>> Python 3.7.2:
>>>
>>> >>> class D(datetime.datetime):
>>> ...     def __new__(cls):
>>> ...         return cls.now()
>>> ...
>>> >>> D()
>>> Traceback (most recent call last):
>>>   File "<stdin>", line 1, in <module>
>>>   File "<stdin>", line 3, in __new__
>>> TypeError: __new__() takes 1 positional argument but 9 were given
>>>
>>>
>>> We haven't seen any bug reports about this sort of thing; what we *have*
>>> been getting is bug reports that subclassing datetime doesn't retain the
>>> subclass in various ways (because people *are* using datetime
>>> subclasses). This is likely to cause very little in the way of problems,
>>> but it will improve convenience for people making datetime subclasses and
>>> almost certainly performance for people using them (e.g. pendulum and
>>> arrow, which now need to take a slow pure python route in many situations
>>> to work around this problem).
>>>
>>> If we're *really* concerned with this backward compatibility breaking,
>>> we could do the equivalent of:
>>>
>>> try:
>>>     return new_behavior(...)
>>> except TypeError:
>>>     warnings.warn("The semantics of timedelta addition have "
>>>                   "changed in a way that raises an error in "
>>>                   "this subclass. Please implement __add__ "
>>>                   "if you need the old behavior.", DeprecationWarning)
>>>
>>> Then after a suitable notice period drop the warning and turn it to a
>>> hard error.
>>>
>>> Best,
>>>
>>> Paul
>>> On 1/6/19 1:43 PM, Guido van Rossum wrote:
>>>
>>> I don't think datetime and builtins like int necessarily need to be
>>> aligned. But I do see a problem -- the __new__ and __init__ methods defined
>>> in the subclass (if any) should allow for being called with the same
>>> signature as the base datetime class. Currently you can have a subclass of
>>> datetime whose __new__ has no arguments (or, more realistically, interprets
>>> its arguments differently). Instances of such a class can still be added to
>>> a timedelta. The proposal would cause this to break (since such an addition
>>> has to create a new instance, which calls __new__ and __init__). Since this
>>> is a backwards incompatibility, I don't see how it can be done -- and I
>>> also don't see many use cases, so I think it's not worth pursuing further.
>>>
>>> Note that the same problem already happens with the .fromordinal() class
>>> method, though it doesn't happen with .fromdatetime() or .now():
>>>
>>> >>> class D(datetime.datetime):
>>> ...   def __new__(cls): return cls.now()
>>> ...
>>> >>> D()
>>> D(2019, 1, 6, 10, 33, 37, 161606)
>>> >>> D.fromordinal(100)
>>> Traceback (most recent call last):
>>>   File "<stdin>", line 1, in <module>
>>> TypeError: __new__() takes 1 positional argument but 4 were given
>>> >>> D.fromtimestamp(123456789)
>>> D(1973, 11, 29, 13, 33, 9)
>>> >>>
>>>
>>> On Sun, Jan 6, 2019 at 9:05 AM Paul Ganssle <paul at ganssle.io> wrote:
>>>
>>>> I can think of many reasons why datetime is different from builtins,
>>>> though to be honest I'm not sure that consistency for its own sake is
>>>> really a strong argument for keeping a counter-intuitive behavior - and to
>>>> be honest I'm open to the idea that *all* arithmetic types *should*
>>>> have some form of this change.
>>>>
>>>> That said, I would say that the biggest difference between datetime and
>>>> builtins (other than the fact that datetime is *not* a builtin, and as
>>>> such doesn't necessarily need to be categorized in this group), is that
>>>> unlike almost all other arithmetic types, *datetime* has a special,
>>>> dedicated type for describing differences in datetimes. Using your example
>>>> of a float subclass, consider that without the behavior of "addition of
>>>> floats returns floats", it would be hard to predict what would happen in
>>>> this situation:
>>>>
>>>> >>> F(1.2) + 3.4
>>>>
>>>> Would that always return a float, even though F(1.2) + F(3.4) returns
>>>> an F? Would that return an F because F is the left-hand operand? Would it
>>>> return a float because float is the right-hand operand? Would you walk the
>>>> MROs and find the lowest type in common between the operands and return
>>>> that? It's not entirely clear which subtype predominates. With datetime,
>>>> you have:
>>>>
>>>> datetime - datetime -> timedelta
>>>> datetime ? timedelta -> datetime
>>>> timedelta ? timedelta -> timedelta
>>>>
>>>> There's no operation between two datetime objects that would return a
>>>> datetime object, so it's always clear: operations between datetime
>>>> subclasses return timedelta, operations between a datetime object and a
>>>> timedelta return the subclass of the datetime that it was added to or
>>>> subtracted from.
>>>>
>>>> Of course, the real way to resolve whether datetime should be different
>>>> from int/float/string/etc is to look at why this choice was actually made
>>>> for those types in the first place, and decide whether datetime is like
>>>> them *in this respect*. The heterogeneous operations problem may be a
>>>> reasonable justification for leaving the other builtins alone but changing
>>>> datetime, but if someone knows of other fundamental reasons why the
>>>> decision to have arithmetic operations always create the base class was
>>>> chosen, please let me know.
>>>>
>>>> Best,
>>>> Paul
>>>> On 1/5/19 3:55 AM, Alexander Belopolsky wrote:
>>>>
>>>>
>>>>
>>>> On Wed, Jan 2, 2019 at 10:18 PM Paul Ganssle <paul at ganssle.io> wrote:
>>>>
>>>>> .. the original objection was that this implementation assumes that
>>>>> the datetime subclass has a constructor with the same (or a sufficiently
>>>>> similar) signature as datetime.
>>>>>
>>>> While this was used as a possible rationale for the way standard types
>>>> behave, the main objection to changing datetime classes is that it will
>>>> make them behave differently from builtins.  For example:
>>>>
>>>> >>> class F(float):
>>>> ...     pass
>>>> ...
>>>> >>> type(F.fromhex('AA'))
>>>> <class '__main__.F'>
>>>> >>> type(F(1) + F(2))
>>>> <class 'float'>
>>>>
>>>> This may be a legitimate gripe, but unfortunately that ship has sailed
>>>>> long ago. All of datetime's alternate constructors make this assumption.
>>>>> Any subclass that does not meet this requirement must have worked around it
>>>>> long ago (or they don't care about alternate constructors).
>>>>>
>>>>
>>>> This is right, but the same argument is equally applicable to int,
>>>> float, etc. subclasses.  If you want to limit your change to datetime types
>>>> you should explain what makes these types special.
>>>>
>>>> _______________________________________________
>>>> Python-Dev mailing list
>>>> Python-Dev at python.org
>>>> https://mail.python.org/mailman/listinfo/python-dev
>>>> Unsubscribe:
>>>> https://mail.python.org/mailman/options/python-dev/guido%40python.org
>>>>
>>>
>>>
>>> --
>>> --Guido van Rossum (python.org/~guido)
>>>
>>> _______________________________________________
>>> Python-Dev mailing list
>>> Python-Dev at python.org
>>> https://mail.python.org/mailman/listinfo/python-dev
>>> Unsubscribe:
>>> https://mail.python.org/mailman/options/python-dev/guido%40python.org
>>>
>>
>>
>> --
>> --Guido van Rossum (python.org/~guido)
>>
>> _______________________________________________
>> Python-Dev mailing list
>> Python-Dev at python.org
>> https://mail.python.org/mailman/listinfo/python-dev
>> Unsubscribe:
>> https://mail.python.org/mailman/options/python-dev/guido%40python.org
>>
>
>
> --
> --Guido van Rossum (python.org/~guido)
>
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/guido%40python.org
>


-- 
--Guido van Rossum (python.org/~guido)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190204/0054d0e7/attachment.html>

From alexander.belopolsky at gmail.com  Mon Feb  4 14:38:00 2019
From: alexander.belopolsky at gmail.com (Alexander Belopolsky)
Date: Mon, 4 Feb 2019 14:38:00 -0500
Subject: [Python-Dev] Return type of datetime subclasses added to
 timedelta
In-Reply-To: <CAP7+vJ+3iMvjm5Ef5Bd=K_CBhxPwzxp1c0OC-f5sgGzJXnMK0A@mail.gmail.com>
References: <1059740e-cc65-205d-5986-a9397463a315@ganssle.io>
 <CAP7h-xa-Dp8TXrm7Oa=jDwf0wyBfVy-6zK08w219q0jVaYACiQ@mail.gmail.com>
 <bb5120e0-159e-106d-04c6-2a15f7398966@ganssle.io>
 <CAP7+vJL3JrRFstg_QNdq5C4kHkxdsbKyACJBxWSPUbyuTjao3g@mail.gmail.com>
 <2415dd60-b6b4-30b0-90d2-c0c8b22314c7@ganssle.io>
 <CAP7+vJKbQeTgROAtNLvXMwK5xjO8V=pCCs-CHpGAnt+G5TZcyg@mail.gmail.com>
 <8faf2a5b-305c-e83b-33bd-e5eacc8609a7@ganssle.io>
 <CAP7+vJLc3N4wHzZxKCmT-C61X9YeTjVh4MT0OdTV7Lt2PbdKQw@mail.gmail.com>
 <c1f442eb-16ca-6282-38cf-268a2ced6f67@ganssle.io>
 <CAP7+vJ+3iMvjm5Ef5Bd=K_CBhxPwzxp1c0OC-f5sgGzJXnMK0A@mail.gmail.com>
Message-ID: <CAP7h-xYw_p9CF_L1nSkhAmr0wyVDSnG_LkLJm+ts9QNYQhXduQ@mail.gmail.com>

I'll merge it tonight.

On Mon, Feb 4, 2019 at 2:22 PM Guido van Rossum <guido at python.org> wrote:

> OK, I approved the PR. Can some other core dev ensure that it gets merged?
> No backports though!
>
> On Mon, Feb 4, 2019 at 8:46 AM Paul Ganssle <paul at ganssle.io> wrote:
>
>> There's already a PR, actually, #10902:
>> https://github.com/python/cpython/pull/10902
>>
>> Victor reviewed and approved it, I think before I started this thread, so
>> now it's just waiting on merge.
>> On 2/4/19 11:38 AM, Guido van Rossum wrote:
>>
>> I recommend that you submit a PR so we can get it into 3.8 alpha 2.
>>
>> On Mon, Feb 4, 2019 at 5:50 AM Paul Ganssle <paul at ganssle.io> wrote:
>>
>>> Hey all,
>>>
>>> This thread about the return type of datetime operations seems to have
>>> stopped without any explicit decision - I think I responded to everyone who
>>> had objections, but I think only Guido has given a +1 to whether or not we
>>> should go ahead.
>>>
>>> Have we got agreement to go ahead with this change? Are we still
>>> targeting Python 3.8 here?
>>>
>>> For those who don't want to dig through your old e-mails, here's the
>>> archive link for this thread:
>>> https://mail.python.org/pipermail/python-dev/2019-January/155984.html
>>>
>>> If you want to start commenting on the actual implementation, it's
>>> available here (though it's pretty simple):
>>> https://github.com/python/cpython/pull/10902
>>>
>>> Best,
>>>
>>> Paul
>>>
>>>
>>> On 1/6/19 7:17 PM, Guido van Rossum wrote:
>>>
>>> OK, I concede your point (and indeed I only tested this on 3.6). If we
>>> could break the backward compatibility for now() we presumably can break it
>>> for this purpose.
>>>
>>> On Sun, Jan 6, 2019 at 11:02 AM Paul Ganssle <paul at ganssle.io> wrote:
>>>
>>>> I did address this in the original post - the assumption that the
>>>> subclass constructor will have the same arguments as the base constructor
>>>> is baked into many alternate constructors of datetime. I acknowledge that
>>>> this is a breaking change, but it is a small one - anyone creating such a
>>>> subclass that *cannot* handled the class being created this way would
>>>> be broken in myriad ways.
>>>>
>>>> We have also in recent years changed several alternate constructors
>>>> (including `replace`) to retain the original subclass, which by your same
>>>> standard would be a breaking change. I believe there have been no
>>>> complaints. In fact, between Python 3.6 and 3.7, the very example you
>>>> showed broke:
>>>>
>>>> Python 3.6.6:
>>>>
>>>> >>> class D(datetime.datetime):
>>>> ...     def __new__(cls):
>>>> ...         return cls.now()
>>>> ...
>>>> >>> D()
>>>> D(2019, 1, 6, 13, 49, 38, 842033)
>>>>
>>>> Python 3.7.2:
>>>>
>>>> >>> class D(datetime.datetime):
>>>> ...     def __new__(cls):
>>>> ...         return cls.now()
>>>> ...
>>>> >>> D()
>>>> Traceback (most recent call last):
>>>>   File "<stdin>", line 1, in <module>
>>>>   File "<stdin>", line 3, in __new__
>>>> TypeError: __new__() takes 1 positional argument but 9 were given
>>>>
>>>>
>>>> We haven't seen any bug reports about this sort of thing; what we
>>>> *have* been getting is bug reports that subclassing datetime doesn't
>>>> retain the subclass in various ways (because people *are* using
>>>> datetime subclasses). This is likely to cause very little in the way of
>>>> problems, but it will improve convenience for people making datetime
>>>> subclasses and almost certainly performance for people using them (e.g.
>>>> pendulum and arrow, which now need to take a slow pure python route in many
>>>> situations to work around this problem).
>>>>
>>>> If we're *really* concerned with this backward compatibility breaking,
>>>> we could do the equivalent of:
>>>>
>>>> try:
>>>>     return new_behavior(...)
>>>> except TypeError:
>>>>     warnings.warn("The semantics of timedelta addition have "
>>>>                   "changed in a way that raises an error in "
>>>>                   "this subclass. Please implement __add__ "
>>>>                   "if you need the old behavior.", DeprecationWarning)
>>>>
>>>> Then after a suitable notice period drop the warning and turn it to a
>>>> hard error.
>>>>
>>>> Best,
>>>>
>>>> Paul
>>>> On 1/6/19 1:43 PM, Guido van Rossum wrote:
>>>>
>>>> I don't think datetime and builtins like int necessarily need to be
>>>> aligned. But I do see a problem -- the __new__ and __init__ methods defined
>>>> in the subclass (if any) should allow for being called with the same
>>>> signature as the base datetime class. Currently you can have a subclass of
>>>> datetime whose __new__ has no arguments (or, more realistically, interprets
>>>> its arguments differently). Instances of such a class can still be added to
>>>> a timedelta. The proposal would cause this to break (since such an addition
>>>> has to create a new instance, which calls __new__ and __init__). Since this
>>>> is a backwards incompatibility, I don't see how it can be done -- and I
>>>> also don't see many use cases, so I think it's not worth pursuing further.
>>>>
>>>> Note that the same problem already happens with the .fromordinal()
>>>> class method, though it doesn't happen with .fromdatetime() or .now():
>>>>
>>>> >>> class D(datetime.datetime):
>>>> ...   def __new__(cls): return cls.now()
>>>> ...
>>>> >>> D()
>>>> D(2019, 1, 6, 10, 33, 37, 161606)
>>>> >>> D.fromordinal(100)
>>>> Traceback (most recent call last):
>>>>   File "<stdin>", line 1, in <module>
>>>> TypeError: __new__() takes 1 positional argument but 4 were given
>>>> >>> D.fromtimestamp(123456789)
>>>> D(1973, 11, 29, 13, 33, 9)
>>>> >>>
>>>>
>>>> On Sun, Jan 6, 2019 at 9:05 AM Paul Ganssle <paul at ganssle.io> wrote:
>>>>
>>>>> I can think of many reasons why datetime is different from builtins,
>>>>> though to be honest I'm not sure that consistency for its own sake is
>>>>> really a strong argument for keeping a counter-intuitive behavior - and to
>>>>> be honest I'm open to the idea that *all* arithmetic types *should*
>>>>> have some form of this change.
>>>>>
>>>>> That said, I would say that the biggest difference between datetime
>>>>> and builtins (other than the fact that datetime is *not* a builtin,
>>>>> and as such doesn't necessarily need to be categorized in this group), is
>>>>> that unlike almost all other arithmetic types, *datetime* has a
>>>>> special, dedicated type for describing differences in datetimes. Using your
>>>>> example of a float subclass, consider that without the behavior of
>>>>> "addition of floats returns floats", it would be hard to predict what would
>>>>> happen in this situation:
>>>>>
>>>>> >>> F(1.2) + 3.4
>>>>>
>>>>> Would that always return a float, even though F(1.2) + F(3.4) returns
>>>>> an F? Would that return an F because F is the left-hand operand? Would it
>>>>> return a float because float is the right-hand operand? Would you walk the
>>>>> MROs and find the lowest type in common between the operands and return
>>>>> that? It's not entirely clear which subtype predominates. With datetime,
>>>>> you have:
>>>>>
>>>>> datetime - datetime -> timedelta
>>>>> datetime ? timedelta -> datetime
>>>>> timedelta ? timedelta -> timedelta
>>>>>
>>>>> There's no operation between two datetime objects that would return a
>>>>> datetime object, so it's always clear: operations between datetime
>>>>> subclasses return timedelta, operations between a datetime object and a
>>>>> timedelta return the subclass of the datetime that it was added to or
>>>>> subtracted from.
>>>>>
>>>>> Of course, the real way to resolve whether datetime should be
>>>>> different from int/float/string/etc is to look at why this choice was
>>>>> actually made for those types in the first place, and decide whether
>>>>> datetime is like them *in this respect*. The heterogeneous operations
>>>>> problem may be a reasonable justification for leaving the other builtins
>>>>> alone but changing datetime, but if someone knows of other fundamental
>>>>> reasons why the decision to have arithmetic operations always create the
>>>>> base class was chosen, please let me know.
>>>>>
>>>>> Best,
>>>>> Paul
>>>>> On 1/5/19 3:55 AM, Alexander Belopolsky wrote:
>>>>>
>>>>>
>>>>>
>>>>> On Wed, Jan 2, 2019 at 10:18 PM Paul Ganssle <paul at ganssle.io> wrote:
>>>>>
>>>>>> .. the original objection was that this implementation assumes that
>>>>>> the datetime subclass has a constructor with the same (or a sufficiently
>>>>>> similar) signature as datetime.
>>>>>>
>>>>> While this was used as a possible rationale for the way standard types
>>>>> behave, the main objection to changing datetime classes is that it will
>>>>> make them behave differently from builtins.  For example:
>>>>>
>>>>> >>> class F(float):
>>>>> ...     pass
>>>>> ...
>>>>> >>> type(F.fromhex('AA'))
>>>>> <class '__main__.F'>
>>>>> >>> type(F(1) + F(2))
>>>>> <class 'float'>
>>>>>
>>>>> This may be a legitimate gripe, but unfortunately that ship has sailed
>>>>>> long ago. All of datetime's alternate constructors make this assumption.
>>>>>> Any subclass that does not meet this requirement must have worked around it
>>>>>> long ago (or they don't care about alternate constructors).
>>>>>>
>>>>>
>>>>> This is right, but the same argument is equally applicable to int,
>>>>> float, etc. subclasses.  If you want to limit your change to datetime types
>>>>> you should explain what makes these types special.
>>>>>
>>>>> _______________________________________________
>>>>> Python-Dev mailing list
>>>>> Python-Dev at python.org
>>>>> https://mail.python.org/mailman/listinfo/python-dev
>>>>> Unsubscribe:
>>>>> https://mail.python.org/mailman/options/python-dev/guido%40python.org
>>>>>
>>>>
>>>>
>>>> --
>>>> --Guido van Rossum (python.org/~guido)
>>>>
>>>> _______________________________________________
>>>> Python-Dev mailing list
>>>> Python-Dev at python.org
>>>> https://mail.python.org/mailman/listinfo/python-dev
>>>> Unsubscribe:
>>>> https://mail.python.org/mailman/options/python-dev/guido%40python.org
>>>>
>>>
>>>
>>> --
>>> --Guido van Rossum (python.org/~guido)
>>>
>>> _______________________________________________
>>> Python-Dev mailing list
>>> Python-Dev at python.org
>>> https://mail.python.org/mailman/listinfo/python-dev
>>> Unsubscribe:
>>> https://mail.python.org/mailman/options/python-dev/guido%40python.org
>>>
>>
>>
>> --
>> --Guido van Rossum (python.org/~guido)
>>
>> _______________________________________________
>> Python-Dev mailing list
>> Python-Dev at python.org
>> https://mail.python.org/mailman/listinfo/python-dev
>> Unsubscribe:
>> https://mail.python.org/mailman/options/python-dev/guido%40python.org
>>
>
>
> --
> --Guido van Rossum (python.org/~guido)
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/alexander.belopolsky%40gmail.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190204/d76f0151/attachment-0001.html>

From raymond.hettinger at gmail.com  Mon Feb  4 15:26:12 2019
From: raymond.hettinger at gmail.com (Raymond Hettinger)
Date: Mon, 4 Feb 2019 12:26:12 -0800
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <DED40378-CFE8-46ED-B0C4-014F9FE2936A@langa.pl>
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
 <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
 <DED40378-CFE8-46ED-B0C4-014F9FE2936A@langa.pl>
Message-ID: <3C809B94-0C17-4574-BB2A-2B32917BB5C3@gmail.com>


> On Feb 4, 2019, at 2:36 AM, ?ukasz Langa <lukasz at langa.pl> wrote:
> 
> @Raymond, would you be willing to work with Davin on finishing this work in time for alpha2?

I would be happy to help, but this is beyond my technical ability.  The people who are qualified to work on this have already chimed in on the discussion.  Fortunately, I think this is a feature that everyone wants. So it just a matter of getting the experts on the subject to team-up and help get it done.


Raymond






From stephane at wirtel.be  Tue Feb  5 05:24:20 2019
From: stephane at wirtel.be (Stephane Wirtel)
Date: Tue, 5 Feb 2019 11:24:20 +0100
Subject: [Python-Dev] [RELEASE] Python 3.8.0a1 is now available for
 testing
In-Reply-To: <23ED9695-7715-40DE-9DD5-F6A3C482612F@python.org>
References: <C9EA8FEA-C427-41FD-8566-0201F0AA42EA@langa.pl>
 <20190204130238.GB29197@xps>
 <23ED9695-7715-40DE-9DD5-F6A3C482612F@python.org>
Message-ID: <20190205102420.GA7969@xps>

Hi Barry,

I was not aware of this image. So it's true that it's very useful.

Thank you very much,

St?phane

On 02/04, Barry Warsaw wrote:
>On Feb 4, 2019, at 05:02, Stephane Wirtel <stephane at wirtel.be> wrote:
>>
>> Just one idea, we could create a Docker image with this alpha version.
>>
>> This Docker image could be used with the CI of the main projects and the
>> test suites of these projects.
>>
>> If we have some issues, we should create an issue for python 3.8.0a1.
>
>The time machine strikes again!
>
>https://gitlab.com/python-devs/ci-images/tree/master
>
>We call these ?semi-official?!  The current image takes a slightly different approach, by including all the latest Python versions from 2.7, and 3.4-3.8, plus git head.  I just pushed an update for the latest Python 3.8 alpha and 3.7.2.  It?s building now, but the image should be published on quay.io as soon as that?s done.
>
>Contributions most welcome!
>
>-Barry
>



>_______________________________________________
>Python-Dev mailing list
>Python-Dev at python.org
>https://mail.python.org/mailman/listinfo/python-dev
>Unsubscribe: https://mail.python.org/mailman/options/python-dev/stephane%40wirtel.be


-- 
St?phane Wirtel - https://wirtel.be - @matrixise

From daveshawley at gmail.com  Tue Feb  5 07:05:05 2019
From: daveshawley at gmail.com (David Shawley)
Date: Tue, 5 Feb 2019 07:05:05 -0500
Subject: [Python-Dev] bpo-32972: Add unittest.AsyncioTestCase review (for
 3.8?)
Message-ID: <6BC0939D-0388-45F0-B1EC-E7AE9201FBCE@gmail.com>

Hi everyone, I added a PR to add a sub-class of unittest.TestCase that makes it possible to write async test methods.  I wrote this a few months ago and it is waiting on core review.  Is there a core dev that can take up this review?  I would love to have this functionality in the core.

Lukasz - should we add this to Python 3.8 or is it too late for feature additions?

BPO link: https://bugs.python.org/issue32972 <https://bugs.python.org/issue32972>
Github PR: https://github.com/python/cpython/pull/10296 <https://github.com/python/cpython/pull/10296>

cheers, dave.
--
"State and behavior. State and behavior. If it doesn?t bundle state and behavior in a sensible way, it should not be an object, and there should not be a class that produces it." eevee

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190205/5e06d7ca/attachment.html>

From solipsis at pitrou.net  Tue Feb  5 11:44:20 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Tue, 5 Feb 2019 17:44:20 +0100
Subject: [Python-Dev] bpo-32972: Add unittest.AsyncioTestCase review
 (for 3.8?)
References: <6BC0939D-0388-45F0-B1EC-E7AE9201FBCE@gmail.com>
Message-ID: <20190205174420.00fef68d@fsol>


Hi David,

I cannot comment on the PR, but since the functionality is
asyncio-specific, I would suggest moving it to a dedicate
`asyncio.testing` module, or something similar, rather than leaving it
in `unittest` proper.

Regards

Antoine.


On Tue, 5 Feb 2019 07:05:05 -0500
David Shawley <daveshawley at gmail.com> wrote:
> Hi everyone, I added a PR to add a sub-class of unittest.TestCase that makes it possible to write async test methods.  I wrote this a few months ago and it is waiting on core review.  Is there a core dev that can take up this review?  I would love to have this functionality in the core.
> 
> Lukasz - should we add this to Python 3.8 or is it too late for feature additions?
> 
> BPO link: https://bugs.python.org/issue32972 <https://bugs.python.org/issue32972>
> Github PR: https://github.com/python/cpython/pull/10296 <https://github.com/python/cpython/pull/10296>
> 
> cheers, dave.
> --
> "State and behavior. State and behavior. If it doesn?t bundle state and behavior in a sensible way, it should not be an object, and there should not be a class that produces it." eevee
> 
> 




From g.rodola at gmail.com  Tue Feb  5 12:52:58 2019
From: g.rodola at gmail.com (Giampaolo Rodola')
Date: Tue, 5 Feb 2019 18:52:58 +0100
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <CABHLM6sxvXGUc+V78X=94K+Gvv3mDnmoLRCzmb_BhFhi=m0P+w@mail.gmail.com>
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
 <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
 <CAP7+vJ+Q=6eCoSwwa91+cShAkjA03Y-r+HpOu2y8sGmgtDcFpw@mail.gmail.com>
 <q38577$1qlm$2@blaine.gmane.org>
 <8933B3A4-DE0D-47AD-8A5A-10E7B54023D7@gmail.com>
 <CABHLM6sxvXGUc+V78X=94K+Gvv3mDnmoLRCzmb_BhFhi=m0P+w@mail.gmail.com>
Message-ID: <CAFYqXL-XNfAusumYbOADR-=38HWPJ6SOv0bWf4ttG1eKd=GViw@mail.gmail.com>

On Mon, Feb 4, 2019 at 4:21 AM Davin Potts <
python+python_dev at discontinuity.net> wrote:

> I am attempting to do the right thing and am following the advice of other
> core devs in what I have done thus far.
>
> Borrowing heavily from what I've added to issue35813 just now:
>
> This work is the result of ~1.5 years of development effort, much of it
> accomplished at the last two core dev sprints.  The code behind it has been
> stable since September 2018 and tested as an independently installable
> package by multiple people.
>
> I was encouraged by Lukasz, Yury, and others to check in this code early,
> not waiting for tests and docs, in order to both solicit more feedback and
> provide for broader testing.  I understand that doing such a thing is not
> at all a novelty.
>

Actually it is a novelty (you should wait for review and approval). The
main problem I have with this PR is that it seems to introduce 8 brand new
APIs, but since there is no doc, docstrings or tests it's unclear which
ones are supposed to be used, how or whether they are supposed to supersede
or deprecate older (slower) ones involving inter process communication. The
introduction of new APIs in the stdlib is a sensitive topic because once
they get in they stay in, so a discussion should occur early on,
definitively not at alphaX stage. Don't mean to point fingers here, the
goal in itself (zero-copy, a topic I recently contributed to myself for the
shutil module) is certainly valuable, but I concur and think this change
should be reverted and post-poned for 3.9.

-- 
Giampaolo - http://grodola.blogspot.com
-- 
Giampaolo - http://grodola.blogspot.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190205/e9fa7007/attachment.html>

From nas-python at arctrix.com  Tue Feb  5 14:07:40 2019
From: nas-python at arctrix.com (Neil Schemenauer)
Date: Tue, 5 Feb 2019 13:07:40 -0600
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <CAFYqXL-XNfAusumYbOADR-=38HWPJ6SOv0bWf4ttG1eKd=GViw@mail.gmail.com>
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
 <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
 <CAP7+vJ+Q=6eCoSwwa91+cShAkjA03Y-r+HpOu2y8sGmgtDcFpw@mail.gmail.com>
 <q38577$1qlm$2@blaine.gmane.org>
 <8933B3A4-DE0D-47AD-8A5A-10E7B54023D7@gmail.com>
 <CABHLM6sxvXGUc+V78X=94K+Gvv3mDnmoLRCzmb_BhFhi=m0P+w@mail.gmail.com>
 <CAFYqXL-XNfAusumYbOADR-=38HWPJ6SOv0bWf4ttG1eKd=GViw@mail.gmail.com>
Message-ID: <20190205190740.atccbo33wprrxonw@python.ca>

On 2019-02-05, Giampaolo Rodola' wrote:
> The main problem I have with this PR is that it seems to introduce
> 8 brand new APIs, but since there is no doc, docstrings or tests
> it's unclear which ones are supposed to be used, how or whether
> they are supposed to supersede or deprecate older (slower) ones
> involving inter process communication.

New or changed APIs are my major concern as well.  Localized
problems can be fixed later without much trouble.  However, APIs
"lock" us in and make it harder to change things later.  Also, will
new APIs need to be eventually supported by other Python
implementations?  I would imagine that doing zero-copy mixed with
alternative garbage collection strategies could be complicated.
Could we somehow mark these APIs as experimental in 3.8?

My gut reaction is that we shouldn't revert.  However, looking at
the changes, it seems 'multiprocessing.shared_memory' could be an
external extension package that lives in PyPI.  It doesn't require
changes to other interpreter internals.  It doesn't seem to require
internal Python header files.

Regards,

  Neil

From raymond.hettinger at gmail.com  Tue Feb  5 14:35:49 2019
From: raymond.hettinger at gmail.com (Raymond Hettinger)
Date: Tue, 5 Feb 2019 11:35:49 -0800
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <CAFYqXL-XNfAusumYbOADR-=38HWPJ6SOv0bWf4ttG1eKd=GViw@mail.gmail.com>
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
 <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
 <CAP7+vJ+Q=6eCoSwwa91+cShAkjA03Y-r+HpOu2y8sGmgtDcFpw@mail.gmail.com>
 <q38577$1qlm$2@blaine.gmane.org>
 <8933B3A4-DE0D-47AD-8A5A-10E7B54023D7@gmail.com>
 <CABHLM6sxvXGUc+V78X=94K+Gvv3mDnmoLRCzmb_BhFhi=m0P+w@mail.gmail.com>
 <CAFYqXL-XNfAusumYbOADR-=38HWPJ6SOv0bWf4ttG1eKd=GViw@mail.gmail.com>
Message-ID: <C7660F80-E05F-47B1-A5BE-B36DC31115DB@gmail.com>


> On Feb 5, 2019, at 9:52 AM, Giampaolo Rodola' <g.rodola at gmail.com> wrote:
> 
>  The main problem I have with this PR is that it seems to introduce 8 brand new APIs, but since there is no doc, docstrings or tests it's unclear which ones are supposed to be used, how or whether they are supposed to supersede or deprecate older (slower) ones involving inter process communication.

The release manger already opined that if tests and docs get finished for the second alpha, he prefers not to have a reversion and would rather on build on top of what already shipped in the first alpha.  FWIW, the absence of docs isn't desirable but it isn't atypical.  PEP 572 code landed without the docs. Docs for dataclasses arrived much after the code. The same was true for the decimal module. Hopefully, everyone will team up with Davin and help him get the ball over the goal line.

BTW, this is a feature we really want.  Our multicore story for Python isn't a good one.  Due to the GIL, threading usually can't exploit multiple cores for better performance.  Async has lower overhead than threading but achieves its gains by keeping all the data in a single process.  That leaves us with multiprocessing where the primary obstacle has been the heavy cost of moving data between processes.  If that cost can be reduced, we've got a winning story for multicore.

This patch is one of the better things that is happening to Python.  Aside from last week's procedural missteps and communication issues surrounding the commit, the many months of prior work on this have been stellar. How about we stop using a highly public forum to pile up on Davin (being the subject of a thread like this can be a soul crushing experience).  Right now, he could really use some help and support from everyone on the team.


Raymond



From nas-python at arctrix.com  Tue Feb  5 14:41:14 2019
From: nas-python at arctrix.com (Neil Schemenauer)
Date: Tue, 5 Feb 2019 13:41:14 -0600
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <20190205190740.atccbo33wprrxonw@python.ca>
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
 <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
 <CAP7+vJ+Q=6eCoSwwa91+cShAkjA03Y-r+HpOu2y8sGmgtDcFpw@mail.gmail.com>
 <q38577$1qlm$2@blaine.gmane.org>
 <8933B3A4-DE0D-47AD-8A5A-10E7B54023D7@gmail.com>
 <CABHLM6sxvXGUc+V78X=94K+Gvv3mDnmoLRCzmb_BhFhi=m0P+w@mail.gmail.com>
 <CAFYqXL-XNfAusumYbOADR-=38HWPJ6SOv0bWf4ttG1eKd=GViw@mail.gmail.com>
 <20190205190740.atccbo33wprrxonw@python.ca>
Message-ID: <20190205194114.m2pgnlz6bdubkjus@python.ca>

I wrote:
> Could we somehow mark these APIs as experimental in 3.8?

It seems the change "e5ef45b8f519a9be9965590e1a0a587ff584c180" the
one we are discussing.  It adds two new files:

  Lib/multiprocessing/shared_memory.py
  Modules/_multiprocessing/posixshmem.c

It doesn't introduce new C APIs.  So, only
multiprocessing.shared_memory seems public.  I see we have PEP 411
that should cover this case:

  https://www.python.org/dev/peps/pep-0411/

The setup.py code could be more defensive.  Maybe only build on
platforms that have supported word sizes etc?  For 3.8, could it be
activated by uncommenting a line in Modules/Setup, rather than by
setup.py?

What happens in shared_memory if the _posixshmem module is not
available?  On Windows it seems like an import error is raised.
Otherwise, _PosixSharedMemory becomes 'object'.  Does that mean the
API still works but you lose the zero-copy speed?

Regards,

  Neil

From ethan at stoneleaf.us  Tue Feb  5 16:12:21 2019
From: ethan at stoneleaf.us (Ethan Furman)
Date: Tue, 5 Feb 2019 13:12:21 -0800
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <C7660F80-E05F-47B1-A5BE-B36DC31115DB@gmail.com>
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
 <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
 <CAP7+vJ+Q=6eCoSwwa91+cShAkjA03Y-r+HpOu2y8sGmgtDcFpw@mail.gmail.com>
 <q38577$1qlm$2@blaine.gmane.org>
 <8933B3A4-DE0D-47AD-8A5A-10E7B54023D7@gmail.com>
 <CABHLM6sxvXGUc+V78X=94K+Gvv3mDnmoLRCzmb_BhFhi=m0P+w@mail.gmail.com>
 <CAFYqXL-XNfAusumYbOADR-=38HWPJ6SOv0bWf4ttG1eKd=GViw@mail.gmail.com>
 <C7660F80-E05F-47B1-A5BE-B36DC31115DB@gmail.com>
Message-ID: <3d865bbe-071d-3b97-a34c-5b877704d1cc@stoneleaf.us>

On 02/05/2019 11:35 AM, Raymond Hettinger wrote:

> How about we stop using a highly public forum to pile up on Davin (being the subject of a thread like this can be a soul crushing experience).

Thank you for the reminder.

>  Right now, he could really use some help and support from everyone on the team.

I am really looking forward to this enhancement.  Thank you, Davin, and everyone else who has, and will, work on it.

--
~Ethan~

From tjreedy at udel.edu  Tue Feb  5 17:20:47 2019
From: tjreedy at udel.edu (Terry Reedy)
Date: Tue, 5 Feb 2019 17:20:47 -0500
Subject: [Python-Dev] bpo-32972: Add unittest.AsyncioTestCase review
 (for 3.8?)
In-Reply-To: <20190205174420.00fef68d@fsol>
References: <6BC0939D-0388-45F0-B1EC-E7AE9201FBCE@gmail.com>
 <20190205174420.00fef68d@fsol>
Message-ID: <q3d282$4amg$1@blaine.gmane.org>

On 2/5/2019 11:44 AM, Antoine Pitrou wrote:

> I cannot comment on the PR, but since the functionality is
> asyncio-specific, I would suggest moving it to a dedicate
> `asyncio.testing` module, or something similar, rather than leaving it
> in `unittest` proper.

That is one of the options discussed on the issue.

  On Tue, 5 Feb 2019 07:05:05 -0500
> David Shawley <daveshawley at gmail.com> wrote:
>> Hi everyone, I added a PR to add a sub-class of unittest.TestCase that makes it possible to write async test methods.  I wrote this a few months ago and it is waiting on core review.  Is there a core dev that can take up this review?  I would love to have this functionality in the core.
>>
>> Lukasz - should we add this to Python 3.8 or is it too late for feature additions?

Features can be added until beta1, and until that, additions are not the 
release manager decision.

>> BPO link: https://bugs.python.org/issue32972 <https://bugs.python.org/issue32972>
>> Github PR: https://github.com/python/cpython/pull/10296 <https://github.com/python/cpython/pull/10296>

All or most of the relevant people are nosy on the issue.  So a reminder 
there would be appropriate.  However, from my cursory scan, it is not 
clear if the 5 core devs involved (marked by blue and yellow snakes) 
agree on exactly what more should be added.  Perhaps you should 
summarize what you think there is and is not agreement on.

-- 
Terry Jan Reedy


From barry at python.org  Tue Feb  5 17:33:02 2019
From: barry at python.org (Barry Warsaw)
Date: Tue, 5 Feb 2019 14:33:02 -0800
Subject: [Python-Dev] [RELEASE] Python 3.8.0a1 is now available for
 testing
In-Reply-To: <20190205102420.GA7969@xps>
References: <C9EA8FEA-C427-41FD-8566-0201F0AA42EA@langa.pl>
 <20190204130238.GB29197@xps>
 <23ED9695-7715-40DE-9DD5-F6A3C482612F@python.org> <20190205102420.GA7969@xps>
Message-ID: <37A1D61F-AF75-4F66-9279-677505623EDE@python.org>

On Feb 5, 2019, at 02:24, Stephane Wirtel <stephane at wirtel.be> wrote:
> 
> I was not aware of this image. So it's true that it's very useful.
> 
> Thank you very much,

You?re welcome!  I just pushed an update to add 3.8.0a1 to the set of Python?s (including git head).  Do you think there?s a better way to publicize these images?

Cheers,
-Barry

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: Message signed with OpenPGP
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190205/54b31c15/attachment.sig>

From Paul.Monson at microsoft.com  Tue Feb  5 20:09:23 2019
From: Paul.Monson at microsoft.com (Paul Monson)
Date: Wed, 6 Feb 2019 01:09:23 +0000
Subject: [Python-Dev] CPython on Windows ARM32
Message-ID: <CY4PR2101MB080464E8971D5B93F1C94732F96F0@CY4PR2101MB0804.namprd21.prod.outlook.com>

Hi Python Developers,



I'm Paul Monson, I've spent about 20 years working with embedded software.  Since 2010 I've worked for Microsoft as a developer.



Our team is working with CPython on Azure IoT Edge devices that run on x64-based devices.



We would like to extend that support to Windows running on ARM 32-bit devices and have a working proof-of-concept.  Our team is prepared to provide support for CPython for Windows on ARM32 for 10 years, and to provide build bots for ARM32.



I like to propose that the initial sequence of PRs could be:
- Update to OpenSSL 1.1.1 (without anything ARM specific) - ready to go
- Migrate to libffi directly (finish https://github.com/python/cpython/pull/3806<https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fpython%2Fcpython%2Fpull%2F3806&data=02%7C01%7CPaul.Monson%40microsoft.com%7C0e38d9367d2d4240725d08d680dedde6%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C636838092030320471&sdata=7Mgsyy9SifmIRroagp1NZ0cx77vhRC%2BzxpUoHSQblB4%3D&reserved=0>)
- Build file updates for OpenSSL ARM and check into cpython-bin-deps
- Build file updates for CPython ARM
- ctypes updates for ARM
- Test module skips for ARM
- Library updates and related test fixes for ARM



Updating OpenSSL and libffi are independent of ARM support but need to be done as prerequisites.  OpenSSL 1.1.0 doesn't have support for ARM32 on Windows but OpenSSL 1.1.1 does.



I have OpenSSL 1.1.1a ready to check in to master with all tests passing on x86 and x64 on Windows.  Since work has already been done on this for other platforms only very small changes were needed for Windows.



I have also integrated and tested the current libffi on Windows x64.  Some additonal porting of x86 assembler to MSVC tools will need to be done.  I have a working port of ARM32 assembler for MSVC but it may need to be brought up to date and cleaned up.



The last four all need to go in together, but can be reviewed separately.



We are not planning to support Tk/Tcl on ARM32 because Windows IoT Core, Windows containers don't support GDI, which is a depenency of Tk/Tcl.



Since Window IoT Core and Windows container don't support the .msi or .exe installers found on python.org my team at Microsoft will build the CPython for Windows ARM32 from the official repo and distribute it.



Thanks in advance,

Paul

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190206/7f864248/attachment.html>

From steve.dower at python.org  Tue Feb  5 20:35:28 2019
From: steve.dower at python.org (Steve Dower)
Date: Tue, 5 Feb 2019 17:35:28 -0800
Subject: [Python-Dev] CPython on Windows ARM32
In-Reply-To: <CY4PR2101MB080464E8971D5B93F1C94732F96F0@CY4PR2101MB0804.namprd21.prod.outlook.com>
References: <CY4PR2101MB080464E8971D5B93F1C94732F96F0@CY4PR2101MB0804.namprd21.prod.outlook.com>
Message-ID: <bc867b42-03dc-1678-abca-ea1816c84fe0@python.org>

Just confirming for the list that I'm aware of this and supportive, but
am not the dedicated support for this effort.

I also haven't reviewed the changes yet, but provided nobody is strongly
opposed to taking on a supported platform (without additional releases
on python.org), I expect I'll do a big part of the reviewing then.

Cheers,
Steve

On 05Feb.2019 1709, Paul Monson via Python-Dev wrote:
> Hi Python Developers,
> 
> I'm Paul Monson, I've spent about 20 years working with embedded
> software.? Since 2010 I've worked for Microsoft as a developer.
> 
> Our team is working with CPython on Azure IoT Edge devices that run on
> x64-based devices.
> 
> We would like to extend that support to Windows running on ARM 32-bit
> devices and have a working proof-of-concept.? Our team is prepared to
> provide support for CPython for Windows on ARM32 for 10 years, and to
> provide build bots for ARM32.
> 
> I like to propose that the initial sequence of PRs could be:
> - Update to OpenSSL 1.1.1 (without anything ARM specific) - ready to go
> - Migrate to libffi directly (finish https://github.com/python/cpython/pull/3806)
> - Build file updates for OpenSSL ARM and check into cpython-bin-deps
> - Build file updates for CPython ARM
> - ctypes updates for ARM
> - Test module skips for ARM
> - Library updates and related test fixes for ARM
> 
> Updating OpenSSL and libffi are independent of ARM support but need to
> be done as prerequisites.? OpenSSL 1.1.0 doesn't have support for ARM32
> on Windows but OpenSSL 1.1.1 does.
> 
> I have OpenSSL 1.1.1a ready to check in to master with all tests passing
> on x86 and x64 on Windows.? Since work has already been done on this for
> other platforms only very small changes were needed for Windows.
> 
> I have also integrated and tested the current libffi on Windows x64.?
> Some additonal porting of x86 assembler to MSVC tools will need to be
> done.? I have a working port of ARM32 assembler for MSVC but it may need
> to be brought up to date and cleaned up.
> 
> The last four all need to go in together, but can be reviewed separately.
> 
> We are not planning to support Tk/Tcl on ARM32 because Windows IoT Core,
> Windows containers don't support GDI, which is a depenency of Tk/Tcl.
> 
> Since Window IoT Core and Windows container don't support the .msi or
> .exe installers found on python.org my team at Microsoft will build the
> CPython for Windows ARM32 from the official repo and distribute it.
> 
> Thanks in advance,
> 
> Paul

From zachary.ware+pydev at gmail.com  Tue Feb  5 22:10:36 2019
From: zachary.ware+pydev at gmail.com (Zachary Ware)
Date: Tue, 5 Feb 2019 21:10:36 -0600
Subject: [Python-Dev] CPython on Windows ARM32
In-Reply-To: <bc867b42-03dc-1678-abca-ea1816c84fe0@python.org>
References: <CY4PR2101MB080464E8971D5B93F1C94732F96F0@CY4PR2101MB0804.namprd21.prod.outlook.com>
 <bc867b42-03dc-1678-abca-ea1816c84fe0@python.org>
Message-ID: <CAKJDb-PpB5MPo9tvqGok47xYWFqdZZh3rao8dAUP9EtKrkk-9Q@mail.gmail.com>

On Tue, Feb 5, 2019 at 7:37 PM Steve Dower <steve.dower at python.org> wrote:
> I also haven't reviewed the changes yet, but provided nobody is strongly
> opposed to taking on a supported platform (without additional releases
> on python.org), I expect I'll do a big part of the reviewing then.

I'm all for the first two changes (especially the second), and if 10
years of pledged corporate support for a new platform is the price we
have to pay for them, I'm ok with that :).  I expect I'll be
automatically added to any issues/PRs that come of this, but I'll keep
an eye out for them anyway and give reviews as I'm able.  I'll also
help get the build bots set up when we're ready for them.

-- 
Zach

From stephane at wirtel.be  Wed Feb  6 02:43:39 2019
From: stephane at wirtel.be (Stephane Wirtel)
Date: Wed, 6 Feb 2019 08:43:39 +0100
Subject: [Python-Dev] [RELEASE] Python 3.8.0a1 is now available for
 testing
In-Reply-To: <37A1D61F-AF75-4F66-9279-677505623EDE@python.org>
References: <C9EA8FEA-C427-41FD-8566-0201F0AA42EA@langa.pl>
 <20190204130238.GB29197@xps>
 <23ED9695-7715-40DE-9DD5-F6A3C482612F@python.org>
 <20190205102420.GA7969@xps>
 <37A1D61F-AF75-4F66-9279-677505623EDE@python.org>
Message-ID: <20190206074339.GA23428@xps>

On 02/05, Barry Warsaw wrote:
>On Feb 5, 2019, at 02:24, Stephane Wirtel <stephane at wirtel.be> wrote:
>You?re welcome!  I just pushed an update to add 3.8.0a1 to the set of Python?s (including git head).  Do you think there?s a better way to publicize these images?

I know that Julien Palard wanted a docker image with all the versions of
Python, see: https://github.com/docker-library/python/issues/373

For my part, I wanted to propose a docker image with the last version of
Python and try to use it for the detection of bugs in the main python
projects (django, numpy, flask, pandas, etc...) with a CI (example:
Gitlab-CI)

First issue: pytest uses the ast module of python and since 3.8.0a1, the
tests do not pass -> new issue for pytest

Cheers,

St?phane

-- 
St?phane Wirtel - https://wirtel.be - @matrixise

From tjreedy at udel.edu  Wed Feb  6 03:54:52 2019
From: tjreedy at udel.edu (Terry Reedy)
Date: Wed, 6 Feb 2019 03:54:52 -0500
Subject: [Python-Dev] CPython on Windows ARM32
In-Reply-To: <CAKJDb-PpB5MPo9tvqGok47xYWFqdZZh3rao8dAUP9EtKrkk-9Q@mail.gmail.com>
References: <CY4PR2101MB080464E8971D5B93F1C94732F96F0@CY4PR2101MB0804.namprd21.prod.outlook.com>
 <bc867b42-03dc-1678-abca-ea1816c84fe0@python.org>
 <CAKJDb-PpB5MPo9tvqGok47xYWFqdZZh3rao8dAUP9EtKrkk-9Q@mail.gmail.com>
Message-ID: <q3e7cv$tdp$1@blaine.gmane.org>

On 2/5/2019 10:10 PM, Zachary Ware wrote:

> I'm all for the first two changes (especially the second), and if 10
> years of pledged corporate support for a new platform is the price we
> have to pay for them, I'm ok with that :).

I would expect that the main question should be the density of 
WinArm32-specific ifdefs in the main code and extensions other than ctypes.

-- 
Terry Jan Reedy


From ncoghlan at gmail.com  Wed Feb  6 06:28:49 2019
From: ncoghlan at gmail.com (Nick Coghlan)
Date: Wed, 6 Feb 2019 21:28:49 +1000
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <20190205190740.atccbo33wprrxonw@python.ca>
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
 <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
 <CAP7+vJ+Q=6eCoSwwa91+cShAkjA03Y-r+HpOu2y8sGmgtDcFpw@mail.gmail.com>
 <q38577$1qlm$2@blaine.gmane.org>
 <8933B3A4-DE0D-47AD-8A5A-10E7B54023D7@gmail.com>
 <CABHLM6sxvXGUc+V78X=94K+Gvv3mDnmoLRCzmb_BhFhi=m0P+w@mail.gmail.com>
 <CAFYqXL-XNfAusumYbOADR-=38HWPJ6SOv0bWf4ttG1eKd=GViw@mail.gmail.com>
 <20190205190740.atccbo33wprrxonw@python.ca>
Message-ID: <CADiSq7dpdVa4MWRTMmxbMqy0ujEx8C7XKnykNNiJ0w_JT9nGJg@mail.gmail.com>

On Wed, 6 Feb 2019 at 05:17, Neil Schemenauer <nas-python at arctrix.com> wrote:
> My gut reaction is that we shouldn't revert.  However, looking at
> the changes, it seems 'multiprocessing.shared_memory' could be an
> external extension package that lives in PyPI.  It doesn't require
> changes to other interpreter internals.  It doesn't seem to require
> internal Python header files.

The desired dependency in this case goes the other way: we'd like this
in the standard library so that other standard library components can
use it, and it can eventually become part of the "assumed baseline"
that the reference Python interpreter offers to projects building on
top of it.

Cheers,
Nick.

-- 
Nick Coghlan   |   ncoghlan at gmail.com   |   Brisbane, Australia

From g.rodola at gmail.com  Wed Feb  6 06:51:09 2019
From: g.rodola at gmail.com (Giampaolo Rodola')
Date: Wed, 6 Feb 2019 12:51:09 +0100
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <C7660F80-E05F-47B1-A5BE-B36DC31115DB@gmail.com>
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
 <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
 <CAP7+vJ+Q=6eCoSwwa91+cShAkjA03Y-r+HpOu2y8sGmgtDcFpw@mail.gmail.com>
 <q38577$1qlm$2@blaine.gmane.org>
 <8933B3A4-DE0D-47AD-8A5A-10E7B54023D7@gmail.com>
 <CABHLM6sxvXGUc+V78X=94K+Gvv3mDnmoLRCzmb_BhFhi=m0P+w@mail.gmail.com>
 <CAFYqXL-XNfAusumYbOADR-=38HWPJ6SOv0bWf4ttG1eKd=GViw@mail.gmail.com>
 <C7660F80-E05F-47B1-A5BE-B36DC31115DB@gmail.com>
Message-ID: <CAFYqXL9bOj42T5RrYzwLsFuSrmpJRLZKSexT=otfdNEnBvvaZw@mail.gmail.com>

Davin,
I am not familiar with the multiprocessing module, so take the following
with a big grain of salt. I took a look at the PR, then I got an idea of
how multiprocessing module is organized by reading the doc. Here's some
food for thought in terms of API reorganization.

SharedMemoryManager, SharedMemoryServer
---------------------------------------

It appears to me these are the 2 main public classes, and after reading the
doc it seems they really belong to "managers
<https://docs.python.org/3/library/multiprocessing.html#multiprocessing-managers>"
(multiprocessing.managers namespace). Also:
* SharedMemoryManager is a subclass of multiprocessing.managers.SyncManager
* SharedMemoryServer is a subclass of multiprocessing.managers.Server
shared_memory.py could be renamed to _shared_memory.py and managers.py
could import and expose these 2 classes only.

Support APIs
------------

These are objects which seem to be used in support of the 2 classes above,
but apparently are not meant to be public. As such they could simply live
in _shared_memory.py and not be exposed:

- shareable_wrap(): used only in SharedMemoryTracker.wrap()
- SharedMemoryTracker: used only by SharedMemoryServer
- SharedMemory, WindowsNamedSharedMemory, PosixSharedMemory: used by
shareable_wrap() and SharedMemoryTracker
- ShareableList: it appears this is not used, but by reading here
<https://github.com/python/cpython/blob/e0e5065daef36dafe10a46eaa8b7800274d73062/Lib/multiprocessing/managers.py#L1194>
I have a doubt: shouldn't it be register()ed against SharedMemoryManager?

C extension module
------------------

- ExistentialError, Error - it appears these are not used
- PermissionsException, ExistentialException - I concur with Ronald
Oussoren's review: you could simply use PyErr_SetFromErrno() and let the
original OSError exception bubble up. Same for O_CREAT, O_EXCL, O_CREX,
O_TRUNC which are already exposed in the os module. I have a couple of
other minor nitpicks re. the code but I will comment on the PR.

Compatibility
-------------

I'm not sure if SyncManager and SharedMemoryManager are fully
interchangeable so I think the doc should clarify this. SyncManager handles
a certain set of types
<https://github.com/python/cpython/blob/e0e5065daef36dafe10a46eaa8b7800274d73062/Lib/multiprocessing/managers.py#L1183>.
It appears SharedMemoryManager is supposedly able to do the same except for
lists
<https://github.com/applio/cpython/blob/516cf4ac14af257913f46216973c09d58eb259d5/Lib/multiprocessing/shared_memory.py#L227>.
Is my assumption correct? Also, multiprocessing.Manager() by default
returns a SyncManager. If we'll get to a point where SyncManager and
SharedMemoryManager are able to handle the same types it'd be good to
return SharedMemoryManager as the default, but it's probably safer to leave
it for later. Unless they are already there (I don't know) it would be good
to have a full set of unit-tests for all the register()ed types and test
them against SyncManager and SharedMemoryManager. That would give an idea
on the real interchangeability of these 2 classes and would also help
writing a comprehensive doc.

Hope this helps.

-- 
Giampaolo - http://grodola.blogspot.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190206/aa2e949f/attachment.html>

From encukou at gmail.com  Wed Feb  6 07:23:42 2019
From: encukou at gmail.com (Petr Viktorin)
Date: Wed, 6 Feb 2019 13:23:42 +0100
Subject: [Python-Dev] [RELEASE] Python 3.8.0a1 is now available for
 testing
In-Reply-To: <20190206074339.GA23428@xps>
References: <C9EA8FEA-C427-41FD-8566-0201F0AA42EA@langa.pl>
 <20190204130238.GB29197@xps>
 <23ED9695-7715-40DE-9DD5-F6A3C482612F@python.org> <20190205102420.GA7969@xps>
 <37A1D61F-AF75-4F66-9279-677505623EDE@python.org>
 <20190206074339.GA23428@xps>
Message-ID: <ecf1e24b-538b-2585-e4d2-80994827fd11@gmail.com>

On 2/6/19 8:43 AM, Stephane Wirtel wrote:
> On 02/05, Barry Warsaw wrote:
>> On Feb 5, 2019, at 02:24, Stephane Wirtel <stephane at wirtel.be> wrote:
>> You?re welcome!? I just pushed an update to add 3.8.0a1 to the set of 
>> Python?s (including git head).? Do you think there?s a better way to 
>> publicize these images?
> 
> I know that Julien Palard wanted a docker image with all the versions of
> Python, see: https://github.com/docker-library/python/issues/373
> 
> For my part, I wanted to propose a docker image with the last version of
> Python and try to use it for the detection of bugs in the main python
> projects (django, numpy, flask, pandas, etc...) with a CI (example:
> Gitlab-CI)
> 
> First issue: pytest uses the ast module of python and since 3.8.0a1, the
> tests do not pass -> new issue for pytest

FWIW, we're preparing to rebuild all Fedora packages with the 3.8 
alphas/betas, so everything's tested when 3.8.0 is released: 
https://fedoraproject.org/wiki/Changes/Python3.8

That should cover the main Python projects, too.

From doko at ubuntu.com  Wed Feb  6 08:26:55 2019
From: doko at ubuntu.com (Matthias Klose)
Date: Wed, 6 Feb 2019 14:26:55 +0100
Subject: [Python-Dev] [RELEASE] Python 3.8.0a1 is now available for
 testing
In-Reply-To: <ecf1e24b-538b-2585-e4d2-80994827fd11@gmail.com>
References: <C9EA8FEA-C427-41FD-8566-0201F0AA42EA@langa.pl>
 <20190204130238.GB29197@xps>
 <23ED9695-7715-40DE-9DD5-F6A3C482612F@python.org> <20190205102420.GA7969@xps>
 <37A1D61F-AF75-4F66-9279-677505623EDE@python.org>
 <20190206074339.GA23428@xps> <ecf1e24b-538b-2585-e4d2-80994827fd11@gmail.com>
Message-ID: <cf44ac42-b609-886d-1ed3-439213fdeef9@ubuntu.com>

On 06.02.19 13:23, Petr Viktorin wrote:
> FWIW, we're preparing to rebuild all Fedora packages with the 3.8 alphas/betas,
> so everything's tested when 3.8.0 is released:
> https://fedoraproject.org/wiki/Changes/Python3.8
> 
> That should cover the main Python projects, too.

well, the real challenge is that all test suites of third party packages still
pass on all architectures.  From past transitions, I know that this costs the
most time and resources.  But yes, targeting 3.8 for Ubuntu 20.04 LTS as well.

Matthias

From encukou at gmail.com  Wed Feb  6 08:49:56 2019
From: encukou at gmail.com (Petr Viktorin)
Date: Wed, 6 Feb 2019 14:49:56 +0100
Subject: [Python-Dev] [RELEASE] Python 3.8.0a1 is now available for
 testing
In-Reply-To: <cf44ac42-b609-886d-1ed3-439213fdeef9@ubuntu.com>
References: <C9EA8FEA-C427-41FD-8566-0201F0AA42EA@langa.pl>
 <20190204130238.GB29197@xps>
 <23ED9695-7715-40DE-9DD5-F6A3C482612F@python.org> <20190205102420.GA7969@xps>
 <37A1D61F-AF75-4F66-9279-677505623EDE@python.org>
 <20190206074339.GA23428@xps> <ecf1e24b-538b-2585-e4d2-80994827fd11@gmail.com>
 <cf44ac42-b609-886d-1ed3-439213fdeef9@ubuntu.com>
Message-ID: <d9de0971-9d83-1b2c-0207-be558352c894@gmail.com>

On 2/6/19 2:26 PM, Matthias Klose wrote:
> On 06.02.19 13:23, Petr Viktorin wrote:
>> FWIW, we're preparing to rebuild all Fedora packages with the 3.8 alphas/betas,
>> so everything's tested when 3.8.0 is released:
>> https://fedoraproject.org/wiki/Changes/Python3.8
>>
>> That should cover the main Python projects, too.
> 
> well, the real challenge is that all test suites of third party packages still
> pass on all architectures.  From past transitions, I know that this costs the
> most time and resources. 

Same experience here.

In Fedora, tests are generally run as part of the build.
(Sorry, that was definitely not obvious from my message!)

> But yes, targeting 3.8 for Ubuntu 20.04 LTS as well.

\o/

From g.rodola at gmail.com  Wed Feb  6 11:58:32 2019
From: g.rodola at gmail.com (Giampaolo Rodola')
Date: Wed, 6 Feb 2019 17:58:32 +0100
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <CAFYqXL9bOj42T5RrYzwLsFuSrmpJRLZKSexT=otfdNEnBvvaZw@mail.gmail.com>
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
 <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
 <CAP7+vJ+Q=6eCoSwwa91+cShAkjA03Y-r+HpOu2y8sGmgtDcFpw@mail.gmail.com>
 <q38577$1qlm$2@blaine.gmane.org>
 <8933B3A4-DE0D-47AD-8A5A-10E7B54023D7@gmail.com>
 <CABHLM6sxvXGUc+V78X=94K+Gvv3mDnmoLRCzmb_BhFhi=m0P+w@mail.gmail.com>
 <CAFYqXL-XNfAusumYbOADR-=38HWPJ6SOv0bWf4ttG1eKd=GViw@mail.gmail.com>
 <C7660F80-E05F-47B1-A5BE-B36DC31115DB@gmail.com>
 <CAFYqXL9bOj42T5RrYzwLsFuSrmpJRLZKSexT=otfdNEnBvvaZw@mail.gmail.com>
Message-ID: <CAFYqXL_xn6+GXjuochevSABMZ3JOdr6T+rx-Ao4UYwZ+QMkKNg@mail.gmail.com>

On Wed, Feb 6, 2019 at 12:51 PM Giampaolo Rodola' <g.rodola at gmail.com>
wrote:

>
> Unless they are already there (I don't know) it would be good to have a
> full set of unit-tests for all the register()ed types and test them against
> SyncManager and SharedMemoryManager. That would give an idea on the real
> interchangeability of these 2 classes and would also help writing a
> comprehensive doc.
>

In order to speed up the alpha2 inclusion process I created a PR which
implements what said above:
https://github.com/python/cpython/pull/11772
https://bugs.python.org/issue35917
Apparently SharedMemoryManager works out of the box and presents no
differences with SyncManager, but the list type is not using ShareableList.
When I attempted to register it with "SharedMemoryManager.register('list',
list, ShareableList)" I got the following error:

Traceback (most recent call last):
  File "foo.py", line 137, in test_list
    o = self.manager.list()
  File "/home/giampaolo/svn/cpython/Lib/multiprocessing/managers.py", line
702, in temp
    proxy = proxytype(
TypeError: __init__() got an unexpected keyword argument 'manager'

I am not sure how to fix that (I'll leave it up to Davin). The tests as-is
are independent from PR-11772 so I suppose they can be reviewed/checked-in
regardless of the changes which will affect shared_memory.py.

-- 
Giampaolo - http://grodola.blogspot.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190206/bfd317b7/attachment-0001.html>

From solipsis at pitrou.net  Wed Feb  6 12:06:06 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Wed, 6 Feb 2019 18:06:06 +0100
Subject: [Python-Dev] About the future of multi-process Python
Message-ID: <20190206180606.0dbcd927@fsol>


Hello,

For the record there are number of initiatives currently to boost the
usefulness and efficiency of multi-process computation in Python.

One of them is PEP 574 (zero-copy pickling with out-of-band buffers),
which I'm working on.

Another is Pierre Glaser's work on allowing pickling of dynamic
functions and classes with the C-accelerated _pickle module (rather than
the slow pure Python implementation):
https://bugs.python.org/issue35900
https://bugs.python.org/issue35911

Another is Davin's work on shared memory managers.

There are also emerging standards like Apache Arrow that provide a
shared, runtime-agnostic, compute-friendly representation for in-memory
tabular data, and third-party frameworks like Dask which are
potentially able to work on top of that and expose nice end-user APIs.

For maximum synergy between these initiatives and the resulting APIs,
it is better if things are done in the open ;-)

Regards

Antoine.



From steve.dower at python.org  Wed Feb  6 13:23:38 2019
From: steve.dower at python.org (Steve Dower)
Date: Wed, 6 Feb 2019 10:23:38 -0800
Subject: [Python-Dev] About the future of multi-process Python
In-Reply-To: <20190206180606.0dbcd927@fsol>
References: <20190206180606.0dbcd927@fsol>
Message-ID: <dc8b0f46-012f-1e66-3f19-858c6bb6a81f@python.org>

On 06Feb2019 0906, Antoine Pitrou wrote:
> For the record there are number of initiatives currently to boost the
> usefulness and efficiency of multi-process computation in Python.
> 
> One of them is PEP 574 (zero-copy pickling with out-of-band buffers),
> which I'm working on.
> 
> Another is Pierre Glaser's work on allowing pickling of dynamic
> functions and classes with the C-accelerated _pickle module (rather than
> the slow pure Python implementation):
> https://bugs.python.org/issue35900
> https://bugs.python.org/issue35911
> 
> Another is Davin's work on shared memory managers.
> 
> There are also emerging standards like Apache Arrow that provide a
> shared, runtime-agnostic, compute-friendly representation for in-memory
> tabular data, and third-party frameworks like Dask which are
> potentially able to work on top of that and expose nice end-user APIs.
> 
> For maximum synergy between these initiatives and the resulting APIs,
> it is better if things are done in the open ;-)

Hopefully our steering council can determine (or delegate the 
determination of) the direction we should go here so we can all be 
pulling in the same direction :)

That said, there are certainly a number of interacting components and 
not a lot of information about how they interact and overlap. A good 
start would be to identify the likely overlap of this work to see where 
they can build upon each other rather than competing, as well as 
estimating the long-term burden of standardising.

Cheers,
Steve

From steve.dower at python.org  Wed Feb  6 14:15:53 2019
From: steve.dower at python.org (Steve Dower)
Date: Wed, 6 Feb 2019 11:15:53 -0800
Subject: [Python-Dev] CPython on Windows ARM32
In-Reply-To: <q3e7cv$tdp$1@blaine.gmane.org>
References: <CY4PR2101MB080464E8971D5B93F1C94732F96F0@CY4PR2101MB0804.namprd21.prod.outlook.com>
 <bc867b42-03dc-1678-abca-ea1816c84fe0@python.org>
 <CAKJDb-PpB5MPo9tvqGok47xYWFqdZZh3rao8dAUP9EtKrkk-9Q@mail.gmail.com>
 <q3e7cv$tdp$1@blaine.gmane.org>
Message-ID: <ae89069d-8d17-5798-1e1c-09bc5be47e62@python.org>

On 06Feb2019 0054, Terry Reedy wrote:
> On 2/5/2019 10:10 PM, Zachary Ware wrote:
> 
>> I'm all for the first two changes (especially the second), and if 10
>> years of pledged corporate support for a new platform is the price we
>> have to pay for them, I'm ok with that :).
> 
> I would expect that the main question should be the density of 
> WinArm32-specific ifdefs in the main code and extensions other than ctypes.
> 

Agreed. I've asked Paul to post the "final" PR early, even though it 
will take some refactoring as other PRs go in, so that we can see the 
broader picture now.

There's also an option to create an ARM-specific pyconfig.h if 
necessary, but I don't believe it will be.

I created https://bugs.python.org/issue35920 for this work.

Cheers,
Steve

From Paul.Monson at microsoft.com  Wed Feb  6 14:50:45 2019
From: Paul.Monson at microsoft.com (Paul Monson)
Date: Wed, 6 Feb 2019 19:50:45 +0000
Subject: [Python-Dev] CPython on Windows ARM32
In-Reply-To: <ae89069d-8d17-5798-1e1c-09bc5be47e62@python.org>
References: <CY4PR2101MB080464E8971D5B93F1C94732F96F0@CY4PR2101MB0804.namprd21.prod.outlook.com>
 <bc867b42-03dc-1678-abca-ea1816c84fe0@python.org>
 <CAKJDb-PpB5MPo9tvqGok47xYWFqdZZh3rao8dAUP9EtKrkk-9Q@mail.gmail.com>
 <q3e7cv$tdp$1@blaine.gmane.org>
 <ae89069d-8d17-5798-1e1c-09bc5be47e62@python.org>
Message-ID: <CY4PR2101MB0804F56B44B0E09122FF154EF96F0@CY4PR2101MB0804.namprd21.prod.outlook.com>

The PR is here: https://github.com/python/cpython/pull/11774
Searching _M_ARM I see these #ifdef changes outside of ctypes:
* Include\pyport.h  - adds on to existing MSVC ifdef
* Include\pythonrun.h - adds on to existing MSVC ifdef
* Modules\_decimal\libmpdec\bits.h
* Python\ceval.c - workaround compiler bug, could be replaced with #pragma optimize around entire function.

-----Original Message-----
From: Steve Dower <steve.dower at python.org> 
Sent: Wednesday, February 6, 2019 11:16 AM
To: Terry Reedy <tjreedy at udel.edu>; python-dev at python.org; Paul Monson <Paul.Monson at microsoft.com>
Subject: Re: [Python-Dev] CPython on Windows ARM32

On 06Feb2019 0054, Terry Reedy wrote:
> On 2/5/2019 10:10 PM, Zachary Ware wrote:
> 
>> I'm all for the first two changes (especially the second), and if 10 
>> years of pledged corporate support for a new platform is the price we 
>> have to pay for them, I'm ok with that :).
> 
> I would expect that the main question should be the density of 
> WinArm32-specific ifdefs in the main code and extensions other than ctypes.
> 

Agreed. I've asked Paul to post the "final" PR early, even though it will take some refactoring as other PRs go in, so that we can see the broader picture now.

There's also an option to create an ARM-specific pyconfig.h if necessary, but I don't believe it will be.

I created https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fbugs.python.org%2Fissue35920&amp;data=02%7C01%7Cpaul.monson%40microsoft.com%7Cf1e74ec935774410f37008d68c678537%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C1%7C636850773687302395&amp;sdata=OPOHUbWy3%2FFEdjXC5MY8NRMVetZ73Rwo2lsngrLL8rs%3D&amp;reserved=0 for this work.

Cheers,
Steve

From christian at python.org  Wed Feb  6 17:23:50 2019
From: christian at python.org (Christian Heimes)
Date: Wed, 6 Feb 2019 23:23:50 +0100
Subject: [Python-Dev] CPython on Windows ARM32
In-Reply-To: <CY4PR2101MB080464E8971D5B93F1C94732F96F0@CY4PR2101MB0804.namprd21.prod.outlook.com>
References: <CY4PR2101MB080464E8971D5B93F1C94732F96F0@CY4PR2101MB0804.namprd21.prod.outlook.com>
Message-ID: <436fca54-dae6-e5d6-e5e0-42614588c717@python.org>

On 06/02/2019 02.09, Paul Monson via Python-Dev wrote:
> Updating OpenSSL and libffi are independent of ARM support but need to
> be done as prerequisites.? OpenSSL 1.1.0 doesn't have support for ARM32
> on Windows but OpenSSL 1.1.1 does.
> 
> ?
> 
> I have OpenSSL 1.1.1a ready to check in to master with all tests passing
> on x86 and x64 on Windows.? Since work has already been done on this for
> other platforms only very small changes were needed for Windows.

+1 for OpenSSL 1.1.1 from the maintainer of the ssl module. The new
version also introduces TLS 1.3 support. Linux distributions have been
switching to OpenSSL 1.1.1 for a while. If it's good enough for RHEL 8,
then it's good enough for us, too.

Do you want to update Python 3.8 (master) only or also 3.7? I'm not
strictly against updating 3.7. However we have traditionally kept the
OpenSSL version of each branch stable. 1.1.1 comes with new features,
stricter security settings and some ciphers removed.

Christian

From steve.dower at python.org  Wed Feb  6 18:28:05 2019
From: steve.dower at python.org (Steve Dower)
Date: Wed, 6 Feb 2019 15:28:05 -0800
Subject: [Python-Dev] CPython on Windows ARM32
In-Reply-To: <436fca54-dae6-e5d6-e5e0-42614588c717@python.org>
References: <CY4PR2101MB080464E8971D5B93F1C94732F96F0@CY4PR2101MB0804.namprd21.prod.outlook.com>
 <436fca54-dae6-e5d6-e5e0-42614588c717@python.org>
Message-ID: <1c36ef6d-9e54-f78c-9672-7e7beffb2301@python.org>

On 06Feb2019 1423, Christian Heimes wrote:
> Do you want to update Python 3.8 (master) only or also 3.7? I'm not
> strictly against updating 3.7. However we have traditionally kept the
> OpenSSL version of each branch stable. 1.1.1 comes with new features,
> stricter security settings and some ciphers removed.

I would prefer to stay on 1.1.0 for 3.7, but it's up to the release manager.

Cheers,
Steve

From nad at python.org  Wed Feb  6 18:41:03 2019
From: nad at python.org (Ned Deily)
Date: Wed, 6 Feb 2019 18:41:03 -0500
Subject: [Python-Dev] CPython on Windows ARM32
In-Reply-To: <1c36ef6d-9e54-f78c-9672-7e7beffb2301@python.org>
References: <CY4PR2101MB080464E8971D5B93F1C94732F96F0@CY4PR2101MB0804.namprd21.prod.outlook.com>
 <436fca54-dae6-e5d6-e5e0-42614588c717@python.org>
 <1c36ef6d-9e54-f78c-9672-7e7beffb2301@python.org>
Message-ID: <E3DCEF17-74DB-4838-9AC7-A2553979CAA3@python.org>

On Feb 6, 2019, at 18:28, Steve Dower <steve.dower at python.org> wrote:
> On 06Feb2019 1423, Christian Heimes wrote:
>> Do you want to update Python 3.8 (master) only or also 3.7? I'm not
>> strictly against updating 3.7. However we have traditionally kept the
>> OpenSSL version of each branch stable. 1.1.1 comes with new features,
>> stricter security settings and some ciphers removed.
> I would prefer to stay on 1.1.0 for 3.7, but it's up to the release manager.

Me, too.  I am concerned that 1.1.1 support has not had a lot of exposure yet.  Even the "What's New" document for 3.7 states: "The ssl module has preliminary and experimental support for TLS 1.3 and OpenSSL 1.1.1. "

I am OK with fixes for 1.1.1 support but I think it would be premature to change the Windows and/or macOS installers from 1.1.0 to 1.1.1.

--
  Ned Deily
  nad at python.org -- []


From Paul.Monson at microsoft.com  Wed Feb  6 21:58:10 2019
From: Paul.Monson at microsoft.com (Paul Monson)
Date: Thu, 7 Feb 2019 02:58:10 +0000
Subject: [Python-Dev] CPython on Windows ARM32
In-Reply-To: <1c36ef6d-9e54-f78c-9672-7e7beffb2301@python.org>
References: <CY4PR2101MB080464E8971D5B93F1C94732F96F0@CY4PR2101MB0804.namprd21.prod.outlook.com>
 <436fca54-dae6-e5d6-e5e0-42614588c717@python.org>
 <1c36ef6d-9e54-f78c-9672-7e7beffb2301@python.org>
Message-ID: <CY4PR2101MB0804DC49B3D5E69E2405D7ADF9680@CY4PR2101MB0804.namprd21.prod.outlook.com>

Here are the current OpenSSL 1.1.1a changes I have, in a seperate PR
I did some additional testing and have some test failures to investigate tomorrows

test_parse_cert_CVE_2019_5010 only fails win32 debug (access violation)
   works for amd64 debug/release and win32 release

test_load_default_certs_env_windows fails on win32 and amd64 retail.  skipped on debug

-----Original Message-----
From: Steve Dower <steve.dower at python.org> 
Sent: Wednesday, February 6, 2019 3:28 PM
To: Christian Heimes <christian at python.org>; Paul Monson <Paul.Monson at microsoft.com>; python-dev at python.org; Ned Deily <nad at python.org>
Subject: Re: [Python-Dev] CPython on Windows ARM32

On 06Feb2019 1423, Christian Heimes wrote:
> Do you want to update Python 3.8 (master) only or also 3.7? I'm not 
> strictly against updating 3.7. However we have traditionally kept the 
> OpenSSL version of each branch stable. 1.1.1 comes with new features, 
> stricter security settings and some ciphers removed.

I would prefer to stay on 1.1.0 for 3.7, but it's up to the release manager.

Cheers,
Steve

From stephane at wirtel.be  Thu Feb  7 11:16:22 2019
From: stephane at wirtel.be (Stephane Wirtel)
Date: Thu, 7 Feb 2019 17:16:22 +0100
Subject: [Python-Dev] [RELEASE] Python 3.8.0a1 is now available for
 testing
In-Reply-To: <ecf1e24b-538b-2585-e4d2-80994827fd11@gmail.com>
References: <C9EA8FEA-C427-41FD-8566-0201F0AA42EA@langa.pl>
 <20190204130238.GB29197@xps>
 <23ED9695-7715-40DE-9DD5-F6A3C482612F@python.org>
 <20190205102420.GA7969@xps>
 <37A1D61F-AF75-4F66-9279-677505623EDE@python.org>
 <20190206074339.GA23428@xps>
 <ecf1e24b-538b-2585-e4d2-80994827fd11@gmail.com>
Message-ID: <20190207161622.GA29057@xps>

On 02/06, Petr Viktorin wrote:
>On 2/6/19 8:43 AM, Stephane Wirtel wrote:
>>On 02/05, Barry Warsaw wrote:
>>>On Feb 5, 2019, at 02:24, Stephane Wirtel <stephane at wirtel.be> wrote:
>>>You?re welcome!? I just pushed an update to add 3.8.0a1 to the set 
>>>of Python?s (including git head).? Do you think there?s a better 
>>>way to publicize these images?
>>
>>I know that Julien Palard wanted a docker image with all the versions of
>>Python, see: https://github.com/docker-library/python/issues/373
>>
>>For my part, I wanted to propose a docker image with the last version of
>>Python and try to use it for the detection of bugs in the main python
>>projects (django, numpy, flask, pandas, etc...) with a CI (example:
>>Gitlab-CI)
>>
>>First issue: pytest uses the ast module of python and since 3.8.0a1, the
>>tests do not pass -> new issue for pytest
>
>FWIW, we're preparing to rebuild all Fedora packages with the 3.8 
>alphas/betas, so everything's tested when 3.8.0 is released: 
>https://fedoraproject.org/wiki/Changes/Python3.8
Hi Petr,

Will you execute the tests of these packages?

I have a small discussion with Julien Palard and I wanted to create a
small CI where I will execute the tests of the updated packages from
the RSS feed of PyPI.

The first one was pytest


-- 
St?phane Wirtel - https://wirtel.be - @matrixise

From stephane at wirtel.be  Thu Feb  7 11:17:21 2019
From: stephane at wirtel.be (Stephane Wirtel)
Date: Thu, 7 Feb 2019 17:17:21 +0100
Subject: [Python-Dev] [RELEASE] Python 3.8.0a1 is now available for
 testing
In-Reply-To: <d9de0971-9d83-1b2c-0207-be558352c894@gmail.com>
References: <C9EA8FEA-C427-41FD-8566-0201F0AA42EA@langa.pl>
 <20190204130238.GB29197@xps>
 <23ED9695-7715-40DE-9DD5-F6A3C482612F@python.org>
 <20190205102420.GA7969@xps>
 <37A1D61F-AF75-4F66-9279-677505623EDE@python.org>
 <20190206074339.GA23428@xps>
 <ecf1e24b-538b-2585-e4d2-80994827fd11@gmail.com>
 <cf44ac42-b609-886d-1ed3-439213fdeef9@ubuntu.com>
 <d9de0971-9d83-1b2c-0207-be558352c894@gmail.com>
Message-ID: <20190207161721.GB29057@xps>

Sorry Petr,

I didn't see this message with the test suites.

-- 
St?phane Wirtel - https://wirtel.be - @matrixise

From nas-python at arctrix.com  Thu Feb  7 13:19:14 2019
From: nas-python at arctrix.com (Neil Schemenauer)
Date: Thu, 7 Feb 2019 12:19:14 -0600
Subject: [Python-Dev] About the future of multi-process Python
In-Reply-To: <20190206180606.0dbcd927@fsol>
References: <20190206180606.0dbcd927@fsol>
Message-ID: <20190207181914.veoz32gymxrdj2ki@python.ca>

On 2019-02-06, Antoine Pitrou wrote:
> For maximum synergy between these initiatives and the resulting APIs,
> it is better if things are done in the open ;-)

Hi Antoine,

It would be good if we could have some feedback from alternative
Python implementations as well.  I suspect they might want to 
support these APIs.  Doing zero-copy or sharing memory areas could
be a challenge with a compacting GC, for example.  In that case,
having something in the API that tells the VM that a certain chunk
of memory cannot move would be helpful.

Regards,

  Neil

From christian at python.org  Fri Feb  8 05:21:03 2019
From: christian at python.org (Christian Heimes)
Date: Fri, 8 Feb 2019 11:21:03 +0100
Subject: [Python-Dev] CPython on Windows ARM32
In-Reply-To: <E3DCEF17-74DB-4838-9AC7-A2553979CAA3@python.org>
References: <CY4PR2101MB080464E8971D5B93F1C94732F96F0@CY4PR2101MB0804.namprd21.prod.outlook.com>
 <436fca54-dae6-e5d6-e5e0-42614588c717@python.org>
 <1c36ef6d-9e54-f78c-9672-7e7beffb2301@python.org>
 <E3DCEF17-74DB-4838-9AC7-A2553979CAA3@python.org>
Message-ID: <3b7f78b0-89a6-0ce8-5e1e-3c606faf1ce1@python.org>

On 07/02/2019 00.41, Ned Deily wrote:
> On Feb 6, 2019, at 18:28, Steve Dower <steve.dower at python.org> wrote:
>> On 06Feb2019 1423, Christian Heimes wrote:
>>> Do you want to update Python 3.8 (master) only or also 3.7? I'm not
>>> strictly against updating 3.7. However we have traditionally kept the
>>> OpenSSL version of each branch stable. 1.1.1 comes with new features,
>>> stricter security settings and some ciphers removed.
>> I would prefer to stay on 1.1.0 for 3.7, but it's up to the release manager.
> 
> Me, too.  I am concerned that 1.1.1 support has not had a lot of exposure yet.  Even the "What's New" document for 3.7 states: "The ssl module has preliminary and experimental support for TLS 1.3 and OpenSSL 1.1.1. "

That's from the alpha and beta phase of OpenSSL. Support for 1.1.1 is as
stable as it can get.

> I am OK with fixes for 1.1.1 support but I think it would be premature to change the Windows and/or macOS installers from 1.1.0 to 1.1.1.

1.1.1a is a solid release. Debian testing, Fedora, and RHEL 8 beta have
been shipping and testing 1.1.1 for a while. In my professional opinion
it's less about stability but more about backwards compatibility issues.
TLS 1.3 behaves slightly differently and 1.1.1 has dropped some weak
ciphers.

Christian


From encukou at gmail.com  Fri Feb  8 06:21:36 2019
From: encukou at gmail.com (Petr Viktorin)
Date: Fri, 8 Feb 2019 12:21:36 +0100
Subject: [Python-Dev] [RELEASE] Python 3.8.0a1 is now available for
 testing
In-Reply-To: <20190207161622.GA29057@xps>
References: <C9EA8FEA-C427-41FD-8566-0201F0AA42EA@langa.pl>
 <20190204130238.GB29197@xps>
 <23ED9695-7715-40DE-9DD5-F6A3C482612F@python.org> <20190205102420.GA7969@xps>
 <37A1D61F-AF75-4F66-9279-677505623EDE@python.org>
 <20190206074339.GA23428@xps> <ecf1e24b-538b-2585-e4d2-80994827fd11@gmail.com>
 <20190207161622.GA29057@xps>
Message-ID: <b7203272-511b-081b-fff8-9098c40fec6e@gmail.com>

On 2/7/19 5:16 PM, Stephane Wirtel wrote:
> On 02/06, Petr Viktorin wrote:
>> On 2/6/19 8:43 AM, Stephane Wirtel wrote:
>>> On 02/05, Barry Warsaw wrote:
>>>> On Feb 5, 2019, at 02:24, Stephane Wirtel <stephane at wirtel.be> wrote:
>>>> You?re welcome!? I just pushed an update to add 3.8.0a1 to the set 
>>>> of Python?s (including git head).? Do you think there?s a better way 
>>>> to publicize these images?
>>>
>>> I know that Julien Palard wanted a docker image with all the versions of
>>> Python, see: https://github.com/docker-library/python/issues/373
>>>
>>> For my part, I wanted to propose a docker image with the last version of
>>> Python and try to use it for the detection of bugs in the main python
>>> projects (django, numpy, flask, pandas, etc...) with a CI (example:
>>> Gitlab-CI)
>>>
>>> First issue: pytest uses the ast module of python and since 3.8.0a1, the
>>> tests do not pass -> new issue for pytest
>>
>> FWIW, we're preparing to rebuild all Fedora packages with the 3.8 
>> alphas/betas, so everything's tested when 3.8.0 is released: 
>> https://fedoraproject.org/wiki/Changes/Python3.8
> Hi Petr,
> 
> Will you execute the tests of these packages?

It's best practice to include the test suite in Fedora packages.
Sometimes it's not ? e.g. if the tests need network access, or all extra 
testing dependencies aren't available, or most frequently, the 
maintainer is just lazy.
If you have a specific package in mind, I can check. Currently django & 
numpy get tested; flask & pandas don't.

For 3.7, we did the rebuild much later in the cycle. The builds 
themselves caught async/await SyntaxErrors, and tests caught a lot of 
StopIteration leaking. At the time it felt like no one really knew what 
porting to 3.7.0 would look like ? similar to how people didn't think 
"unicode" would be a big problem in py3k. That's what we're trying to 
avoid for 3.8.0.

> I have a small discussion with Julien Palard and I wanted to create a
> small CI where I will execute the tests of the updated packages from
> the RSS feed of PyPI.
>
> The first one was pytest 

That sounds exciting! Something like that is on my "interesting possible 
projects" list, but alas, not at the top :(


From j.castillo.2nd at gmail.com  Fri Feb  8 11:13:34 2019
From: j.castillo.2nd at gmail.com (Javier Castillo II)
Date: Fri, 8 Feb 2019 10:13:34 -0600
Subject: [Python-Dev] find_library and issue21622
Message-ID: <CAGSMmmk17NV76VTgbxVq1iCxPzPUa+wzrm-pzv_t5frHm3vdOQ@mail.gmail.com>

Ran into some issues trying to deploy in an alpine container, where I wound
up coming across the issue. I found a solution ( not sure if an ideal
solution can exist ) that walks the paths in the environment variable
LD_LIBRARY_PATH. This was submitted in github PR 10460, but not sure if
there were any technical issues with this impacting its review.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190208/67a4a7aa/attachment.html>

From solipsis at pitrou.net  Fri Feb  8 12:43:34 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Fri, 8 Feb 2019 18:43:34 +0100
Subject: [Python-Dev] About the future of multi-process Python
In-Reply-To: <20190207181914.veoz32gymxrdj2ki@python.ca>
References: <20190206180606.0dbcd927@fsol>
 <20190207181914.veoz32gymxrdj2ki@python.ca>
Message-ID: <20190208184334.2ba482f4@fsol>

On Thu, 7 Feb 2019 12:19:14 -0600
Neil Schemenauer <nas-python at arctrix.com> wrote:
> On 2019-02-06, Antoine Pitrou wrote:
> > For maximum synergy between these initiatives and the resulting APIs,
> > it is better if things are done in the open ;-)  
> 
> Hi Antoine,
> 
> It would be good if we could have some feedback from alternative
> Python implementations as well.  I suspect they might want to 
> support these APIs.  Doing zero-copy or sharing memory areas could
> be a challenge with a compacting GC, for example.  In that case,
> having something in the API that tells the VM that a certain chunk
> of memory cannot move would be helpful.

Both PEP 574 and Davin's shared-memory work build on top of the
PEP 3118 buffer API.  So I would expect that any Python implementation
with support for the buffer API to have the required infrastructure
to also support those initiatives.  The details may deserve to be
clarified, though. I'll try to send an e-mail and ask for feedback.

Regards

Antoine.

From status at bugs.python.org  Fri Feb  8 13:07:53 2019
From: status at bugs.python.org (Python tracker)
Date: Fri, 08 Feb 2019 18:07:53 +0000
Subject: [Python-Dev] Summary of Python tracker Issues
Message-ID: <20190208180753.1.782F2F2B9AA3561B@roundup.psfhosted.org>


ACTIVITY SUMMARY (2019-02-01 - 2019-02-08)
Python tracker at https://bugs.python.org/

To view or respond to any of the issues listed below, click on the issue.
Do NOT respond to this message.

Issues counts and deltas:
  open    6998 (+13)
  closed 40696 (+47)
  total  47694 (+60)

Open issues with patches: 2783 


Issues opened (43)
==================

#35885: configparser: indentation
https://bugs.python.org/issue35885  opened by mrs.red

#35886: Move PyInterpreterState into Include/internal/pycore_pystate.h
https://bugs.python.org/issue35886  opened by eric.snow

#35887: Doc string for updating the frozen version of importlib in _bo
https://bugs.python.org/issue35887  opened by nnja

#35888: ssl module - could not get the server certificate w/o complete
https://bugs.python.org/issue35888  opened by Lee Eric

#35889: sqlite3.Row doesn't have useful repr
https://bugs.python.org/issue35889  opened by vlad

#35891: urllib.parse.splituser has no suitable replacement
https://bugs.python.org/issue35891  opened by jaraco

#35892: Fix awkwardness of statistics.mode() for multimodal datasets
https://bugs.python.org/issue35892  opened by rhettinger

#35893: distutils fails to build extension on windows when it is a pac
https://bugs.python.org/issue35893  opened by ronaldoussoren

#35898: The TARGETDIR variable must be provided when invoking this ins
https://bugs.python.org/issue35898  opened by Thomas Trummer

#35899: '_is_sunder' function in 'enum' module fails on empty string
https://bugs.python.org/issue35899  opened by Maxpxt

#35900: Add pickler hook for the user to customize the serialization o
https://bugs.python.org/issue35900  opened by pierreglaser

#35901: json.dumps infinite recurssion
https://bugs.python.org/issue35901  opened by MultiSosnooley

#35903: Build of posixshmem.c should probe for required OS functions
https://bugs.python.org/issue35903  opened by nascheme

#35904: Add statistics.fmean(seq)
https://bugs.python.org/issue35904  opened by rhettinger

#35905: macOS build docs need refresh (2019)
https://bugs.python.org/issue35905  opened by jaraco

#35906: Header Injection in urllib
https://bugs.python.org/issue35906  opened by push0ebp

#35907: Unnecessary URL scheme exists to allow file:// reading file  i
https://bugs.python.org/issue35907  opened by push0ebp

#35912: _testembed.c fails to compile when using --with-cxx-main in th
https://bugs.python.org/issue35912  opened by pablogsal

#35913: asyncore: allow handling of half closed connections
https://bugs.python.org/issue35913  opened by Isaac Boukris

#35915: re.search extreme slowness (looks like hang/livelock), searchi
https://bugs.python.org/issue35915  opened by benspiller

#35918: multiprocessing's SyncManager.dict.has_key() method is broken
https://bugs.python.org/issue35918  opened by giampaolo.rodola

#35919: multiprocessing: shared manager Pool fails with AttributeError
https://bugs.python.org/issue35919  opened by giampaolo.rodola

#35920: Windows 10 ARM32 platform support
https://bugs.python.org/issue35920  opened by steve.dower

#35921: Use ccache by default
https://bugs.python.org/issue35921  opened by pitrou

#35922: robotparser crawl_delay and request_rate do not work with no m
https://bugs.python.org/issue35922  opened by joseph_myers

#35923: Update the BuiltinImporter in importlib to use loader._ORIGIN 
https://bugs.python.org/issue35923  opened by nnja

#35924: curses segfault resizing window
https://bugs.python.org/issue35924  opened by Josiah Ulfers

#35925: test_httplib test_nntplib test_ssl fail on ARMv7 Debian buster
https://bugs.python.org/issue35925  opened by pablogsal

#35926: Need openssl 1.1.1 support on Windows for ARM and ARM64
https://bugs.python.org/issue35926  opened by Paul Monson

#35927: Intra-package References Documentation Incomplete
https://bugs.python.org/issue35927  opened by ADataGman

#35928: socket makefile read-write discards received data
https://bugs.python.org/issue35928  opened by pravn

#35930: Raising an exception raised in a "future" instance will create
https://bugs.python.org/issue35930  opened by jcea

#35931: pdb: "debug print(" crashes with SyntaxError
https://bugs.python.org/issue35931  opened by blueyed

#35933: python doc does not say that the state kwarg in Pickler.save_r
https://bugs.python.org/issue35933  opened by pierreglaser

#35934: Add socket.bind_socket() utility function
https://bugs.python.org/issue35934  opened by giampaolo.rodola

#35935: threading.Event().wait() not interruptable with Ctrl-C on Wind
https://bugs.python.org/issue35935  opened by Chris Billington

#35936: Give modulefinder some much-needed updates.
https://bugs.python.org/issue35936  opened by brandtbucher

#35937: Add instancemethod to types.py
https://bugs.python.org/issue35937  opened by bup

#35939: Remove urllib.parse._splittype from mimetypes.guess_type
https://bugs.python.org/issue35939  opened by corona10

#35940: multiprocessing manager tests fail in the Refleaks buildbots
https://bugs.python.org/issue35940  opened by pablogsal

#35941: ssl.enum_certificates() regression
https://bugs.python.org/issue35941  opened by schlenk

#35942: posixmodule.c:path_converter() returns an invalid exception me
https://bugs.python.org/issue35942  opened by lukasz.langa

#35943: PyImport_GetModule() can return partially-initialized module
https://bugs.python.org/issue35943  opened by pitrou



Most recent 15 issues with no replies (15)
==========================================

#35942: posixmodule.c:path_converter() returns an invalid exception me
https://bugs.python.org/issue35942

#35940: multiprocessing manager tests fail in the Refleaks buildbots
https://bugs.python.org/issue35940

#35939: Remove urllib.parse._splittype from mimetypes.guess_type
https://bugs.python.org/issue35939

#35936: Give modulefinder some much-needed updates.
https://bugs.python.org/issue35936

#35934: Add socket.bind_socket() utility function
https://bugs.python.org/issue35934

#35931: pdb: "debug print(" crashes with SyntaxError
https://bugs.python.org/issue35931

#35930: Raising an exception raised in a "future" instance will create
https://bugs.python.org/issue35930

#35928: socket makefile read-write discards received data
https://bugs.python.org/issue35928

#35927: Intra-package References Documentation Incomplete
https://bugs.python.org/issue35927

#35926: Need openssl 1.1.1 support on Windows for ARM and ARM64
https://bugs.python.org/issue35926

#35924: curses segfault resizing window
https://bugs.python.org/issue35924

#35920: Windows 10 ARM32 platform support
https://bugs.python.org/issue35920

#35919: multiprocessing: shared manager Pool fails with AttributeError
https://bugs.python.org/issue35919

#35918: multiprocessing's SyncManager.dict.has_key() method is broken
https://bugs.python.org/issue35918

#35912: _testembed.c fails to compile when using --with-cxx-main in th
https://bugs.python.org/issue35912



Most recent 15 issues waiting for review (15)
=============================================

#35936: Give modulefinder some much-needed updates.
https://bugs.python.org/issue35936

#35934: Add socket.bind_socket() utility function
https://bugs.python.org/issue35934

#35931: pdb: "debug print(" crashes with SyntaxError
https://bugs.python.org/issue35931

#35926: Need openssl 1.1.1 support on Windows for ARM and ARM64
https://bugs.python.org/issue35926

#35922: robotparser crawl_delay and request_rate do not work with no m
https://bugs.python.org/issue35922

#35921: Use ccache by default
https://bugs.python.org/issue35921

#35920: Windows 10 ARM32 platform support
https://bugs.python.org/issue35920

#35913: asyncore: allow handling of half closed connections
https://bugs.python.org/issue35913

#35906: Header Injection in urllib
https://bugs.python.org/issue35906

#35903: Build of posixshmem.c should probe for required OS functions
https://bugs.python.org/issue35903

#35900: Add pickler hook for the user to customize the serialization o
https://bugs.python.org/issue35900

#35887: Doc string for updating the frozen version of importlib in _bo
https://bugs.python.org/issue35887

#35886: Move PyInterpreterState into Include/internal/pycore_pystate.h
https://bugs.python.org/issue35886

#35878: ast.c: end_col_offset may be used uninitialized in this functi
https://bugs.python.org/issue35878

#35876: test_start_new_session for posix_spawnp fails
https://bugs.python.org/issue35876



Top 10 most discussed issues (10)
=================================

#35813: shared memory construct to avoid need for serialization betwee
https://bugs.python.org/issue35813  19 msgs

#35904: Add statistics.fmean(seq)
https://bugs.python.org/issue35904  11 msgs

#35913: asyncore: allow handling of half closed connections
https://bugs.python.org/issue35913  11 msgs

#35921: Use ccache by default
https://bugs.python.org/issue35921   9 msgs

#35706: Make it easier to use a venv with an embedded Python interpret
https://bugs.python.org/issue35706   7 msgs

#35893: distutils fails to build extension on windows when it is a pac
https://bugs.python.org/issue35893   7 msgs

#30670: pprint for dict in sorted order or insert order?
https://bugs.python.org/issue30670   6 msgs

#35907: Unnecessary URL scheme exists to allow file:// reading file  i
https://bugs.python.org/issue35907   6 msgs

#34572: C unpickling bypasses import thread safety
https://bugs.python.org/issue34572   5 msgs

#35933: python doc does not say that the state kwarg in Pickler.save_r
https://bugs.python.org/issue35933   5 msgs



Issues closed (46)
==================

#20001: pathlib inheritance diagram too large
https://bugs.python.org/issue20001  closed by inada.naoki

#22474: No explanation of how a task gets destroyed in asyncio 'task' 
https://bugs.python.org/issue22474  closed by cheryl.sabella

#24087: Documentation doesn't explain the term "coroutine" (PEP 342)
https://bugs.python.org/issue24087  closed by paul.moore

#24209: Allow IPv6 bind in http.server
https://bugs.python.org/issue24209  closed by jaraco

#26256: Fast decimalisation and conversion to other bases
https://bugs.python.org/issue26256  closed by skrah

#27344: zipfile *does* support utf-8 filenames
https://bugs.python.org/issue27344  closed by cheryl.sabella

#29734: os.stat handle leak
https://bugs.python.org/issue29734  closed by steve.dower

#30130: array.array is not an instance of collections.MutableSequence
https://bugs.python.org/issue30130  closed by cheryl.sabella

#32560: [EASY C] inherit the py launcher's STARTUPINFO
https://bugs.python.org/issue32560  closed by steve.dower

#33316: Windows: PyThread_release_lock always fails
https://bugs.python.org/issue33316  closed by steve.dower

#33895: LoadLibraryExW called with GIL held can cause deadlock
https://bugs.python.org/issue33895  closed by steve.dower

#34691: _contextvars missing in xmaster branch Windows build?
https://bugs.python.org/issue34691  closed by steve.dower

#35299: LGHT0091: Duplicate symbol 'File:include_pyconfig.h' found
https://bugs.python.org/issue35299  closed by steve.dower

#35358: Document that importlib.import_module accepts names that are n
https://bugs.python.org/issue35358  closed by matrixise

#35485: tkinter windows turn black while resized using Tk 8.6.9.1 on m
https://bugs.python.org/issue35485  closed by ned.deily

#35605: backported patch requires new sphinx, minimum sphinx version w
https://bugs.python.org/issue35605  closed by ned.deily

#35606: Add prod() function to the math module
https://bugs.python.org/issue35606  closed by rhettinger

#35615: "RuntimeError: Dictionary changed size during iteration" when 
https://bugs.python.org/issue35615  closed by pitrou

#35642: _asynciomodule.c compiled in both pythoncore.vcxproj and _asyn
https://bugs.python.org/issue35642  closed by steve.dower

#35686: BufferError with memory.release()
https://bugs.python.org/issue35686  closed by skrah

#35692: pathlib.Path.exists() on non-existent drive raises WinError in
https://bugs.python.org/issue35692  closed by steve.dower

#35758: Disable x87 control word for MSVC ARM compiler
https://bugs.python.org/issue35758  closed by Minmin.Gong

#35851: Make search result in online docs keep their position when sea
https://bugs.python.org/issue35851  closed by xtreak

#35861: test_named_expressions raises SyntaxWarning
https://bugs.python.org/issue35861  closed by emilyemorehouse

#35862: Change the environment for a new process
https://bugs.python.org/issue35862  closed by steve.dower

#35872: Creating venv from venv no longer works in 3.7.2
https://bugs.python.org/issue35872  closed by steve.dower

#35873: Controlling venv from venv no longer works in 3.7.2
https://bugs.python.org/issue35873  closed by steve.dower

#35877: parenthesis is mandatory for named expressions in while statem
https://bugs.python.org/issue35877  closed by emilyemorehouse

#35879: test_type_comments leaks references
https://bugs.python.org/issue35879  closed by gvanrossum

#35884: Add variable access benchmark to Tools/Scripts
https://bugs.python.org/issue35884  closed by rhettinger

#35890: Cleanup some non-consistent API callings
https://bugs.python.org/issue35890  closed by steve.dower

#35894: Apparent regression in 3.8-dev: 'TypeError: required field "ty
https://bugs.python.org/issue35894  closed by gvanrossum

#35895: the test suite of pytest failed with 3.8.0a1
https://bugs.python.org/issue35895  closed by gvanrossum

#35896: sysconfig.get_platform returns wrong value when Python 32b is 
https://bugs.python.org/issue35896  closed by steve.dower

#35897: Support list as argument to .startswith()
https://bugs.python.org/issue35897  closed by rhettinger

#35902: Forking from background thread
https://bugs.python.org/issue35902  closed by pitrou

#35908: build with building extension modules as builtins is broken in
https://bugs.python.org/issue35908  closed by doko

#35909: Zip Slip Vulnerability
https://bugs.python.org/issue35909  closed by christian.heimes

#35910: Curious problem with my choice of variables
https://bugs.python.org/issue35910  closed by matrixise

#35911: add a cell construtor, and expose the cell type in Lib/types.p
https://bugs.python.org/issue35911  closed by pitrou

#35914: [2.7] PyStructSequence objects not behaving like nametuple
https://bugs.python.org/issue35914  closed by eric.snow

#35916: 3.6.5 try/except/else/finally block executes code with typos, 
https://bugs.python.org/issue35916  closed by SilentGhost

#35917: multiprocessing: provide unit-tests for manager classes and sh
https://bugs.python.org/issue35917  closed by pitrou

#35929: Spam
https://bugs.python.org/issue35929  closed by Mariatta

#35932: Interpreter gets stuck while applying a regex pattern
https://bugs.python.org/issue35932  closed by tim.peters

#35938: crash of METADATA file cannot be fixed by reinstall of python
https://bugs.python.org/issue35938  closed by steven.daprano

From aixtools at felt.demon.nl  Sat Feb  9 09:45:58 2019
From: aixtools at felt.demon.nl (Michael Felt (aixtools))
Date: Sat, 9 Feb 2019 14:45:58 +0000
Subject: [Python-Dev] =?utf-8?q?Python_3=2E8_alpha_and_AIX_buildbot_?=
 =?utf-8?b?4oCcc3VwcG9ydOKAnSBtb3ZpbmcgZm9yd2FyZC4=?=
Message-ID: <FB5EDB4F-B547-4D32-B750-51D6964C04DF@felt.demon.nl>

Congratulations on the official begin of the alpha phase of Python3-3.8. 

I hope there will be time to consider three of my PRs so that this phase has at least one of the AIX buildbots (not mine I fear) is passing all the tests and can finally serve it?s real purpose and signal when a change toggles it?s status from PASS to FAIL. 

Next week I hope to have some time to dig deeper and try to establish why my bot fails additional tests (in the multiprocessing module(s)) as well why AIX fails test_bdb when utf8 support is (additionally) installed but passes when utf8 support is not installed. 

While I am also concerned about AIX status I also hope that my inspection is helping to improve Python. 

Sincerely,
Michael

Sent from my iPhone
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190209/5a4d59c9/attachment.html>

From vstinner at redhat.com  Mon Feb 11 06:18:45 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Mon, 11 Feb 2019 12:18:45 +0100
Subject: [Python-Dev] find_library and issue21622
In-Reply-To: <CAGSMmmk17NV76VTgbxVq1iCxPzPUa+wzrm-pzv_t5frHm3vdOQ@mail.gmail.com>
References: <CAGSMmmk17NV76VTgbxVq1iCxPzPUa+wzrm-pzv_t5frHm3vdOQ@mail.gmail.com>
Message-ID: <CA+3bQGE0=3Ffb-eKUNeFNTCC3TC-8kQfdezp1OdkL0kjLu=yUg@mail.gmail.com>

Hi,

Would you mind to elaborate "some issues trying to deploy in an alpine
container"? What are you trying to do? What is the error message?

Some more context:

* https://github.com/python/cpython/pull/10460 "bpo-21622: ctypes.util
find_library walk LD_LIBRARY_PATH"
* https://bugs.python.org/issue21622 reported in 2014: "ctypes.util
incorrectly fails for libraries without DT_SONAME"

Victor

Le ven. 8 f?vr. 2019 ? 17:27, Javier Castillo II
<j.castillo.2nd at gmail.com> a ?crit :
>
> Ran into some issues trying to deploy in an alpine container, where I wound up coming across the issue. I found a solution ( not sure if an ideal solution can exist ) that walks the paths in the environment variable LD_LIBRARY_PATH. This was submitted in github PR 10460, but not sure if there were any technical issues with this impacting its review.
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe: https://mail.python.org/mailman/options/python-dev/vstinner%40redhat.com



-- 
Night gathers, and now my watch begins. It shall not end until my death.

From j.castillo.2nd at gmail.com  Mon Feb 11 15:50:15 2019
From: j.castillo.2nd at gmail.com (Javier Castillo II)
Date: Mon, 11 Feb 2019 14:50:15 -0600
Subject: [Python-Dev] find_library and issue21622
In-Reply-To: <CA+3bQGE0=3Ffb-eKUNeFNTCC3TC-8kQfdezp1OdkL0kjLu=yUg@mail.gmail.com>
References: <CAGSMmmk17NV76VTgbxVq1iCxPzPUa+wzrm-pzv_t5frHm3vdOQ@mail.gmail.com>
 <CA+3bQGE0=3Ffb-eKUNeFNTCC3TC-8kQfdezp1OdkL0kjLu=yUg@mail.gmail.com>
Message-ID: <CAGSMmm=JPAWLM6Uu4u+1XKCmx+oSvEO9vKcrVC5V5_zqMJ776g@mail.gmail.com>

This is the overarching issue:
https://github.com/docker-library/python/issues/111

In short, libraries that rely on find_library to bind to libs failed to
start as find_library returned nothing. In particular, a build of python
and saltstack in a single container, and a few other packages when using
the alpine base.

On Mon, Feb 11, 2019 at 5:18 AM Victor Stinner <vstinner at redhat.com> wrote:

> Hi,
>
> Would you mind to elaborate "some issues trying to deploy in an alpine
> container"? What are you trying to do? What is the error message?
>
> Some more context:
>
> * https://github.com/python/cpython/pull/10460 "bpo-21622: ctypes.util
> find_library walk LD_LIBRARY_PATH"
> * https://bugs.python.org/issue21622 reported in 2014: "ctypes.util
> incorrectly fails for libraries without DT_SONAME"
>
> Victor
>
> Le ven. 8 f?vr. 2019 ? 17:27, Javier Castillo II
> <j.castillo.2nd at gmail.com> a ?crit :
> >
> > Ran into some issues trying to deploy in an alpine container, where I
> wound up coming across the issue. I found a solution ( not sure if an ideal
> solution can exist ) that walks the paths in the environment variable
> LD_LIBRARY_PATH. This was submitted in github PR 10460, but not sure if
> there were any technical issues with this impacting its review.
> > _______________________________________________
> > Python-Dev mailing list
> > Python-Dev at python.org
> > https://mail.python.org/mailman/listinfo/python-dev
> > Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/vstinner%40redhat.com
>
>
>
> --
> Night gathers, and now my watch begins. It shall not end until my death.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190211/a4a6f518/attachment.html>

From J.Demeyer at UGent.be  Mon Feb 11 17:52:37 2019
From: J.Demeyer at UGent.be (Jeroen Demeyer)
Date: Mon, 11 Feb 2019 23:52:37 +0100
Subject: [Python-Dev] Reviewing PEP 580
Message-ID: <5C61FCB5.80804@UGent.be>

Hello,

I would like to propose to the new steering council to review PEP 580. 
Is there already a process for that?


Thanks,
Jeroen.

From turnbull.stephen.fw at u.tsukuba.ac.jp  Mon Feb 11 22:27:26 2019
From: turnbull.stephen.fw at u.tsukuba.ac.jp (Stephen J. Turnbull)
Date: Tue, 12 Feb 2019 12:27:26 +0900
Subject: [Python-Dev] Reviewing PEP 580
In-Reply-To: <5C61FCB5.80804@UGent.be>
References: <5C61FCB5.80804@UGent.be>
Message-ID: <23650.15646.542253.859787@turnbull.sk.tsukuba.ac.jp>

Jeroen Demeyer writes:

 > I would like to propose to the new steering council to review PEP 580. 
 > Is there already a process for that?

I hope we can start with "same as it ever was."  Looking at the list,
it's not like anything needs to change immediately.  Guido, Barry,
Nick, and Brett have all been extremely active in general governance
as well as the PEP process.  They know what they're doing, but the
Council is new.  It will take some time to get going.  Carol has not
been so prominent on these lists, but I bet she has ideas -- they all
have ideas.  But ideas take time to implement.

They're also all very busy.  They are not experts in everything --
even Guido has been happy to delegate because he acknowledges that
there are people who know more about specific requirements and
implementations than he does.  Delegation is explictly permitted in
the Steering Council model.  At least at the start, it should be
employed while the Council is figuring out their own business, IMO.

So, has has this been done in the past?  For many PEPs, the pattern
has been

1.  Proponent(s) write PEP, discuss on -ideas.
2.  Proponent(s) stick a fork in it, it's done enough.  Either the
    BDFL Delegate is obvious from the discussion, or they negotiate
    with somebody, and propose a delegate.
3.  Guido decides, including anointing a delegate if he wants.  On
    Reject -- stop.
    Half-baked -- go to 1.  (Never seen an inappropriate delegate
        proposed.)
    Approve -- go to 4.
4.  Delegate, with the help of (usually) python-dev or some
    appropriate SIG, picks over the PEP and comes up with an
    implementation plan.
5.  When brown and toasty (but not perfect, nothing ever is) delegate
    accepts, proponent commits, and the beta testers get to work.

This is *good enough*, with the exception of s/Guido/Council/ in Step
3 -- for now.  I'm sure it will evolve.

I'm not proposing the following as an application form to be adopted.
The Council knows what they need, they'll come up with something in
due time.  In view of the stylized process above, I believe this
format will help speed things up for proponents and relieve some of
the burden on the Council at this time when things are still pretty
fluid:

    Hi, I'm the proponent of PEP 666 "Adding Perl ~ Regexp Operators
    to Python", along with Mad Max, who is doing most of the
    implementation.  We've been discussing the PEP on Python Ideas,
    and we've believe it's ready for pronouncement.  Max is by far the
    most informed about the API and implementation, and is well-
    qualified to be Delegate.  Rufus T Firefly has been deeply
    involved in the discussion, is very expert, and would also be a
    good delegate.

With apologies to the real PEP 666, which I'm pretty sure exists and
has nothing to do with Perl or regexps. :-)

Of course one could go on to give more information, a full status
report, open issues that the delegate or Council should decide, etc.
But a lot of that could also be left for the delegate to deal with --
the only thing the Council *must* do is pick a supervisor for the
approval process, and this format helps with that.

Also, the Council might decide they're not confident in any of the
candidates for delegate (or it's an empty set), and pick a different
person or do it themselves.  If they do it themselves, I'm sure it
will be for good reason, but it's likely to take more time than if
there's a single delegate.  Proponents will need to be prepared to
accept that outcome.

I am not criticizing Jeroen here.  I'm a social scientist -- group,
and especially organization, dynamics are what I think about all day
every day.  Rather, Jeroen's post was a good thing -- "hey, we've done
stuff! now how do we get it in?"  If he didn't post, given the above,
why would that particular PEP get attention?  The Council is not
necessarily on top of the progress of every PEP!  I am merely
suggesting some additional information to help move things along.

Y'r ob'd't servant,



-- 
Associate Professor              Division of Policy and Planning Science
http://turnbull.sk.tsukuba.ac.jp/     Faculty of Systems and Information
Email: turnbull at sk.tsukuba.ac.jp                   University of Tsukuba
Tel: 029-853-5175                 Tennodai 1-1-1, Tsukuba 305-8573 JAPAN

From ncoghlan at gmail.com  Tue Feb 12 07:49:39 2019
From: ncoghlan at gmail.com (Nick Coghlan)
Date: Tue, 12 Feb 2019 22:49:39 +1000
Subject: [Python-Dev] Reviewing PEP 580
In-Reply-To: <5C61FCB5.80804@UGent.be>
References: <5C61FCB5.80804@UGent.be>
Message-ID: <CADiSq7dAyt-21-GR_=CD80bX5LupZVR-6i8e8Sq+5srdCj79=A@mail.gmail.com>

On Tue., 12 Feb. 2019, 9:04 am Jeroen Demeyer <J.Demeyer at ugent.be wrote:

> Hello,
>
> I would like to propose to the new steering council to review PEP 580.
> Is there already a process for that?
>

Hi Jeroen,

We're still considering the details of how PEP 1 is going to be adjusted
for a Steering Council rather than a BDFL.

Once the Council members are clear on how *we* think that should work
(probably via discussion on a draft PR against PEP 1), then python-dev will
be the first to know.

Cheers,
Nick.


>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190212/f6fedf22/attachment.html>

From liu.denton at gmail.com  Tue Feb 12 05:08:35 2019
From: liu.denton at gmail.com (Denton Liu)
Date: Tue, 12 Feb 2019 02:08:35 -0800
Subject: [Python-Dev] [docs] [issue35155] Requesting a review
Message-ID: <20190212100835.GA28426@archbookpro.localdomain>

Hello all,

A couple months back, I reported bpo-35155[1] and I submitted a PR for
it[2]. After a couple of reviews, it seems like progress has stalled.
Would it be possible for someone to review this?

Thanks,

Denton

[1]: https://bugs.python.org/issue35155
[2]: https://github.com/python/cpython/pull/10313

From liu.denton at gmail.com  Tue Feb 12 05:14:55 2019
From: liu.denton at gmail.com (Denton Liu)
Date: Tue, 12 Feb 2019 02:14:55 -0800
Subject: [Python-Dev] [bpo-35155] Requesting a review
Message-ID: <20190212101455.GA29427@archbookpro.localdomain>

Hello all,

A couple months back, I reported bpo-35155[1] and I submitted a PR for
consideration[2]. After a couple of reviews, it seems like progress has
stalled. Would it be possible for someone to review this?

Thanks,

Denton

[1]: https://bugs.python.org/issue35155
[2]: https://github.com/python/cpython/pull/10313

From tjreedy at udel.edu  Tue Feb 12 15:24:03 2019
From: tjreedy at udel.edu (Terry Reedy)
Date: Tue, 12 Feb 2019 15:24:03 -0500
Subject: [Python-Dev] [bpo-35155] Requesting a review
In-Reply-To: <20190212101455.GA29427@archbookpro.localdomain>
References: <20190212101455.GA29427@archbookpro.localdomain>
Message-ID: <q3va15$3eq1$1@blaine.gmane.org>

On 2/12/2019 5:14 AM, Denton Liu wrote:
> Hello all,
> 
> A couple months back, I reported bpo-35155[1] and I submitted a PR for
> consideration[2]. After a couple of reviews, it seems like progress has
> stalled. Would it be possible for someone to review this?
> 
> Thanks,
> 
> Denton
> 
> [1]: https://bugs.python.org/issue35155
> [2]: https://github.com/python/cpython/pull/10313

The problem is that the urllib.request doc has several 
'placeholder-literal' and 'literal-placeholder' constructs where 
'literal' is text that the user *must copy* while 'placeholder' is text 
that the user *must replace* with one of several strings, with no 
evident indication of which is which.  (The constructs indicate possible 
allowed names of user-supplied functions.)  The only issue to me is how 
to indicate in the .rst source (and resulting html) that 'placeholder' 
is a placeholder and not a literal.


-- 
Terry Jan Reedy


From tjreedy at udel.edu  Tue Feb 12 15:31:36 2019
From: tjreedy at udel.edu (Terry Reedy)
Date: Tue, 12 Feb 2019 15:31:36 -0500
Subject: [Python-Dev] [bpo-35155] Requesting a review
In-Reply-To: <q3va15$3eq1$1@blaine.gmane.org>
References: <20190212101455.GA29427@archbookpro.localdomain>
 <q3va15$3eq1$1@blaine.gmane.org>
Message-ID: <q3vafa$4faa$1@blaine.gmane.org>

On 2/12/2019 3:24 PM, Terry Reedy wrote:

> The problem is that the urllib.request doc has several 
> 'placeholder-literal' and 'literal-placeholder' constructs where 

Correction: The result must be a legal function name, so that should be 
'placeholder_literal' and 'literal_placeholder', where the '_' is part 
of the literal.

-- 
Terry Jan Reedy


From benjamin at python.org  Tue Feb 12 23:45:03 2019
From: benjamin at python.org (Benjamin Peterson)
Date: Tue, 12 Feb 2019 23:45:03 -0500
Subject: [Python-Dev] 2.7.16 release dates
Message-ID: <b90c08b3-98d5-4cc4-8cae-20e16f92b8ab@www.fastmail.com>

Greetings,
I've set the dates for the 2.7.16 release in PEP 373. The release candidate will happen on February 16 with a final release 2 weeks later on March 2 if all goes well.

Servus,
Benjamin

From g.rodola at gmail.com  Wed Feb 13 07:24:53 2019
From: g.rodola at gmail.com (Giampaolo Rodola')
Date: Wed, 13 Feb 2019 13:24:53 +0100
Subject: [Python-Dev] Adding test.support.safe_rmpath()
Message-ID: <CAFYqXL-UsoJ582AKjvtx7gowqE6_CPwMQdoQRyp+9TzEO5002w@mail.gmail.com>

Hello,
after discovering os.makedirs() has no unit-tests (
https://bugs.python.org/issue35982) I was thinking about working on a PR to
increase the test coverage of fs-related os.* functions. In order to do so
I think it would be useful to add a convenience function to "just delete
something if it exists", regardless if it's a file, directory, directory
tree, etc., and include it into test.support module. Basically it would be
very similar to "rm -rf". I use something like this into psutil:
https://github.com/giampaolo/psutil/blob/3ea94c1b8589891a8d1a5781f0445cb5080b7c3e/psutil/tests/__init__.py#L696
I find this paradigm especially useful when testing functions involving two
files ("src" and "dst"). E.g. in case of os.renames() unit-tests I would
write something like this:


class RenamesTest(unittest.TestCase):
    srcname = support.TESTFN
    dstname = support.TESTFN + '2'

    def setUp(self):
        test.support.rmpath(self.srcname)
        test.support.rmpath(self.dstname)
    tearDown = setUp

    def test_rename_file(self):
        ...
    def test_rename_dir(self):
        ...
    def test_rename_failure(self):
        # both src and dst will not exist
        ...

With the current utilities included in test.support the setUp function
above would be written as such:

    def setUp(self):
        for path in (self.srcname, self.dstname):
            if os.path.isdir(path):
                test.support.rmtree(path)
            elif os.path.exists(path):
                test.support.unlink(path)

Extra: one may argue whether this utility could be included into shutil
module instead. The extra advantage of test.support.rmtree and
test.support.unlink though, is that on Windows they use a timeout, catching
"file is currently in use" exceptions for some time before giving up. That
IMO would probably make this utility function not palatable for inclusion
into shutil module, so test.support would probably be a better landing
place.

Thoughts?

-- 
Giampaolo - http://grodola.blogspot.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190213/9051fcaa/attachment.html>

From ronaldoussoren at mac.com  Wed Feb 13 08:27:06 2019
From: ronaldoussoren at mac.com (Ronald Oussoren)
Date: Wed, 13 Feb 2019 14:27:06 +0100
Subject: [Python-Dev] Adding test.support.safe_rmpath()
In-Reply-To: <CAFYqXL-UsoJ582AKjvtx7gowqE6_CPwMQdoQRyp+9TzEO5002w@mail.gmail.com>
References: <CAFYqXL-UsoJ582AKjvtx7gowqE6_CPwMQdoQRyp+9TzEO5002w@mail.gmail.com>
Message-ID: <7AF16DF0-A237-44B7-B272-7427CB5AD5B0@mac.com>



> On 13 Feb 2019, at 13:24, Giampaolo Rodola' <g.rodola at gmail.com> wrote:
> 
> 
> Hello,
> after discovering os.makedirs() has no unit-tests (https://bugs.python.org/issue35982 <https://bugs.python.org/issue35982>) I was thinking about working on a PR to increase the test coverage of fs-related os.* functions. In order to do so I think it would be useful to add a convenience function to "just delete something if it exists", regardless if it's a file, directory, directory tree, etc., and include it into test.support module.

Something like shutil.rmtree() with ignore_errors=True?

Ronald
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190213/e6d86cd7/attachment.html>

From vstinner at redhat.com  Wed Feb 13 08:32:25 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Wed, 13 Feb 2019 14:32:25 +0100
Subject: [Python-Dev] Adding test.support.safe_rmpath()
In-Reply-To: <CAFYqXL-UsoJ582AKjvtx7gowqE6_CPwMQdoQRyp+9TzEO5002w@mail.gmail.com>
References: <CAFYqXL-UsoJ582AKjvtx7gowqE6_CPwMQdoQRyp+9TzEO5002w@mail.gmail.com>
Message-ID: <CA+3bQGFSMaOGvw3p3hQG2Jqj_m3cUuLo16AdAUYKnPnFHjE6kA@mail.gmail.com>

Bikeshedding: I suggest to remove "safe_" from the name, it's hard to
guarantee that removal is "safe", especially on Windows where a
removal can be blocked for many reasons.

Victor

Le mer. 13 f?vr. 2019 ? 13:28, Giampaolo Rodola' <g.rodola at gmail.com> a ?crit :
>
>
> Hello,
> after discovering os.makedirs() has no unit-tests (https://bugs.python.org/issue35982) I was thinking about working on a PR to increase the test coverage of fs-related os.* functions. In order to do so I think it would be useful to add a convenience function to "just delete something if it exists", regardless if it's a file, directory, directory tree, etc., and include it into test.support module. Basically it would be very similar to "rm -rf". I use something like this into psutil:
> https://github.com/giampaolo/psutil/blob/3ea94c1b8589891a8d1a5781f0445cb5080b7c3e/psutil/tests/__init__.py#L696
> I find this paradigm especially useful when testing functions involving two files ("src" and "dst"). E.g. in case of os.renames() unit-tests I would write something like this:
>
>
> class RenamesTest(unittest.TestCase):
>     srcname = support.TESTFN
>     dstname = support.TESTFN + '2'
>
>     def setUp(self):
>         test.support.rmpath(self.srcname)
>         test.support.rmpath(self.dstname)
>     tearDown = setUp
>
>     def test_rename_file(self):
>         ...
>     def test_rename_dir(self):
>         ...
>     def test_rename_failure(self):
>         # both src and dst will not exist
>         ...
>
> With the current utilities included in test.support the setUp function above would be written as such:
>
>     def setUp(self):
>         for path in (self.srcname, self.dstname):
>             if os.path.isdir(path):
>                 test.support.rmtree(path)
>             elif os.path.exists(path):
>                 test.support.unlink(path)
>
> Extra: one may argue whether this utility could be included into shutil module instead. The extra advantage of test.support.rmtree and test.support.unlink though, is that on Windows they use a timeout, catching "file is currently in use" exceptions for some time before giving up. That IMO would probably make this utility function not palatable for inclusion into shutil module, so test.support would probably be a better landing place.
>
> Thoughts?
>
> --
> Giampaolo - http://grodola.blogspot.com
>
>
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe: https://mail.python.org/mailman/options/python-dev/vstinner%40redhat.com



-- 
Night gathers, and now my watch begins. It shall not end until my death.

From g.rodola at gmail.com  Wed Feb 13 10:10:48 2019
From: g.rodola at gmail.com (Giampaolo Rodola')
Date: Wed, 13 Feb 2019 16:10:48 +0100
Subject: [Python-Dev] Adding test.support.safe_rmpath()
In-Reply-To: <7AF16DF0-A237-44B7-B272-7427CB5AD5B0@mac.com>
References: <CAFYqXL-UsoJ582AKjvtx7gowqE6_CPwMQdoQRyp+9TzEO5002w@mail.gmail.com>
 <7AF16DF0-A237-44B7-B272-7427CB5AD5B0@mac.com>
Message-ID: <CAFYqXL_-nyTX98+XzaL37X5sOQgX=w-gpttoFxJa2j+15d0JvQ@mail.gmail.com>

On Wed, Feb 13, 2019 at 2:27 PM Ronald Oussoren <ronaldoussoren at mac.com>
wrote:

>
>
> On 13 Feb 2019, at 13:24, Giampaolo Rodola' <g.rodola at gmail.com> wrote:
>
>
> Hello,
> after discovering os.makedirs() has no unit-tests (
> https://bugs.python.org/issue35982) I was thinking about working on a PR
> to increase the test coverage of fs-related os.* functions. In order to do
> so I think it would be useful to add a convenience function to "just delete
> something if it exists", regardless if it's a file, directory, directory
> tree, etc., and include it into test.support module.
>
>
> Something like shutil.rmtree() with ignore_errors=True?
>

shutil.rmtree() is about directories and can't be used against files.
support.rmpath() would take a path (meaning anything) and try to remove it.

-- 
Giampaolo - http://grodola.blogspot.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190213/bdfddcc7/attachment.html>

From g.rodola at gmail.com  Wed Feb 13 10:12:38 2019
From: g.rodola at gmail.com (Giampaolo Rodola')
Date: Wed, 13 Feb 2019 16:12:38 +0100
Subject: [Python-Dev] Adding test.support.safe_rmpath()
In-Reply-To: <CA+3bQGFSMaOGvw3p3hQG2Jqj_m3cUuLo16AdAUYKnPnFHjE6kA@mail.gmail.com>
References: <CAFYqXL-UsoJ582AKjvtx7gowqE6_CPwMQdoQRyp+9TzEO5002w@mail.gmail.com>
 <CA+3bQGFSMaOGvw3p3hQG2Jqj_m3cUuLo16AdAUYKnPnFHjE6kA@mail.gmail.com>
Message-ID: <CAFYqXL8Wvcb=XuEgV1CX8SnKJTida_ys21qBiCP8TfO=nUJ_6Q@mail.gmail.com>

On Wed, Feb 13, 2019 at 2:32 PM Victor Stinner <vstinner at redhat.com> wrote:

> Bikeshedding: I suggest to remove "safe_" from the name, it's hard to
> guarantee that removal is "safe", especially on Windows where a
> removal can be blocked for many reasons.
>
> Victor
>

Agree. I actually meant "rmpath()" (which I used in my examples) but I
mispelled that in the mail title. =)


-- 
Giampaolo - http://grodola.blogspot.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190213/bfbe2e58/attachment.html>

From encukou at gmail.com  Wed Feb 13 10:24:48 2019
From: encukou at gmail.com (Petr Viktorin)
Date: Wed, 13 Feb 2019 16:24:48 +0100
Subject: [Python-Dev] Another update for PEP 394 -- The "python" Command on
 Unix-Like Systems
Message-ID: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>

PEP 394 says:

 > This recommendation will be periodically reviewed over the next few
 > years, and updated when the core development team judges it
 > appropriate. As a point of reference, regular maintenance releases
 > for the Python 2.7 series will continue until at least 2020.

I think it's time for another review.
I'm especially worried about the implication of these:

- If the `python` command is installed, it should invoke the same
   version of Python as the `python2` command
- scripts that are deliberately written to be source compatible
   with both Python 2.x and 3.x [...] may continue to use `python` on
   their shebang line.

So, to support scripts that adhere to the recommendation, Python 2
needs to be installed :(


Please see this PR for details and a suggested change: 
https://github.com/python/peps/pull/893

From solipsis at pitrou.net  Wed Feb 13 10:46:03 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Wed, 13 Feb 2019 16:46:03 +0100
Subject: [Python-Dev] Another update for PEP 394 -- The "python" Command
 on Unix-Like Systems
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
Message-ID: <20190213164603.3894316f@fsol>

On Wed, 13 Feb 2019 16:24:48 +0100
Petr Viktorin <encukou at gmail.com> wrote:
> PEP 394 says:
> 
>  > This recommendation will be periodically reviewed over the next few
>  > years, and updated when the core development team judges it
>  > appropriate. As a point of reference, regular maintenance releases
>  > for the Python 2.7 series will continue until at least 2020.  
> 
> I think it's time for another review.
> I'm especially worried about the implication of these:
> 
> - If the `python` command is installed, it should invoke the same
>    version of Python as the `python2` command
> - scripts that are deliberately written to be source compatible
>    with both Python 2.x and 3.x [...] may continue to use `python` on
>    their shebang line.
> 
> So, to support scripts that adhere to the recommendation, Python 2
> needs to be installed :(

I think PEP 394 should acknowledge that there are now years of
established usage of `python` as Python 3 for many conda users.

Regards

Antoine.



From encukou at gmail.com  Wed Feb 13 11:18:15 2019
From: encukou at gmail.com (Petr Viktorin)
Date: Wed, 13 Feb 2019 17:18:15 +0100
Subject: [Python-Dev] Another update for PEP 394 -- The "python" Command
 on Unix-Like Systems
In-Reply-To: <20190213164603.3894316f@fsol>
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
 <20190213164603.3894316f@fsol>
Message-ID: <32650e90-45d2-633f-c309-51518657aa2b@gmail.com>

On 2/13/19 4:46 PM, Antoine Pitrou wrote:
> On Wed, 13 Feb 2019 16:24:48 +0100
> Petr Viktorin <encukou at gmail.com> wrote:
>> PEP 394 says:
>>
>>   > This recommendation will be periodically reviewed over the next few
>>   > years, and updated when the core development team judges it
>>   > appropriate. As a point of reference, regular maintenance releases
>>   > for the Python 2.7 series will continue until at least 2020.
>>
>> I think it's time for another review.
>> I'm especially worried about the implication of these:
>>
>> - If the `python` command is installed, it should invoke the same
>>     version of Python as the `python2` command
>> - scripts that are deliberately written to be source compatible
>>     with both Python 2.x and 3.x [...] may continue to use `python` on
>>     their shebang line.
>>
>> So, to support scripts that adhere to the recommendation, Python 2
>> needs to be installed :(
> 
> I think PEP 394 should acknowledge that there are now years of
> established usage of `python` as Python 3 for many conda users.

The intention is that Conda environments are treated the same as venv 
environments, i.e.:

When a virtual environment (created by the PEP 405 venv package or a 
similar tool) is active, the python command should refer to the virtual 
environment's interpreter. In other words, activating a virtual 
environment counts as deliberate user action to change the default 
python interpreter.


Do you think conda should be listed explicitly along with venv?

From vstinner at redhat.com  Wed Feb 13 11:20:55 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Wed, 13 Feb 2019 17:20:55 +0100
Subject: [Python-Dev] Another update for PEP 394 -- The "python" Command
 on Unix-Like Systems
In-Reply-To: <20190213164603.3894316f@fsol>
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
 <20190213164603.3894316f@fsol>
Message-ID: <CA+3bQGEQgjKOCkpK=nZ1V2abRzgvdM3oKWnOSmRVX8nTk9ctsg@mail.gmail.com>

Hi,

I'm a (strong) supporter of providing a "python" command which would
be the latest Python version!

As php does nowadays (after previous issues with "php4" vs "php5".) I
don't recall that perl had "perl4" vs "perl5", the command was always
"perl", no? Same for Ruby: it was still "ruby" after for Ruby 2, no?
Only Python and PHP used different program names depending on the
language version, no? And PHP now moved back to a single "php"
program.

In the container and virtualenv era, it's now easy to get your
favorite Python version for the "python" command.

On my Windows VM, "python" is Python 3.7 :-) In virtual environments,
"python" can also be Python 3 as well.

I recall that I saw commands using "python" rather than "python3" in
the *official* Python 3 documentation: see examples below (*).
Problem: On Windows, "python" is the right command. "python3" doesn't
work (doesn't exist) on Windows. Should we write the doc for Windows
or for Unix? Oooops.

There was an interesting discussion about the Python version following
Python 3.9: Python 3.10 or Python 4? And what are the issues which
would make us prefer 3.10 rather than 4.0?
https://mail.python.org/pipermail/python-committers/2018-September/006152.html

One practical issue is that right now, six.PY3 is defined by "PY3 =
sys.version_info[0] == 3" and so "if six.PY3:" will be false on Python
4.

Another interesting thing to mention is the Unix Python launcher
("py") written by Brett Cannon written in Rust:
https://github.com/brettcannon/python-launcher


(*) A few examples of "python" commands in the Python official documentation

"$ python prog.py -h"
https://docs.python.org/dev/library/argparse.html

"$ python logctx.py"
https://docs.python.org/dev/howto/logging-cookbook.html

"python setup.py install"
https://docs.python.org/dev/install/index.html

"python --help"
https://docs.python.org/dev/howto/argparse.html

"python setup.py build"
https://docs.python.org/dev/extending/building.html

"exec python $0 ${1+"$@"}"
https://docs.python.org/dev/faq/library.html

"python setup.py --help build_ext"
https://docs.python.org/dev/distutils/configfile.html

Victor

Le mer. 13 f?vr. 2019 ? 16:49, Antoine Pitrou <solipsis at pitrou.net> a ?crit :
>
> On Wed, 13 Feb 2019 16:24:48 +0100
> Petr Viktorin <encukou at gmail.com> wrote:
> > PEP 394 says:
> >
> >  > This recommendation will be periodically reviewed over the next few
> >  > years, and updated when the core development team judges it
> >  > appropriate. As a point of reference, regular maintenance releases
> >  > for the Python 2.7 series will continue until at least 2020.
> >
> > I think it's time for another review.
> > I'm especially worried about the implication of these:
> >
> > - If the `python` command is installed, it should invoke the same
> >    version of Python as the `python2` command
> > - scripts that are deliberately written to be source compatible
> >    with both Python 2.x and 3.x [...] may continue to use `python` on
> >    their shebang line.
> >
> > So, to support scripts that adhere to the recommendation, Python 2
> > needs to be installed :(
>
> I think PEP 394 should acknowledge that there are now years of
> established usage of `python` as Python 3 for many conda users.
>
> Regards
>
> Antoine.
>
>
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe: https://mail.python.org/mailman/options/python-dev/vstinner%40redhat.com



-- 
Night gathers, and now my watch begins. It shall not end until my death.

From solipsis at pitrou.net  Wed Feb 13 11:28:59 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Wed, 13 Feb 2019 17:28:59 +0100
Subject: [Python-Dev] Another update for PEP 394 -- The "python" Command
 on Unix-Like Systems
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
 <20190213164603.3894316f@fsol>
 <32650e90-45d2-633f-c309-51518657aa2b@gmail.com>
Message-ID: <20190213172859.41d00642@fsol>

On Wed, 13 Feb 2019 17:18:15 +0100
Petr Viktorin <encukou at gmail.com> wrote:
> On 2/13/19 4:46 PM, Antoine Pitrou wrote:
> > On Wed, 13 Feb 2019 16:24:48 +0100
> > Petr Viktorin <encukou at gmail.com> wrote:  
> >> PEP 394 says:
> >>  
> >>   > This recommendation will be periodically reviewed over the next few
> >>   > years, and updated when the core development team judges it
> >>   > appropriate. As a point of reference, regular maintenance releases
> >>   > for the Python 2.7 series will continue until at least 2020.  
> >>
> >> I think it's time for another review.
> >> I'm especially worried about the implication of these:
> >>
> >> - If the `python` command is installed, it should invoke the same
> >>     version of Python as the `python2` command
> >> - scripts that are deliberately written to be source compatible
> >>     with both Python 2.x and 3.x [...] may continue to use `python` on
> >>     their shebang line.
> >>
> >> So, to support scripts that adhere to the recommendation, Python 2
> >> needs to be installed :(  
> > 
> > I think PEP 394 should acknowledge that there are now years of
> > established usage of `python` as Python 3 for many conda users.  
> 
> The intention is that Conda environments are treated the same as venv 
> environments, i.e.:
> 
> When a virtual environment (created by the PEP 405 venv package or a 
> similar tool) is active, the python command should refer to the virtual 
> environment's interpreter. In other words, activating a virtual 
> environment counts as deliberate user action to change the default 
> python interpreter.

Anaconda is often used as providing, not only virtual environments, but
the "main" user Python.  At least it certainly is so on Windows and
macOS, but I'm sure it is used like that as well on Linux, especially on
ancient distributions such as RHEL 6 or Ubuntu 14.04.

In any case, the fact that many people are used to "python" pointing to
Python 3 is IMHO an important data point.

Regards

Antoine.




From vstinner at redhat.com  Wed Feb 13 11:45:44 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Wed, 13 Feb 2019 17:45:44 +0100
Subject: [Python-Dev] Another update for PEP 394 -- The "python" Command
 on Unix-Like Systems
In-Reply-To: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
Message-ID: <CA+3bQGE6i82hiDALcUNVt6E4YvLhQhKibw1qWodzbdh5EuoJWw@mail.gmail.com>

Some more context about Petr's change, Fedora, RHEL and Red Hat.

At the latest Language Summit (2018), Petr detailed the state of the
migration to Python 3 and how Python 2 is and will be handled at Red
Hat; "Linux distributions and Python 2" talk with Matthias Klose (who
works on Debian/Ubuntu):
https://lwn.net/Articles/756628/

Petr explained in a comment on this change that /usr/bin/python is
configurable in the incoming RHEL8:
https://github.com/python/peps/pull/893#issuecomment-463240453
"I'm responsible for how this is handled in RHEL 8 beta, where
`/usr/bin/python` is configurable (though configuring it is
discouraged). I don't recommend that in the PEP ? I don't think it
needs to cover distros that need to lock in the behavior of
`/usr/bin/python` for a decade."

More details in his nice "Python in RHEL 8" article:
https://developers.redhat.com/blog/2018/11/14/python-in-rhel-8/

RHEL8 has specific challenges since it will be released around Python2
end-of-life with customers who are still running Python 2, but has
also to be prepared for the bright Python 3 world since RHEL is
usually supported for 10 years (if not longer).

Petr and me are working for Red Hat on Fedora and RHEL. My team is
helping on actively removing Python 2 from Fedora:
https://fedoraproject.org/wiki/Changes/Mass_Python_2_Package_Removal
"Python 2 will be deprecated in Fedora. Packagers can mark any other
Python 2 packages as deprecated as well."

See also:

* https://fedoraproject.org/wiki/FinalizingFedoraSwitchtoPython3 --
work-in-progress
* https://fedoraproject.org/wiki/Changes/Python_3_as_Default --
implemented in Fedora 23

The base installation of Fedora only provides "python3" (no "python"
nor "python2") since Fedora 23 (released in 2015), as does Ubuntu
nowadays. You get get "python" on Fedora by installing a special
"python-unversioned-command" package :-)

Victor

Le mer. 13 f?vr. 2019 ? 16:28, Petr Viktorin <encukou at gmail.com> a ?crit :
>
> PEP 394 says:
>
>  > This recommendation will be periodically reviewed over the next few
>  > years, and updated when the core development team judges it
>  > appropriate. As a point of reference, regular maintenance releases
>  > for the Python 2.7 series will continue until at least 2020.
>
> I think it's time for another review.
> I'm especially worried about the implication of these:
>
> - If the `python` command is installed, it should invoke the same
>    version of Python as the `python2` command
> - scripts that are deliberately written to be source compatible
>    with both Python 2.x and 3.x [...] may continue to use `python` on
>    their shebang line.
>
> So, to support scripts that adhere to the recommendation, Python 2
> needs to be installed :(
>
>
> Please see this PR for details and a suggested change:
> https://github.com/python/peps/pull/893
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe: https://mail.python.org/mailman/options/python-dev/vstinner%40redhat.com



-- 
Night gathers, and now my watch begins. It shall not end until my death.

From steve.dower at python.org  Wed Feb 13 12:13:06 2019
From: steve.dower at python.org (Steve Dower)
Date: Wed, 13 Feb 2019 09:13:06 -0800
Subject: [Python-Dev] Another update for PEP 394 -- The "python" Command
 on Unix-Like Systems
In-Reply-To: <CA+3bQGEQgjKOCkpK=nZ1V2abRzgvdM3oKWnOSmRVX8nTk9ctsg@mail.gmail.com>
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
 <20190213164603.3894316f@fsol>
 <CA+3bQGEQgjKOCkpK=nZ1V2abRzgvdM3oKWnOSmRVX8nTk9ctsg@mail.gmail.com>
Message-ID: <2fecf1f1-2754-e961-f0f9-6a6d01728e9a@python.org>

On 13Feb2019 0820, Victor Stinner wrote:
> On my Windows VM, "python" is Python 3.7 :-) In virtual environments,
> "python" can also be Python 3 as well.
> 
> I recall that I saw commands using "python" rather than "python3" in
> the *official* Python 3 documentation: see examples below (*).
> Problem: On Windows, "python" is the right command. "python3" doesn't
> work (doesn't exist) on Windows. Should we write the doc for Windows
> or for Unix? Oooops.

With the Windows Store package of Python, you get "python", "python3", 
and "python3.x" links added to your PATH, and I'm still thinking about 
ways to make this reasonable/reliable through the full installer as well 
(the difference is that the OS manages the links through the Store 
package, whereas each individual installer has to do it on their own 
otherwise).

I'm inclined to view "python" as the default, official command, with the 
versioned ones being workarounds added by distributors. So:
* our docs should say "python" consistently
* we should recommend that distributors use the same workaround
* our docs should describe the recommended workaround in any places 
people are likely to first encounter it (tutorial, sys.executable, etc.)

(And maybe this isn't currently how things are done, but I'd rather hold 
up an ideal than pretend that the status quo can't be changed - this 
list is literally for discussing changing the status quo of anything in 
core Python ;) )

Cheers,
Steve

From chris.barker at noaa.gov  Wed Feb 13 12:41:05 2019
From: chris.barker at noaa.gov (Chris Barker - NOAA Federal)
Date: Wed, 13 Feb 2019 12:41:05 -0500
Subject: [Python-Dev] Another update for PEP 394 -- The "python" Command
 on Unix-Like Systems
In-Reply-To: <2fecf1f1-2754-e961-f0f9-6a6d01728e9a@python.org>
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
 <20190213164603.3894316f@fsol>
 <CA+3bQGEQgjKOCkpK=nZ1V2abRzgvdM3oKWnOSmRVX8nTk9ctsg@mail.gmail.com>
 <2fecf1f1-2754-e961-f0f9-6a6d01728e9a@python.org>
Message-ID: <CALGmxEKq51-dD6sHdcu==3q65Ct3d_ACXcUarjJScq+mb-Rg=w@mail.gmail.com>

> On Feb 13, 2019, at 9:13 AM, Steve Dower <steve.dower at python.org>
>
> I'm inclined to view "python" as the default, official command, with the versioned ones being workarounds added by distributors.

+1 ? almost. I agree that ?python? be the default, but it would be
good to require (or at least highly encourage) that there be a
?python3? as well.

There will be folks wanting to run python3 on systems where there is
still a ?python? pointing to py2 ? particularly since that is still
the ?correct? way to do it!

> (And maybe this isn't currently how things are done, but I'd rather hold up an ideal than pretend that the status quo can't be changed -

Exactly.

-CHB


> this list is literally for discussing changing the status quo of anything in core Python ;) )
>
> Cheers,
> Steve
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe: https://mail.python.org/mailman/options/python-dev/chris.barker%40noaa.gov

From barry at python.org  Wed Feb 13 15:26:08 2019
From: barry at python.org (Barry Warsaw)
Date: Wed, 13 Feb 2019 12:26:08 -0800
Subject: [Python-Dev] Another update for PEP 394 -- The "python" Command
 on Unix-Like Systems
In-Reply-To: <CA+3bQGEQgjKOCkpK=nZ1V2abRzgvdM3oKWnOSmRVX8nTk9ctsg@mail.gmail.com>
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
 <20190213164603.3894316f@fsol>
 <CA+3bQGEQgjKOCkpK=nZ1V2abRzgvdM3oKWnOSmRVX8nTk9ctsg@mail.gmail.com>
Message-ID: <F1DA6F88-8178-4813-80D9-BB508CB4336E@python.org>

On Feb 13, 2019, at 08:20, Victor Stinner <vstinner at redhat.com> wrote:

> I'm a (strong) supporter of providing a "python" command which would
> be the latest Python version!

I think we should aspire for this to be the case too, eventually.  When this has come up in the past, we?ve said that it?s not appropriate to change PEP 394 until Python 2 is officially deprecated.  OTOH, I appreciate that distros and others have to make decisions on this now.  I think it?s worth discussing where we eventually want to be as a community, even if we continue to recommend no official change until 2020.

I personally would like for `python` to be the latest Python 3 version (or perhaps Brett?s launcher), `python2` to be Python 2.7 where installed (and not mandatory).  `python3` would be an alias for the latest Python 3.

> There was an interesting discussion about the Python version following
> Python 3.9: Python 3.10 or Python 4? And what are the issues which
> would make us prefer 3.10 rather than 4.0?
> https://mail.python.org/pipermail/python-committers/2018-September/006152.html

I don?t think this should be conflated with PEP 394.  IMHO, 3.10 is just fine.  Python 4 should be reserved for some future mythical GIL-less interpreter or other major API breaking change.  It might never happen.

-Barry

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: Message signed with OpenPGP
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190213/730ce607/attachment.sig>

From neil at python.ca  Wed Feb 13 16:00:52 2019
From: neil at python.ca (Neil Schemenauer)
Date: Wed, 13 Feb 2019 15:00:52 -0600
Subject: [Python-Dev] Another update for PEP 394 -- The "python" Command
 on Unix-Like Systems
In-Reply-To: <F1DA6F88-8178-4813-80D9-BB508CB4336E@python.org>
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
 <20190213164603.3894316f@fsol>
 <CA+3bQGEQgjKOCkpK=nZ1V2abRzgvdM3oKWnOSmRVX8nTk9ctsg@mail.gmail.com>
 <F1DA6F88-8178-4813-80D9-BB508CB4336E@python.org>
Message-ID: <20190213210052.w35eezwfwmhurj43@python.ca>

On 2019-02-13, Barry Warsaw wrote:
> I personally would like for `python` to be the latest Python 3
> version (or perhaps Brett?s launcher), `python2` to be Python 2.7
> where installed (and not mandatory).  `python3` would be an alias
> for the latest Python 3.

To me, having 'py' on Unix would be a good thing(tm).  If we have
that then I suppose we will encourage people to prefer it over
'python', 'python3', and 'python2'.  At that point, where 'python'
points would be less of an issue.

I'm not opposed to making 'python' configurable or eventually
pointing it to python3.  However, if we do go with 'py' as the
preferred command in the future, it seems to be some pain for little
gain.  If the OS already allows it to be re-directed, maybe that's
good enough.

Regards,

  Neil

From tjreedy at udel.edu  Wed Feb 13 17:16:54 2019
From: tjreedy at udel.edu (Terry Reedy)
Date: Wed, 13 Feb 2019 17:16:54 -0500
Subject: [Python-Dev] Another update for PEP 394 -- The "python" Command
 on Unix-Like Systems
In-Reply-To: <F1DA6F88-8178-4813-80D9-BB508CB4336E@python.org>
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
 <20190213164603.3894316f@fsol>
 <CA+3bQGEQgjKOCkpK=nZ1V2abRzgvdM3oKWnOSmRVX8nTk9ctsg@mail.gmail.com>
 <F1DA6F88-8178-4813-80D9-BB508CB4336E@python.org>
Message-ID: <q4250o$7mcn$1@blaine.gmane.org>

On 2/13/2019 3:26 PM, Barry Warsaw wrote:

> I personally would like for `python` to be the latest Python 3 version (or perhaps Brett?s launcher), `python2` to be Python 2.7 where installed (and not mandatory).  `python3` would be an alias for the latest Python 3.

It appears python is already python3 for a large majority of human users 
(as opposed to machines).

https://www.jetbrains.com/research/python-developers-survey-2018/
Nearly 20000 valid responses, Oct-Nov.

"Which version of Python do you use the most"
Python 3: 75% in 2017, 84% in 2018. The figure for other public surveys 
were 22%, 34%, 40% in Dec 2013, Dec 2014, Jan 2016. I expect at least 
90% by next January.  Py3 is already 90% among data scientists.

-- 
Terry Jan Reedy



From steve at pearwood.info  Wed Feb 13 18:00:05 2019
From: steve at pearwood.info (Steven D'Aprano)
Date: Thu, 14 Feb 2019 10:00:05 +1100
Subject: [Python-Dev] Another update for PEP 394 -- The "python" Command
 on Unix-Like Systems
In-Reply-To: <q4250o$7mcn$1@blaine.gmane.org>
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
 <20190213164603.3894316f@fsol>
 <CA+3bQGEQgjKOCkpK=nZ1V2abRzgvdM3oKWnOSmRVX8nTk9ctsg@mail.gmail.com>
 <F1DA6F88-8178-4813-80D9-BB508CB4336E@python.org>
 <q4250o$7mcn$1@blaine.gmane.org>
Message-ID: <20190213230004.GV1834@ando.pearwood.info>

On Wed, Feb 13, 2019 at 05:16:54PM -0500, Terry Reedy wrote:

> It appears python is already python3 for a large majority of human users 
> (as opposed to machines).
> 
> https://www.jetbrains.com/research/python-developers-survey-2018/
> Nearly 20000 valid responses, Oct-Nov.

They may be valid responses, but we don't know if they are 
representative of the broader Python community. Its a self-selected 
survey of people which always makes the results statistically suspect.

(By definition, an Internet survey eliminates responses from people who 
don't fill out surveys on the Internet.)

BUt even if representative, this survey only tells us what version 
people are using, now how they invoke it. We can't conclude that the 
command "python" means Python 3 for these users. We simply don't know 
one way or another (and I personally wouldn't want to hazard a guess.)



-- 
Steven

From vstinner at redhat.com  Wed Feb 13 18:07:35 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Thu, 14 Feb 2019 00:07:35 +0100
Subject: [Python-Dev] Another update for PEP 394 -- The "python" Command
 on Unix-Like Systems
In-Reply-To: <F1DA6F88-8178-4813-80D9-BB508CB4336E@python.org>
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
 <20190213164603.3894316f@fsol>
 <CA+3bQGEQgjKOCkpK=nZ1V2abRzgvdM3oKWnOSmRVX8nTk9ctsg@mail.gmail.com>
 <F1DA6F88-8178-4813-80D9-BB508CB4336E@python.org>
Message-ID: <CA+3bQGEXLBKNKGPCBkMEUzjbVY6v=7mq6W_f3wU=r41e=m=D=w@mail.gmail.com>

Le mer. 13 f?vr. 2019 ? 21:26, Barry Warsaw <barry at python.org> a ?crit :
> I don?t think this should be conflated with PEP 394.  IMHO, 3.10 is just fine.  Python 4 should be reserved for some future mythical GIL-less interpreter or other major API breaking change.  It might never happen.

My point is that changing the major version from 3 to 4 *will* break
things. We have to prepare the community to support such change.

For example, advice to replace "if major_version == 3:  ... else: ..."
with "if major_version >= 3:  ... else: ...".

Victor
-- 
Night gathers, and now my watch begins. It shall not end until my death.

From chris.barker at noaa.gov  Wed Feb 13 18:31:10 2019
From: chris.barker at noaa.gov (Chris Barker)
Date: Wed, 13 Feb 2019 15:31:10 -0800
Subject: [Python-Dev] Another update for PEP 394 -- The "python" Command
 on Unix-Like Systems
In-Reply-To: <F1DA6F88-8178-4813-80D9-BB508CB4336E@python.org>
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
 <20190213164603.3894316f@fsol>
 <CA+3bQGEQgjKOCkpK=nZ1V2abRzgvdM3oKWnOSmRVX8nTk9ctsg@mail.gmail.com>
 <F1DA6F88-8178-4813-80D9-BB508CB4336E@python.org>
Message-ID: <CALGmxEJuo39=WhUgt3sA5rNkTX8AKGgYfwCbYFnoBBipxcMCXw@mail.gmail.com>

On Wed, Feb 13, 2019 at 12:29 PM Barry Warsaw <barry at python.org> wrote:

> I think we should aspire for this to be the case too, eventually.  When
> this has come up in the past, we?ve said that it?s not appropriate to
> change PEP 394 until Python 2 is officially deprecated.  OTOH, I appreciate
> that distros and others have to make decisions on this now.  I think it?s
> worth discussing where we eventually want to be as a community, even if we
> continue to recommend no official change until 2020.
>

I don't think end-users will see any discontinuity in 2020. For quite a
while now, more and more people have shifted from using python2 as the
default to using python3 as the default. On the other hand, some folks are
still using python2, and will continue to do so after 2020 (old, still
supported versions RedHat anyone?) Hopefully, after 2020 no one will start
anything new with py2, but it's going to be around for a long, long time.

So as there will be no time for a "clear break", we might as well make
changes when the time "seems" right. And has been pointed out in this
thread, there are a lot of folks not following the PEP anyway (virtual
environments, conda, ??). I myself have been telling my newbie students to
make a link from "python" to python3 for a couple years (before I saw that
PEP!).

I personally would like for `python` to be the latest Python 3 version (or
> perhaps Brett?s launcher), `python2` to be Python 2.7 where installed (and
> not mandatory).  `python3` would be an alias for the latest Python 3.
>

+1

Starting now.

-CHB

-- 

Christopher Barker, Ph.D.
Oceanographer

Emergency Response Division
NOAA/NOS/OR&R            (206) 526-6959   voice
7600 Sand Point Way NE   (206) 526-6329   fax
Seattle, WA  98115       (206) 526-6317   main reception

Chris.Barker at noaa.gov
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190213/4077ab5c/attachment.html>

From barry at python.org  Wed Feb 13 18:33:21 2019
From: barry at python.org (Barry Warsaw)
Date: Wed, 13 Feb 2019 15:33:21 -0800
Subject: [Python-Dev] Another update for PEP 394 -- The "python" Command
 on Unix-Like Systems
In-Reply-To: <CA+3bQGEXLBKNKGPCBkMEUzjbVY6v=7mq6W_f3wU=r41e=m=D=w@mail.gmail.com>
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
 <20190213164603.3894316f@fsol>
 <CA+3bQGEQgjKOCkpK=nZ1V2abRzgvdM3oKWnOSmRVX8nTk9ctsg@mail.gmail.com>
 <F1DA6F88-8178-4813-80D9-BB508CB4336E@python.org>
 <CA+3bQGEXLBKNKGPCBkMEUzjbVY6v=7mq6W_f3wU=r41e=m=D=w@mail.gmail.com>
Message-ID: <BBA1594F-DFF7-40DF-B686-D08ECDA21DC3@python.org>

On Feb 13, 2019, at 15:07, Victor Stinner <vstinner at redhat.com> wrote:
> 
> Le mer. 13 f?vr. 2019 ? 21:26, Barry Warsaw <barry at python.org> a ?crit :
>> I don?t think this should be conflated with PEP 394.  IMHO, 3.10 is just fine.  Python 4 should be reserved for some future mythical GIL-less interpreter or other major API breaking change.  It might never happen.
> 
> My point is that changing the major version from 3 to 4 *will* break
> things. We have to prepare the community to support such change.

Perhaps.  I just don?t think Python 4 is anything but distant vaporware.  There?s a cost to freaking everyone out that Python 4 is coming and will be as disruptive as Python 3.  Calling Python 3.9+1 Python 4 feeds into that FUD for no reason that I can tell except for an aversion to two digit minor version numbers.

-Barry

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: Message signed with OpenPGP
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190213/7ea6b6b3/attachment.sig>

From nas-python at arctrix.com  Wed Feb 13 18:41:12 2019
From: nas-python at arctrix.com (Neil Schemenauer)
Date: Wed, 13 Feb 2019 17:41:12 -0600
Subject: [Python-Dev] Another update for PEP 394 -- The "python" Command
 on Unix-Like Systems
In-Reply-To: <q4250o$7mcn$1@blaine.gmane.org>
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
 <20190213164603.3894316f@fsol>
 <CA+3bQGEQgjKOCkpK=nZ1V2abRzgvdM3oKWnOSmRVX8nTk9ctsg@mail.gmail.com>
 <F1DA6F88-8178-4813-80D9-BB508CB4336E@python.org>
 <q4250o$7mcn$1@blaine.gmane.org>
Message-ID: <20190213234112.eyzc4dxk6pjqezo6@python.ca>

On 2019-02-13, Terry Reedy wrote:
> It appears python is already python3 for a large majority of human users (as
> opposed to machines).

IMHO, the question about where /usr/bin/python points is more
important for machines than for humans.  Think about changing
/bin/sh to some different version of the Borne Shell that changes
'echo'.  Or changing 'awk' to some incompatible version.  That's
going to break a lot of scripts (cron jobs, etc).

I experienced the bad old days when you couldn't rely on /bin/sh to
be a proper POSIX shell.  It was a mess and it wasted countless
hours of human life to work around all the flavours.  Python is not
as fundamental as the Unix shell but it has replaced a lot of shell
scripting.

How can we avoid making a lot of work for people?  I don't see an
easy answer.  We don't want Python to become frozen forever (whether
it is called 'python', 'python3', or 'py').  OTOH, making
/usr/bin/python point to the most recent X.Y release doesn't seem
like a good solution either.  For example, if I used 'async' as a
variable in some of my scripts and then 3.7 broke them.

Should we dust off PEP 407 "New release cycle and introducing
long-term support versions"?  Having /usr/bin/python point to a LTS
release seems better to me.  I don't know if the core developers are
willing to support PEP 407 though.  Maybe OS packagers like Red Hat
and Debian will already do something like LTS releases and core
developers don't need to.  /usr/bin/python in Red Hat has behaved
like that, as far as I know.

Another idea is that we could adopt something like the Rust
"language edition" system.  Obviously lots of details to be worked
out.  If we had that, the 'py' command could take an argument to
specify the Python edition.  OTOH, perhaps deprecation warnings and
__future__ achieves most of the same benefits.  Maintaining
different editions sounds like a lot of work.  More work than doing
LTS releases.

Maybe the solution is just that we become a lot more careful about
making incompatible changes.  To me, that would seem to reduce the
rate that Python is improving.  However, a less evolved but more
stable Python could actually have a higher value to society.

We could create an experimental branch of Python, e.g. python-ng.
Then, all the crazy new ideas go in there.  Only after they are
stable would we merge them into the stable version of Python.  I'm
not sure how well that works in practice though.  That's similar to
what Linux did with the even/odd version numbering.  It turned into
a mess because the experimental (next) version quickly outran the
stable version and merging fixes between them was difficult.  They
abandoned that and now use something like PEP 407 for LTS releases.

Regards,

  Neil

From turnbull.stephen.fw at u.tsukuba.ac.jp  Wed Feb 13 19:17:47 2019
From: turnbull.stephen.fw at u.tsukuba.ac.jp (Stephen J. Turnbull)
Date: Thu, 14 Feb 2019 09:17:47 +0900
Subject: [Python-Dev] Another update for PEP 394 -- The "python" Command
 on Unix-Like Systems
In-Reply-To: <20190213230004.GV1834@ando.pearwood.info>
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
 <20190213164603.3894316f@fsol>
 <CA+3bQGEQgjKOCkpK=nZ1V2abRzgvdM3oKWnOSmRVX8nTk9ctsg@mail.gmail.com>
 <F1DA6F88-8178-4813-80D9-BB508CB4336E@python.org>
 <q4250o$7mcn$1@blaine.gmane.org>
 <20190213230004.GV1834@ando.pearwood.info>
Message-ID: <23652.45995.691039.338687@turnbull.sk.tsukuba.ac.jp>

Steven D'Aprano writes:

 > But even if representative, this survey only tells us what version 
 > people are using, now how they invoke it. We can't conclude that the 
 > command "python" means Python 3 for these users. We simply don't know 
 > one way or another (and I personally wouldn't want to hazard a
 > guess.)

Agreed on "can't tell invocation".  I've been using "pythonX.Y" since
the last time I used Red Hat a lot (which was when Red Hat required
Python 1.5.2 or it almost wouldn't boot, and before several core
developers were born, I suspect).

We should also remember that Python is often invoked implicitly in
scripts that may be even older than that.

I don't think that Perl and PHP experience are sufficiently analogous.
As far as I can tell, they're pretty much backward compatible, except
that errors became valid code.  The unicode -> str, str -> bytes
upgrade in Python 3 means that an awful lot of scripts break if you
use the wrong one.

I think in the spirit of saving keystrokes ;-), we should encourage
the use of the "py" wrapper.

Yet another Steve

-- 
Associate Professor              Division of Policy and Planning Science
http://turnbull.sk.tsukuba.ac.jp/     Faculty of Systems and Information
Email: turnbull at sk.tsukuba.ac.jp                   University of Tsukuba
Tel: 029-853-5175                 Tennodai 1-1-1, Tsukuba 305-8573 JAPAN

From njs at pobox.com  Wed Feb 13 20:32:44 2019
From: njs at pobox.com (Nathaniel Smith)
Date: Wed, 13 Feb 2019 17:32:44 -0800
Subject: [Python-Dev] Another update for PEP 394 -- The "python" Command
 on Unix-Like Systems
In-Reply-To: <20190213230004.GV1834@ando.pearwood.info>
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
 <20190213164603.3894316f@fsol>
 <CA+3bQGEQgjKOCkpK=nZ1V2abRzgvdM3oKWnOSmRVX8nTk9ctsg@mail.gmail.com>
 <F1DA6F88-8178-4813-80D9-BB508CB4336E@python.org>
 <q4250o$7mcn$1@blaine.gmane.org>
 <20190213230004.GV1834@ando.pearwood.info>
Message-ID: <CAPJVwB=ZNOk-7dW20GXMgbGhNHgjiiW4jfx8PSMLuUwnEcpCTA@mail.gmail.com>

On Wed, Feb 13, 2019 at 3:02 PM Steven D'Aprano <steve at pearwood.info> wrote:
>
> On Wed, Feb 13, 2019 at 05:16:54PM -0500, Terry Reedy wrote:
>
> > It appears python is already python3 for a large majority of human users
> > (as opposed to machines).
> >
> > https://www.jetbrains.com/research/python-developers-survey-2018/
> > Nearly 20000 valid responses, Oct-Nov.
>
> They may be valid responses, but we don't know if they are
> representative of the broader Python community. Its a self-selected
> survey of people which always makes the results statistically suspect.
>
> (By definition, an Internet survey eliminates responses from people who
> don't fill out surveys on the Internet.)
>
> BUt even if representative, this survey only tells us what version
> people are using, now how they invoke it. We can't conclude that the
> command "python" means Python 3 for these users. We simply don't know
> one way or another (and I personally wouldn't want to hazard a guess.)

Can we gather data? What if pip started reporting info on how it was
run when contacting pypi?

What info would be useful? I guess whether it's pip/pip3/python -m
pip/python3 -m pip would be nice to know. I don't know if
sys.executable would tell us anything useful or not. pip knows where
the current python's script directory is; maybe it should report
whether it contains 'python2', 'python3', 'python', and perhaps which
ones are the same as each other?

-n

-- 
Nathaniel J. Smith -- https://vorpus.org

From steve at pearwood.info  Wed Feb 13 22:25:33 2019
From: steve at pearwood.info (Steven D'Aprano)
Date: Thu, 14 Feb 2019 14:25:33 +1100
Subject: [Python-Dev] Another update for PEP 394 -- The "python" Command
 on Unix-Like Systems
In-Reply-To: <BBA1594F-DFF7-40DF-B686-D08ECDA21DC3@python.org>
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
 <20190213164603.3894316f@fsol>
 <CA+3bQGEQgjKOCkpK=nZ1V2abRzgvdM3oKWnOSmRVX8nTk9ctsg@mail.gmail.com>
 <F1DA6F88-8178-4813-80D9-BB508CB4336E@python.org>
 <CA+3bQGEXLBKNKGPCBkMEUzjbVY6v=7mq6W_f3wU=r41e=m=D=w@mail.gmail.com>
 <BBA1594F-DFF7-40DF-B686-D08ECDA21DC3@python.org>
Message-ID: <20190214032533.GY1834@ando.pearwood.info>

On Wed, Feb 13, 2019 at 03:33:21PM -0800, Barry Warsaw wrote:

> I just don?t think Python 4 is anything but distant vaporware.

If Python 4 follows 3.9, that could be as little as 3-4 years away :-)

> There?s a cost to freaking everyone out that Python 4 is coming and 
> will be as disruptive as Python 3.

Indeed. I do my bit to combat that in two ways:

- remind people that Guido has pronounced that Python 4 will not be
  a disruptive, backwards-incompatible change like Python 3 was;

- and use "Python 5000" to refer to any such hypothetical and 
  very unlikely incompatible version.


> Calling Python 3.9+1 Python 4 
> feeds into that FUD for no reason that I can tell except for an 
> aversion to two digit minor version numbers.

I haven't come across this FUD about Python 4, so I wonder whether it 
exists more in our fears than the reality. I daresay there are a few 
people out there who will instantly react to even a casual mention of 
"Python 4" as if it were a concrete upgrade that just broke their 
servers, but I would hope the average Python coder had more sense.

I know that we have to plan for the community we have rather the 
community we want, but I would be very sad if we had decisions forced on 
us by the most ignorant, Dunning-Kruger, unteachable and proud of it 
segment of the community.

Any such hypothetical Python 3.10/4.0 version is at least three or four 
years away. Let's not limit our options until we know whether or not 
this FUD is widespread.

Whatever we plan, we should allow for *both* a Python 3.10 and a Python 
4, and then we'll be good even if 4.0 follows 3.12 :-)


-- 
Steven

From tjreedy at udel.edu  Wed Feb 13 23:59:25 2019
From: tjreedy at udel.edu (Terry Reedy)
Date: Wed, 13 Feb 2019 23:59:25 -0500
Subject: [Python-Dev] Another update for PEP 394 -- The "python" Command
 on Unix-Like Systems
In-Reply-To: <20190214032533.GY1834@ando.pearwood.info>
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
 <20190213164603.3894316f@fsol>
 <CA+3bQGEQgjKOCkpK=nZ1V2abRzgvdM3oKWnOSmRVX8nTk9ctsg@mail.gmail.com>
 <F1DA6F88-8178-4813-80D9-BB508CB4336E@python.org>
 <CA+3bQGEXLBKNKGPCBkMEUzjbVY6v=7mq6W_f3wU=r41e=m=D=w@mail.gmail.com>
 <BBA1594F-DFF7-40DF-B686-D08ECDA21DC3@python.org>
 <20190214032533.GY1834@ando.pearwood.info>
Message-ID: <q42sje$4efu$1@blaine.gmane.org>

On 2/13/2019 10:25 PM, Steven D'Aprano wrote:

> I haven't come across this FUD about Python 4,

I have, on StackOverflow, induced by people reading something like 
"deprecated now, removed in 4.0"


-- 
Terry Jan Reedy


From rbellevi at google.com  Thu Feb 14 00:05:54 2019
From: rbellevi at google.com (Richard Belleville)
Date: Wed, 13 Feb 2019 21:05:54 -0800
Subject: [Python-Dev] datetime.timedelta total_microseconds
Message-ID: <CAOew_sG9nG+bOGB4gt2DSwuxP8SgZW13WznwNf-Y5DhabnZZjQ@mail.gmail.com>

In a recent code review, the following snippet was called out as
reinventing the
wheel:

_MICROSECONDS_PER_SECOND = 1000000


def _timedelta_to_microseconds(delta):
  return int(delta.total_seconds() * _MICROSECONDS_PER_SECOND)


The reviewer thought that there must already exist a standard library
function
that fulfills this functionality. After we had both satisfied ourselves
that we
hadn't simply missed something in the documentation, we decided that we had
better raise the issue with a wider audience.

Does this functionality already exist within the standard library? If not,
would
a datetime.timedelta.total_microseconds function be a reasonable addition? I
would be happy to submit a patch for such a thing.

Richard Belleville
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190213/1586f59c/attachment.html>

From tahafut at gmail.com  Thu Feb 14 00:23:38 2019
From: tahafut at gmail.com (Henry Chen)
Date: Wed, 13 Feb 2019 21:23:38 -0800
Subject: [Python-Dev] datetime.timedelta total_microseconds
In-Reply-To: <CAOew_sG9nG+bOGB4gt2DSwuxP8SgZW13WznwNf-Y5DhabnZZjQ@mail.gmail.com>
References: <CAOew_sG9nG+bOGB4gt2DSwuxP8SgZW13WznwNf-Y5DhabnZZjQ@mail.gmail.com>
Message-ID: <CAPAfSum6-OhwbD26cdoRgh07cY9fHaJ761uVH8UjGPb79cg-iw@mail.gmail.com>

Looks like timedelta has a microseconds property. Would this work for your
needs?

In [12]: d
Out[12]: datetime.timedelta(0, 3, 398407)

In [13]: d.microseconds
Out[13]: 398407

On Wed, Feb 13, 2019 at 9:08 PM Richard Belleville via Python-Dev <
python-dev at python.org> wrote:

> In a recent code review, the following snippet was called out as
> reinventing the
> wheel:
>
> _MICROSECONDS_PER_SECOND = 1000000
>
>
> def _timedelta_to_microseconds(delta):
>   return int(delta.total_seconds() * _MICROSECONDS_PER_SECOND)
>
>
> The reviewer thought that there must already exist a standard library
> function
> that fulfills this functionality. After we had both satisfied ourselves
> that we
> hadn't simply missed something in the documentation, we decided that we had
> better raise the issue with a wider audience.
>
> Does this functionality already exist within the standard library? If not,
> would
> a datetime.timedelta.total_microseconds function be a reasonable addition?
> I
> would be happy to submit a patch for such a thing.
>
> Richard Belleville
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/tahafut%40gmail.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190213/e4ba5bc6/attachment.html>

From tahafut at gmail.com  Thu Feb 14 00:35:20 2019
From: tahafut at gmail.com (Henry Chen)
Date: Wed, 13 Feb 2019 21:35:20 -0800
Subject: [Python-Dev] datetime.timedelta total_microseconds
In-Reply-To: <CAPAfSum6-OhwbD26cdoRgh07cY9fHaJ761uVH8UjGPb79cg-iw@mail.gmail.com>
References: <CAOew_sG9nG+bOGB4gt2DSwuxP8SgZW13WznwNf-Y5DhabnZZjQ@mail.gmail.com>
 <CAPAfSum6-OhwbD26cdoRgh07cY9fHaJ761uVH8UjGPb79cg-iw@mail.gmail.com>
Message-ID: <CAPAfSukvcqcjUmiqOjMcvyTHEibNWpKtkvvbHuS0fuwTN2heoA@mail.gmail.com>

Oops. That isn't the TOTAL microseconds, but just the microseconds portion.
Sorry for the confusion.

On Wed, Feb 13, 2019 at 9:23 PM Henry Chen <tahafut at gmail.com> wrote:

> Looks like timedelta has a microseconds property. Would this work for your
> needs?
>
> In [12]: d
> Out[12]: datetime.timedelta(0, 3, 398407)
>
> In [13]: d.microseconds
> Out[13]: 398407
>
> On Wed, Feb 13, 2019 at 9:08 PM Richard Belleville via Python-Dev <
> python-dev at python.org> wrote:
>
>> In a recent code review, the following snippet was called out as
>> reinventing the
>> wheel:
>>
>> _MICROSECONDS_PER_SECOND = 1000000
>>
>>
>> def _timedelta_to_microseconds(delta):
>>   return int(delta.total_seconds() * _MICROSECONDS_PER_SECOND)
>>
>>
>> The reviewer thought that there must already exist a standard library
>> function
>> that fulfills this functionality. After we had both satisfied ourselves
>> that we
>> hadn't simply missed something in the documentation, we decided that we
>> had
>> better raise the issue with a wider audience.
>>
>> Does this functionality already exist within the standard library? If
>> not, would
>> a datetime.timedelta.total_microseconds function be a reasonable
>> addition? I
>> would be happy to submit a patch for such a thing.
>>
>> Richard Belleville
>> _______________________________________________
>> Python-Dev mailing list
>> Python-Dev at python.org
>> https://mail.python.org/mailman/listinfo/python-dev
>> Unsubscribe:
>> https://mail.python.org/mailman/options/python-dev/tahafut%40gmail.com
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190213/fef34745/attachment.html>

From jason.swails at gmail.com  Thu Feb 14 00:57:36 2019
From: jason.swails at gmail.com (Jason Swails)
Date: Thu, 14 Feb 2019 00:57:36 -0500
Subject: [Python-Dev] Another update for PEP 394 -- The "python" Command
 on Unix-Like Systems
In-Reply-To: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
Message-ID: <CAEk9e3pbx5VYEOYF=P2AzE1eMg047VMy4s9YahUf+9+e9u2Wdg@mail.gmail.com>

On Wed, Feb 13, 2019 at 10:26 AM Petr Viktorin <encukou at gmail.com> wrote:

> PEP 394 says:
>
>  > This recommendation will be periodically reviewed over the next few
>  > years, and updated when the core development team judges it
>  > appropriate. As a point of reference, regular maintenance releases
>  > for the Python 2.7 series will continue until at least 2020.
>
> I think it's time for another review.
> I'm especially worried about the implication of these:
>
> - If the `python` command is installed, it should invoke the same
>    version of Python as the `python2` command
> - scripts that are deliberately written to be source compatible
>    with both Python 2.x and 3.x [...] may continue to use `python` on
>    their shebang line.
>
> So, to support scripts that adhere to the recommendation, Python 2
> needs to be installed :(
>

I literally just ran into this problem now.  Part of a software suite I've
written uses Python to fetch updates during the installation process.  Due
to the target audience, it needs to access the system Python (only), and
support systems as old as RHEL 5 (Python 2.4 and later, including Python
3.x in the same code base, using nothing but the stdlib).  The shebang line
was "#!/usr/bin/env python"

It's been working for years, but was only now reported broken by a user
that upgraded their Ubuntu distribution and suddenly had no "python"
executable anywhere.  But they had python3.

I suspect suddenly not having any "python" executable in a Linux system
will screw up a lot more people than just me.  The workaround was ugly.

I'd like to see there always be a `python` executable available if any
version of Python is installed.

Thanks,
Jason

-- 
Jason M. Swails
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190214/6e404eae/attachment.html>

From mcepl at cepl.eu  Thu Feb 14 02:08:48 2019
From: mcepl at cepl.eu (=?UTF-8?Q?Mat=C4=9Bj?= Cepl)
Date: Thu, 14 Feb 2019 08:08:48 +0100
Subject: [Python-Dev] Another update for PEP 394 -- The "python" Command
 on Unix-Like Systems
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
 <20190213164603.3894316f@fsol>
 <CA+3bQGEQgjKOCkpK=nZ1V2abRzgvdM3oKWnOSmRVX8nTk9ctsg@mail.gmail.com>
 <F1DA6F88-8178-4813-80D9-BB508CB4336E@python.org>
 <CA+3bQGEXLBKNKGPCBkMEUzjbVY6v=7mq6W_f3wU=r41e=m=D=w@mail.gmail.com>
 <BBA1594F-DFF7-40DF-B686-D08ECDA21DC3@python.org>
Message-ID: <slrnq6a500.h09.mcepl@milic.suse.cz>

On 2019-02-13, 23:33 GMT, Barry Warsaw wrote:
> Perhaps.  I just don?t think Python 4 is anything but distant 
> vaporware.  There?s a cost to freaking everyone out that 
> Python 4 is coming and will be as disruptive as Python 3.  
> Calling Python 3.9+1 Python 4 feeds into that FUD for no 
> reason that I can tell except for an aversion to two digit 
> minor version numbers.

Is this relevant to the discussion at hand? We are talking about 
the binary /usr/bin/python3 which will be surely be provided 
even by Python 4, won't it?

Mat?j
-- 
https://matej.ceplovi.cz/blog/, Jabber: mcepl at ceplovi.cz
GPG Finger: 3C76 A027 CA45 AD70 98B5  BC1D 7920 5802 880B C9D8
 
Reading after a certain age diverts the mind too much from its
creative pursuits. Any man who reads too much and uses his own
brain too little falls into lazy habits of thinking, just as the
man who spends too much time in the theater is tempted to be
content with living vicariously instead of living his own life.
  -- Albert Einstein to The Saturday Evening Post, October 1929


From solipsis at pitrou.net  Thu Feb 14 03:41:20 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Thu, 14 Feb 2019 09:41:20 +0100
Subject: [Python-Dev] Another update for PEP 394 -- The "python" Command
 on Unix-Like Systems
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
 <20190213164603.3894316f@fsol>
 <CA+3bQGEQgjKOCkpK=nZ1V2abRzgvdM3oKWnOSmRVX8nTk9ctsg@mail.gmail.com>
 <F1DA6F88-8178-4813-80D9-BB508CB4336E@python.org>
 <q4250o$7mcn$1@blaine.gmane.org>
 <20190213230004.GV1834@ando.pearwood.info>
 <CAPJVwB=ZNOk-7dW20GXMgbGhNHgjiiW4jfx8PSMLuUwnEcpCTA@mail.gmail.com>
Message-ID: <20190214094120.536c2b13@fsol>

On Wed, 13 Feb 2019 17:32:44 -0800
Nathaniel Smith <njs at pobox.com> wrote:
> On Wed, Feb 13, 2019 at 3:02 PM Steven D'Aprano <steve at pearwood.info> wrote:
> >
> > On Wed, Feb 13, 2019 at 05:16:54PM -0500, Terry Reedy wrote:
> >  
> > > It appears python is already python3 for a large majority of human users
> > > (as opposed to machines).
> > >
> > > https://www.jetbrains.com/research/python-developers-survey-2018/
> > > Nearly 20000 valid responses, Oct-Nov.  
> >
> > They may be valid responses, but we don't know if they are
> > representative of the broader Python community. Its a self-selected
> > survey of people which always makes the results statistically suspect.
> >
> > (By definition, an Internet survey eliminates responses from people who
> > don't fill out surveys on the Internet.)
> >
> > BUt even if representative, this survey only tells us what version
> > people are using, now how they invoke it. We can't conclude that the
> > command "python" means Python 3 for these users. We simply don't know
> > one way or another (and I personally wouldn't want to hazard a guess.)  
> 
> Can we gather data? What if pip started reporting info on how it was
> run when contacting pypi?

The most important information pip should report is whether it's
running on a CI platform (should be doable by looking at a few
environment variables, at least for the most popular platforms).
Currently nobody knows what the PyPI download stats mean, because they
could be 99% human or 99% CI.

Regards

Antoine.



From solipsis at pitrou.net  Thu Feb 14 03:44:17 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Thu, 14 Feb 2019 09:44:17 +0100
Subject: [Python-Dev] Another update for PEP 394 -- The "python" Command
 on Unix-Like Systems
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
 <CAEk9e3pbx5VYEOYF=P2AzE1eMg047VMy4s9YahUf+9+e9u2Wdg@mail.gmail.com>
Message-ID: <20190214094417.26f6a2e7@fsol>

On Thu, 14 Feb 2019 00:57:36 -0500
Jason Swails <jason.swails at gmail.com> wrote:
> 
> I literally just ran into this problem now.  Part of a software suite I've
> written uses Python to fetch updates during the installation process.  Due
> to the target audience, it needs to access the system Python (only), and
> support systems as old as RHEL 5 (Python 2.4 and later, including Python
> 3.x in the same code base, using nothing but the stdlib).  The shebang line
> was "#!/usr/bin/env python"
> 
> It's been working for years, but was only now reported broken by a user
> that upgraded their Ubuntu distribution and suddenly had no "python"
> executable anywhere.  But they had python3.
> 
> I suspect suddenly not having any "python" executable in a Linux system
> will screw up a lot more people than just me.  The workaround was ugly.

I'm not sure what you mean.  Isn't the workaround to install Python 2
in this case?

Regards

Antoine.



From njs at pobox.com  Thu Feb 14 03:51:43 2019
From: njs at pobox.com (Nathaniel Smith)
Date: Thu, 14 Feb 2019 00:51:43 -0800
Subject: [Python-Dev] Another update for PEP 394 -- The "python" Command
 on Unix-Like Systems
In-Reply-To: <20190214094120.536c2b13@fsol>
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
 <20190213164603.3894316f@fsol>
 <CA+3bQGEQgjKOCkpK=nZ1V2abRzgvdM3oKWnOSmRVX8nTk9ctsg@mail.gmail.com>
 <F1DA6F88-8178-4813-80D9-BB508CB4336E@python.org>
 <q4250o$7mcn$1@blaine.gmane.org>
 <20190213230004.GV1834@ando.pearwood.info>
 <CAPJVwB=ZNOk-7dW20GXMgbGhNHgjiiW4jfx8PSMLuUwnEcpCTA@mail.gmail.com>
 <20190214094120.536c2b13@fsol>
Message-ID: <CAPJVwBk5ZNA1zgA31zszXzX1c0-vvKK437eQaH+oAh+Gkh7Tsg@mail.gmail.com>

On Thu, Feb 14, 2019 at 12:43 AM Antoine Pitrou <solipsis at pitrou.net> wrote:
>
> On Wed, 13 Feb 2019 17:32:44 -0800
> Nathaniel Smith <njs at pobox.com> wrote:
> > On Wed, Feb 13, 2019 at 3:02 PM Steven D'Aprano <steve at pearwood.info> wrote:
> > >
> > > On Wed, Feb 13, 2019 at 05:16:54PM -0500, Terry Reedy wrote:
> > >
> > > > It appears python is already python3 for a large majority of human users
> > > > (as opposed to machines).
> > > >
> > > > https://www.jetbrains.com/research/python-developers-survey-2018/
> > > > Nearly 20000 valid responses, Oct-Nov.
> > >
> > > They may be valid responses, but we don't know if they are
> > > representative of the broader Python community. Its a self-selected
> > > survey of people which always makes the results statistically suspect.
> > >
> > > (By definition, an Internet survey eliminates responses from people who
> > > don't fill out surveys on the Internet.)
> > >
> > > BUt even if representative, this survey only tells us what version
> > > people are using, now how they invoke it. We can't conclude that the
> > > command "python" means Python 3 for these users. We simply don't know
> > > one way or another (and I personally wouldn't want to hazard a guess.)
> >
> > Can we gather data? What if pip started reporting info on how it was
> > run when contacting pypi?
>
> The most important information pip should report is whether it's
> running on a CI platform (should be doable by looking at a few
> environment variables, at least for the most popular platforms).
> Currently nobody knows what the PyPI download stats mean, because they
> could be 99% human or 99% CI.

I agree :-) https://github.com/pypa/pip/issues/5499#issuecomment-406840712

That's kind of orthogonal to this discussion though.

-n

-- 
Nathaniel J. Smith -- https://vorpus.org

From encukou at gmail.com  Thu Feb 14 03:56:08 2019
From: encukou at gmail.com (Petr Viktorin)
Date: Thu, 14 Feb 2019 09:56:08 +0100
Subject: [Python-Dev] Another update for PEP 394 -- The "python" Command
 on Unix-Like Systems
In-Reply-To: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
Message-ID: <a096f664-3000-272a-ae5f-7713c936aa2c@gmail.com>

On 2/13/19 4:24 PM, Petr Viktorin wrote:
> I think it's time for another review.
[...]
> Please see this PR for details and a suggested change: 
> https://github.com/python/peps/pull/893

Summary of the thread so far.

Antoine Pitrou noted that the PEP should acknowledge that there are now 
years of
established usage of `python` as Python 3 for many conda users, often as 
the "main" Python.

Victor Stinner expressed support for "python" being the latest Python 
version, citing PHP, Ruby, Perl; containers; mentions of "python" in our 
docs.

Steve Dower later proposed concrete points how to make "python" the 
default command:
   * our docs should say "python" consistently
   * we should recommend that distributors use the same workaround
   * our docs should describe the recommended workaround in any places 
people are likely to first encounter it (tutorial, sys.executable, etc.)

Chris Barker added that "python3" should still be available, even if 
"python" is default.

Barry Warsaw gave a +1 to making "python" default, noting that there 
were plans to change this when Python 2 is officially deprecated. But 
distros need to make decisions about 2020 now.

Chris Barker noted that users won't see any discuntinuity in 2020. 
That's just a date support from CPython devs ends.

Victor pointed to discussions on 4.0 vs. 3.10. (I'll ignore discussions 
on 4.0 in this summary.)
Victor also posted some interesting info and links on Fedora and RHEL.
There was a discussion on the PSF survey about how many people use 
Python 3. (I'll ignore this sub-thread, it's not really about the 
"python" command.)

Steve noted that the Windows Store package of Python 3 provides 
"python", but he is still thinking how to make this reasonable/reliable 
in the full installer.

Several people think "py" on Unix would be a good thing. Neil 
Schemenauer supposes we would encourage people to use it over 
"python"/"python2"/"python3", so "python" would be less of an issue.

Neil Schemenauer is not opposed to making "python" configurable or 
eventually pointing it to Python 3.

Jason Swails shared experience from running software with a 
"#!/usr/bin/env python" shebang on a system that didn't have Python 2 
(and followed the PEP, so no "python" either). The workaround was ugly.

-------------

Since this list is public, I'd like to remind all readers that it is 
full of people who work extensively with Python 3, and tend to drive it 
forward at any opportunity. (Myself included, but on this thread I'll 
leave the arguments to someone else ? they're covered adequately.)

Thoughts of Python developers are important, but we're not hearing any 
other voices. Perhaps everyone with a different opinion has already 
self-selected out.

I don't know of a good place for this discussion, and I'm not a good 
person to give arguments to support the original "python" should be 
Python 2 direction. (But if I did, I imagine posting them here would 
feel a bit scary.)
But I would not be surprised, or annoyed, if the Council had a private 
discussion and pronounced "No, sorry, not yet".

Anyway, how should this be decided? Where should it be discussed?

From ronaldoussoren at mac.com  Thu Feb 14 04:46:43 2019
From: ronaldoussoren at mac.com (Ronald Oussoren)
Date: Thu, 14 Feb 2019 10:46:43 +0100
Subject: [Python-Dev] Adding test.support.safe_rmpath()
In-Reply-To: <CAFYqXL_-nyTX98+XzaL37X5sOQgX=w-gpttoFxJa2j+15d0JvQ@mail.gmail.com>
References: <CAFYqXL-UsoJ582AKjvtx7gowqE6_CPwMQdoQRyp+9TzEO5002w@mail.gmail.com>
 <7AF16DF0-A237-44B7-B272-7427CB5AD5B0@mac.com>
 <CAFYqXL_-nyTX98+XzaL37X5sOQgX=w-gpttoFxJa2j+15d0JvQ@mail.gmail.com>
Message-ID: <3C12F8E9-E825-4F28-9CFE-A81FB35694A6@mac.com>


?

Twitter: @ronaldoussoren
Blog: https://blog.ronaldoussoren.net/

> On 13 Feb 2019, at 16:10, Giampaolo Rodola' <g.rodola at gmail.com> wrote:
> 
> 
> 
> On Wed, Feb 13, 2019 at 2:27 PM Ronald Oussoren <ronaldoussoren at mac.com <mailto:ronaldoussoren at mac.com>> wrote:
> 
> 
>> On 13 Feb 2019, at 13:24, Giampaolo Rodola' <g.rodola at gmail.com <mailto:g.rodola at gmail.com>> wrote:
>> 
>> 
>> Hello,
>> after discovering os.makedirs() has no unit-tests (https://bugs.python.org/issue35982 <https://bugs.python.org/issue35982>) I was thinking about working on a PR to increase the test coverage of fs-related os.* functions. In order to do so I think it would be useful to add a convenience function to "just delete something if it exists", regardless if it's a file, directory, directory tree, etc., and include it into test.support module.
> 
> Something like shutil.rmtree() with ignore_errors=True?
> 
> shutil.rmtree() is about directories and can't be used against files. support.rmpath() would take a path (meaning anything) and try to remove it.

You?re right.  

I usually use shutil.rmtree for tests that need to create temporary files, and create a temporary directory for those files (that is, use tempfile.mkdtemp in setUp() and use shutil.rmtree in tearDown()). That way I don?t have to adjust house-keeping code when I make changes to test code.

Ronald

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190214/46b9d666/attachment.html>

From stephane at wirtel.be  Thu Feb 14 05:00:46 2019
From: stephane at wirtel.be (Stephane Wirtel)
Date: Thu, 14 Feb 2019 11:00:46 +0100
Subject: [Python-Dev] Another update for PEP 394 -- The "python" Command
 on Unix-Like Systems
In-Reply-To: <a096f664-3000-272a-ae5f-7713c936aa2c@gmail.com>
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
 <a096f664-3000-272a-ae5f-7713c936aa2c@gmail.com>
Message-ID: <20190214100046.GA29072@xps>

Hi Petr,

I would like to add this issue from the devguide where I ask if we need
to use python or python3 in the documentation.

https://github.com/python/devguide/issues/208

-- 
St?phane Wirtel - https://wirtel.be - @matrixise

From encukou at gmail.com  Thu Feb 14 07:30:26 2019
From: encukou at gmail.com (Petr Viktorin)
Date: Thu, 14 Feb 2019 13:30:26 +0100
Subject: [Python-Dev] Another update for PEP 394 -- The "python" Command
 on Unix-Like Systems
In-Reply-To: <CA+3bQGE6i82hiDALcUNVt6E4YvLhQhKibw1qWodzbdh5EuoJWw@mail.gmail.com>
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
 <CA+3bQGE6i82hiDALcUNVt6E4YvLhQhKibw1qWodzbdh5EuoJWw@mail.gmail.com>
Message-ID: <e330fdff-f8c2-5c34-391e-4d653c04f6a1@gmail.com>

On 2/13/19 5:45 PM, Victor Stinner wrote:
> Some more context about Petr's change, Fedora, RHEL and Red Hat.
[...]

Fedora could switch "python" to Python 3 now*, if the PEP changes to 
allow it.

* "now" has a release date of around October 2019. The next release 
after that should then be around May 2020.

From jason.swails at gmail.com  Thu Feb 14 07:35:49 2019
From: jason.swails at gmail.com (Jason Swails)
Date: Thu, 14 Feb 2019 07:35:49 -0500
Subject: [Python-Dev] Another update for PEP 394 -- The "python" Command
 on Unix-Like Systems
In-Reply-To: <20190214094417.26f6a2e7@fsol>
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
 <CAEk9e3pbx5VYEOYF=P2AzE1eMg047VMy4s9YahUf+9+e9u2Wdg@mail.gmail.com>
 <20190214094417.26f6a2e7@fsol>
Message-ID: <C375205B-28E4-4B58-8C08-6C9669881826@gmail.com>

 

> On Feb 14, 2019, at 3:44 AM, Antoine Pitrou <solipsis at pitrou.net> wrote:
> 
> On Thu, 14 Feb 2019 00:57:36 -0500
> Jason Swails <jason.swails at gmail.com> wrote:
>> 
>> I literally just ran into this problem now.  Part of a software suite I've
>> written uses Python to fetch updates during the installation process.  Due
>> to the target audience, it needs to access the system Python (only), and
>> support systems as old as RHEL 5 (Python 2.4 and later, including Python
>> 3.x in the same code base, using nothing but the stdlib).  The shebang line
>> was "#!/usr/bin/env python"
>> 
>> It's been working for years, but was only now reported broken by a user
>> that upgraded their Ubuntu distribution and suddenly had no "python"
>> executable anywhere.  But they had python3.
>> 
>> I suspect suddenly not having any "python" executable in a Linux system
>> will screw up a lot more people than just me.  The workaround was ugly.
> 
> I'm not sure what you mean.  Isn't the workaround to install Python 2
> in this case?

I release the software, so the problem is not my machine, it?s others?. The installation process also fetches a local miniconda distribution for the Python utilities that are part of the program suite (and the python programs are optional and typically not installed when this suite is deployed on a supercomputer, for instance). But the software needs to check for updates before it does any of that (hence my concern ? this script needs to be able to run before the user does *anything* else, including installing dependencies). 

This would also be the first time we?d have to give different installation instructions for different versions of the same Linux distro. 

The workaround from a users perspective is simple for me, but I can?t make that same assumption for all of my users. This is an impediment to keeping the user experience as simple as possible. 

Thanks,
Jason
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190214/39e68045/attachment.html>

From doko at ubuntu.com  Thu Feb 14 08:11:05 2019
From: doko at ubuntu.com (Matthias Klose)
Date: Thu, 14 Feb 2019 14:11:05 +0100
Subject: [Python-Dev] Another update for PEP 394 -- The "python" Command
 on Unix-Like Systems
In-Reply-To: <CA+3bQGEQgjKOCkpK=nZ1V2abRzgvdM3oKWnOSmRVX8nTk9ctsg@mail.gmail.com>
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
 <20190213164603.3894316f@fsol>
 <CA+3bQGEQgjKOCkpK=nZ1V2abRzgvdM3oKWnOSmRVX8nTk9ctsg@mail.gmail.com>
Message-ID: <d73dcfb0-66b2-f596-1972-65f7578aa9c8@ubuntu.com>

On 13.02.19 17:20, Victor Stinner wrote:
> Hi,
> 
> I'm a (strong) supporter of providing a "python" command which would
> be the latest Python version!

This very much depends on what is working with the latest Python version, and
what amount of third party packages your distro has to support. It doesn't have
to be the newest version.

> As php does nowadays (after previous issues with "php4" vs "php5".) I
> don't recall that perl had "perl4" vs "perl5", the command was always
> "perl", no? Same for Ruby: it was still "ruby" after for Ruby 2, no?
> Only Python and PHP used different program names depending on the
> language version, no? And PHP now moved back to a single "php"
> program.

it's not only upstreams doing that kind of versioned names; distros are doing
that to ease the pain for larger transitions.

> In the container and virtualenv era, it's now easy to get your
> favorite Python version for the "python" command.
> 
> On my Windows VM, "python" is Python 3.7 :-) In virtual environments,
> "python" can also be Python 3 as well.

maybe the PEP should recommend to have python3 in virtual environments as well?

Matthias

From doko at ubuntu.com  Thu Feb 14 08:35:33 2019
From: doko at ubuntu.com (Matthias Klose)
Date: Thu, 14 Feb 2019 14:35:33 +0100
Subject: [Python-Dev] Another update for PEP 394 -- The "python" Command
 on Unix-Like Systems
In-Reply-To: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
Message-ID: <e0e45870-96a4-e0f4-a4dd-78b2f1e792a2@ubuntu.com>

On 13.02.19 16:24, Petr Viktorin wrote:
> PEP 394 says:
> 
>> This recommendation will be periodically reviewed over the next few
>> years, and updated when the core development team judges it
>> appropriate. As a point of reference, regular maintenance releases
>> for the Python 2.7 series will continue until at least 2020.
> 
> I think it's time for another review.
> I'm especially worried about the implication of these:
> 
> - If the `python` command is installed, it should invoke the same
> ? version of Python as the `python2` command
> - scripts that are deliberately written to be source compatible
> ? with both Python 2.x and 3.x [...] may continue to use `python` on
> ? their shebang line.
> 
> So, to support scripts that adhere to the recommendation, Python 2
> needs to be installed :(

Debian's concern about pointing python to python3 is that it will break software
after an upgrade.  The current state seems is still the same that Debian doesn't
want to ship a python symlink after the Python2 removal.

For Ubuntu, I'm not sure if I want a python executable at all, because there is
not much progress in handling more than one python installation, so just using
python3 for the distro sounds fine.  pypi.org now recommends unconditionally
installing with pip, and pip is still happy to modify system installed packages
when asked, messing around with the distro packages.  But probably that kind of
users then install their own python symlink anyway.

For the Ubuntu 20.04 LTS release and the Debian bullseye release (maybe 2021), I
am trying to make sure that the python shebang isn't used by distro packages
anymore (either by removing python2 altogether, or by using the
python2/python2.7 shebangs).

Matthias

From paul at ganssle.io  Thu Feb 14 09:04:20 2019
From: paul at ganssle.io (Paul Ganssle)
Date: Thu, 14 Feb 2019 09:04:20 -0500
Subject: [Python-Dev] datetime.timedelta total_microseconds
In-Reply-To: <CAOew_sG9nG+bOGB4gt2DSwuxP8SgZW13WznwNf-Y5DhabnZZjQ@mail.gmail.com>
References: <CAOew_sG9nG+bOGB4gt2DSwuxP8SgZW13WznwNf-Y5DhabnZZjQ@mail.gmail.com>
Message-ID: <1cfc2984-216c-fdc7-7ea2-692662d93971@ganssle.io>

I don't think it's totally unreasonable to have other total_X() methods,
where X would be days, hours, minutes and microseconds, but it also
doesn't seem like a pressing need to me.

I think the biggest argument against it is that they are all trivial to
implement as necessary, because they're just unit conversions that
involve multiplication or division by constants, which is nowhere near
as complicated to implement as the original `total_seconds` method.
Here's the issue where total_seconds() was implemented, it doesn't seem
like there was any discussion of other total methods until after the
issue was closed: https://bugs.python.org/issue5788

I think the main issue is how "thick" we want the timedelta class to
be.? With separate methods for every unit, we have to maintain and
document 5 methods instead of 1, though the methods are trivial and the
documentation could maybe be shared.

If I had a time machine, I'd probably recommend an interface something
like this:

def total_duration(self, units='seconds'):
??? return self._total_seconds() * _SECONDS_PER_UNIT[units]

I suppose it would be possible to move to that interface today, though I
think it would be mildly confusing to have two functions that do the
same thing (total_seconds and total_duration), which may not be worth it
considering that these functions are a pretty minor convenience.

Best,

Paul

On 2/14/19 12:05 AM, Richard Belleville via Python-Dev wrote:
> In a recent code review, the following snippet was called out as
> reinventing the
> wheel:
>
> _MICROSECONDS_PER_SECOND = 1000000
>
>
> def _timedelta_to_microseconds(delta):
> ? return int(delta.total_seconds() * _MICROSECONDS_PER_SECOND)
>
>
> The reviewer thought that there must already exist a standard library
> function
> that fulfills this functionality. After we had both satisfied
> ourselves that we
> hadn't simply missed something in the documentation, we decided that
> we had
> better raise the issue with a wider audience.
>
> Does this functionality already exist within the standard library? If
> not, would
> a datetime.timedelta.total_microseconds function be a reasonable
> addition? I
> would be happy to submit a patch for such a thing.
>
> Richard Belleville
>
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe: https://mail.python.org/mailman/options/python-dev/paul%40ganssle.io
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190214/140d15c6/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: OpenPGP digital signature
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190214/140d15c6/attachment.sig>

From ericsnowcurrently at gmail.com  Thu Feb 14 09:25:42 2019
From: ericsnowcurrently at gmail.com (Eric Snow)
Date: Thu, 14 Feb 2019 07:25:42 -0700
Subject: [Python-Dev] Adding test.support.safe_rmpath()
In-Reply-To: <3C12F8E9-E825-4F28-9CFE-A81FB35694A6@mac.com>
References: <CAFYqXL-UsoJ582AKjvtx7gowqE6_CPwMQdoQRyp+9TzEO5002w@mail.gmail.com>
 <7AF16DF0-A237-44B7-B272-7427CB5AD5B0@mac.com>
 <CAFYqXL_-nyTX98+XzaL37X5sOQgX=w-gpttoFxJa2j+15d0JvQ@mail.gmail.com>
 <3C12F8E9-E825-4F28-9CFE-A81FB35694A6@mac.com>
Message-ID: <CALFfu7CFhPip2T0jbMoX33QKw9T=UeOrR86vKcYnMcMhE1K53A@mail.gmail.com>

On Thu, Feb 14, 2019, 02:47 Ronald Oussoren via Python-Dev <
python-dev at python.org wrote:

>
> I usually use shutil.rmtree for tests that need to create temporary files,
> and create a temporary directory for those files (that is, use
> tempfile.mkdtemp in setUp() and use shutil.rmtree in tearDown()). That way
> I don?t have to adjust house-keeping code when I make changes to test code.
>

Same here.

-eric

>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190214/fec5b65d/attachment.html>

From g.rodola at gmail.com  Thu Feb 14 09:56:52 2019
From: g.rodola at gmail.com (Giampaolo Rodola')
Date: Thu, 14 Feb 2019 15:56:52 +0100
Subject: [Python-Dev] Adding test.support.safe_rmpath()
In-Reply-To: <CALFfu7CFhPip2T0jbMoX33QKw9T=UeOrR86vKcYnMcMhE1K53A@mail.gmail.com>
References: <CAFYqXL-UsoJ582AKjvtx7gowqE6_CPwMQdoQRyp+9TzEO5002w@mail.gmail.com>
 <7AF16DF0-A237-44B7-B272-7427CB5AD5B0@mac.com>
 <CAFYqXL_-nyTX98+XzaL37X5sOQgX=w-gpttoFxJa2j+15d0JvQ@mail.gmail.com>
 <3C12F8E9-E825-4F28-9CFE-A81FB35694A6@mac.com>
 <CALFfu7CFhPip2T0jbMoX33QKw9T=UeOrR86vKcYnMcMhE1K53A@mail.gmail.com>
Message-ID: <CAFYqXL8=pyMfA5ZZp=w3w+oAJ0cO7=XMhhz=o=MDt_ji9i6w8A@mail.gmail.com>

On Thu, Feb 14, 2019 at 3:25 PM Eric Snow <ericsnowcurrently at gmail.com>
wrote:

> On Thu, Feb 14, 2019, 02:47 Ronald Oussoren via Python-Dev <
> python-dev at python.org wrote:
>
>>
>> I usually use shutil.rmtree for tests that need to create temporary
>> files, and create a temporary directory for those files (that is, use
>> tempfile.mkdtemp in setUp() and use shutil.rmtree in tearDown()). That way
>> I don?t have to adjust house-keeping code when I make changes to test code.
>>
>
> Same here.
>
> -eric
>
>>
What I generally do is avoid relying on tempfile.mkdtemp() and always use
TESTFN instead. I think it's cleaner as a pradigm because it's an incentive
to not pollute the single unit tests with  `self.addCleanup()` instructions
(the whole cleanup logic is always supposed to occur in setUp/tearDown):


TESTFN = support.TESTFN
TESTFN2 = TESTFN + '2'

class FilesystemTest(unittest.TestCase):

    def setUp(self):
        remove_file_or_dir(TESTFN)
        remove_file_or_dir(TESTFN2)
    tearDown = setUp

    def test_mkdir(self):
        ...
    def test_listdir(self):
        ...
    def test_rename(self):
        ...

-- 
Giampaolo - http://grodola.blogspot.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190214/854e57a6/attachment.html>

From mail at timgolden.me.uk  Thu Feb 14 10:03:47 2019
From: mail at timgolden.me.uk (Tim Golden)
Date: Thu, 14 Feb 2019 15:03:47 +0000
Subject: [Python-Dev] Adding test.support.safe_rmpath()
In-Reply-To: <CAFYqXL8=pyMfA5ZZp=w3w+oAJ0cO7=XMhhz=o=MDt_ji9i6w8A@mail.gmail.com>
References: <CAFYqXL-UsoJ582AKjvtx7gowqE6_CPwMQdoQRyp+9TzEO5002w@mail.gmail.com>
 <7AF16DF0-A237-44B7-B272-7427CB5AD5B0@mac.com>
 <CAFYqXL_-nyTX98+XzaL37X5sOQgX=w-gpttoFxJa2j+15d0JvQ@mail.gmail.com>
 <3C12F8E9-E825-4F28-9CFE-A81FB35694A6@mac.com>
 <CALFfu7CFhPip2T0jbMoX33QKw9T=UeOrR86vKcYnMcMhE1K53A@mail.gmail.com>
 <CAFYqXL8=pyMfA5ZZp=w3w+oAJ0cO7=XMhhz=o=MDt_ji9i6w8A@mail.gmail.com>
Message-ID: <6083f67a-8413-fc40-0118-cfab2284ae2a@timgolden.me.uk>

On 14/02/2019 14:56, Giampaolo Rodola' wrote:
> 
> 
> On Thu, Feb 14, 2019 at 3:25 PM Eric Snow <ericsnowcurrently at gmail.com 
> <mailto:ericsnowcurrently at gmail.com>> wrote:
> 
>     On Thu, Feb 14, 2019, 02:47 Ronald Oussoren via Python-Dev
>     <python-dev at python.org <mailto:python-dev at python.org> wrote:
> 
> 
>         I usually use shutil.rmtree for tests that need to create
>         temporary files, and create a temporary directory for those
>         files (that is, use tempfile.mkdtemp in setUp() and use
>         shutil.rmtree in tearDown()). That way I don?t have to adjust
>         house-keeping code when I make changes to test code.
> 
> 
>     Same here.
> 
>     -eric
> 
> 
> What I generally do is avoid relying on tempfile.mkdtemp() and always 
> use TESTFN instead. I think it's cleaner as a pradigm because it's an 
> incentive to not pollute the single unit tests with? `self.addCleanup()` 
> instructions (the whole cleanup logic is always supposed to occur in 
> setUp/tearDown):

Must chime in here because I've been pushing (variously months & years 
ago) to move *away* from TESTFN because it generates numerous 
intermittent errors on my Windows setup. I've had several goes at 
starting to do that but a combination of my own lack of time plus some 
people's reluctance to go that route altogether has stalled the thing.

I'm not sure I understand the difference in cleanup/teardown terms 
between using tempfile and using TESTFN. The objections I've seen from 
people (apart, obviously, from test churn) are to do with building up 
testing temp artefacts on a possibly low-sized disk.

TJG

From g.rodola at gmail.com  Thu Feb 14 10:24:41 2019
From: g.rodola at gmail.com (Giampaolo Rodola')
Date: Thu, 14 Feb 2019 16:24:41 +0100
Subject: [Python-Dev] Adding test.support.safe_rmpath()
In-Reply-To: <6083f67a-8413-fc40-0118-cfab2284ae2a@timgolden.me.uk>
References: <CAFYqXL-UsoJ582AKjvtx7gowqE6_CPwMQdoQRyp+9TzEO5002w@mail.gmail.com>
 <7AF16DF0-A237-44B7-B272-7427CB5AD5B0@mac.com>
 <CAFYqXL_-nyTX98+XzaL37X5sOQgX=w-gpttoFxJa2j+15d0JvQ@mail.gmail.com>
 <3C12F8E9-E825-4F28-9CFE-A81FB35694A6@mac.com>
 <CALFfu7CFhPip2T0jbMoX33QKw9T=UeOrR86vKcYnMcMhE1K53A@mail.gmail.com>
 <CAFYqXL8=pyMfA5ZZp=w3w+oAJ0cO7=XMhhz=o=MDt_ji9i6w8A@mail.gmail.com>
 <6083f67a-8413-fc40-0118-cfab2284ae2a@timgolden.me.uk>
Message-ID: <CAFYqXL8Oufz4aQuTggbM04kqU+u36QqatYgKLsYSObpMDx4sBQ@mail.gmail.com>

On Thu, Feb 14, 2019 at 4:03 PM Tim Golden <mail at timgolden.me.uk> wrote:

> On 14/02/2019 14:56, Giampaolo Rodola' wrote:
> >
> >
> > On Thu, Feb 14, 2019 at 3:25 PM Eric Snow <ericsnowcurrently at gmail.com
> > <mailto:ericsnowcurrently at gmail.com>> wrote:
> >
> >     On Thu, Feb 14, 2019, 02:47 Ronald Oussoren via Python-Dev
> >     <python-dev at python.org <mailto:python-dev at python.org> wrote:
> >
> >
> >         I usually use shutil.rmtree for tests that need to create
> >         temporary files, and create a temporary directory for those
> >         files (that is, use tempfile.mkdtemp in setUp() and use
> >         shutil.rmtree in tearDown()). That way I don?t have to adjust
> >         house-keeping code when I make changes to test code.
> >
> >
> >     Same here.
> >
> >     -eric
> >
> >
> > What I generally do is avoid relying on tempfile.mkdtemp() and always
> > use TESTFN instead. I think it's cleaner as a pradigm because it's an
> > incentive to not pollute the single unit tests with  `self.addCleanup()`
> > instructions (the whole cleanup logic is always supposed to occur in
> > setUp/tearDown):
>
> Must chime in here because I've been pushing (variously months & years
> ago) to move *away* from TESTFN because it generates numerous
> intermittent errors on my Windows setup. I've had several goes at
> starting to do that but a combination of my own lack of time plus some
> people's reluctance to go that route altogether has stalled the thing.
>
> I'm not sure I understand the difference in cleanup/teardown terms
> between using tempfile and using TESTFN. The objections I've seen from
> people (apart, obviously, from test churn) are to do with building up
> testing temp artefacts on a possibly low-sized disk.
>
> TJG
>

I suppose you mean the intermittent failures are usually due to "file is
already in use by another process" correct? test.support's unlink(),
rmdir() and rmtree() functions already implement a retry-with-timeout logic
in order to prevent this issue. I suppose when this issue may still occur,
though, is when the file/handle is held by another process, meaning that
the unit-test probably forgot to terminate()/wait() a subprocess or should
have used support.read_children(). In summary, my approach is more "strict"
because it implies that unit-tests always do a proper cleanup.
tempfile.mkdtemp() may prevent failures but it may hide a unit-test which
doesn't do a proper file/dir cleanup and should have been fixed instead.
The drawback in practical terms is that orphaned test files are left behind.

Extra: an argument in favor of using tempfile.mkdtemp() instead of TESTFN
is parallel testing, but I think we're not using it.


-- 
Giampaolo - http://grodola.blogspot.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190214/7b23f0e7/attachment-0001.html>

From mail at timgolden.me.uk  Thu Feb 14 10:31:42 2019
From: mail at timgolden.me.uk (Tim Golden)
Date: Thu, 14 Feb 2019 15:31:42 +0000
Subject: [Python-Dev] Adding test.support.safe_rmpath()
In-Reply-To: <CAFYqXL8Oufz4aQuTggbM04kqU+u36QqatYgKLsYSObpMDx4sBQ@mail.gmail.com>
References: <CAFYqXL-UsoJ582AKjvtx7gowqE6_CPwMQdoQRyp+9TzEO5002w@mail.gmail.com>
 <7AF16DF0-A237-44B7-B272-7427CB5AD5B0@mac.com>
 <CAFYqXL_-nyTX98+XzaL37X5sOQgX=w-gpttoFxJa2j+15d0JvQ@mail.gmail.com>
 <3C12F8E9-E825-4F28-9CFE-A81FB35694A6@mac.com>
 <CALFfu7CFhPip2T0jbMoX33QKw9T=UeOrR86vKcYnMcMhE1K53A@mail.gmail.com>
 <CAFYqXL8=pyMfA5ZZp=w3w+oAJ0cO7=XMhhz=o=MDt_ji9i6w8A@mail.gmail.com>
 <6083f67a-8413-fc40-0118-cfab2284ae2a@timgolden.me.uk>
 <CAFYqXL8Oufz4aQuTggbM04kqU+u36QqatYgKLsYSObpMDx4sBQ@mail.gmail.com>
Message-ID: <55edeb6e-8a22-200f-22de-538da20ba55c@timgolden.me.uk>

On 14/02/2019 15:24, Giampaolo Rodola' wrote:
> 
> 
> On Thu, Feb 14, 2019 at 4:03 PM Tim Golden <mail at timgolden.me.uk 
> <mailto:mail at timgolden.me.uk>> wrote:
> 
>     On 14/02/2019 14:56, Giampaolo Rodola' wrote:
>      >
>      >
>      > On Thu, Feb 14, 2019 at 3:25 PM Eric Snow
>     <ericsnowcurrently at gmail.com <mailto:ericsnowcurrently at gmail.com>
>      > <mailto:ericsnowcurrently at gmail.com
>     <mailto:ericsnowcurrently at gmail.com>>> wrote:
>      >
>      >? ? ?On Thu, Feb 14, 2019, 02:47 Ronald Oussoren via Python-Dev
>      >? ? ?<python-dev at python.org <mailto:python-dev at python.org>
>     <mailto:python-dev at python.org <mailto:python-dev at python.org>> wrote:
>      >
>      >
>      >? ? ? ? ?I usually use shutil.rmtree for tests that need to create
>      >? ? ? ? ?temporary files, and create a temporary directory for those
>      >? ? ? ? ?files (that is, use tempfile.mkdtemp in setUp() and use
>      >? ? ? ? ?shutil.rmtree in tearDown()). That way I don?t have to adjust
>      >? ? ? ? ?house-keeping code when I make changes to test code.
>      >
>      >
>      >? ? ?Same here.
>      >
>      >? ? ?-eric
>      >
>      >
>      > What I generally do is avoid relying on tempfile.mkdtemp() and
>     always
>      > use TESTFN instead. I think it's cleaner as a pradigm because
>     it's an
>      > incentive to not pollute the single unit tests with 
>     `self.addCleanup()`
>      > instructions (the whole cleanup logic is always supposed to occur in
>      > setUp/tearDown):
> 
>     Must chime in here because I've been pushing (variously months & years
>     ago) to move *away* from TESTFN because it generates numerous
>     intermittent errors on my Windows setup. I've had several goes at
>     starting to do that but a combination of my own lack of time plus some
>     people's reluctance to go that route altogether has stalled the thing.
> 
>     I'm not sure I understand the difference in cleanup/teardown terms
>     between using tempfile and using TESTFN. The objections I've seen from
>     people (apart, obviously, from test churn) are to do with building up
>     testing temp artefacts on a possibly low-sized disk.
> 
>     TJG
> 
> 
> I suppose you mean the intermittent failures are usually due to "file is 
> already in use by another process" correct? test.support's unlink(), 

Occasionally (and those are usually down to a poorly-handled cleanup).

More commonly it's due to residual share-delete handles on those files, 
probably from indexing & virus checkers or TortoiseXXX cache handlers. 
Obviously I can (and to some extent do) try to mitigate those issues.

In short: reusing the same filepath over and over for tests which are 
run in quick succession doesn't seem like a good idea usually. That's 
commonly what TESTFN-based tests do (some do; some don't).

I'm 100% with you on strict clean-up, not leaving testing turds behind, 
not over-complicating simple tests with lost of framework. All that. But 
-- however it's done -- I'd prefer to move away from the test-global 
TESTFN approach.

I'm not at my dev box atm so can't pick out examples but I definitely 
have some :) I have no issue with your proposal here: better and simpler 
cleanup is A Good Thing. But it won't solve the problem of re-using the 
same test filepath again and again.

TJG

From j.orponen at 4teamwork.ch  Thu Feb 14 10:39:30 2019
From: j.orponen at 4teamwork.ch (Joni Orponen)
Date: Thu, 14 Feb 2019 16:39:30 +0100
Subject: [Python-Dev] Adding test.support.safe_rmpath()
In-Reply-To: <3C12F8E9-E825-4F28-9CFE-A81FB35694A6@mac.com>
References: <CAFYqXL-UsoJ582AKjvtx7gowqE6_CPwMQdoQRyp+9TzEO5002w@mail.gmail.com>
 <7AF16DF0-A237-44B7-B272-7427CB5AD5B0@mac.com>
 <CAFYqXL_-nyTX98+XzaL37X5sOQgX=w-gpttoFxJa2j+15d0JvQ@mail.gmail.com>
 <3C12F8E9-E825-4F28-9CFE-A81FB35694A6@mac.com>
Message-ID: <CA+LW3i2V7YD4Aq_YtztHZ-U-0yLKUVUMsH9EMYHD5=ELPG-uUg@mail.gmail.com>

On Thu, Feb 14, 2019 at 10:49 AM Ronald Oussoren via Python-Dev <
python-dev at python.org> wrote:

> I usually use shutil.rmtree for tests that need to create temporary files,
> and create a temporary directory for those files (that is, use
> tempfile.mkdtemp in setUp() and use shutil.rmtree in tearDown()). That way
> I don?t have to adjust house-keeping code when I make changes to test code.
>

As tempfile provides context managers, should these be used internally for
something like this? Provide a decorator which passes in the temp file /
directory.

-- 
Joni Orponen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190214/df7e9f53/attachment.html>

From vstinner at redhat.com  Thu Feb 14 10:49:52 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Thu, 14 Feb 2019 16:49:52 +0100
Subject: [Python-Dev] Another update for PEP 394 -- The "python" Command
 on Unix-Like Systems
In-Reply-To: <e0e45870-96a4-e0f4-a4dd-78b2f1e792a2@ubuntu.com>
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
 <e0e45870-96a4-e0f4-a4dd-78b2f1e792a2@ubuntu.com>
Message-ID: <CA+3bQGGMrA7qGiA0BZ4z0DxbvG6nvZV5zUp8ZRUEHVG2vPhYrw@mail.gmail.com>

Le jeu. 14 f?vr. 2019 ? 14:38, Matthias Klose <doko at ubuntu.com> a ?crit :
> Debian's concern about pointing python to python3 is that it will break software
> after an upgrade.  The current state seems is still the same that Debian doesn't
> want to ship a python symlink after the Python2 removal.

The other safer alternative is to start to provide "py" launcher on
Unix as well. Since it's something new, it's perfectly fine to decide
from the start to make it point to the latest Python version by
default.

Victor
-- 
Night gathers, and now my watch begins. It shall not end until my death.

From sorin.sbarnea at gmail.com  Thu Feb 14 07:46:35 2019
From: sorin.sbarnea at gmail.com (Sorin Sbarnea)
Date: Thu, 14 Feb 2019 12:46:35 +0000
Subject: [Python-Dev] Another update for PEP 394 -- The "python" Command
 on Unix-Like Systems
In-Reply-To: <CA+3bQGEQgjKOCkpK=nZ1V2abRzgvdM3oKWnOSmRVX8nTk9ctsg@mail.gmail.com>
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
 <20190213164603.3894316f@fsol>
 <CA+3bQGEQgjKOCkpK=nZ1V2abRzgvdM3oKWnOSmRVX8nTk9ctsg@mail.gmail.com>
Message-ID: <F426C0E3-4676-412E-B841-A8C8F6E0E6DB@gmail.com>

I am glad this resurfaced as back in September I proposed updated that very old PEP but I got rejected.
https://github.com/python/peps/pull/785 <https://github.com/python/peps/pull/785>

The main issue is that most distros will not fix it until PEP is refreshed because most of them do want to follow PEPs.

There is still hope.

Cheers
Sorin

> On 13 Feb 2019, at 16:20, Victor Stinner <vstinner at redhat.com> wrote:
> 
> Hi,
> 
> I'm a (strong) supporter of providing a "python" command which would
> be the latest Python version!
> 
> As php does nowadays (after previous issues with "php4" vs "php5".) I
> don't recall that perl had "perl4" vs "perl5", the command was always
> "perl", no? Same for Ruby: it was still "ruby" after for Ruby 2, no?
> Only Python and PHP used different program names depending on the
> language version, no? And PHP now moved back to a single "php"
> program.
> 
> In the container and virtualenv era, it's now easy to get your
> favorite Python version for the "python" command.
> 
> On my Windows VM, "python" is Python 3.7 :-) In virtual environments,
> "python" can also be Python 3 as well.
> 
> I recall that I saw commands using "python" rather than "python3" in
> the *official* Python 3 documentation: see examples below (*).
> Problem: On Windows, "python" is the right command. "python3" doesn't
> work (doesn't exist) on Windows. Should we write the doc for Windows
> or for Unix? Oooops.
> 
> There was an interesting discussion about the Python version following
> Python 3.9: Python 3.10 or Python 4? And what are the issues which
> would make us prefer 3.10 rather than 4.0?
> https://mail.python.org/pipermail/python-committers/2018-September/006152.html
> 
> One practical issue is that right now, six.PY3 is defined by "PY3 =
> sys.version_info[0] == 3" and so "if six.PY3:" will be false on Python
> 4.
> 
> Another interesting thing to mention is the Unix Python launcher
> ("py") written by Brett Cannon written in Rust:
> https://github.com/brettcannon/python-launcher
> 
> 
> (*) A few examples of "python" commands in the Python official documentation
> 
> "$ python prog.py -h"
> https://docs.python.org/dev/library/argparse.html
> 
> "$ python logctx.py"
> https://docs.python.org/dev/howto/logging-cookbook.html
> 
> "python setup.py install"
> https://docs.python.org/dev/install/index.html
> 
> "python --help"
> https://docs.python.org/dev/howto/argparse.html
> 
> "python setup.py build"
> https://docs.python.org/dev/extending/building.html
> 
> "exec python $0 ${1+"$@"}"
> https://docs.python.org/dev/faq/library.html
> 
> "python setup.py --help build_ext"
> https://docs.python.org/dev/distutils/configfile.html
> 
> Victor
> 
> Le mer. 13 f?vr. 2019 ? 16:49, Antoine Pitrou <solipsis at pitrou.net> a ?crit :
>> 
>> On Wed, 13 Feb 2019 16:24:48 +0100
>> Petr Viktorin <encukou at gmail.com> wrote:
>>> PEP 394 says:
>>> 
>>>> This recommendation will be periodically reviewed over the next few
>>>> years, and updated when the core development team judges it
>>>> appropriate. As a point of reference, regular maintenance releases
>>>> for the Python 2.7 series will continue until at least 2020.
>>> 
>>> I think it's time for another review.
>>> I'm especially worried about the implication of these:
>>> 
>>> - If the `python` command is installed, it should invoke the same
>>>   version of Python as the `python2` command
>>> - scripts that are deliberately written to be source compatible
>>>   with both Python 2.x and 3.x [...] may continue to use `python` on
>>>   their shebang line.
>>> 
>>> So, to support scripts that adhere to the recommendation, Python 2
>>> needs to be installed :(
>> 
>> I think PEP 394 should acknowledge that there are now years of
>> established usage of `python` as Python 3 for many conda users.
>> 
>> Regards
>> 
>> Antoine.
>> 
>> 
>> _______________________________________________
>> Python-Dev mailing list
>> Python-Dev at python.org
>> https://mail.python.org/mailman/listinfo/python-dev
>> Unsubscribe: https://mail.python.org/mailman/options/python-dev/vstinner%40redhat.com
> 
> 
> 
> -- 
> Night gathers, and now my watch begins. It shall not end until my death.
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe: https://mail.python.org/mailman/options/python-dev/sorin.sbarnea%40gmail.com

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190214/54c78027/attachment.html>

From barry at python.org  Thu Feb 14 12:28:48 2019
From: barry at python.org (Barry Warsaw)
Date: Thu, 14 Feb 2019 09:28:48 -0800
Subject: [Python-Dev] Another update for PEP 394 -- The "python" Command
 on Unix-Like Systems
In-Reply-To: <slrnq6a500.h09.mcepl@milic.suse.cz>
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
 <20190213164603.3894316f@fsol>
 <CA+3bQGEQgjKOCkpK=nZ1V2abRzgvdM3oKWnOSmRVX8nTk9ctsg@mail.gmail.com>
 <F1DA6F88-8178-4813-80D9-BB508CB4336E@python.org>
 <CA+3bQGEXLBKNKGPCBkMEUzjbVY6v=7mq6W_f3wU=r41e=m=D=w@mail.gmail.com>
 <BBA1594F-DFF7-40DF-B686-D08ECDA21DC3@python.org>
 <slrnq6a500.h09.mcepl@milic.suse.cz>
Message-ID: <22F2AD71-5694-4EB5-9C21-8B965654A481@python.org>

On Feb 13, 2019, at 23:08, Mat?j Cepl <mcepl at cepl.eu> wrote:

> Is this relevant to the discussion at hand? We are talking about
> the binary /usr/bin/python3 which will be surely be provided
> even by Python 4, won't it?

Why would it be?  Since this is all hypothetical anyway <wink>, I?d more likely expect to only ship /usr/bin/python.

-Barry

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: Message signed with OpenPGP
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190214/71cb586d/attachment.sig>

From brett at python.org  Thu Feb 14 12:48:40 2019
From: brett at python.org (Brett Cannon)
Date: Thu, 14 Feb 2019 09:48:40 -0800
Subject: [Python-Dev] Adding test.support.safe_rmpath()
In-Reply-To: <CAFYqXL8Oufz4aQuTggbM04kqU+u36QqatYgKLsYSObpMDx4sBQ@mail.gmail.com>
References: <CAFYqXL-UsoJ582AKjvtx7gowqE6_CPwMQdoQRyp+9TzEO5002w@mail.gmail.com>
 <7AF16DF0-A237-44B7-B272-7427CB5AD5B0@mac.com>
 <CAFYqXL_-nyTX98+XzaL37X5sOQgX=w-gpttoFxJa2j+15d0JvQ@mail.gmail.com>
 <3C12F8E9-E825-4F28-9CFE-A81FB35694A6@mac.com>
 <CALFfu7CFhPip2T0jbMoX33QKw9T=UeOrR86vKcYnMcMhE1K53A@mail.gmail.com>
 <CAFYqXL8=pyMfA5ZZp=w3w+oAJ0cO7=XMhhz=o=MDt_ji9i6w8A@mail.gmail.com>
 <6083f67a-8413-fc40-0118-cfab2284ae2a@timgolden.me.uk>
 <CAFYqXL8Oufz4aQuTggbM04kqU+u36QqatYgKLsYSObpMDx4sBQ@mail.gmail.com>
Message-ID: <CAP1=2W5rV7sfrhDmBuQSnmfdcpRK6pM-bZBKE-AQOHXMBKq28g@mail.gmail.com>

On Thu, Feb 14, 2019 at 7:26 AM Giampaolo Rodola' <g.rodola at gmail.com>
wrote:

>
>
> On Thu, Feb 14, 2019 at 4:03 PM Tim Golden <mail at timgolden.me.uk> wrote:
>
>> On 14/02/2019 14:56, Giampaolo Rodola' wrote:
>> >
>> >
>> > On Thu, Feb 14, 2019 at 3:25 PM Eric Snow <ericsnowcurrently at gmail.com
>> > <mailto:ericsnowcurrently at gmail.com>> wrote:
>> >
>> >     On Thu, Feb 14, 2019, 02:47 Ronald Oussoren via Python-Dev
>> >     <python-dev at python.org <mailto:python-dev at python.org> wrote:
>> >
>> >
>> >         I usually use shutil.rmtree for tests that need to create
>> >         temporary files, and create a temporary directory for those
>> >         files (that is, use tempfile.mkdtemp in setUp() and use
>> >         shutil.rmtree in tearDown()). That way I don?t have to adjust
>> >         house-keeping code when I make changes to test code.
>> >
>> >
>> >     Same here.
>> >
>> >     -eric
>> >
>> >
>> > What I generally do is avoid relying on tempfile.mkdtemp() and always
>> > use TESTFN instead. I think it's cleaner as a pradigm because it's an
>> > incentive to not pollute the single unit tests with
>> `self.addCleanup()`
>> > instructions (the whole cleanup logic is always supposed to occur in
>> > setUp/tearDown):
>>
>> Must chime in here because I've been pushing (variously months & years
>> ago) to move *away* from TESTFN because it generates numerous
>> intermittent errors on my Windows setup. I've had several goes at
>> starting to do that but a combination of my own lack of time plus some
>> people's reluctance to go that route altogether has stalled the thing.
>>
>> I'm not sure I understand the difference in cleanup/teardown terms
>> between using tempfile and using TESTFN. The objections I've seen from
>> people (apart, obviously, from test churn) are to do with building up
>> testing temp artefacts on a possibly low-sized disk.
>>
>> TJG
>>
>
> I suppose you mean the intermittent failures are usually due to "file is
> already in use by another process" correct? test.support's unlink(),
> rmdir() and rmtree() functions already implement a retry-with-timeout logic
> in order to prevent this issue. I suppose when this issue may still occur,
> though, is when the file/handle is held by another process, meaning that
> the unit-test probably forgot to terminate()/wait() a subprocess or should
> have used support.read_children(). In summary, my approach is more "strict"
> because it implies that unit-tests always do a proper cleanup.
> tempfile.mkdtemp() may prevent failures but it may hide a unit-test which
> doesn't do a proper file/dir cleanup and should have been fixed instead.
> The drawback in practical terms is that orphaned test files are left behind.
>
> Extra: an argument in favor of using tempfile.mkdtemp() instead of TESTFN
> is parallel testing, but I think we're not using it.
>

With -j you can do parallel testing and I know I always run with that on.
But TESTFN does *attempt *to account for that
<https://github.com/python/cpython/blob/8a1657b93469580ef345c7c91738587f3d76e87d/Lib/test/support/__init__.py#L835>
by using the PID in the name.

Having said that, I do use tempfile like Eric, Ronald, and Tim when I write
tests as I have real-world experience using tempfile so I usually remember
to clean up versus TESTFN which is Python stdlib internals only and I have
to remember that it won't clean up itself.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190214/4ba76fcd/attachment.html>

From brett at python.org  Thu Feb 14 12:59:06 2019
From: brett at python.org (Brett Cannon)
Date: Thu, 14 Feb 2019 09:59:06 -0800
Subject: [Python-Dev] Another update for PEP 394 -- The "python" Command
 on Unix-Like Systems
In-Reply-To: <CA+3bQGGMrA7qGiA0BZ4z0DxbvG6nvZV5zUp8ZRUEHVG2vPhYrw@mail.gmail.com>
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
 <e0e45870-96a4-e0f4-a4dd-78b2f1e792a2@ubuntu.com>
 <CA+3bQGGMrA7qGiA0BZ4z0DxbvG6nvZV5zUp8ZRUEHVG2vPhYrw@mail.gmail.com>
Message-ID: <CAP1=2W7zncVETF-YF-nZ64YyjdytQ5WyG6Qn8qjusgC=uS_8bg@mail.gmail.com>

On Thu, Feb 14, 2019 at 7:50 AM Victor Stinner <vstinner at redhat.com> wrote:

> Le jeu. 14 f?vr. 2019 ? 14:38, Matthias Klose <doko at ubuntu.com> a ?crit :
> > Debian's concern about pointing python to python3 is that it will break
> software
> > after an upgrade.  The current state seems is still the same that Debian
> doesn't
> > want to ship a python symlink after the Python2 removal.
>
> The other safer alternative is to start to provide "py" launcher on
> Unix as well. Since it's something new, it's perfectly fine to decide
> from the start to make it point to the latest Python version by
> default.
>

Since it has come up a couple of times and in case people are curious, the
Python Launcher for UNIX is currently available at
https://crates.io/crates/python-launcher and the basics are there. I have
one more key feature to implement -- `py --list` -- before I view it as
having all the basics in place. Once I have --list done it will be trying
to tackle the hard issue of how to tie in things like PyPy or
non-PATH-installed interpreters into the launcher (which, since it is
configuration, people will bikeshed on forever about, so maybe I should
ignore people and solve it quickly ;) .
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190214/06c48834/attachment.html>

From alexander.belopolsky at gmail.com  Thu Feb 14 13:12:00 2019
From: alexander.belopolsky at gmail.com (Alexander Belopolsky)
Date: Thu, 14 Feb 2019 13:12:00 -0500
Subject: [Python-Dev] datetime.timedelta total_microseconds
In-Reply-To: <1cfc2984-216c-fdc7-7ea2-692662d93971@ganssle.io>
References: <CAOew_sG9nG+bOGB4gt2DSwuxP8SgZW13WznwNf-Y5DhabnZZjQ@mail.gmail.com>
 <1cfc2984-216c-fdc7-7ea2-692662d93971@ganssle.io>
Message-ID: <CAP7h-xavkxsqF60M_aR0641M21D+oeVj90f7=h671+8Y5TUyeA@mail.gmail.com>

On Thu, Feb 14, 2019 at 9:07 AM Paul Ganssle <paul at ganssle.io> wrote:

> I don't think it's totally unreasonable to have other total_X() methods,
> where X would be days, hours, minutes and microseconds
>
I do.  I was against adding the total_seconds() method to begin with
because the same effect can be achieved with

delta / timedelta(seconds=1)

this is easily generalized to

delta / timedelta(X=1)

where X can be days, hours, minutes or microseconds.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190214/29358ce4/attachment.html>

From paul at ganssle.io  Thu Feb 14 13:17:26 2019
From: paul at ganssle.io (Paul Ganssle)
Date: Thu, 14 Feb 2019 13:17:26 -0500
Subject: [Python-Dev] datetime.timedelta total_microseconds
In-Reply-To: <CAP7h-xavkxsqF60M_aR0641M21D+oeVj90f7=h671+8Y5TUyeA@mail.gmail.com>
References: <CAOew_sG9nG+bOGB4gt2DSwuxP8SgZW13WznwNf-Y5DhabnZZjQ@mail.gmail.com>
 <1cfc2984-216c-fdc7-7ea2-692662d93971@ganssle.io>
 <CAP7h-xavkxsqF60M_aR0641M21D+oeVj90f7=h671+8Y5TUyeA@mail.gmail.com>
Message-ID: <3e46f177-bc42-71d3-01f1-5e1868d4a155@ganssle.io>

Ah yes, good point, I forgot about this because IIRC it's not supported
in Python 2.7, so it's not a particularly common idiom in polyglot
library code.

Obviously any new methods would be Python 3-only, so there's no benefit
to adding them.

Best,

Paul

On 2/14/19 1:12 PM, Alexander Belopolsky wrote:
>
>
> On Thu, Feb 14, 2019 at 9:07 AM Paul Ganssle <paul at ganssle.io
> <mailto:paul at ganssle.io>> wrote:
>
>     I don't think it's totally unreasonable to have other total_X()
>     methods, where X would be days, hours, minutes and microseconds
>
> I do.? I was against adding the total_seconds() method to begin with
> because?the same effect can be achieved with
>
> delta / timedelta(seconds=1)
>
> this is easily generalized to
>
> delta / timedelta(X=1)
>
> where X can be days, hours, minutes or microseconds.
> ?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190214/05ccf9fe/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: OpenPGP digital signature
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190214/05ccf9fe/attachment.sig>

From gjcarneiro at gmail.com  Thu Feb 14 13:20:11 2019
From: gjcarneiro at gmail.com (Gustavo Carneiro)
Date: Thu, 14 Feb 2019 18:20:11 +0000
Subject: [Python-Dev] Another update for PEP 394 -- The "python" Command
 on Unix-Like Systems
In-Reply-To: <CA+3bQGGMrA7qGiA0BZ4z0DxbvG6nvZV5zUp8ZRUEHVG2vPhYrw@mail.gmail.com>
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
 <e0e45870-96a4-e0f4-a4dd-78b2f1e792a2@ubuntu.com>
 <CA+3bQGGMrA7qGiA0BZ4z0DxbvG6nvZV5zUp8ZRUEHVG2vPhYrw@mail.gmail.com>
Message-ID: <CAO-CpEJf5jPTLkH5Hswubu7+Ucu2vEWHSPN+8d1PurOa=gne9Q@mail.gmail.com>

On Thu, 14 Feb 2019 at 15:52, Victor Stinner <vstinner at redhat.com> wrote:

> Le jeu. 14 f?vr. 2019 ? 14:38, Matthias Klose <doko at ubuntu.com> a ?crit :
> > Debian's concern about pointing python to python3 is that it will break
> software
> > after an upgrade.  The current state seems is still the same that Debian
> doesn't
> > want to ship a python symlink after the Python2 removal.
>
> The other safer alternative is to start to provide "py" launcher on
> Unix as well. Since it's something new, it's perfectly fine to decide
> from the start to make it point to the latest Python version by
> default.
>

While I like very much the idea of having `py` as command, does it really
need to be a wrapper command?  Why can't it simply be a symlink?

    /usr/bin/py -> /usr/bin/python3

I worry about (1) startup time overhead of starting another process, (2)
added complexity of learning about py's additional command-line options, we
don't really need them, imho.


> Victor
> --
> Night gathers, and now my watch begins. It shall not end until my death.
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/gjcarneiro%40gmail.com
>


-- 
Gustavo J. A. M. Carneiro
Gambit Research
"The universe is always one step beyond logic." -- Frank Herbert
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190214/b6b03b0c/attachment.html>

From eelizondo at fb.com  Thu Feb 14 14:01:36 2019
From: eelizondo at fb.com (Eddie Elizondo)
Date: Thu, 14 Feb 2019 19:01:36 +0000
Subject: [Python-Dev] An update on heap-allocated types
Message-ID: <94D97A63-B1AD-4E4B-A451-2ECB7DBF8D3A@fb.com>

I?ll be adding a change to move the Py_INCREF of heap allocated types from PyType_GenericAlloc to PyObject_Init. You can follow the discussion and/or add comments to: https://bugs.python.org/issue35810. This change will make types created through PyType_FromSpec behave like classes in managed code. Thus, making CPython much safer.

Without this change, there are a couple of edge cases where the use of PyObject_{,GC}_New{,Var} does not correctly increase refcount. This leads to weird behavior, especially when migrating types from PyType_Ready to PyType_FromSpec. For example, consider a static type with tp_new = NULL and tp_dealloc = NULL. This type initializes instances through PyObject_New and never increases the type?s refcount. tp_dealloc will be a no-op since it's NULL and it's a static type. When this type is migrated to PyType_FromSpec, tp_dealloc will now inherit subtype_dealloc which decrefs the type. This leads to a crash.

For the vast majority of existing code this should not have a visible side effect. And, at worst, this will only cause some type to become immortal. I?ve added instructions in the ?Porting to Python 3.8? to correctly account for this new incref along with examples. In general, there are only two cases that would require any modification:

  1.  If the type creates instances through PyObject_{,GC}_New{,Var} and the type manually increfs afterwards. The fix here is to remove that manual incref.
  2.  If the type has a custom tp_dealloc and it?s not decrefing the type. The fix here is that a custom tp_dealloc should ALWAYS decref the type.

Open to feedback/discussion so feel free to reply if you have any questions!

- Eddie Elizondo
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190214/2736c245/attachment-0001.html>

From steve.dower at python.org  Thu Feb 14 14:38:25 2019
From: steve.dower at python.org (Steve Dower)
Date: Thu, 14 Feb 2019 11:38:25 -0800
Subject: [Python-Dev] Is distutils.util.get_platform() the "current" or the
 "target" platform
Message-ID: <7f0f615b-fab5-0504-b1bf-20b3c9cd0402@python.org>

As part of adding ARM32 support for Windows, we need to enable 
cross-compilation in distutils. This is easy enough, though it requires 
somehow getting the target platform as well as the current platform.

Right now, the change at https://github.com/python/cpython/pull/11774 
adds a get_target_platform() function for this and updates (as far as I 
can tell) all uses of get_platform() to use this instead. I would rather 
just change get_platform() to return the target platform.

The current docs are somewhat vague on exactly what this function does, 
and I suspect have been mostly written from an "always build from 
source" mentality that may have implied, but not explicitly considered 
cross-compilation.

https://docs.python.org/3/distutils/apiref.html#distutils.util.get_platform

"Return a string that identifies the current platform. This is used 
mainly to distinguish platform-specific build directories and 
platform-specific built distributions."

So it says "current" platform, explicitly says that "os.uname()" is the 
source, but then goes on to say:

"For non-POSIX platforms, currently just returns sys.platform."

Which is incorrect, as sys.platform is always "win32" always but 
get_platform() already returns "win-amd64" for 64-bit builds.

And also:

"For Mac OS X systems the OS version reflects the minimal version on 
which binaries will run (that is, the value of MACOSX_DEPLOYMENT_TARGET 
during the build of Python), not the OS version of the current system."

So it seems like this function is already returning "the default 
platform that should be used when building extensions" - ignoring bugs 
in libraries that monkeypatch distutils, the "--plat-name" option should 
entirely override the return value of this function.

Given this, does it seem to be okay to have it determine and return the 
target platform rather than the host platform? Right now, that would 
only affect the new target of building for win-arm32, but I would also 
like to update the documentation to make it more about how this value 
should be used rather than where it comes from.

Any objections or concerns?

Cheers,
Steve

From greg at krypto.org  Thu Feb 14 14:47:38 2019
From: greg at krypto.org (Gregory P. Smith)
Date: Thu, 14 Feb 2019 11:47:38 -0800
Subject: [Python-Dev] Is distutils.util.get_platform() the "current" or
 the "target" platform
In-Reply-To: <7f0f615b-fab5-0504-b1bf-20b3c9cd0402@python.org>
References: <7f0f615b-fab5-0504-b1bf-20b3c9cd0402@python.org>
Message-ID: <CAGE7PNLMHkQ8AcmPjk=aOmMgv81QQcomFHJnofbEg8dTVEG-qQ@mail.gmail.com>

On Thu, Feb 14, 2019 at 11:38 AM Steve Dower <steve.dower at python.org> wrote:

> As part of adding ARM32 support for Windows, we need to enable
> cross-compilation in distutils. This is easy enough, though it requires
> somehow getting the target platform as well as the current platform.
>
> Right now, the change at https://github.com/python/cpython/pull/11774
> adds a get_target_platform() function for this and updates (as far as I
> can tell) all uses of get_platform() to use this instead. I would rather
> just change get_platform() to return the target platform.
>
> The current docs are somewhat vague on exactly what this function does,
> and I suspect have been mostly written from an "always build from
> source" mentality that may have implied, but not explicitly considered
> cross-compilation.
>
> https://docs.python.org/3/distutils/apiref.html#distutils.util.get_platform
>
> "Return a string that identifies the current platform. This is used
> mainly to distinguish platform-specific build directories and
> platform-specific built distributions."
>
> So it says "current" platform, explicitly says that "os.uname()" is the
> source, but then goes on to say:
>
> "For non-POSIX platforms, currently just returns sys.platform."
>
> Which is incorrect, as sys.platform is always "win32" always but
> get_platform() already returns "win-amd64" for 64-bit builds.
>
> And also:
>
> "For Mac OS X systems the OS version reflects the minimal version on
> which binaries will run (that is, the value of MACOSX_DEPLOYMENT_TARGET
> during the build of Python), not the OS version of the current system."
>
> So it seems like this function is already returning "the default
> platform that should be used when building extensions" - ignoring bugs
> in libraries that monkeypatch distutils, the "--plat-name" option should
> entirely override the return value of this function.
>
> Given this, does it seem to be okay to have it determine and return the
> target platform rather than the host platform? Right now, that would
> only affect the new target of building for win-arm32, but I would also
> like to update the documentation to make it more about how this value
> should be used rather than where it comes from.
>
> Any objections or concerns?
>

To alleviate confusion long term I'd love it if we could deprecate the
unqualified get_platform() API and point people towards always being
explicit about get_target_platform() vs get_current_platform().

There are valid reasons for people to be expecting either target or current
return values from get_platform(), but I agree with you, having it return
the target platform *feels* more likely to be what people want.  It'd be
worth auditing a random sample of people's calls of this API in open source
projects to confirm that intuition.

-gps
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190214/68ba943f/attachment.html>

From larry at hastings.org  Thu Feb 14 21:29:32 2019
From: larry at hastings.org (Larry Hastings)
Date: Thu, 14 Feb 2019 18:29:32 -0800
Subject: [Python-Dev] Proposed dates for Python 3.4.10 and Python 3.5.7
Message-ID: <ad821da8-a8f3-0ff8-6366-b24c0209d3c3@hastings.org>


Howdy howdy!? It's time to make the next bugfix release of 3.5--and the 
/final/ release /ever/ of Python 3.4. Here's the schedule I propose:

    3.4.10rc1 and 3.5.7rc1 - Saturday March 2 2019
    3.4.10 final and 3.5.7 final - Saturday March 16 2019


What's going in these releases?? Not much.? I have two outstanding PRs 
against 3.5:

    bpo-33127 GH-10994: Compatibility patch for LibreSSL 2.7.0
    bpo-34623 GH-9933: XML_SetHashSalt in _elementtree

and one PR against 3.4:

    bpo-34623 GH-9953: Use XML_SetHashSalt in _elementtree

I expect to merge all three of those, I just need to get around to it.? 
There's one more recent security fix (bpo-35746, GH-11569) that? I want 
in these releases that still needs backporting.


And that's the entire list.? bpo-34623 is the only current release 
blocker for either 3.4 or 3.5--I'm not aware of anything else in the 
pipeline.? If you have anything you think needs to go into the next 3.5, 
or the final 3.4, and it's /not/ listed above, please either file a 
GitHub PR, file a release-blocker bug on bpo, or email me directly.


Good night sweet Python 3.4, and flights of angels sing thee to thy rest!


//arry/

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190214/329387b4/attachment.html>

From mhroncok at redhat.com  Fri Feb 15 06:01:15 2019
From: mhroncok at redhat.com (=?UTF-8?Q?Miro_Hron=c4=8dok?=)
Date: Fri, 15 Feb 2019 12:01:15 +0100
Subject: [Python-Dev] Proposed dates for Python 3.4.10 and Python 3.5.7
In-Reply-To: <ad821da8-a8f3-0ff8-6366-b24c0209d3c3@hastings.org>
References: <ad821da8-a8f3-0ff8-6366-b24c0209d3c3@hastings.org>
Message-ID: <4e9b1cc3-0ed1-d86d-fcf6-84f4abc18066@redhat.com>

On 15. 02. 19 3:29, Larry Hastings wrote:
> If you have 
> anything you think needs to go into the next 3.5, or the final 3.4, and it's 
> /not/ listed above, please either file a GitHub PR, file a release-blocker bug 
> on bpo, or email me directly.

I've checked Fedora CVE bugs against python 3.4 and 3.5. Here is one missing I 
found:

CVE-2018-20406 https://bugs.python.org/issue34656
memory exhaustion in Modules/_pickle.c:1393
Marked as resolved, but I don't see it fixed on 3.5 or 3.4.

Should we get it fixed? openSUSE AFAK has backported the patch.

-- 
Miro Hron?ok
--
Phone: +420777974800
IRC: mhroncok

From vstinner at redhat.com  Fri Feb 15 06:28:45 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Fri, 15 Feb 2019 12:28:45 +0100
Subject: [Python-Dev] Proposed dates for Python 3.4.10 and Python 3.5.7
In-Reply-To: <4e9b1cc3-0ed1-d86d-fcf6-84f4abc18066@redhat.com>
References: <ad821da8-a8f3-0ff8-6366-b24c0209d3c3@hastings.org>
 <4e9b1cc3-0ed1-d86d-fcf6-84f4abc18066@redhat.com>
Message-ID: <CA+3bQGFmQqOUfih6oONT7711GWrb3fxmJ5g9UpZhC0Sf64jaEg@mail.gmail.com>

Hi,

Le ven. 15 f?vr. 2019 ? 12:07, Miro Hron?ok <mhroncok at redhat.com> a ?crit :
> I've checked Fedora CVE bugs against python 3.4 and 3.5. Here is one missing I
> found:
>
> CVE-2018-20406 https://bugs.python.org/issue34656
> memory exhaustion in Modules/_pickle.c:1393
> Marked as resolved, but I don't see it fixed on 3.5 or 3.4.
>
> Should we get it fixed? openSUSE AFAK has backported the patch.

I'm working on fixes :-) I had a draft email but you was faster than
me to post yours.

Le ven. 15 f?vr. 2019 ? 03:29, Larry Hastings <larry at hastings.org> a ?crit :
> What's going in these releases?  Not much.  I have two outstanding PRs against 3.5:
>
> bpo-33127 GH-10994: Compatibility patch for LibreSSL 2.7.0
> bpo-34623 GH-9933: XML_SetHashSalt in _elementtree

According to my tool tracking security fixes, 3.5 lacks fixes for:

https://python-security.readthedocs.io/vuln/ssl-crl-dps-dos.html
https://python-security.readthedocs.io/vuln/pickle-load-dos.html
https://python-security.readthedocs.io/vuln/xml-pakage-ignore-environment.html

> and one PR against 3.4:
>
> bpo-34623 GH-9953: Use XML_SetHashSalt in _elementtree

and 3.4 lacks fixes for:

https://python-security.readthedocs.io/vuln/ssl-crl-dps-dos.html
https://python-security.readthedocs.io/vuln/pickle-load-dos.html =>
Matej Cepl backported the change to 3.4, but the patch should be
converted into a PR
https://python-security.readthedocs.io/vuln/xml-pakage-ignore-environment.html

Victor
-- 
Night gathers, and now my watch begins. It shall not end until my death.

From vstinner at redhat.com  Fri Feb 15 07:05:26 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Fri, 15 Feb 2019 13:05:26 +0100
Subject: [Python-Dev] Proposed dates for Python 3.4.10 and Python 3.5.7
In-Reply-To: <CA+3bQGFmQqOUfih6oONT7711GWrb3fxmJ5g9UpZhC0Sf64jaEg@mail.gmail.com>
References: <ad821da8-a8f3-0ff8-6366-b24c0209d3c3@hastings.org>
 <4e9b1cc3-0ed1-d86d-fcf6-84f4abc18066@redhat.com>
 <CA+3bQGFmQqOUfih6oONT7711GWrb3fxmJ5g9UpZhC0Sf64jaEg@mail.gmail.com>
Message-ID: <CA+3bQGEj-=dgm+qgbmM8buZtZOxmo6W8obTisMJ9RxUz6mRDQw@mail.gmail.com>

I wrote fixes:

Le ven. 15 f?vr. 2019 ? 12:28, Victor Stinner <vstinner at redhat.com> a ?crit :
> https://python-security.readthedocs.io/vuln/ssl-crl-dps-dos.html

3.5: https://github.com/python/cpython/pull/11867
3.4: https://github.com/python/cpython/pull/11868

> https://python-security.readthedocs.io/vuln/pickle-load-dos.html

3.5: https://github.com/python/cpython/pull/11869
3.4: https://github.com/python/cpython/pull/11870

> https://python-security.readthedocs.io/vuln/xml-pakage-ignore-environment.html

3.5: https://github.com/python/cpython/pull/11871
3.4: https://github.com/python/cpython/pull/11872

It would be nice if someone can review these PRs to help Larry ;-)

Victor


Victor

From g.rodola at gmail.com  Fri Feb 15 07:44:07 2019
From: g.rodola at gmail.com (Giampaolo Rodola')
Date: Fri, 15 Feb 2019 13:44:07 +0100
Subject: [Python-Dev] Adding test.support.safe_rmpath()
In-Reply-To: <CAP1=2W5rV7sfrhDmBuQSnmfdcpRK6pM-bZBKE-AQOHXMBKq28g@mail.gmail.com>
References: <CAFYqXL-UsoJ582AKjvtx7gowqE6_CPwMQdoQRyp+9TzEO5002w@mail.gmail.com>
 <7AF16DF0-A237-44B7-B272-7427CB5AD5B0@mac.com>
 <CAFYqXL_-nyTX98+XzaL37X5sOQgX=w-gpttoFxJa2j+15d0JvQ@mail.gmail.com>
 <3C12F8E9-E825-4F28-9CFE-A81FB35694A6@mac.com>
 <CALFfu7CFhPip2T0jbMoX33QKw9T=UeOrR86vKcYnMcMhE1K53A@mail.gmail.com>
 <CAFYqXL8=pyMfA5ZZp=w3w+oAJ0cO7=XMhhz=o=MDt_ji9i6w8A@mail.gmail.com>
 <6083f67a-8413-fc40-0118-cfab2284ae2a@timgolden.me.uk>
 <CAFYqXL8Oufz4aQuTggbM04kqU+u36QqatYgKLsYSObpMDx4sBQ@mail.gmail.com>
 <CAP1=2W5rV7sfrhDmBuQSnmfdcpRK6pM-bZBKE-AQOHXMBKq28g@mail.gmail.com>
Message-ID: <CAFYqXL9onVCw4-pPnAx2xmFxviHqLMTyMOz6c5OOLpebCF1MAw@mail.gmail.com>

On Thu, Feb 14, 2019 at 6:48 PM Brett Cannon <brett at python.org> wrote:

>
> With -j you can do parallel testing and I know I always run with that on.
> But TESTFN does *attempt *to account for that
> <https://github.com/python/cpython/blob/8a1657b93469580ef345c7c91738587f3d76e87d/Lib/test/support/__init__.py#L835>
> by using the PID in the name.
>

Good to know, thanks. TESTFN aside, I was more interested in knowing if
there's interest in landing something like this in test.support:

def rmpath(path):
    "Try to remove a path regardless of its type."
    if os.path.isdir(path):
        test.support.rmtree(path)
    elif os.path.exists(path):
        test.support.unlink(path)

-- 
Giampaolo - http://grodola.blogspot.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190215/16a033f6/attachment.html>

From stephane at wirtel.be  Fri Feb 15 11:13:30 2019
From: stephane at wirtel.be (Stephane Wirtel)
Date: Fri, 15 Feb 2019 17:13:30 +0100
Subject: [Python-Dev] Python 3.8.0a1 with sqlite 3.27.1 -> OK
Message-ID: <20190215161330.GA17161@xps>

Hi all,

I wanted to test with the new version of SQLite3 3.27.1 and there is no
issue (compiled with a debian:latest docker image and the last version
of 3.27.1).

Sorry, it's not a bug, I wanted to inform you there is no issue with the
last stable version of SQLite3.

Have a nice week-end, 

St?phane

root at 3b7c342683ff:/src# ./python -m test test_sqlite -v
== CPython 3.8.0a1+ (default, Feb 15 2019, 16:05:54) [GCC 6.3.0 20170516]
== Linux-4.20.7-200.fc29.x86_64-x86_64-with-glibc2.17 little-endian
== cwd: /src/build/test_python_15721
== CPU count: 4
== encodings: locale=UTF-8, FS=utf-8
Run tests sequentially
0:00:00 load avg: 1.99 [1/1] test_sqlite
test_sqlite: testing with version '2.6.0', sqlite_version '3.27.1'

...

Ran 288 tests in 0.553s

OK (skipped=3)

== Tests result: SUCCESS ==

1 test OK.

Total duration: 654 ms
Tests result: SUCCESS

-- 
St?phane Wirtel - https://wirtel.be - @matrixise

From xdegaye at gmail.com  Fri Feb 15 11:57:38 2019
From: xdegaye at gmail.com (Xavier de Gaye)
Date: Fri, 15 Feb 2019 17:57:38 +0100
Subject: [Python-Dev] buildbottest on Android emulator with docker
Message-ID: <feb49ef1-64de-971e-bf36-11ae64a5fdd2@gmail.com>

The following command runs the buildbottest on an Android emulator with docker (it will use a little bit more than 11 GB):

     $ docker run -it --privileged xdegaye/abifa:r14b-24-x86_64-master

This command does:
* pull an image from the Docker hub (only the first time that the command is run, note that this a 2 GB download !) and start a container
* pull the latest changes from the GitHub cpython repository and cross-compile python
* start an Android emulator and install python on it
* run the buildbottest target of cpython Makefile

The image is built from a Dockerfile [2].

This same image can also be used with the 'bash' command line argument to enter bash in the container and run python interactively on the emulator [1].  If the 'docker run' command also sets a bind mount to a local cpython repository, then it is possible to develop/debug/fix python on the emulator running in this container using one's own clone of cpython.

[1] documentation at https://xdegaye.gitlab.io/abifa/docker.html
[2] Dockerfile at https://gitlab.com/xdegaye/abifa/blob/master/docker/Dockerfile.r14b-24-x86_64-master

Xavier

From steve.dower at python.org  Fri Feb 15 12:43:13 2019
From: steve.dower at python.org (Steve Dower)
Date: Fri, 15 Feb 2019 09:43:13 -0800
Subject: [Python-Dev] Adding test.support.safe_rmpath()
In-Reply-To: <CAP1=2W5rV7sfrhDmBuQSnmfdcpRK6pM-bZBKE-AQOHXMBKq28g@mail.gmail.com>
References: <CAFYqXL-UsoJ582AKjvtx7gowqE6_CPwMQdoQRyp+9TzEO5002w@mail.gmail.com>
 <7AF16DF0-A237-44B7-B272-7427CB5AD5B0@mac.com>
 <CAFYqXL_-nyTX98+XzaL37X5sOQgX=w-gpttoFxJa2j+15d0JvQ@mail.gmail.com>
 <3C12F8E9-E825-4F28-9CFE-A81FB35694A6@mac.com>
 <CALFfu7CFhPip2T0jbMoX33QKw9T=UeOrR86vKcYnMcMhE1K53A@mail.gmail.com>
 <CAFYqXL8=pyMfA5ZZp=w3w+oAJ0cO7=XMhhz=o=MDt_ji9i6w8A@mail.gmail.com>
 <6083f67a-8413-fc40-0118-cfab2284ae2a@timgolden.me.uk>
 <CAFYqXL8Oufz4aQuTggbM04kqU+u36QqatYgKLsYSObpMDx4sBQ@mail.gmail.com>
 <CAP1=2W5rV7sfrhDmBuQSnmfdcpRK6pM-bZBKE-AQOHXMBKq28g@mail.gmail.com>
Message-ID: <1c094bac-a1d1-aaaf-4e3a-0f110c0dfd4f@python.org>

On 14Feb.2019 0948, Brett Cannon wrote:
> On Thu, Feb 14, 2019 at 7:26 AM Giampaolo Rodola' <g.rodola at gmail.com
> <mailto:g.rodola at gmail.com>> wrote:
>     Extra: an argument in favor of using tempfile.mkdtemp() instead of
>     TESTFN is parallel testing, but I think we're not using it.
> 
> 
> With -j you can do parallel testing and I know I always run with that
> on. But TESTFN does /attempt /to account for that
> <https://github.com/python/cpython/blob/8a1657b93469580ef345c7c91738587f3d76e87d/Lib/test/support/__init__.py#L835>
> by using the PID in the name.
> 
> Having said that, I do use tempfile like Eric, Ronald, and Tim when I
> write tests as I have real-world experience using tempfile so I usually
> remember to clean up versus TESTFN which is Python stdlib internals only
> and I have to remember that it won't clean up itself.

I spend a decent amount of time rewriting tests to use TESTFN, since
that enables us to keep all test files constrained to either a default
directory or the one specified by --tempdir (which is a relatively
recent addition, I'll grant, but it's been useful for improving test
performance and stability when the default TEMP locations are not
reliable - e.g. if $tmp is a mount point it breaks some tests, if it's a
symlink it breaks others, if it's got particular permissions it breaks
others again, etc.).

That said, I'd love to have a context manager that we can use to make
this easier. Really, none of us should be having to decide "how am I
going to use a temporary location on the file system in my test",
because we should have one obvious (and easy!) way to do it.

But please, don't keep reinventing the functions we already have in
test.support for doing this (unless you're putting better versions in
test.support!)

Cheers,
Steve

From vstinner at redhat.com  Fri Feb 15 12:51:58 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Fri, 15 Feb 2019 18:51:58 +0100
Subject: [Python-Dev] OpenSSL 1.1.1 fixes merged into Python 2.7
Message-ID: <CA+3bQGFxwvyR9kr1bfBAJE6g4s+fizbSw6ocmMOxTbQeKJn59A@mail.gmail.com>

Hi,

I reviewed and merged pull requests written by my colleague
Charalampos Stratakis to backport OpenSSL 1.1.1 fixes into the future
Python 2.7.16. Benjamin Peterson (Python 2.7 release manager) wrote
me: "I would very much like to see 1.1.1 support in a Python 2.7
release." These changes are backports of Python 3.6 changes written by
Christian Heimes.

With these changes, Python 2.7 becomes more secure and should be
closer to Python 3.6 security.

I apologize for merging these changes late in 2.7.16 devcycle, but we
were very busy with higher priority issues :-( I hope that 2.7.16
release candidate will provide enough time to test properly these
changes (and fix regressions if any).

So far, I'm only aware of one issue on one specific buildbot worker,
but I'm not sure that the test failures are regressions caused by
merged ssl changes (the worker was offline for 1 month for an unknown
reason):
https://bugs.python.org/issue33570

Summary of the ssl changes:

(*) ssl.SSLContext is now created with secure default values. The
options OP_NO_COMPRESSION, OP_CIPHER_SERVER_PREFERENCE,
OP_SINGLE_DH_USE, OP_SINGLE_ECDH_USE, OP_NO_SSLv2 (except for
PROTOCOL_SSLv2), OP_NO_SSLv3 (except for PROTOCOL_SSLv3) are set by
default. The initial cipher suite list contains only "HIGH" ciphers,
no "NULL" ciphers and no "MD5" ciphers (except for PROTOCOL_SSLv2).

(*) OpenSSL 1.1.1 has TLS 1.3 cipher suites enabled by default. The
suites cannot be disabled with SSLContext.set_ciphers().

(*) Add a new ssl.OP_ENABLE_MIDDLEBOX_COMPAT constant

(*) Tools/ssl/multissltests.py has been updated for OpenSSL 1.1.1.


I merged 4 changes into 2.7:

commit c49f63c1761ce03df7850b9e0b31a18c432dac64
Author: stratakis <cstratak at redhat.com>
Date:   Fri Feb 15 14:17:12 2019 +0100

    [2.7] bpo-33570: TLS 1.3 ciphers for OpenSSL 1.1.1 (GH-6976)
(GH-8760) (GH-10607)

    Change TLS 1.3 cipher suite settings for compatibility with OpenSSL
    1.1.1-pre6 and newer. OpenSSL 1.1.1 will have TLS 1.3 cipers enabled by
    default.

    Also update multissltests to test with latest OpenSSL.

    Signed-off-by: Christian Heimes <christian at python.org>.
    (cherry picked from commit 3e630c541b35c96bfe5619165255e559f577ee71)
    Co-authored-by: Christian Heimes <christian at python.org>

commit b8eaec697a2b5d9d2def2950a0aa50e8ffcf1059
Author: stratakis <cstratak at redhat.com>
Date:   Fri Feb 15 15:24:11 2019 +0100

    [2.7] bpo-28043: improved default settings for SSLContext (GH-10608)

    The options OP_NO_COMPRESSION, OP_CIPHER_SERVER_PREFERENCE,
    OP_SINGLE_DH_USE, OP_SINGLE_ECDH_USE, OP_NO_SSLv2 (except
    for PROTOCOL_SSLv2), and OP_NO_SSLv3 (except for PROTOCOL_SSLv3)
    are set by default. The initial cipher suite list contains only
    HIGH ciphers, no NULL ciphers and MD5 ciphers (except for PROTOCOL_SSLv2).

    (cherry picked from commit 358cfd426ccc0fcd6a7940d306602138e76420ae)

commit 28eb87f4f558952f259fada7be1ab5b31b8a91ef (upstream/2.7, 2.7)
Author: stratakis <cstratak at redhat.com>
Date:   Fri Feb 15 17:18:58 2019 +0100

    Fixup from test_ssl test_default_ecdh_curve (GH-11877)

    Partial backport from cb5b68abdeb1b1d56c581d5b4d647018703d61e3

    Co-authored-by: Christian Heimes <christian at python.org>

commit 2149a9ad7a9d39d7d680ec0fb602042c91057484 (HEAD -> 2.7, upstream/2.7)
Author: stratakis <cstratak at redhat.com>
Date:   Fri Feb 15 18:27:44 2019 +0100

    [2.7] bpo-32947: Fixes for TLS 1.3 and OpenSSL 1.1.1 (GH-8761) (GH-11876)

    Backport of TLS 1.3 related fixes from 3.7.

    Misc fixes and workarounds for compatibility with OpenSSL 1.1.1 from git
    master and TLS 1.3 support. With OpenSSL 1.1.1, Python negotiates TLS 1.3 by
    default. Some test cases only apply to TLS 1.2.

    OpenSSL 1.1.1 has added a new option OP_ENABLE_MIDDLEBOX_COMPAT for TLS
    1.3. The feature is enabled by default for maximum compatibility with
    broken middle boxes. Users should be able to disable the hack and
CPython's test suite needs
    it to verify default options

    Signed-off-by: Christian Heimes <christian at python.org>
    (cherry picked from commit 2a4ee8aa01d61b6a9c8e9c65c211e61bdb471826)


And there is a minor multissltests update that's going will be merged as well:
https://github.com/python/cpython/pull/11879

Victor
-- 
Night gathers, and now my watch begins. It shall not end until my death.

From zachary.ware+pydev at gmail.com  Fri Feb 15 13:01:40 2019
From: zachary.ware+pydev at gmail.com (Zachary Ware)
Date: Fri, 15 Feb 2019 12:01:40 -0600
Subject: [Python-Dev] Adding test.support.safe_rmpath()
In-Reply-To: <1c094bac-a1d1-aaaf-4e3a-0f110c0dfd4f@python.org>
References: <CAFYqXL-UsoJ582AKjvtx7gowqE6_CPwMQdoQRyp+9TzEO5002w@mail.gmail.com>
 <7AF16DF0-A237-44B7-B272-7427CB5AD5B0@mac.com>
 <CAFYqXL_-nyTX98+XzaL37X5sOQgX=w-gpttoFxJa2j+15d0JvQ@mail.gmail.com>
 <3C12F8E9-E825-4F28-9CFE-A81FB35694A6@mac.com>
 <CALFfu7CFhPip2T0jbMoX33QKw9T=UeOrR86vKcYnMcMhE1K53A@mail.gmail.com>
 <CAFYqXL8=pyMfA5ZZp=w3w+oAJ0cO7=XMhhz=o=MDt_ji9i6w8A@mail.gmail.com>
 <6083f67a-8413-fc40-0118-cfab2284ae2a@timgolden.me.uk>
 <CAFYqXL8Oufz4aQuTggbM04kqU+u36QqatYgKLsYSObpMDx4sBQ@mail.gmail.com>
 <CAP1=2W5rV7sfrhDmBuQSnmfdcpRK6pM-bZBKE-AQOHXMBKq28g@mail.gmail.com>
 <1c094bac-a1d1-aaaf-4e3a-0f110c0dfd4f@python.org>
Message-ID: <CAKJDb-P-Jvw0w+Qkw8KjHn0xpQcaZ78dJG1MQdhyPcb7QLeAkg@mail.gmail.com>

On Fri, Feb 15, 2019 at 11:44 AM Steve Dower <steve.dower at python.org> wrote:
> That said, I'd love to have a context manager that we can use to make
> this easier. Really, none of us should be having to decide "how am I
> going to use a temporary location on the file system in my test",
> because we should have one obvious (and easy!) way to do it.

I found an old rejected issue [1] for adding a `tmpdir` method to
unittest.TestCase, which is actually a solution that we've
independently developed and use frequently for work.  It basically
works by registering a cleanup function before returning the path to
the temporary directory, so you just call `self.tmpdir()`, use the
path, forget about cleanup, and don't lose a level of indentation to a
context manager.  I think it would be worthwhile to reconsider this
addition to unittest, or add it as a standard base test class in
test.support (though either way it would need a cleaner and more
robust implementation than is offered in that issue).

[1] https://bugs.python.org/issue2156

-- 
Zach

From rob.cliffe at btinternet.com  Fri Feb 15 14:44:39 2019
From: rob.cliffe at btinternet.com (Rob Cliffe)
Date: Fri, 15 Feb 2019 19:44:39 +0000
Subject: [Python-Dev] datetime.timedelta total_microseconds
In-Reply-To: <CAOew_sG9nG+bOGB4gt2DSwuxP8SgZW13WznwNf-Y5DhabnZZjQ@mail.gmail.com>
References: <CAOew_sG9nG+bOGB4gt2DSwuxP8SgZW13WznwNf-Y5DhabnZZjQ@mail.gmail.com>
Message-ID: <7475b4be-800c-2477-e793-df1ce6cef114@btinternet.com>

A function with "microseconds" in the name IMO misleadingly suggests 
that it has something closer to microsecond accuracy than a 1-second 
granularity.
Rob Cliffe

On 14/02/2019 05:05:54, Richard Belleville via Python-Dev wrote:
> In a recent code review, the following snippet was called out as 
> reinventing the
> wheel:
>
> _MICROSECONDS_PER_SECOND = 1000000
>
>
> def _timedelta_to_microseconds(delta):
> ? return int(delta.total_seconds() * _MICROSECONDS_PER_SECOND)
>
>
> The reviewer thought that there must already exist a standard library 
> function
> that fulfills this functionality. After we had both satisfied 
> ourselves that we
> hadn't simply missed something in the documentation, we decided that 
> we had
> better raise the issue with a wider audience.
>
> Does this functionality already exist within the standard library? If 
> not, would
> a datetime.timedelta.total_microseconds function be a reasonable 
> addition? I
> would be happy to submit a patch for such a thing.
>
> Richard Belleville
>
> <http://www.avg.com/email-signature?utm_medium=email&utm_source=link&utm_campaign=sig-email&utm_content=emailclient> 
> 	Virus-free. www.avg.com 
> <http://www.avg.com/email-signature?utm_medium=email&utm_source=link&utm_campaign=sig-email&utm_content=emailclient> 
>
>
> <#DAB4FAD8-2DD7-40BB-A1B8-4E2AA1F9FDF2>
>
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe: https://mail.python.org/mailman/options/python-dev/rob.cliffe%40btinternet.com

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190215/79582420/attachment.html>

From chris.barker at noaa.gov  Fri Feb 15 16:48:57 2019
From: chris.barker at noaa.gov (Chris Barker)
Date: Fri, 15 Feb 2019 13:48:57 -0800
Subject: [Python-Dev] datetime.timedelta total_microseconds
In-Reply-To: <7475b4be-800c-2477-e793-df1ce6cef114@btinternet.com>
References: <CAOew_sG9nG+bOGB4gt2DSwuxP8SgZW13WznwNf-Y5DhabnZZjQ@mail.gmail.com>
 <7475b4be-800c-2477-e793-df1ce6cef114@btinternet.com>
Message-ID: <CALGmxE+_tC3LimrsMS4ROzYqQ24nJTnSyQRLBGd8kEzukEVQqA@mail.gmail.com>

On Fri, Feb 15, 2019 at 11:58 AM Rob Cliffe via Python-Dev <
python-dev at python.org> wrote:

> A function with "microseconds" in the name IMO misleadingly suggests that
> it has something closer to microsecond accuracy than a 1-second granularity.
>

it sure does, but `delta.total_seconds()` is a float, so ms accuracy is
preserved.

However, if you DO want a "timedelta_to_microseconds" function, it really
should use the microseconds field in the timedelta object. I haven't
thought it through, but it makes me nervous to convert to floating point,
and then back again -- for some large values of timedelta some precision
may be lost.

Also:

_MICROSECONDS_PER_SECOND = 1000000


really? why in the world would you define a constant for something that
simple that can never change? (and probably isn't used in more than one
place anyway

As Alexander pointed out the canonical way to spell this would be:

delta / timedelta(microseconds=1)

but I think that is less than obvious to the usual user, so I think a:

delta.total_microseconds()

would be a reasonable addition.

I know I use .totalseconds() quite a bit, and would not want to have to
spell it:

delta / timedelta(seconds=1)

(and can't do that in py2 anyway)

-CHB

-- 

Christopher Barker, Ph.D.
Oceanographer

Emergency Response Division
NOAA/NOS/OR&R            (206) 526-6959   voice
7600 Sand Point Way NE   (206) 526-6329   fax
Seattle, WA  98115       (206) 526-6317   main reception

Chris.Barker at noaa.gov
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190215/e64e426d/attachment.html>

From steve.dower at python.org  Fri Feb 15 17:02:43 2019
From: steve.dower at python.org (Steve Dower)
Date: Fri, 15 Feb 2019 14:02:43 -0800
Subject: [Python-Dev] Is distutils.util.get_platform() the "current" or
 the "target" platform
In-Reply-To: <CAGE7PNLMHkQ8AcmPjk=aOmMgv81QQcomFHJnofbEg8dTVEG-qQ@mail.gmail.com>
References: <7f0f615b-fab5-0504-b1bf-20b3c9cd0402@python.org>
 <CAGE7PNLMHkQ8AcmPjk=aOmMgv81QQcomFHJnofbEg8dTVEG-qQ@mail.gmail.com>
Message-ID: <a97bbb7a-5e4d-7d54-afa1-ed195d573d90@python.org>

On 14Feb2019 1147, Gregory P. Smith wrote:
> To alleviate confusion long term I'd love it if we could deprecate the 
> unqualified get_platform() API and point people towards always being 
> explicit about get_target_platform() vs get_current_platform().

This is an option too, though it doesn't reduce the code churn. I 
personally want to consider distutils deprecated as a whole anyway, and 
only maintained for the sake of our core needs.

> There are valid reasons for people to be expecting either target or 
> current return values from get_platform(), but I agree with you, having 
> it return the target platform /feels/ more likely to be what people 
> want.? It'd be worth auditing a random sample of people's calls of this 
> API in open source projects to confirm that intuition.

I took a random sample of about 50 uses from GitHub and 100% of them 
were copies of our distutils/tests/test_util.py (not even kidding: 
https://github.com/search?q=distutils+get_platform&type=Code)

If you go far enough down the results, they're all copies of wheel's (or 
pip's) pep425tags.py, which import distutils.util but don't seem to use 
get_platform

I'm inclined to say that nobody but us uses this API :) Does that make 
it seem more okay to "clarify" that it's returning target platform?

Cheers,
Steve

From greg at krypto.org  Fri Feb 15 17:23:09 2019
From: greg at krypto.org (Gregory P. Smith)
Date: Fri, 15 Feb 2019 14:23:09 -0800
Subject: [Python-Dev] Is distutils.util.get_platform() the "current" or
 the "target" platform
In-Reply-To: <a97bbb7a-5e4d-7d54-afa1-ed195d573d90@python.org>
References: <7f0f615b-fab5-0504-b1bf-20b3c9cd0402@python.org>
 <CAGE7PNLMHkQ8AcmPjk=aOmMgv81QQcomFHJnofbEg8dTVEG-qQ@mail.gmail.com>
 <a97bbb7a-5e4d-7d54-afa1-ed195d573d90@python.org>
Message-ID: <CAGE7PNKr3v6wv5mVtC=MQdhV0RVdGUou+EYWK44F6dn8b=Rzeg@mail.gmail.com>

On Fri, Feb 15, 2019 at 2:02 PM Steve Dower <steve.dower at python.org> wrote:

> On 14Feb2019 1147, Gregory P. Smith wrote:
> > To alleviate confusion long term I'd love it if we could deprecate the
> > unqualified get_platform() API and point people towards always being
> > explicit about get_target_platform() vs get_current_platform().
>
> This is an option too, though it doesn't reduce the code churn. I
> personally want to consider distutils deprecated as a whole anyway, and
> only maintained for the sake of our core needs.
>
> > There are valid reasons for people to be expecting either target or
> > current return values from get_platform(), but I agree with you, having
> > it return the target platform /feels/ more likely to be what people
> > want.  It'd be worth auditing a random sample of people's calls of this
> > API in open source projects to confirm that intuition.
>
> I took a random sample of about 50 uses from GitHub and 100% of them
> were copies of our distutils/tests/test_util.py (not even kidding:
> https://github.com/search?q=distutils+get_platform&type=Code)
>
> If you go far enough down the results, they're all copies of wheel's (or
> pip's) pep425tags.py, which import distutils.util but don't seem to use
> get_platform
>
> I'm inclined to say that nobody but us uses this API :) Does that make
> it seem more okay to "clarify" that it's returning target platform?
>

All of the instances of its use that I can find in a quick search
(excluding copies/clones/forks of other code) are using it to mean target
platform as well.

So yeah, I'd just go with that assumption.

-gps
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190215/bca2dd8c/attachment-0001.html>

From paul at ganssle.io  Fri Feb 15 17:23:43 2019
From: paul at ganssle.io (Paul Ganssle)
Date: Fri, 15 Feb 2019 17:23:43 -0500
Subject: [Python-Dev] datetime.timedelta total_microseconds
In-Reply-To: <CALGmxE+_tC3LimrsMS4ROzYqQ24nJTnSyQRLBGd8kEzukEVQqA@mail.gmail.com>
References: <CAOew_sG9nG+bOGB4gt2DSwuxP8SgZW13WznwNf-Y5DhabnZZjQ@mail.gmail.com>
 <7475b4be-800c-2477-e793-df1ce6cef114@btinternet.com>
 <CALGmxE+_tC3LimrsMS4ROzYqQ24nJTnSyQRLBGd8kEzukEVQqA@mail.gmail.com>
Message-ID: <4ca1c28b-d906-beea-875f-224ebb77cd0a@ganssle.io>

I'm still with Alexander on this. I see functions like total_X as
basically putting one of the arguments directly in the function name -
it should be `total_duration(units)`, not `total_units()`, because all
of those functions do the same thing and only differ in the units they use.

But Alexander's approach of "divide it by the base unit" is /even more
general/ than this, because it allows you to use non-traditional units
like weeks (timedelta(days=7)) or "two-day periods" or whatever you
want. If you use this idiom a lot and want a simple "calculate the
total" function, this should suffice:

def total_duration(td, *args, **kwargs):
??? return td / timedelta(*args, **kwargs)

Then you can spell "x.total_microseconds()" as:

total_duration(x, microseconds=1)

Or you can write it like this:

def total_duration(td, units='seconds'):
??? return td / timedelta(**{units: 1})

In which case it would be spelled:

total_duration(x, units='microseconds')

I don't see there being any compelling reason to add a bunch of methods
for a marginal (and I'd say arguable) gain in aesthetics.

On 2/15/19 4:48 PM, Chris Barker via Python-Dev wrote:
> On Fri, Feb 15, 2019 at 11:58 AM Rob Cliffe via Python-Dev
> <python-dev at python.org <mailto:python-dev at python.org>> wrote:
>
>     A function with "microseconds" in the name IMO misleadingly
>     suggests that it has something closer to microsecond accuracy than
>     a 1-second granularity.
>
>
> it sure does, but `delta.total_seconds()` is a float, so ms accuracy
> is preserved.
>
> However, if you DO want a "timedelta_to_microseconds" function, it
> really should use the microseconds field in the timedelta object. I
> haven't thought it through, but it makes me nervous to convert to
> floating point, and then back again -- for some large values of
> timedelta some precision may be lost.
>
> Also:
>
>> _MICROSECONDS_PER_SECOND = 1000000
>
> really? why in the world would you define a constant for something
> that simple that can never change? (and probably isn't used in more
> than one place anyway
> ?
> As Alexander pointed out the canonical way to spell this would be:
>
> delta / timedelta(microseconds=1)
>
> but I think that is less than obvious to the usual user, so I think a:
>
> delta.total_microseconds()
>
> would be a reasonable addition.
>
> I know I use .totalseconds() quite a bit, and would not want to have
> to spell it:
>
> delta / timedelta(seconds=1)
>
> (and can't do that in py2 anyway)
>
> -CHB
>
> -- 
>
> Christopher Barker, Ph.D.
> Oceanographer
>
> Emergency Response Division
> NOAA/NOS/OR&R ? ? ? ? ? ?(206) 526-6959?? voice
> 7600 Sand Point Way NE ??(206) 526-6329?? fax
> Seattle, WA ?98115 ? ? ??(206) 526-6317?? main reception
>
> Chris.Barker at noaa.gov <mailto:Chris.Barker at noaa.gov>
>
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe: https://mail.python.org/mailman/options/python-dev/paul%40ganssle.io
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190215/994408e0/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: OpenPGP digital signature
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190215/994408e0/attachment.sig>

From brett at python.org  Fri Feb 15 17:35:44 2019
From: brett at python.org (Brett Cannon)
Date: Fri, 15 Feb 2019 14:35:44 -0800
Subject: [Python-Dev] Another update for PEP 394 -- The "python" Command
 on Unix-Like Systems
In-Reply-To: <CAO-CpEJf5jPTLkH5Hswubu7+Ucu2vEWHSPN+8d1PurOa=gne9Q@mail.gmail.com>
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
 <e0e45870-96a4-e0f4-a4dd-78b2f1e792a2@ubuntu.com>
 <CA+3bQGGMrA7qGiA0BZ4z0DxbvG6nvZV5zUp8ZRUEHVG2vPhYrw@mail.gmail.com>
 <CAO-CpEJf5jPTLkH5Hswubu7+Ucu2vEWHSPN+8d1PurOa=gne9Q@mail.gmail.com>
Message-ID: <CAP1=2W496zXrTubGXy=xASP8L=vFhYnET+T=PCEkpQfAcw2B5g@mail.gmail.com>

On Thu, Feb 14, 2019 at 10:21 AM Gustavo Carneiro <gjcarneiro at gmail.com>
wrote:

>
>
> On Thu, 14 Feb 2019 at 15:52, Victor Stinner <vstinner at redhat.com> wrote:
>
>> Le jeu. 14 f?vr. 2019 ? 14:38, Matthias Klose <doko at ubuntu.com> a ?crit :
>> > Debian's concern about pointing python to python3 is that it will break
>> software
>> > after an upgrade.  The current state seems is still the same that
>> Debian doesn't
>> > want to ship a python symlink after the Python2 removal.
>>
>> The other safer alternative is to start to provide "py" launcher on
>> Unix as well. Since it's something new, it's perfectly fine to decide
>> from the start to make it point to the latest Python version by
>> default.
>>
>
> While I like very much the idea of having `py` as command, does it really
> need to be a wrapper command?  Why can't it simply be a symlink?
>
>     /usr/bin/py -> /usr/bin/python3
>

Because that is not guaranteed to be the *latest* version of Python 3, just
the *last* version installed or the *first* one that happens to be on PATH.


>
> I worry about (1) startup time overhead of starting another process,
>

It's being implemented in Rust, uses execv(), etc. The initial design is
such that it is meant to minimize overhead such that you should worry more
about what you import at startup than using the Python launcher if you're
that concerned with startup performance. :) But honestly, you don't *have*
to use the launcher; it's just for convenience.


> (2) added complexity of learning about py's additional command-line
> options, we don't really need them, imho.
>

There's only 2 more and they only work in the first position, so the
cognitive overhead is extremely low.

In my experience after using 'py' on Windows I consistently miss it on UNIX
now, so to me there is enough of a benefit that I will continue to chip
away at the project until it's done regardless of whether anyone else uses
it. :)

-Brett


>
>
>> Victor
>> --
>> Night gathers, and now my watch begins. It shall not end until my death.
>> _______________________________________________
>> Python-Dev mailing list
>> Python-Dev at python.org
>> https://mail.python.org/mailman/listinfo/python-dev
>> Unsubscribe:
>> https://mail.python.org/mailman/options/python-dev/gjcarneiro%40gmail.com
>>
>
>
> --
> Gustavo J. A. M. Carneiro
> Gambit Research
> "The universe is always one step beyond logic." -- Frank Herbert
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/brett%40python.org
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190215/095701ec/attachment.html>

From tahafut at gmail.com  Fri Feb 15 17:50:42 2019
From: tahafut at gmail.com (Henry Chen)
Date: Fri, 15 Feb 2019 14:50:42 -0800
Subject: [Python-Dev] datetime.timedelta total_microseconds
In-Reply-To: <4ca1c28b-d906-beea-875f-224ebb77cd0a@ganssle.io>
References: <CAOew_sG9nG+bOGB4gt2DSwuxP8SgZW13WznwNf-Y5DhabnZZjQ@mail.gmail.com>
 <7475b4be-800c-2477-e793-df1ce6cef114@btinternet.com>
 <CALGmxE+_tC3LimrsMS4ROzYqQ24nJTnSyQRLBGd8kEzukEVQqA@mail.gmail.com>
 <4ca1c28b-d906-beea-875f-224ebb77cd0a@ganssle.io>
Message-ID: <CAPAfSu=dC2ZQqVL2EkxEcUXfA7JmH66Or42hMEWHRsJMFaM+dg@mail.gmail.com>

Indeed there is a potential loss of precision:

_timedelta_to_microseconds(timedelta(0, 1, 1)) returns 1000000

where conversion function is defined according to the initial message in
this thread

On Fri, Feb 15, 2019 at 2:29 PM Paul Ganssle <paul at ganssle.io> wrote:

> I'm still with Alexander on this. I see functions like total_X as
> basically putting one of the arguments directly in the function name - it
> should be `total_duration(units)`, not `total_units()`, because all of
> those functions do the same thing and only differ in the units they use.
>
> But Alexander's approach of "divide it by the base unit" is *even more
> general* than this, because it allows you to use non-traditional units
> like weeks (timedelta(days=7)) or "two-day periods" or whatever you want.
> If you use this idiom a lot and want a simple "calculate the total"
> function, this should suffice:
>
> def total_duration(td, *args, **kwargs):
>     return td / timedelta(*args, **kwargs)
>
> Then you can spell "x.total_microseconds()" as:
>
> total_duration(x, microseconds=1)
>
> Or you can write it like this:
>
> def total_duration(td, units='seconds'):
>     return td / timedelta(**{units: 1})
>
> In which case it would be spelled:
>
> total_duration(x, units='microseconds')
>
> I don't see there being any compelling reason to add a bunch of methods
> for a marginal (and I'd say arguable) gain in aesthetics.
> On 2/15/19 4:48 PM, Chris Barker via Python-Dev wrote:
>
> On Fri, Feb 15, 2019 at 11:58 AM Rob Cliffe via Python-Dev <
> python-dev at python.org> wrote:
>
>> A function with "microseconds" in the name IMO misleadingly suggests that
>> it has something closer to microsecond accuracy than a 1-second granularity.
>>
>
> it sure does, but `delta.total_seconds()` is a float, so ms accuracy is
> preserved.
>
> However, if you DO want a "timedelta_to_microseconds" function, it really
> should use the microseconds field in the timedelta object. I haven't
> thought it through, but it makes me nervous to convert to floating point,
> and then back again -- for some large values of timedelta some precision
> may be lost.
>
> Also:
>
> _MICROSECONDS_PER_SECOND = 1000000
>
>
> really? why in the world would you define a constant for something that
> simple that can never change? (and probably isn't used in more than one
> place anyway
>
> As Alexander pointed out the canonical way to spell this would be:
>
> delta / timedelta(microseconds=1)
>
> but I think that is less than obvious to the usual user, so I think a:
>
> delta.total_microseconds()
>
> would be a reasonable addition.
>
> I know I use .totalseconds() quite a bit, and would not want to have to
> spell it:
>
> delta / timedelta(seconds=1)
>
> (and can't do that in py2 anyway)
>
> -CHB
>
> --
>
> Christopher Barker, Ph.D.
> Oceanographer
>
> Emergency Response Division
> NOAA/NOS/OR&R            (206) 526-6959   voice
> 7600 Sand Point Way NE   (206) 526-6329   fax
> Seattle, WA  98115       (206) 526-6317   main reception
>
> Chris.Barker at noaa.gov
>
> _______________________________________________
> Python-Dev mailing listPython-Dev at python.orghttps://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe: https://mail.python.org/mailman/options/python-dev/paul%40ganssle.io
>
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/tahafut%40gmail.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190215/2367ddce/attachment.html>

From chris.barker at noaa.gov  Fri Feb 15 18:13:35 2019
From: chris.barker at noaa.gov (Chris Barker)
Date: Fri, 15 Feb 2019 15:13:35 -0800
Subject: [Python-Dev] Another update for PEP 394 -- The "python" Command
 on Unix-Like Systems
In-Reply-To: <CAP1=2W496zXrTubGXy=xASP8L=vFhYnET+T=PCEkpQfAcw2B5g@mail.gmail.com>
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
 <e0e45870-96a4-e0f4-a4dd-78b2f1e792a2@ubuntu.com>
 <CA+3bQGGMrA7qGiA0BZ4z0DxbvG6nvZV5zUp8ZRUEHVG2vPhYrw@mail.gmail.com>
 <CAO-CpEJf5jPTLkH5Hswubu7+Ucu2vEWHSPN+8d1PurOa=gne9Q@mail.gmail.com>
 <CAP1=2W496zXrTubGXy=xASP8L=vFhYnET+T=PCEkpQfAcw2B5g@mail.gmail.com>
Message-ID: <CALGmxEKC9mP_SYLVMONpEZc1cW=vep62LHYAm8rP21L0sJVijg@mail.gmail.com>

On Fri, Feb 15, 2019 at 2:39 PM Brett Cannon <brett at python.org> wrote:

> In my experience after using 'py' on Windows I consistently miss it on
> UNIX now, so to me there is enough of a benefit that I will continue to
> chip away at the project until it's done regardless of whether anyone else
> uses it. :)
>

And I would REALLY like it if as much was the same as possible on all
platforms...

-CHB




> -Brett
>
>
>>
>>
>>> Victor
>>> --
>>> Night gathers, and now my watch begins. It shall not end until my death.
>>> _______________________________________________
>>> Python-Dev mailing list
>>> Python-Dev at python.org
>>> https://mail.python.org/mailman/listinfo/python-dev
>>> Unsubscribe:
>>> https://mail.python.org/mailman/options/python-dev/gjcarneiro%40gmail.com
>>>
>>
>>
>> --
>> Gustavo J. A. M. Carneiro
>> Gambit Research
>> "The universe is always one step beyond logic." -- Frank Herbert
>> _______________________________________________
>> Python-Dev mailing list
>> Python-Dev at python.org
>> https://mail.python.org/mailman/listinfo/python-dev
>> Unsubscribe:
>> https://mail.python.org/mailman/options/python-dev/brett%40python.org
>>
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/chris.barker%40noaa.gov
>


-- 

Christopher Barker, Ph.D.
Oceanographer

Emergency Response Division
NOAA/NOS/OR&R            (206) 526-6959   voice
7600 Sand Point Way NE   (206) 526-6329   fax
Seattle, WA  98115       (206) 526-6317   main reception

Chris.Barker at noaa.gov
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190215/f866bfca/attachment-0001.html>

From greg at krypto.org  Fri Feb 15 18:15:25 2019
From: greg at krypto.org (Gregory P. Smith)
Date: Fri, 15 Feb 2019 15:15:25 -0800
Subject: [Python-Dev] Another update for PEP 394 -- The "python" Command
 on Unix-Like Systems
In-Reply-To: <22F2AD71-5694-4EB5-9C21-8B965654A481@python.org>
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
 <20190213164603.3894316f@fsol>
 <CA+3bQGEQgjKOCkpK=nZ1V2abRzgvdM3oKWnOSmRVX8nTk9ctsg@mail.gmail.com>
 <F1DA6F88-8178-4813-80D9-BB508CB4336E@python.org>
 <CA+3bQGEXLBKNKGPCBkMEUzjbVY6v=7mq6W_f3wU=r41e=m=D=w@mail.gmail.com>
 <BBA1594F-DFF7-40DF-B686-D08ECDA21DC3@python.org>
 <slrnq6a500.h09.mcepl@milic.suse.cz>
 <22F2AD71-5694-4EB5-9C21-8B965654A481@python.org>
Message-ID: <CAGE7PNLjV9aN9KOUjv1rMGNKS1=mB2ZLFBL1KR1cyatf7rGiXQ@mail.gmail.com>

On Thu, Feb 14, 2019 at 9:29 AM Barry Warsaw <barry at python.org> wrote:

> On Feb 13, 2019, at 23:08, Mat?j Cepl <mcepl at cepl.eu> wrote:
>
> > Is this relevant to the discussion at hand? We are talking about
> > the binary /usr/bin/python3 which will be surely be provided
> > even by Python 4, won't it?
>
> Why would it be?  Since this is all hypothetical anyway <wink>, I?d more
> likely expect to only ship /usr/bin/python.
>

Because nobody can use 'python' and expect that to be anything but a 2and3
compatible interpreter for the next 5+ years given we live in a world where
people routinely have a very real need to write #! lines that works with
obsolete distributions.  python3 implies >=3.x, thus python 4, 5, 6, 2069,
3001, and 90210 should all have python3 point to them.  realistically
people will stop referring to python3 by 2069 so we could consider removing
the recommendation at that point.

2020 is not the end of use or end of importance for Python 2.  It is merely
the end of bugfixes applied by python-dev.

A thing I want to make sure we _don't_ do in the future is allow future
pythonN binaries.  python4, python90210, etc.  those should never exist.
python, python3, and pythonX.Y only.  If we were ever to go back on our
promise and create another world-breaking python version, it could get its
own canonical binary name.  But we're specifically planning _not_ to make
that mistake again.

I suspect most of my opining below will be contentious to multiple people
because I describe a state of the world that is at conflict with decisions
multiple independent distros have already made.  Accept their mistakes and
move on past it to the hack in that case:

A new "py" launcher isn't going to solve this problem - it is separate and
should be its own PEP as it has its own set of requirements and reasons to
be considered (especially on platforms with no concept of a #!).  Recommend
"py" today-ish and nobody can rely on it for at least 10+ years in a wide
support cross platform scripting type of situation because it won't be
present on the obsolete or long term supported things that people have a
need for such #!s to run on.

Not our problem?  Well, actually, it is.  Matthias speaking for Debian
suggesting they don't want to have "python" at all if it isn't a synonym
for "python2" because it'll break software is... wrong.  If software is not
3 compatible and uses "python", it'll also break when python is python3.
Just in a different manner.  "python" should point to python3 when a distro
does not require python2 for its core.  It should not _vary_ as to which of
2.7 or 3.7 it will point to within a given stable distribution (installing
python2.7 should never suddenly redirect it back to python2).  But "python"
itself should always exist when any python interpreter is core to the OS.
That means if a distro no longer requires python2 as part of its base/core
but does require python3... "python" must point to "python3".  If a posixy
OS no longer requires python at all (surely there are some by now?) the
question of what python should point to when an OS distro supplied optional
python package gets installed is likely either "nothing at all" or ">=3.x"
but should never be decided as "2.7" (which sadly may be what macOS does).

Do we already have LTS _stable_ distributions making that mistake today?
If so they've done something undesirable for the world at large and we're
already screwed if that distro release is deemed important by masses of
users: There is no way to write a *direct* #! line that works out of the
box to launch a working latest version Python interpreter across all
platforms.

The hack to make that work otherwise involves:

```sh
#!/bin/sh   # (or bash if that much is guaranteed)
... some shell logic to find _an_ acceptible interpreter ...
exec "${DISCOVERED_PYTHON}" - <<<END_OF_PYTHON_CODE
# actual Python code here, escaped as appropriate when needed for being
embedded within a shell script
END_OF_PYTHON_CODE
```

Obviously someone should write code to take a standalone single file python
program as input and generate that wrapper on it (and upload the tool to
pip) instead of telling people to reinvent their own or cut and paste it
into their direct source files.

This problem isn't new.  A chapeau rouge distro shipped python -> 1.5.2 for
eons at the same time as shipping 2.x on the system.  The entire world
wanted to be writing 2.0-2.4 code but there was no simple "python2" binary
on most systems with 2.x installed yet.  We all survived despite ourselves.

-gps
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190215/e13d3015/attachment.html>

From ericsnowcurrently at gmail.com  Fri Feb 15 18:37:53 2019
From: ericsnowcurrently at gmail.com (Eric Snow)
Date: Fri, 15 Feb 2019 16:37:53 -0700
Subject: [Python-Dev] Making PyInterpreterState an opaque type
Message-ID: <CALFfu7B=evjfBOeXvC_Kd-MdPKnPMPPWA0pqmZWt0uuMtPuyaQ@mail.gmail.com>

Hi all,

I've been working on the runtime lately, particularly focused on my
multi-core Python project.  One thing that would help simplify changes
in this area is if PyInterpreterState were defined in
Include/internal.  This would mean the type would be opaque unless
Py_BUILD_CORE were defined.

The docs [1] already say none of the struct's fields are public.
Furthermore, Victor already moved it into Include/cpython (i.e. not in
the stable ABI) in November.  Overall, the benefit of making internal
types like this opaque is realized in our ability to change the
internal details without further breaking C-API users.

Realistically, there may be extension modules out there that use
PyInterpreterState fields directly.  They would break.  I expect there
to be few such modules and fixing them would not involve great effort.
We'd have to add any missing accessor functions to the public C-API,
which I see as a good thing.  I have an issue [2] open for the change
and a PR open.  My PR already adds an entry to the porting section of
the 3.8 What's New doc about dealing with PyInterpreterState.

Anyway, I just wanted to see if there are any objections to making
PyInterpreterState an opaque type outside of core use.

-eric

p.s. I'd like to do the same with PyThreadState, but that's a bit
trickier [3] and not one of my immediate needs. :)


[1] https://docs.python.org/3/c-api/init.html#c.PyInterpreterState
[2] https://bugs.python.org/issue35886
[3] https://bugs.python.org/issue35949

From J.Demeyer at UGent.be  Sat Feb 16 05:15:44 2019
From: J.Demeyer at UGent.be (Jeroen Demeyer)
Date: Sat, 16 Feb 2019 11:15:44 +0100
Subject: [Python-Dev] Making PyInterpreterState an opaque type
In-Reply-To: <CALFfu7B=evjfBOeXvC_Kd-MdPKnPMPPWA0pqmZWt0uuMtPuyaQ@mail.gmail.com>
References: <CALFfu7B=evjfBOeXvC_Kd-MdPKnPMPPWA0pqmZWt0uuMtPuyaQ@mail.gmail.com>
Message-ID: <5C67E2D0.7020906@UGent.be>

On 2019-02-16 00:37, Eric Snow wrote:
> One thing that would help simplify changes
> in this area is if PyInterpreterState were defined in
> Include/internal.

How would that help anything? I don't like the idea (in general, I'm not 
talking about PyInterpreterState specifically) that external modules 
should be second-class citizens compared to modules inside CPython.

If you want to break the undocumented API, just break it. I don't mind. 
But I don't see why it's required to move the include to 
Include/internal for that.

From ncoghlan at gmail.com  Sat Feb 16 11:31:18 2019
From: ncoghlan at gmail.com (Nick Coghlan)
Date: Sun, 17 Feb 2019 02:31:18 +1000
Subject: [Python-Dev] Is distutils.util.get_platform() the "current" or
 the "target" platform
In-Reply-To: <a97bbb7a-5e4d-7d54-afa1-ed195d573d90@python.org>
References: <7f0f615b-fab5-0504-b1bf-20b3c9cd0402@python.org>
 <CAGE7PNLMHkQ8AcmPjk=aOmMgv81QQcomFHJnofbEg8dTVEG-qQ@mail.gmail.com>
 <a97bbb7a-5e4d-7d54-afa1-ed195d573d90@python.org>
Message-ID: <CADiSq7dfVoym2DScQ6LS+Ywv2NeE4MQFQ-HrWhi_ytJ8p+V9GA@mail.gmail.com>

On Sat, 16 Feb 2019 at 08:06, Steve Dower <steve.dower at python.org> wrote:
> I'm inclined to say that nobody but us uses this API :) Does that make
> it seem more okay to "clarify" that it's returning target platform?

I've always treated the situation as "Cross-compilation doesn't work,
build on the target platform, using a VM if you have to", and I
suspect a lot of folks have approached the status quo the same way.

So if there are functions you can change to make cross-compilation
actually work without requiring changes to a lot of other projects,
that seems like a good thing to me.

Cheers,
Nick.

-- 
Nick Coghlan   |   ncoghlan at gmail.com   |   Brisbane, Australia

From ncoghlan at gmail.com  Sat Feb 16 11:59:36 2019
From: ncoghlan at gmail.com (Nick Coghlan)
Date: Sun, 17 Feb 2019 02:59:36 +1000
Subject: [Python-Dev] datetime.timedelta total_microseconds
In-Reply-To: <CAP7h-xavkxsqF60M_aR0641M21D+oeVj90f7=h671+8Y5TUyeA@mail.gmail.com>
References: <CAOew_sG9nG+bOGB4gt2DSwuxP8SgZW13WznwNf-Y5DhabnZZjQ@mail.gmail.com>
 <1cfc2984-216c-fdc7-7ea2-692662d93971@ganssle.io>
 <CAP7h-xavkxsqF60M_aR0641M21D+oeVj90f7=h671+8Y5TUyeA@mail.gmail.com>
Message-ID: <CADiSq7ee-1MNbNQrcYQUjW921517=AvB_gT20VdMKfq3UzEGOw@mail.gmail.com>

On Fri, 15 Feb 2019 at 04:15, Alexander Belopolsky
<alexander.belopolsky at gmail.com> wrote:
>
>
>
> On Thu, Feb 14, 2019 at 9:07 AM Paul Ganssle <paul at ganssle.io> wrote:
>>
>> I don't think it's totally unreasonable to have other total_X() methods, where X would be days, hours, minutes and microseconds
>
> I do.  I was against adding the total_seconds() method to begin with because the same effect can be achieved with
>
> delta / timedelta(seconds=1)
>
> this is easily generalized to
>
> delta / timedelta(X=1)
>
> where X can be days, hours, minutes or microseconds.

As someone who reads date/time manipulation code far more often then
he writes it, it's immediately obvious to me what
"delta.total_seconds()" is doing, while "some_var / some_other_var"
could be doing anything.

So for the sake of those us that aren't as well versed in how time
delta division works, it seems to me that adding:

    def total_duration(td, interval=timedelta(seconds=1)):
        return td / interval

as a module level helper function would make a lot of sense. (This is
a variant on Paul's helper function that accepts the divisor as a
specifically named argument with a default value, rather than creating
it on every call)

Cheers,
Nick.

P.S. Why a function rather than a method? Mostly because this feels
like "len() for timedelta objects" to me, but also because as a helper
function, the docs can easily describe how to add it as a utility
function for older versions.

-- 
Nick Coghlan   |   ncoghlan at gmail.com   |   Brisbane, Australia

From paul at ganssle.io  Sat Feb 16 12:16:32 2019
From: paul at ganssle.io (Paul Ganssle)
Date: Sat, 16 Feb 2019 12:16:32 -0500
Subject: [Python-Dev] datetime.timedelta total_microseconds
In-Reply-To: <CADiSq7ee-1MNbNQrcYQUjW921517=AvB_gT20VdMKfq3UzEGOw@mail.gmail.com>
References: <CAOew_sG9nG+bOGB4gt2DSwuxP8SgZW13WznwNf-Y5DhabnZZjQ@mail.gmail.com>
 <1cfc2984-216c-fdc7-7ea2-692662d93971@ganssle.io>
 <CAP7h-xavkxsqF60M_aR0641M21D+oeVj90f7=h671+8Y5TUyeA@mail.gmail.com>
 <CADiSq7ee-1MNbNQrcYQUjW921517=AvB_gT20VdMKfq3UzEGOw@mail.gmail.com>
Message-ID: <d713733c-61a5-8571-f3b9-082e67fbc3d9@ganssle.io>

I am definitely sympathetic to the idea of it being more readable, but I
feel like this adds some unnecessary bloat to the interface when "divide
the value by the units" is not at all uncommon. Plus, if you add a
total_duration that by default does the same thing as total_seconds, you
now have three functions that do exactly the same thing:

- td / timedelta(seconds=1)
- td.total_seconds()
- total_duration(td)

If it's just for the purposes of readability, you can also do this:

??? from operator import truediv as total_duration?? # (timedelta, interval)

I think if we add such a function, it will essentially be just a slower
version of something that already exists. I suspect the main reason the
"divide the timedelta by the interval" thing isn't a common enough idiom
that people see it all the time is that it's only supported in Python 3.
As more code drops Python 2, I think the "td / interval" idiom will
hopefully become common enough that it will obviate the need for a
total_duration function.

That said, if people feel very strongly that a total_duration function
would be useful, maybe the best thing to do would be for me to add it to
dateutil.utils? In that case it would at least be available in Python 2,
so people who find it more readable /and/ people still writing polyglot
code would be able to use it, without the standard library unnecessarily
providing two ways to do the exact same thing.

On 2/16/19 11:59 AM, Nick Coghlan wrote:
> On Fri, 15 Feb 2019 at 04:15, Alexander Belopolsky
> <alexander.belopolsky at gmail.com> wrote:
>>
>>
>> On Thu, Feb 14, 2019 at 9:07 AM Paul Ganssle <paul at ganssle.io> wrote:
>>> I don't think it's totally unreasonable to have other total_X() methods, where X would be days, hours, minutes and microseconds
>> I do.  I was against adding the total_seconds() method to begin with because the same effect can be achieved with
>>
>> delta / timedelta(seconds=1)
>>
>> this is easily generalized to
>>
>> delta / timedelta(X=1)
>>
>> where X can be days, hours, minutes or microseconds.
> As someone who reads date/time manipulation code far more often then
> he writes it, it's immediately obvious to me what
> "delta.total_seconds()" is doing, while "some_var / some_other_var"
> could be doing anything.
>
> So for the sake of those us that aren't as well versed in how time
> delta division works, it seems to me that adding:
>
>     def total_duration(td, interval=timedelta(seconds=1)):
>         return td / interval
>
> as a module level helper function would make a lot of sense. (This is
> a variant on Paul's helper function that accepts the divisor as a
> specifically named argument with a default value, rather than creating
> it on every call)
>
> Cheers,
> Nick.
>
> P.S. Why a function rather than a method? Mostly because this feels
> like "len() for timedelta objects" to me, but also because as a helper
> function, the docs can easily describe how to add it as a utility
> function for older versions.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190216/49c4c702/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: OpenPGP digital signature
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190216/49c4c702/attachment.sig>

From ncoghlan at gmail.com  Sat Feb 16 12:25:04 2019
From: ncoghlan at gmail.com (Nick Coghlan)
Date: Sun, 17 Feb 2019 03:25:04 +1000
Subject: [Python-Dev] Another update for PEP 394 -- The "python" Command
 on Unix-Like Systems
In-Reply-To: <CAGE7PNLjV9aN9KOUjv1rMGNKS1=mB2ZLFBL1KR1cyatf7rGiXQ@mail.gmail.com>
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
 <20190213164603.3894316f@fsol>
 <CA+3bQGEQgjKOCkpK=nZ1V2abRzgvdM3oKWnOSmRVX8nTk9ctsg@mail.gmail.com>
 <F1DA6F88-8178-4813-80D9-BB508CB4336E@python.org>
 <CA+3bQGEXLBKNKGPCBkMEUzjbVY6v=7mq6W_f3wU=r41e=m=D=w@mail.gmail.com>
 <BBA1594F-DFF7-40DF-B686-D08ECDA21DC3@python.org>
 <slrnq6a500.h09.mcepl@milic.suse.cz>
 <22F2AD71-5694-4EB5-9C21-8B965654A481@python.org>
 <CAGE7PNLjV9aN9KOUjv1rMGNKS1=mB2ZLFBL1KR1cyatf7rGiXQ@mail.gmail.com>
Message-ID: <CADiSq7e-SPb_7TWYu2ROgTcS7YxuNoAD-dzAygbXD2etWa3FAg@mail.gmail.com>

On Sat, 16 Feb 2019 at 09:19, Gregory P. Smith <greg at krypto.org> wrote:
> Not our problem?  Well, actually, it is.  Matthias speaking for Debian suggesting they don't want to have "python" at all if it isn't a synonym for "python2" because it'll break software is... wrong.  If software is not 3 compatible and uses "python", it'll also break when python is python3.  Just in a different manner.  "python" should point to python3 when a distro does not require python2 for its core.  It should not _vary_ as to which of 2.7 or 3.7 it will point to within a given stable distribution (installing python2.7 should never suddenly redirect it back to python2).  But "python" itself should always exist when any python interpreter is core to the OS.  That means if a distro no longer requires python2 as part of its base/core but does require python3... "python" must point to "python3".  If a posixy OS no longer requires python at all (surely there are some by now?) the question of what python should point to when an OS distro supplied optional python package gets installed is likely either "nothing at all" or ">=3.x" but should never be decided as "2.7" (which sadly may be what macOS does).
>
> Do we already have LTS _stable_ distributions making that mistake today?  If so they've done something undesirable for the world at large and we're already screwed if that distro release is deemed important by masses of users: There is no way to write a direct #! line that works out of the box to launch a working latest version Python interpreter across all platforms.

This is exactly why we want to change Fedora et al to have
/usr/bin/python aliased to /usr/bin/python3 by default, and yes,
having /usr/bin/python missing by default does indeed break the world
(search for Fedora 28 and Ubuntu 16.04 Ansible Python issues for
more).

While Matthias is still personally reluctant to add the alias for
Debian/Ubuntu, the *only* thing preventing aliasing /usr/bin/python to
/usr/bin/python3 right now on the Fedora & RHEL side of things is PEP
394, and Guido objected strongly when Petr last tried to get the PEP
to even acknowledge that it was reasonable for distros to make that
setting configurable on a system-wide basis:
https://github.com/python/peps/pull/630

For RHEL 8, the resolution was "Well, we'll ignore the upstream PEP,
then" and make the setting configurable anyway, but Fedora tries to
work more closely with upstream than that - if we think upstream are
giving people bad or outdated advice, then we'll aim to get the advice
changed rather than ignoring it.

In this case, the advice is outdated: there have been a couple of
years of releases with /usr/bin/python missing, so it's time to move
to the "/usr/bin/python3" side of source compatibility, and go back to
having "just run python" be the way you start a modern Python
interpreter, even when you're using the system Python on a Linux
distro.

Cheers,
Nick.

P.S. Note that we're not asking for the PEP to say "You should do
this..." - just for the PEP to acknowledge it as a reasonable choice
for distros to make given the looming Python 2 End of Life.

-- 
Nick Coghlan   |   ncoghlan at gmail.com   |   Brisbane, Australia

From steve.dower at python.org  Sat Feb 16 12:29:15 2019
From: steve.dower at python.org (Steve Dower)
Date: Sat, 16 Feb 2019 09:29:15 -0800
Subject: [Python-Dev] Is distutils.util.get_platform() the "current" or
 the "target" platform
In-Reply-To: <CADiSq7dfVoym2DScQ6LS+Ywv2NeE4MQFQ-HrWhi_ytJ8p+V9GA@mail.gmail.com>
References: <7f0f615b-fab5-0504-b1bf-20b3c9cd0402@python.org>
 <CAGE7PNLMHkQ8AcmPjk=aOmMgv81QQcomFHJnofbEg8dTVEG-qQ@mail.gmail.com>
 <a97bbb7a-5e4d-7d54-afa1-ed195d573d90@python.org>
 <CADiSq7dfVoym2DScQ6LS+Ywv2NeE4MQFQ-HrWhi_ytJ8p+V9GA@mail.gmail.com>
Message-ID: <03fa7e4a-6cb9-58b8-709c-44a589fdb706@python.org>

On 16Feb.2019 0831, Nick Coghlan wrote:
> On Sat, 16 Feb 2019 at 08:06, Steve Dower <steve.dower at python.org> wrote:
>> I'm inclined to say that nobody but us uses this API :) Does that make
>> it seem more okay to "clarify" that it's returning target platform?
> 
> I've always treated the situation as "Cross-compilation doesn't work,
> build on the target platform, using a VM if you have to", and I
> suspect a lot of folks have approached the status quo the same way.

For platforms where pyconfig.h is generated, this is still going to be
true, at least until the compiler classes learn to add a
platform-specific include path.

On Windows, we have a static pyconfig.h that changes behaviour based on
compiler and Windows SDK provided preprocessor directives, so we can
quite comfortably use the same file.

> So if there are functions you can change to make cross-compilation
> actually work without requiring changes to a lot of other projects,
> that seems like a good thing to me.

Okay Paul (Monson), that's your cue to update the PR :)

Cheers,
Steve

From ncoghlan at gmail.com  Sat Feb 16 12:38:01 2019
From: ncoghlan at gmail.com (Nick Coghlan)
Date: Sun, 17 Feb 2019 03:38:01 +1000
Subject: [Python-Dev] datetime.timedelta total_microseconds
In-Reply-To: <d713733c-61a5-8571-f3b9-082e67fbc3d9@ganssle.io>
References: <CAOew_sG9nG+bOGB4gt2DSwuxP8SgZW13WznwNf-Y5DhabnZZjQ@mail.gmail.com>
 <1cfc2984-216c-fdc7-7ea2-692662d93971@ganssle.io>
 <CAP7h-xavkxsqF60M_aR0641M21D+oeVj90f7=h671+8Y5TUyeA@mail.gmail.com>
 <CADiSq7ee-1MNbNQrcYQUjW921517=AvB_gT20VdMKfq3UzEGOw@mail.gmail.com>
 <d713733c-61a5-8571-f3b9-082e67fbc3d9@ganssle.io>
Message-ID: <CADiSq7c0=4SBcpyKjMiXJ=8QNzk6rkHjiK6ayg1O4_Cbajh5uA@mail.gmail.com>

On Sun, 17 Feb 2019 at 03:20, Paul Ganssle <paul at ganssle.io> wrote:
> I think if we add such a function, it will essentially be just a slower version of something that already exists. I suspect the main reason the "divide the timedelta by the interval" thing isn't a common enough idiom that people see it all the time is that it's only supported in Python 3. As more code drops Python 2, I think the "td / interval" idiom will hopefully become common enough that it will obviate the need for a total_duration function.

And personally, the total_seconds() case has always been enough for me.

> That said, if people feel very strongly that a total_duration function would be useful, maybe the best thing to do would be for me to add it to dateutil.utils? In that case it would at least be available in Python 2, so people who find it more readable and people still writing polyglot code would be able to use it, without the standard library unnecessarily providing two ways to do the exact same thing.

I'm now thinking a slight documentation improvement would have
addressed my own confusion (and I suspect the OPs as well):

* In the "Supported Operations" section of
https://docs.python.org/3/library/datetime.html#timedelta-objects,
change "Division (3) of t2 by t3." to "Division (3) of overall
duration t2 by interval unit t3."
* In the total_seconds() documentation, add a sentence "For interval
units other than seconds, use the division form directly (e.g. `td /
timedelta(microseconds=1)`)"

Cheers,
Nick.

-- 
Nick Coghlan   |   ncoghlan at gmail.com   |   Brisbane, Australia

From tahafut at gmail.com  Sat Feb 16 13:47:34 2019
From: tahafut at gmail.com (Henry Chen)
Date: Sat, 16 Feb 2019 10:47:34 -0800
Subject: [Python-Dev] datetime.timedelta total_microseconds
In-Reply-To: <CADiSq7c0=4SBcpyKjMiXJ=8QNzk6rkHjiK6ayg1O4_Cbajh5uA@mail.gmail.com>
References: <CAOew_sG9nG+bOGB4gt2DSwuxP8SgZW13WznwNf-Y5DhabnZZjQ@mail.gmail.com>
 <1cfc2984-216c-fdc7-7ea2-692662d93971@ganssle.io>
 <CAP7h-xavkxsqF60M_aR0641M21D+oeVj90f7=h671+8Y5TUyeA@mail.gmail.com>
 <CADiSq7ee-1MNbNQrcYQUjW921517=AvB_gT20VdMKfq3UzEGOw@mail.gmail.com>
 <d713733c-61a5-8571-f3b9-082e67fbc3d9@ganssle.io>
 <CADiSq7c0=4SBcpyKjMiXJ=8QNzk6rkHjiK6ayg1O4_Cbajh5uA@mail.gmail.com>
Message-ID: <CAPAfSuk-y-ZC_20sp-m_2WdgUBHVbWE4HqHg32KWbsBd6TiR5Q@mail.gmail.com>

+1 on the improved docs solution: no new code to maintain and big return on
investment in preventing future bugs / confusion :)

On Sat, Feb 16, 2019 at 9:40 AM Nick Coghlan <ncoghlan at gmail.com> wrote:

> On Sun, 17 Feb 2019 at 03:20, Paul Ganssle <paul at ganssle.io> wrote:
> > I think if we add such a function, it will essentially be just a slower
> version of something that already exists. I suspect the main reason the
> "divide the timedelta by the interval" thing isn't a common enough idiom
> that people see it all the time is that it's only supported in Python 3. As
> more code drops Python 2, I think the "td / interval" idiom will hopefully
> become common enough that it will obviate the need for a total_duration
> function.
>
> And personally, the total_seconds() case has always been enough for me.
>
> > That said, if people feel very strongly that a total_duration function
> would be useful, maybe the best thing to do would be for me to add it to
> dateutil.utils? In that case it would at least be available in Python 2, so
> people who find it more readable and people still writing polyglot code
> would be able to use it, without the standard library unnecessarily
> providing two ways to do the exact same thing.
>
> I'm now thinking a slight documentation improvement would have
> addressed my own confusion (and I suspect the OPs as well):
>
> * In the "Supported Operations" section of
> https://docs.python.org/3/library/datetime.html#timedelta-objects,
> change "Division (3) of t2 by t3." to "Division (3) of overall
> duration t2 by interval unit t3."
> * In the total_seconds() documentation, add a sentence "For interval
> units other than seconds, use the division form directly (e.g. `td /
> timedelta(microseconds=1)`)"
>
> Cheers,
> Nick.
>
> --
> Nick Coghlan   |   ncoghlan at gmail.com   |   Brisbane, Australia
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/tahafut%40gmail.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190216/48630dfa/attachment.html>

From barry at python.org  Sat Feb 16 14:13:03 2019
From: barry at python.org (Barry Warsaw)
Date: Sat, 16 Feb 2019 11:13:03 -0800
Subject: [Python-Dev] Another update for PEP 394 -- The "python" Command
 on Unix-Like Systems
In-Reply-To: <CADiSq7e-SPb_7TWYu2ROgTcS7YxuNoAD-dzAygbXD2etWa3FAg@mail.gmail.com>
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
 <20190213164603.3894316f@fsol>
 <CA+3bQGEQgjKOCkpK=nZ1V2abRzgvdM3oKWnOSmRVX8nTk9ctsg@mail.gmail.com>
 <F1DA6F88-8178-4813-80D9-BB508CB4336E@python.org>
 <CA+3bQGEXLBKNKGPCBkMEUzjbVY6v=7mq6W_f3wU=r41e=m=D=w@mail.gmail.com>
 <BBA1594F-DFF7-40DF-B686-D08ECDA21DC3@python.org>
 <slrnq6a500.h09.mcepl@milic.suse.cz>
 <22F2AD71-5694-4EB5-9C21-8B965654A481@python.org>
 <CAGE7PNLjV9aN9KOUjv1rMGNKS1=mB2ZLFBL1KR1cyatf7rGiXQ@mail.gmail.com>
 <CADiSq7e-SPb_7TWYu2ROgTcS7YxuNoAD-dzAygbXD2etWa3FAg@mail.gmail.com>
Message-ID: <2DBD97CF-855A-45DA-968B-102FA785B9CF@python.org>

On Feb 16, 2019, at 09:25, Nick Coghlan <ncoghlan at gmail.com> wrote:

> While Matthias is still personally reluctant to add the alias for
> Debian/Ubuntu, the *only* thing preventing aliasing /usr/bin/python to
> /usr/bin/python3 right now on the Fedora & RHEL side of things is PEP
> 394, and Guido objected strongly when Petr last tried to get the PEP
> to even acknowledge that it was reasonable for distros to make that
> setting configurable on a system-wide basis:
> https://github.com/python/peps/pull/630

> P.S. Note that we're not asking for the PEP to say "You should do
> this..." - just for the PEP to acknowledge it as a reasonable choice
> for distros to make given the looming Python 2 End of Life.

I think this is a reasonable ask.  PEP 394 shouldn?t *prevent* distros from doing what they believe is in the best interest of their users.  While we do want consistency in the user experience across Linux distros (and more broadly, across all supported platforms), I think we also have to acknowledge that we?re still in a time of transition (maybe more so right now), so we should find ways to allow for experimentation within that context.  I?m not sure that I agree with all the proposed changes to PEP 394, but those are the guidelines I think I?ll re-evaluate the PR by.

-Barry


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: Message signed with OpenPGP
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190216/6d4b393c/attachment-0001.sig>

From solipsis at pitrou.net  Sat Feb 16 16:32:10 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Sat, 16 Feb 2019 22:32:10 +0100
Subject: [Python-Dev] Making PyInterpreterState an opaque type
References: <CALFfu7B=evjfBOeXvC_Kd-MdPKnPMPPWA0pqmZWt0uuMtPuyaQ@mail.gmail.com>
 <5C67E2D0.7020906@UGent.be>
Message-ID: <20190216223210.09ef3944@fsol>

On Sat, 16 Feb 2019 11:15:44 +0100
Jeroen Demeyer <J.Demeyer at UGent.be> wrote:
> On 2019-02-16 00:37, Eric Snow wrote:
> > One thing that would help simplify changes
> > in this area is if PyInterpreterState were defined in
> > Include/internal.  
> 
> How would that help anything? I don't like the idea (in general, I'm not 
> talking about PyInterpreterState specifically) that external modules 
> should be second-class citizens compared to modules inside CPython.
> 
> If you want to break the undocumented API, just break it. I don't mind. 
> But I don't see why it's required to move the include to 
> Include/internal for that.

This sounds like a reasonable design principle: decree the API
non-stable and prone to breakage (it already is, anyway), don't hide it.

It's true that in the PyInterpreterState case specifically, there
doesn't seem much worthy of use by third-party libraries.

Regards

Antoine.



From steve.dower at python.org  Sat Feb 16 17:34:46 2019
From: steve.dower at python.org (Steve Dower)
Date: Sat, 16 Feb 2019 14:34:46 -0800
Subject: [Python-Dev] Making PyInterpreterState an opaque type
In-Reply-To: <20190216223210.09ef3944@fsol>
References: <CALFfu7B=evjfBOeXvC_Kd-MdPKnPMPPWA0pqmZWt0uuMtPuyaQ@mail.gmail.com>
 <5C67E2D0.7020906@UGent.be> <20190216223210.09ef3944@fsol>
Message-ID: <b264eda2-0185-8f82-ca62-3362995fe77b@python.org>

On 16Feb.2019 1332, Antoine Pitrou wrote:
> On Sat, 16 Feb 2019 11:15:44 +0100
> Jeroen Demeyer <J.Demeyer at UGent.be> wrote:
>> On 2019-02-16 00:37, Eric Snow wrote:
>>> One thing that would help simplify changes
>>> in this area is if PyInterpreterState were defined in
>>> Include/internal.  
>>
>> How would that help anything? I don't like the idea (in general, I'm not 
>> talking about PyInterpreterState specifically) that external modules 
>> should be second-class citizens compared to modules inside CPython.
>>
>> If you want to break the undocumented API, just break it. I don't mind. 
>> But I don't see why it's required to move the include to 
>> Include/internal for that.
> 
> This sounds like a reasonable design principle: decree the API
> non-stable and prone to breakage (it already is, anyway), don't hide it.

As I was chatting with Eric shortly before he posted this, I assume the
idea would be to expose anything useful/necessary via a function. That
at least removes the struct layout from the ABI, without removing
functionality.

> It's true that in the PyInterpreterState case specifically, there
> doesn't seem much worthy of use by third-party libraries.

Which seems to suggest that the answer to "which members are important
to expose?" is "probably none". And that's possibly why Eric didn't
mention it in his email :)

This is mostly about being able to assign blame when things break, so
I'm totally okay with extension modules that want to play with internals
declaring Py_BUILD_CORE to get access to them (though I suspect that
won't work out of the box - maybe we should have a
Py_I_TOO_LIKE_TO_LIVE_DANGEROUSLY?).

I like that we're taking (small) steps to reduce the size of our API. It
helps balance out the growth and leaves us with a chance of one day
being able to have an extension model that isn't as tied to C's ABI.

Cheers,
Steve

From solipsis at pitrou.net  Sat Feb 16 17:47:31 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Sat, 16 Feb 2019 23:47:31 +0100
Subject: [Python-Dev] Making PyInterpreterState an opaque type
References: <CALFfu7B=evjfBOeXvC_Kd-MdPKnPMPPWA0pqmZWt0uuMtPuyaQ@mail.gmail.com>
 <5C67E2D0.7020906@UGent.be> <20190216223210.09ef3944@fsol>
 <b264eda2-0185-8f82-ca62-3362995fe77b@python.org>
Message-ID: <20190216234731.4ea34101@fsol>

On Sat, 16 Feb 2019 14:34:46 -0800
Steve Dower <steve.dower at python.org> wrote:
> On 16Feb.2019 1332, Antoine Pitrou wrote:
> > On Sat, 16 Feb 2019 11:15:44 +0100
> > Jeroen Demeyer <J.Demeyer at UGent.be> wrote:  
> >> On 2019-02-16 00:37, Eric Snow wrote:  
> >>> One thing that would help simplify changes
> >>> in this area is if PyInterpreterState were defined in
> >>> Include/internal.    
> >>
> >> How would that help anything? I don't like the idea (in general, I'm not 
> >> talking about PyInterpreterState specifically) that external modules 
> >> should be second-class citizens compared to modules inside CPython.
> >>
> >> If you want to break the undocumented API, just break it. I don't mind. 
> >> But I don't see why it's required to move the include to 
> >> Include/internal for that.  
> > 
> > This sounds like a reasonable design principle: decree the API
> > non-stable and prone to breakage (it already is, anyway), don't hide it.  
> 
> As I was chatting with Eric shortly before he posted this, I assume the
> idea would be to expose anything useful/necessary via a function. That
> at least removes the struct layout from the ABI, without removing
> functionality.

Well, the ABI is allowed to break at each feature version (except for
the "stable ABI" subset, which PyInterpreterState isn't part of), so I'm
not sure that would change anything ;-)

> > It's true that in the PyInterpreterState case specifically, there
> > doesn't seem much worthy of use by third-party libraries.  
> 
> Which seems to suggest that the answer to "which members are important
> to expose?" is "probably none".

That sounds intuitive. But we don't know what kind of hacks some
extension authors might do, for legitimate reasons...

(perhaps some gevent-like framework needs access to the interpreter
state?)

Regards

Antoine.



From richardlev at gmail.com  Sat Feb 16 18:23:38 2019
From: richardlev at gmail.com (Richard Levasseur)
Date: Sat, 16 Feb 2019 15:23:38 -0800
Subject: [Python-Dev] Adding test.support.safe_rmpath()
In-Reply-To: <CAKJDb-P-Jvw0w+Qkw8KjHn0xpQcaZ78dJG1MQdhyPcb7QLeAkg@mail.gmail.com>
References: <CAFYqXL-UsoJ582AKjvtx7gowqE6_CPwMQdoQRyp+9TzEO5002w@mail.gmail.com>
 <7AF16DF0-A237-44B7-B272-7427CB5AD5B0@mac.com>
 <CAFYqXL_-nyTX98+XzaL37X5sOQgX=w-gpttoFxJa2j+15d0JvQ@mail.gmail.com>
 <3C12F8E9-E825-4F28-9CFE-A81FB35694A6@mac.com>
 <CALFfu7CFhPip2T0jbMoX33QKw9T=UeOrR86vKcYnMcMhE1K53A@mail.gmail.com>
 <CAFYqXL8=pyMfA5ZZp=w3w+oAJ0cO7=XMhhz=o=MDt_ji9i6w8A@mail.gmail.com>
 <6083f67a-8413-fc40-0118-cfab2284ae2a@timgolden.me.uk>
 <CAFYqXL8Oufz4aQuTggbM04kqU+u36QqatYgKLsYSObpMDx4sBQ@mail.gmail.com>
 <CAP1=2W5rV7sfrhDmBuQSnmfdcpRK6pM-bZBKE-AQOHXMBKq28g@mail.gmail.com>
 <1c094bac-a1d1-aaaf-4e3a-0f110c0dfd4f@python.org>
 <CAKJDb-P-Jvw0w+Qkw8KjHn0xpQcaZ78dJG1MQdhyPcb7QLeAkg@mail.gmail.com>
Message-ID: <CAJg0tbusmVamfttBZzHY5myuAzORZbZrBxD_rCJve_0EK=mz0A@mail.gmail.com>

On Fri, Feb 15, 2019 at 10:02 AM Zachary Ware <zachary.ware+pydev at gmail.com>
wrote:

> On Fri, Feb 15, 2019 at 11:44 AM Steve Dower <steve.dower at python.org>
> wrote:
> > That said, I'd love to have a context manager that we can use to make
> > this easier. Really, none of us should be having to decide "how am I
> > going to use a temporary location on the file system in my test",
> > because we should have one obvious (and easy!) way to do it.
>
> I found an old rejected issue [1] for adding a `tmpdir` method to
> unittest.TestCase, which is actually a solution that we've
> independently developed and use frequently for work.  It basically
> works by registering a cleanup function before returning the path to
> the temporary directory, so you just call `self.tmpdir()`, use the
> path, forget about cleanup, and don't lose a level of indentation to a
> context manager.  I think it would be worthwhile to reconsider this
> addition to unittest, or add it as a standard base test class in
> test.support (though either way it would need a cleaner and more
> robust implementation than is offered in that issue).
>

(Sorry if this starts to veer off the original topic a bit)

I added something similar (though more robust) in the absl testing framework
<https://github.com/abseil/abseil-py/blob/master/absl/testing/absltest.py#L539>.
Tests can just call self.create_tempfile() or self.create_tempdir() and not
have to worry about cleanup, prior state, or the low-level details of where
and how the file gets created. I have re-implemented the same logic quite a
few times, and seen it code reviews even more times, but *rarely* have I
seen it done *correctly* -- it turns out its not easy to do entirely right.

tl;dr: I agree: it would be nice if unittest provided some help here.

I apologize for the length here. I've had to answer "just use tempfile,
whats wrong with that?" a few times, so I've got a whole enumerated list of
points :).

While adding this conceptually simple feature to absl, I unexpectedly found
it to be kinda complicated. I'll try to keep it short and to the point. To
be clear, this is all about needing a named file on disk that can be used
with e.g. open() by the code-under-test. I wouldn't call this incredibly
common overall, but its not uncommon.

There's basically 3 problems that have a bit of overlap.

First: The tempfile module is a poor fit for testing (don't get me wrong,
it works, but its not *nice for use in tests*)*.* This is because:
1. Using it as a context manager is distracting. The indentation signifies
a conceptual scope the reader needs to be aware of, but in a test context,
its usually not useful. At worst, it covers most of the test. At best, its
constrained to a block at the start.
2. tempfile defaults to binary mode instead of text; just another thing to
bite you.
3. On windows, you can't reopen the file, so for cross-platform stuff, you
can't even use it for this case.
4. You pretty much always have to pass delete=False, which *kinda* defeats
the point of e.g. using a context manager

Second: The various file/test apis to do setup and cleanup are awkward.
This is because:
1. Are you deleting a file, directory tree, just a directory (is it
empty?)? Make sure to call the proper function, otherwise you'll get an
error.
2. Creating a directory tree? Make sure to call makedirs() with the right
parameters, otherwise you'll get an error.
3. Using tearDown? Make sure to handle errors, lest other tearDown logic
not run and leave a dirty post-test state that might inconsistently break a
following test.
4. Using setUp? Make sure to not assume a clean state because of (3).
5. Did you write a helper function to e.g., making creating
"foo/bar/baz.txt" easy? Now you have to implement logic to split up the
path, create dirs, etc. Not hard, admittedly, but its the ~9th thing in
this list so far -- "I just want to create a temp file for testing"
6. Are you using mkstemp? Remember to close the FD it returns, even though
its "just a test"
7. Are you using tempfile.gettempdir (or some other manual scheme)? Make
sure to give each test a unique location within it, otherwise collisions
can happen.

Third: This is a bit more opinion: I'm *really* into optimizing my
edit-debug cycle latency, so random file/dir names are really annoying
because they slow me down. They're absolutely necessary for running a
finished test suite, but get in the way for debugging specific tests (i.e.
where a dev spends the majority of their time when dealing with a failing
test).
This is because:
1. Command history is lost. I can't up-arrow-enter to re-run e.g. a grep
over the file I'm interested in.
2. The only way to inspect a file is to set_trace() before it gets deleted,
but after the logic I need to check has run. Then run some expression
that'll print the filename.




> [1] https://bugs.python.org/issue2156
>
> --
> Zach
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/richardlev%40gmail.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190216/0cc7fc46/attachment.html>

From benjamin at python.org  Sat Feb 16 20:10:48 2019
From: benjamin at python.org (Benjamin Peterson)
Date: Sat, 16 Feb 2019 20:10:48 -0500
Subject: [Python-Dev] [RELEASE] Python 2.7.16 release candidate 1
Message-ID: <715ded96-a728-42ec-8bb7-72c3f7e1695b@www.fastmail.com>

I'm pleased to announce the immediate availability of Python 2.7.16 release candidate 1. This is a prerelease for yet another bug fix release in the Python 2.7.x series. It includes over 100 fixes over Python 2.7.15. See the changelog at

    https://raw.githubusercontent.com/python/cpython/baacaac06f93dd624c9d7b3bac0e13fbe34f2d8c/Misc/NEWS.d/2.7.16rc1.rst

for full details.

Downloads are at:

    https://www.python.org/downloads/release/python-2716rc1/

Please test your software against the new release and report any issues to

    https://bugs.python.org/

If all goes according to plan, Python 2.7.16 final will be released on March 2.

All the best,
Benjamin

From cedric.krier at b2ck.com  Sun Feb 17 11:58:50 2019
From: cedric.krier at b2ck.com (=?utf-8?Q?C=C3=A9dric?= Krier)
Date: Sun, 17 Feb 2019 17:58:50 +0100
Subject: [Python-Dev] Request review for bpo-35153
Message-ID: <20190217165850.GB11909@kei>

Hi,

A few months ago, I submitted bpo-35153 with a PR to allow to set
headers from xmlrpc.client.ServerProxy.
Is there a core developer willing to review it? It will be great to have
it for Python 3.8.

https://bugs.python.org/issue35153
https://github.com/python/cpython/pull/10308

Thanks,
-- 
C?dric Krier - B2CK SPRL
Email/Jabber: cedric.krier at b2ck.com
Tel: +32 472 54 46 59
Website: http://www.b2ck.com/

From doko at ubuntu.com  Mon Feb 18 10:34:33 2019
From: doko at ubuntu.com (Matthias Klose)
Date: Mon, 18 Feb 2019 16:34:33 +0100
Subject: [Python-Dev] Another update for PEP 394 -- The "python" Command
 on Unix-Like Systems
In-Reply-To: <CAGE7PNLjV9aN9KOUjv1rMGNKS1=mB2ZLFBL1KR1cyatf7rGiXQ@mail.gmail.com>
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
 <20190213164603.3894316f@fsol>
 <CA+3bQGEQgjKOCkpK=nZ1V2abRzgvdM3oKWnOSmRVX8nTk9ctsg@mail.gmail.com>
 <F1DA6F88-8178-4813-80D9-BB508CB4336E@python.org>
 <CA+3bQGEXLBKNKGPCBkMEUzjbVY6v=7mq6W_f3wU=r41e=m=D=w@mail.gmail.com>
 <BBA1594F-DFF7-40DF-B686-D08ECDA21DC3@python.org>
 <slrnq6a500.h09.mcepl@milic.suse.cz>
 <22F2AD71-5694-4EB5-9C21-8B965654A481@python.org>
 <CAGE7PNLjV9aN9KOUjv1rMGNKS1=mB2ZLFBL1KR1cyatf7rGiXQ@mail.gmail.com>
Message-ID: <1632d0c7-4958-4641-a7fb-db6ebfc0fbca@ubuntu.com>

On 16.02.19 00:15, Gregory P. Smith wrote:
> On Thu, Feb 14, 2019 at 9:29 AM Barry Warsaw <barry at python.org> wrote:
> 
>> On Feb 13, 2019, at 23:08, Mat?j Cepl <mcepl at cepl.eu> wrote:
>>
>>> Is this relevant to the discussion at hand? We are talking about
>>> the binary /usr/bin/python3 which will be surely be provided
>>> even by Python 4, won't it?
>>
>> Why would it be?  Since this is all hypothetical anyway <wink>, I?d more
>> likely expect to only ship /usr/bin/python.
>>
> 
> Because nobody can use 'python' and expect that to be anything but a 2and3
> compatible interpreter for the next 5+ years given we live in a world where
> people routinely have a very real need to write #! lines that works with
> obsolete distributions.  python3 implies >=3.x, thus python 4, 5, 6, 2069,
> 3001, and 90210 should all have python3 point to them.  realistically
> people will stop referring to python3 by 2069 so we could consider removing
> the recommendation at that point.
> 
> 2020 is not the end of use or end of importance for Python 2.  It is merely
> the end of bugfixes applied by python-dev.
> 
> A thing I want to make sure we _don't_ do in the future is allow future
> pythonN binaries.  python4, python90210, etc.  those should never exist.
> python, python3, and pythonX.Y only.  If we were ever to go back on our
> promise and create another world-breaking python version, it could get its
> own canonical binary name.  But we're specifically planning _not_ to make
> that mistake again.
> 
> I suspect most of my opining below will be contentious to multiple people
> because I describe a state of the world that is at conflict with decisions
> multiple independent distros have already made.  Accept their mistakes and
> move on past it to the hack in that case:
> 
> A new "py" launcher isn't going to solve this problem - it is separate and
> should be its own PEP as it has its own set of requirements and reasons to
> be considered (especially on platforms with no concept of a #!).  Recommend
> "py" today-ish and nobody can rely on it for at least 10+ years in a wide
> support cross platform scripting type of situation because it won't be
> present on the obsolete or long term supported things that people have a
> need for such #!s to run on.
> 
> Not our problem?  Well, actually, it is.  Matthias speaking for Debian
> suggesting they don't want to have "python" at all if it isn't a synonym
> for "python2" because it'll break software is... wrong.  If software is not
> 3 compatible and uses "python", it'll also break when python is python3.
> Just in a different manner.  "python" should point to python3 when a distro
> does not require python2 for its core.  It should not _vary_ as to which of
> 2.7 or 3.7 it will point to within a given stable distribution (installing
> python2.7 should never suddenly redirect it back to python2).  But "python"
> itself should always exist when any python interpreter is core to the OS.
> That means if a distro no longer requires python2 as part of its base/core
> but does require python3... "python" must point to "python3".  If a posixy
> OS no longer requires python at all (surely there are some by now?) the
> question of what python should point to when an OS distro supplied optional
> python package gets installed is likely either "nothing at all" or ">=3.x"
> but should never be decided as "2.7" (which sadly may be what macOS does).

There is no notion of a "core" for Debian. So "core" applies to the whole
distro, as long as there are python shebangs found.

For Ubuntu, you don't have a python command on the default desktop install, just
python3.  Trying to invoke python, command-not-found tells you:

  $ python

  Command 'python' not found, but can be installed with:

  [...]

  You also have python3 installed, you can run 'python3' instead.

That tells you which way to go.

> Do we already have LTS _stable_ distributions making that mistake today?
> If so they've done something undesirable for the world at large and we're
> already screwed if that distro release is deemed important by masses of
> users: There is no way to write a *direct* #! line that works out of the
> box to launch a working latest version Python interpreter across all
> platforms.

If you count the above example towards this "mistake", probably yes. But there
is *no* way to have a sane way to have what you want.

Matthias

From doko at ubuntu.com  Mon Feb 18 10:38:49 2019
From: doko at ubuntu.com (Matthias Klose)
Date: Mon, 18 Feb 2019 16:38:49 +0100
Subject: [Python-Dev] Another update for PEP 394 -- The "python" Command
 on Unix-Like Systems
In-Reply-To: <CADiSq7e-SPb_7TWYu2ROgTcS7YxuNoAD-dzAygbXD2etWa3FAg@mail.gmail.com>
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
 <20190213164603.3894316f@fsol>
 <CA+3bQGEQgjKOCkpK=nZ1V2abRzgvdM3oKWnOSmRVX8nTk9ctsg@mail.gmail.com>
 <F1DA6F88-8178-4813-80D9-BB508CB4336E@python.org>
 <CA+3bQGEXLBKNKGPCBkMEUzjbVY6v=7mq6W_f3wU=r41e=m=D=w@mail.gmail.com>
 <BBA1594F-DFF7-40DF-B686-D08ECDA21DC3@python.org>
 <slrnq6a500.h09.mcepl@milic.suse.cz>
 <22F2AD71-5694-4EB5-9C21-8B965654A481@python.org>
 <CAGE7PNLjV9aN9KOUjv1rMGNKS1=mB2ZLFBL1KR1cyatf7rGiXQ@mail.gmail.com>
 <CADiSq7e-SPb_7TWYu2ROgTcS7YxuNoAD-dzAygbXD2etWa3FAg@mail.gmail.com>
Message-ID: <dd9d27f0-5cfa-ed8e-9a3d-539c353101d9@ubuntu.com>

On 16.02.19 18:25, Nick Coghlan wrote:
> While Matthias is still personally reluctant to add the alias for
> Debian/Ubuntu, the *only* thing preventing aliasing /usr/bin/python to
> /usr/bin/python3 right now on the Fedora & RHEL side of things is PEP
> 394, and Guido objected strongly when Petr last tried to get the PEP
> to even acknowledge that it was reasonable for distros to make that
> setting configurable on a system-wide basis:
> https://github.com/python/peps/pull/630

No, I'm not "personally reluctant" about this, it's the current majority view of
people on the debian-python ML.  Barry stepped back as a Debian maintainer, so
there are not many people supporting your view.

Matthias

From remi.lapeyre at henki.fr  Mon Feb 18 11:16:36 2019
From: remi.lapeyre at henki.fr (=?UTF-8?Q?R=C3=A9mi_Lapeyre?=)
Date: Mon, 18 Feb 2019 08:16:36 -0800
Subject: [Python-Dev] int() and math.trunc don't accept objects that only
 define __index__
Message-ID: <CA+jiYFCY-Fboaz=4+hvN_5LG4o=eHyOxUafGaJV6Yc51mOgtVw@mail.gmail.com>

Hi, I open this thread to discuss the proposal by Nick Coghlan in
https://bugs.python.org/issue33039
to add __int__ and __trunc__ to a type when __index__ is defined.

Currently __int__ does not default to __index__ during class initialisation
so
both must be defined to get a coherant behavior:

    (cpython-venv) ?  cpython git:(add-key-argument-to-bisect) ? python3
    Python 3.8.0a1+ (heads/add-key-argument-to-bisect:b7aaa1adad, Feb 18
2019, 16:10:22)
    [Clang 10.0.0 (clang-1000.10.44.4)] on darwin
    Type "help", "copyright", "credits" or "license" for more information.
    >>> import math
    >>> class MyInt:
    ...     def __index__(self):
    ...             return 4
    ...
    >>> int(MyInt())
    Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
    TypeError: int() argument must be a string, a bytes-like object or a
number, not 'MyInt'
    >>> math.trunc(MyInt())
    Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
    TypeError: type MyInt doesn't define __trunc__ method
    >>> hex(MyInt())
    '0x4'
    >>> len("a"*MyInt())
    4
    >>> MyInt.__int__ = MyInt.__index__
    >>> int(MyInt())
    4


The difference in behavior is espacially weird in builtins like int() and
hex().


The documentation mentions at
https://docs.python.org/3/reference/datamodel.html#object.__index__
the need to always define both __index__ and __int__:

    Note: In order to have a coherent integer type class, when __index__()
is defined __int__() should also be defined, and both should return the
same value.

Nick Coghlan proposes to make __int__ defaults to __index__ when only the
second
is defined and asked to open a discussion on python-dev before making any
change
"as the closest equivalent we have to this right now is the "negative"
derivation,
where overriding __eq__ without overriding __hash__ implicitly marks the
derived
class as unhashable (look for "type->tp_hash =
PyObject_HashNotImplemented;").".


I think the change proposed makes more sense than the current behavior and
volunteer to implement it if it is accepted.


What do you think about this?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190218/1c2faf82/attachment.html>

From greg at krypto.org  Mon Feb 18 12:28:21 2019
From: greg at krypto.org (Gregory P. Smith)
Date: Mon, 18 Feb 2019 09:28:21 -0800
Subject: [Python-Dev] Another update for PEP 394 -- The "python" Command
 on Unix-Like Systems
In-Reply-To: <1632d0c7-4958-4641-a7fb-db6ebfc0fbca@ubuntu.com>
References: <9e69c6dc-07cd-2265-b4b8-b9f7e9f81b00@gmail.com>
 <20190213164603.3894316f@fsol>
 <CA+3bQGEQgjKOCkpK=nZ1V2abRzgvdM3oKWnOSmRVX8nTk9ctsg@mail.gmail.com>
 <F1DA6F88-8178-4813-80D9-BB508CB4336E@python.org>
 <CA+3bQGEXLBKNKGPCBkMEUzjbVY6v=7mq6W_f3wU=r41e=m=D=w@mail.gmail.com>
 <BBA1594F-DFF7-40DF-B686-D08ECDA21DC3@python.org>
 <slrnq6a500.h09.mcepl@milic.suse.cz>
 <22F2AD71-5694-4EB5-9C21-8B965654A481@python.org>
 <CAGE7PNLjV9aN9KOUjv1rMGNKS1=mB2ZLFBL1KR1cyatf7rGiXQ@mail.gmail.com>
 <1632d0c7-4958-4641-a7fb-db6ebfc0fbca@ubuntu.com>
Message-ID: <CAGE7PNL7pKdrrbPmjegCgPpTOgjgX9MLrse+OecjDUY+e+Txtg@mail.gmail.com>

On Mon, Feb 18, 2019, 7:34 AM Matthias Klose <doko at ubuntu.com wrote:

> On 16.02.19 00:15, Gregory P. Smith wrote:
> > On Thu, Feb 14, 2019 at 9:29 AM Barry Warsaw <barry at python.org> wrote:
> >
> >> On Feb 13, 2019, at 23:08, Mat?j Cepl <mcepl at cepl.eu> wrote:
> >>
> >>> Is this relevant to the discussion at hand? We are talking about
> >>> the binary /usr/bin/python3 which will be surely be provided
> >>> even by Python 4, won't it?
> >>
> >> Why would it be?  Since this is all hypothetical anyway <wink>, I?d more
> >> likely expect to only ship /usr/bin/python.
> >>
> >
> > Because nobody can use 'python' and expect that to be anything but a
> 2and3
> > compatible interpreter for the next 5+ years given we live in a world
> where
> > people routinely have a very real need to write #! lines that works with
> > obsolete distributions.  python3 implies >=3.x, thus python 4, 5, 6,
> 2069,
> > 3001, and 90210 should all have python3 point to them.  realistically
> > people will stop referring to python3 by 2069 so we could consider
> removing
> > the recommendation at that point.
> >
> > 2020 is not the end of use or end of importance for Python 2.  It is
> merely
> > the end of bugfixes applied by python-dev.
> >
> > A thing I want to make sure we _don't_ do in the future is allow future
> > pythonN binaries.  python4, python90210, etc.  those should never exist.
> > python, python3, and pythonX.Y only.  If we were ever to go back on our
> > promise and create another world-breaking python version, it could get
> its
> > own canonical binary name.  But we're specifically planning _not_ to make
> > that mistake again.
> >
> > I suspect most of my opining below will be contentious to multiple people
> > because I describe a state of the world that is at conflict with
> decisions
> > multiple independent distros have already made.  Accept their mistakes
> and
> > move on past it to the hack in that case:
> >
> > A new "py" launcher isn't going to solve this problem - it is separate
> and
> > should be its own PEP as it has its own set of requirements and reasons
> to
> > be considered (especially on platforms with no concept of a #!).
> Recommend
> > "py" today-ish and nobody can rely on it for at least 10+ years in a wide
> > support cross platform scripting type of situation because it won't be
> > present on the obsolete or long term supported things that people have a
> > need for such #!s to run on.
> >
> > Not our problem?  Well, actually, it is.  Matthias speaking for Debian
> > suggesting they don't want to have "python" at all if it isn't a synonym
> > for "python2" because it'll break software is... wrong.  If software is
> not
> > 3 compatible and uses "python", it'll also break when python is python3.
> > Just in a different manner.  "python" should point to python3 when a
> distro
> > does not require python2 for its core.  It should not _vary_ as to which
> of
> > 2.7 or 3.7 it will point to within a given stable distribution
> (installing
> > python2.7 should never suddenly redirect it back to python2).  But
> "python"
> > itself should always exist when any python interpreter is core to the OS.
> > That means if a distro no longer requires python2 as part of its
> base/core
> > but does require python3... "python" must point to "python3".  If a
> posixy
> > OS no longer requires python at all (surely there are some by now?) the
> > question of what python should point to when an OS distro supplied
> optional
> > python package gets installed is likely either "nothing at all" or
> ">=3.x"
> > but should never be decided as "2.7" (which sadly may be what macOS
> does).
>
> There is no notion of a "core" for Debian. So "core" applies to the whole
> distro, as long as there are python shebangs found.
>
> For Ubuntu, you don't have a python command on the default desktop
> install, just
> python3.  Trying to invoke python, command-not-found tells you:
>
>   $ python
>
>   Command 'python' not found, but can be installed with:
>
>   [...]
>
>   You also have python3 installed, you can run 'python3' instead.
>
> That tells you which way to go.
>

"Core" just means part of the minimal install, needed by startup scripts
and the package manager perhaps. This would be a default install with no
package groups selected or perhaps the netinst image for Debian. If
packages in that set don't need a python interpreter, Debian is in great
shape! :)


> > Do we already have LTS _stable_ distributions making that mistake today?
> > If so they've done something undesirable for the world at large and we're
> > already screwed if that distro release is deemed important by masses of
> > users: There is no way to write a *direct* #! line that works out of the
> > box to launch a working latest version Python interpreter across all
> > platforms.
>
> If you count the above example towards this "mistake", probably yes. But
> there
> is *no* way to have a sane way to have what you want.
>

Agreed.

In the long run, expecting python 2 to exist is not sane.  But given our
pep394 text of "for the time being, all distributions *should* ensure that
python, if installed, refers to the same target as python2," What Debian
has done is still unfortunately encouraged by us.

We've created a world where #! lines cannot be used to invoke an
intentionally compatible script across a wide variety of platforms over
time. But our decision to do that was the decision to have an incompatible
release in the first place.

Too late now. :)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190218/9cc9dcf5/attachment.html>

From ericsnowcurrently at gmail.com  Mon Feb 18 14:25:40 2019
From: ericsnowcurrently at gmail.com (Eric Snow)
Date: Mon, 18 Feb 2019 12:25:40 -0700
Subject: [Python-Dev] Making PyInterpreterState an opaque type
In-Reply-To: <b264eda2-0185-8f82-ca62-3362995fe77b@python.org>
References: <CALFfu7B=evjfBOeXvC_Kd-MdPKnPMPPWA0pqmZWt0uuMtPuyaQ@mail.gmail.com>
 <5C67E2D0.7020906@UGent.be> <20190216223210.09ef3944@fsol>
 <b264eda2-0185-8f82-ca62-3362995fe77b@python.org>
Message-ID: <CALFfu7A0rt=CA=rR+6T9aUEwCATPsN6TjAT0SdJLG6Yws4RPYA@mail.gmail.com>

On Sat, Feb 16, 2019 at 3:34 PM Steve Dower <steve.dower at python.org> wrote:
> On 16Feb.2019 1332, Antoine Pitrou wrote:
> > This sounds like a reasonable design principle: decree the API
> > non-stable and prone to breakage (it already is, anyway), don't hide it.
>
> As I was chatting with Eric shortly before he posted this, I assume the
> idea would be to expose anything useful/necessary via a function. That
> at least removes the struct layout from the ABI, without removing
> functionality.
>
> > It's true that in the PyInterpreterState case specifically, there
> > doesn't seem much worthy of use by third-party libraries.
>
> Which seems to suggest that the answer to "which members are important
> to expose?" is "probably none". And that's possibly why Eric didn't
> mention it in his email :)
>
> This is mostly about being able to assign blame when things break, so
> I'm totally okay with extension modules that want to play with internals
> declaring Py_BUILD_CORE to get access to them (though I suspect that
> won't work out of the box - maybe we should have a
> Py_I_TOO_LIKE_TO_LIVE_DANGEROUSLY?).
>
> I like that we're taking (small) steps to reduce the size of our API. It
> helps balance out the growth and leaves us with a chance of one day
> being able to have an extension model that isn't as tied to C's ABI.

Yeah, what Steve said. :)

-eric

From ericsnowcurrently at gmail.com  Mon Feb 18 14:27:55 2019
From: ericsnowcurrently at gmail.com (Eric Snow)
Date: Mon, 18 Feb 2019 12:27:55 -0700
Subject: [Python-Dev] Making PyInterpreterState an opaque type
In-Reply-To: <20190216234731.4ea34101@fsol>
References: <CALFfu7B=evjfBOeXvC_Kd-MdPKnPMPPWA0pqmZWt0uuMtPuyaQ@mail.gmail.com>
 <5C67E2D0.7020906@UGent.be> <20190216223210.09ef3944@fsol>
 <b264eda2-0185-8f82-ca62-3362995fe77b@python.org>
 <20190216234731.4ea34101@fsol>
Message-ID: <CALFfu7Dpq=-7Qdo_GEgrgnCP66g7bRjPChfZWaeHUUr0XShoHg@mail.gmail.com>

On Sat, Feb 16, 2019 at 3:47 PM Antoine Pitrou <solipsis at pitrou.net> wrote:
> On Sat, 16 Feb 2019 14:34:46 -0800
> Steve Dower <steve.dower at python.org> wrote:
> > Which seems to suggest that the answer to "which members are important
> > to expose?" is "probably none".
>
> That sounds intuitive. But we don't know what kind of hacks some
> extension authors might do, for legitimate reasons...
>
> (perhaps some gevent-like framework needs access to the interpreter
> state?)

In those cases either we will expose accessor functions in the C-API
or they can define Py_BUILD_CORE.

-eric

From ericsnowcurrently at gmail.com  Mon Feb 18 15:17:50 2019
From: ericsnowcurrently at gmail.com (Eric Snow)
Date: Mon, 18 Feb 2019 13:17:50 -0700
Subject: [Python-Dev] Making PyInterpreterState an opaque type
In-Reply-To: <5C67E2D0.7020906@UGent.be>
References: <CALFfu7B=evjfBOeXvC_Kd-MdPKnPMPPWA0pqmZWt0uuMtPuyaQ@mail.gmail.com>
 <5C67E2D0.7020906@UGent.be>
Message-ID: <CALFfu7C1YK5wLETz0y6KK2hm=3dZe_9C9hx6dDzo4mdrksEt+Q@mail.gmail.com>

On Sat, Feb 16, 2019 at 3:16 AM Jeroen Demeyer <J.Demeyer at ugent.be> wrote:
> On 2019-02-16 00:37, Eric Snow wrote:
> > One thing that would help simplify changes
> > in this area is if PyInterpreterState were defined in
> > Include/internal.
>
> How would that help anything?

I'm talking just about changes in the runtime implementation.  A lot
of of the runtime-related API is defined in Include/internal.  Relying
on the public headers (i.e. Include/*) for internal runtime API can
complicate changes there.  I've run into this recently.  Moving more
internal API into the internal headers helps with that problem.
Having distinct header files for the internal API is a relatively new
thing (i.e. in the last year), which is why some of the internal API
is still defined in the public header files.

> I don't like the idea (in general, I'm not
> talking about PyInterpreterState specifically) that external modules
> should be second-class citizens compared to modules inside CPython.
>
> If you want to break the undocumented API, just break it. I don't mind.
> But I don't see why it's required to move the include to
> Include/internal for that.

Keep in mind that the "internal" (or "private") API is intended for
use exclusively in the runtime and in the builtin modules.
Historically our approach to keeping API private was to use underscore
prefixes and to leave them out of the documentation (along with
guarding with "#ifndef Py_LIMITED_API").  However, this has lead to
occasional confusion and breakage, and even to leaking things into the
stable ABI that shouldn't have been.  Lately we've been working on
making the distinction between internal and public API (and stable
ABI) more clear and less prone to accidental exposure.  Victor has
done a lot of work in this area.

So I'd like to understand your objection.  Is it with exposing some
things only under Py_BUILD_CORE (i.e. when building Python itself)?
Is it to having "private" C-API in general?  Is it just to having
separate include directories?

-eric

From J.Demeyer at UGent.be  Mon Feb 18 16:24:00 2019
From: J.Demeyer at UGent.be (Jeroen Demeyer)
Date: Mon, 18 Feb 2019 22:24:00 +0100
Subject: [Python-Dev] Making PyInterpreterState an opaque type
In-Reply-To: <CALFfu7C1YK5wLETz0y6KK2hm=3dZe_9C9hx6dDzo4mdrksEt+Q@mail.gmail.com>
References: <CALFfu7B=evjfBOeXvC_Kd-MdPKnPMPPWA0pqmZWt0uuMtPuyaQ@mail.gmail.com>
 <5C67E2D0.7020906@UGent.be>
 <CALFfu7C1YK5wLETz0y6KK2hm=3dZe_9C9hx6dDzo4mdrksEt+Q@mail.gmail.com>
Message-ID: <5C6B2270.1080203@UGent.be>

On 2019-02-18 21:17, Eric Snow wrote:
> Historically our approach to keeping API private was to use underscore
> prefixes and to leave them out of the documentation (along with
> guarding with "#ifndef Py_LIMITED_API").  However, this has lead to
> occasional confusion and breakage, and even to leaking things into the
> stable ABI that shouldn't have been.  Lately we've been working on
> making the distinction between internal and public API (and stable
> ABI) more clear and less prone to accidental exposure.  Victor has
> done a lot of work in this area.
>
> So I'd like to understand your objection.

First of all, if everybody can actually #define Py_BUILD_CORE and get 
access to the complete API, I don't mind so much. But then it's 
important that this actually keeps working (i.e. that those headers will 
always be installed).

Still, do we really need so many levels of API:
(1) stable API (with #define Py_LIMITED_API)
(2) public documented API
(3) private undocumented API (the default exposed API)
(4) internal API (with #define Py_BUILD_CORE)

I would argue to fold (4) into (3). Applications using (3) already know 
that they are living dangerously by using private API.

I'm afraid of hiding actually useful private macros under Py_BUILD_CORE. 
For example, Modules/_functoolsmodule.c and Modules/_json.c use API 
functions from (4). But if an API function is useful for implementing 
functools or json, then it's probably also useful for external extension 
modules: what if I want to implement something similar to functools or 
json, why shouldn't I be allowed to use those same API functions?

For a very concrete example, was it really necessary to put 
_PyTuple_ITEMS in (4)? That's used in _functoolsmodule.c. Especially 
given that the very similar PySequence_Fast_ITEMS is in (2), that seems 
like a strange and arbitrary limiting choice.


Jeroen.

From steve.dower at python.org  Mon Feb 18 22:04:31 2019
From: steve.dower at python.org (Steve Dower)
Date: Mon, 18 Feb 2019 19:04:31 -0800
Subject: [Python-Dev] Making PyInterpreterState an opaque type
In-Reply-To: <5C6B2270.1080203@UGent.be>
References: <CALFfu7B=evjfBOeXvC_Kd-MdPKnPMPPWA0pqmZWt0uuMtPuyaQ@mail.gmail.com>
 <5C67E2D0.7020906@UGent.be>
 <CALFfu7C1YK5wLETz0y6KK2hm=3dZe_9C9hx6dDzo4mdrksEt+Q@mail.gmail.com>
 <5C6B2270.1080203@UGent.be>
Message-ID: <e8d27a02-4f73-0631-8bc6-ad05ff8b1a81@python.org>

On 18Feb.2019 1324, Jeroen Demeyer wrote:
> Still, do we really need so many levels of API:
> (1) stable API (with #define Py_LIMITED_API)
> (2) public documented API
> (3) private undocumented API (the default exposed API)
> (4) internal API (with #define Py_BUILD_CORE)
> 
> I would argue to fold (4) into (3). Applications using (3) already know
> that they are living dangerously by using private API.

I agree completely. It's unfortunate we ended up in a state where the
stable API was opt-in, but that's where we are now and we have to
transition carefully.

The ideal would be:
* default to cross-version supported APIs (i.e. stable for all 3.*)
* opt-in to current-version stable APIs (i.e. stable for all 3.7.*)
* extra opt-in to unstable APIs (i.e. you are guaranteed to break one
day without warning)

> I'm afraid of hiding actually useful private macros under Py_BUILD_CORE.
> For example, Modules/_functoolsmodule.c and Modules/_json.c use API
> functions from (4). But if an API function is useful for implementing
> functools or json, then it's probably also useful for external extension
> modules: what if I want to implement something similar to functools or
> json, why shouldn't I be allowed to use those same API functions?
> 
> For a very concrete example, was it really necessary to put
> _PyTuple_ITEMS in (4)? That's used in _functoolsmodule.c. Especially
> given that the very similar PySequence_Fast_ITEMS is in (2), that seems
> like a strange and arbitrary limiting choice.

The reason to do this is that we can "guarantee" that we've fixed all
users when we change the internal representation. Otherwise, the
internal memory layout becomes part of the public ABI, which is what we
want to fix. (PyTuple_GET_ITEM is just as problematic, FWIW.)

If you always rebuild your extension for every micro version (3.x.y) of
CPython, then sure, go ahead and use this. But you're by far into the
minority of users/developers, and so we really don't want to optimise
for this case when it's going to break the 90%+ of people who don't
recompile everything all the time.

Cheers,
Steve


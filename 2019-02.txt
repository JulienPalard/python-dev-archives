From emmanuelarias30 at gmail.com  Fri Feb  1 06:57:10 2019
From: emmanuelarias30 at gmail.com (eamanu15)
Date: Fri, 1 Feb 2019 08:57:10 -0300
Subject: [Python-Dev] How to update namedtuple asdict() to use dict
 instead of OrderedDict
In-Reply-To: <mailman.7678.1548891690.4818.python-dev@python.org>
References: <mailman.7678.1548891690.4818.python-dev@python.org>
Message-ID: <CACttXDOnRQMpNPSDTNCMaVvAeyKoNWgUx68ybKGiAVyqOYXVZg@mail.gmail.com>

Hi!


> Option 4) Just make the change directly in 3.8,  s/OrderedDict/dict/, and
> be done will it.  This gives users the benefits right away and doesn't
> annoy them with warnings that they likely don't care about.   There is some
> precedent for this.  To make namedtuple class creation faster, the
> *verbose* option was dropped without any deprecation period.  It looks like
> no one missed that feature at all, but they did get the immediate benefit
> of faster import times.  In the case of using regular dicts in named
> tuples, people will get immediate and significant space savings as well as
> a speed benefit.
>

 +1 for option 4

Regards!
eamanu
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190201/3fd10274/attachment.html>

From status at bugs.python.org  Fri Feb  1 13:07:59 2019
From: status at bugs.python.org (Python tracker)
Date: Fri, 01 Feb 2019 18:07:59 +0000
Subject: [Python-Dev] Summary of Python tracker Issues
Message-ID: <20190201180759.1.9D569A7627081917@roundup.psfhosted.org>


ACTIVITY SUMMARY (2019-01-25 - 2019-02-01)
Python tracker at https://bugs.python.org/

To view or respond to any of the issues listed below, click on the issue.
Do NOT respond to this message.

Issues counts and deltas:
  open    6985 (+32)
  closed 40649 (+23)
  total  47634 (+55)

Open issues with patches: 2775 


Issues opened (45)
==================

#25592: distutils docs: data_files always uses sys.prefix
https://bugs.python.org/issue25592  reopened by pitrou

#30670: pprint for dict in sorted order or insert order?
https://bugs.python.org/issue30670  reopened by josephsmeng

#35829: datetime: parse "Z" timezone suffix in fromisoformat()
https://bugs.python.org/issue35829  opened by rdb

#35830: building multiple (binary) packages from a single project
https://bugs.python.org/issue35830  opened by stefan

#35832: Installation error
https://bugs.python.org/issue35832  opened by Stefano Bonalumi

#35833: IDLE: revise doc for control chars sent to Shell
https://bugs.python.org/issue35833  opened by Dude Roast

#35834: get_type_hints exposes an instance of ForwardRef (internal cla
https://bugs.python.org/issue35834  opened by Lincoln Quirk

#35838: ConfigParser calls optionxform twice when assigning dict
https://bugs.python.org/issue35838  opened by Phil Kang

#35839: Suggestion: Ignore sys.modules entries with no __spec__ attrib
https://bugs.python.org/issue35839  opened by ncoghlan

#35840: Control flow inconsistency on closed asyncio stream
https://bugs.python.org/issue35840  opened by schlamar

#35841: Datetime strftime() does not return correct week numbers for 2
https://bugs.python.org/issue35841  opened by tr12

#35843: importlib.util docs for namespace packages innaccurate
https://bugs.python.org/issue35843  opened by Anthony Sottile

#35844: Calling `Multiprocessing.Queue.close()` too quickly causes int
https://bugs.python.org/issue35844  opened by charmonium

#35845: Can't read a F-contiguous memoryview in physical order
https://bugs.python.org/issue35845  opened by pitrou

#35846: Incomplete documentation for re.sub
https://bugs.python.org/issue35846  opened by pbugnion

#35847: RISC-V needs CTYPES_PASS_BY_REF_HACK
https://bugs.python.org/issue35847  opened by schwab

#35848: readinto is not a method on io.TextIOBase
https://bugs.python.org/issue35848  opened by steverpalmer

#35849: Added thousands separators to Lib/pstats.py final report
https://bugs.python.org/issue35849  opened by addons_zz

#35851: Make search result in online docs keep their position when sea
https://bugs.python.org/issue35851  opened by roelschroeven

#35852: Fixed tests regenerating using CRLF when running it on Windows
https://bugs.python.org/issue35852  opened by addons_zz

#35854: EnvBuilder and venv symlinks do not work on Windows on 3.7.2
https://bugs.python.org/issue35854  opened by steve.dower

#35855: IDLE squeezer: improve unsqueezing and autosqueeze default
https://bugs.python.org/issue35855  opened by terry.reedy

#35856: bundled pip syntaxwarning
https://bugs.python.org/issue35856  opened by Dima.Tisnek

#35857: Stacktrace shows lines from updated file on disk, not code act
https://bugs.python.org/issue35857  opened by Steve Pryde

#35859: Capture behavior depends on the order of an alternation
https://bugs.python.org/issue35859  opened by davisjam

#35860: ProcessPoolExecutor subprocesses crash & break pool when raisi
https://bugs.python.org/issue35860  opened by underyx

#35861: test_named_expressions raises SyntaxWarning
https://bugs.python.org/issue35861  opened by xtreak

#35862: Change the environment for a new process
https://bugs.python.org/issue35862  opened by r-or

#35866: concurrent.futures deadlock
https://bugs.python.org/issue35866  opened by jwilk

#35867: NameError is not caught at Task execution
https://bugs.python.org/issue35867  opened by Sampsa Riikonen

#35868: Support ALL_PROXY environment variable in urllib
https://bugs.python.org/issue35868  opened by Oleh Khoma

#35869: io.BufferReader.read() returns None
https://bugs.python.org/issue35869  opened by steverpalmer

#35870: readline() specification is unclear
https://bugs.python.org/issue35870  opened by porton

#35871: Pdb NameError in generator param and list comprehension
https://bugs.python.org/issue35871  opened by jayanth

#35872: Creating venv from venv no longer works in 3.7.2
https://bugs.python.org/issue35872  opened by schlamar

#35873: Controlling venv from venv no longer works in 3.7.2
https://bugs.python.org/issue35873  opened by schlamar

#35874: Clarify that the (...) convertor to PyArg_ParseTuple... accept
https://bugs.python.org/issue35874  opened by Antony.Lee

#35875: Crash - algos.cp36-win_amd64.pyd  join.cp36-win_amd64.pyd
https://bugs.python.org/issue35875  opened by AxelArnoldBangert

#35876: test_start_new_session for posix_spawnp fails
https://bugs.python.org/issue35876  opened by pablogsal

#35877: parenthesis is mandatory for named expressions in while statem
https://bugs.python.org/issue35877  opened by xtreak

#35878: ast.c: end_col_offset may be used uninitialized in this functi
https://bugs.python.org/issue35878  opened by vstinner

#35879: test_type_comments leaks references
https://bugs.python.org/issue35879  opened by vstinner

#35880: math.sin has no backward error; this isn't documented
https://bugs.python.org/issue35880  opened by jneb

#35882: distutils fails with UnicodeEncodeError with strange filename 
https://bugs.python.org/issue35882  opened by scjody

#35883: Change invalid unicode characters to replacement characters in
https://bugs.python.org/issue35883  opened by Neui



Most recent 15 issues with no replies (15)
==========================================

#35882: distutils fails with UnicodeEncodeError with strange filename 
https://bugs.python.org/issue35882

#35878: ast.c: end_col_offset may be used uninitialized in this functi
https://bugs.python.org/issue35878

#35874: Clarify that the (...) convertor to PyArg_ParseTuple... accept
https://bugs.python.org/issue35874

#35873: Controlling venv from venv no longer works in 3.7.2
https://bugs.python.org/issue35873

#35867: NameError is not caught at Task execution
https://bugs.python.org/issue35867

#35860: ProcessPoolExecutor subprocesses crash & break pool when raisi
https://bugs.python.org/issue35860

#35852: Fixed tests regenerating using CRLF when running it on Windows
https://bugs.python.org/issue35852

#35844: Calling `Multiprocessing.Queue.close()` too quickly causes int
https://bugs.python.org/issue35844

#35827: C API dictionary views type checkers are not documented
https://bugs.python.org/issue35827

#35813: shared memory construct to avoid need for serialization betwee
https://bugs.python.org/issue35813

#35812: Don't log an exception from the main coroutine in asyncio.run(
https://bugs.python.org/issue35812

#35807: Update bundled pip to 19.0
https://bugs.python.org/issue35807

#35803: Test and document that `dir=...` in tempfile may be PathLike
https://bugs.python.org/issue35803

#35801: venv in 3.7 references python3 executable
https://bugs.python.org/issue35801

#35792: Specifying AbstractEventLoop.run_in_executor as a coroutine co
https://bugs.python.org/issue35792



Most recent 15 issues waiting for review (15)
=============================================

#35877: parenthesis is mandatory for named expressions in while statem
https://bugs.python.org/issue35877

#35876: test_start_new_session for posix_spawnp fails
https://bugs.python.org/issue35876

#35862: Change the environment for a new process
https://bugs.python.org/issue35862

#35861: test_named_expressions raises SyntaxWarning
https://bugs.python.org/issue35861

#35854: EnvBuilder and venv symlinks do not work on Windows on 3.7.2
https://bugs.python.org/issue35854

#35852: Fixed tests regenerating using CRLF when running it on Windows
https://bugs.python.org/issue35852

#35849: Added thousands separators to Lib/pstats.py final report
https://bugs.python.org/issue35849

#35847: RISC-V needs CTYPES_PASS_BY_REF_HACK
https://bugs.python.org/issue35847

#35843: importlib.util docs for namespace packages innaccurate
https://bugs.python.org/issue35843

#35826: Typo in example for async with statement with condition
https://bugs.python.org/issue35826

#35824: http.cookies._CookiePattern modifying regular expressions
https://bugs.python.org/issue35824

#35823: Use vfork() in subprocess on Linux
https://bugs.python.org/issue35823

#35813: shared memory construct to avoid need for serialization betwee
https://bugs.python.org/issue35813

#35810: Object Initialization Bug with Heap-allocated Types
https://bugs.python.org/issue35810

#35803: Test and document that `dir=...` in tempfile may be PathLike
https://bugs.python.org/issue35803



Top 10 most discussed issues (10)
=================================

#35431: Add a function for computing binomial coefficients to the math
https://bugs.python.org/issue35431  12 msgs

#25592: distutils docs: data_files always uses sys.prefix
https://bugs.python.org/issue25592  10 msgs

#35857: Stacktrace shows lines from updated file on disk, not code act
https://bugs.python.org/issue35857  10 msgs

#35854: EnvBuilder and venv symlinks do not work on Windows on 3.7.2
https://bugs.python.org/issue35854   7 msgs

#35848: readinto is not a method on io.TextIOBase
https://bugs.python.org/issue35848   6 msgs

#35859: Capture behavior depends on the order of an alternation
https://bugs.python.org/issue35859   6 msgs

#35823: Use vfork() in subprocess on Linux
https://bugs.python.org/issue35823   5 msgs

#35829: datetime: parse "Z" timezone suffix in fromisoformat()
https://bugs.python.org/issue35829   5 msgs

#30670: pprint for dict in sorted order or insert order?
https://bugs.python.org/issue30670   4 msgs

#32834: test_gdb fails with Posix locale in 3.7
https://bugs.python.org/issue32834   4 msgs



Issues closed (22)
==================

#2212: Cookie.BaseCookie has ambiguous unicode handling
https://bugs.python.org/issue2212  closed by martin.panter

#29235: Allow profile/cProfile to be used as context managers
https://bugs.python.org/issue29235  closed by cheryl.sabella

#34003: csv.DictReader can return basic dict instead of OrderedDict
https://bugs.python.org/issue34003  closed by rhettinger

#35196: IDLE text squeezer is too aggressive and is slow
https://bugs.python.org/issue35196  closed by terry.reedy

#35717: enum.Enum error on sys._getframe(2)
https://bugs.python.org/issue35717  closed by vstinner

#35769: IDLE: change new file name from  ''Untitled" to "untitled"
https://bugs.python.org/issue35769  closed by cheryl.sabella

#35780: Recheck logic in the C version of the lru_cache()
https://bugs.python.org/issue35780  closed by rhettinger

#35797: concurrent.futures.ProcessPoolExecutor does not work in venv o
https://bugs.python.org/issue35797  closed by steve.dower

#35811: py.exe should unset the __PYVENV_LAUNCHER__ environment variab
https://bugs.python.org/issue35811  closed by steve.dower

#35825: Py_UNICODE_SIZE=4 fails to link on Windows
https://bugs.python.org/issue35825  closed by inada.naoki

#35831: Format Spec example says limited to 3.1+ but works in 2.7
https://bugs.python.org/issue35831  closed by fdrake

#35835: There is no mention of breakpoint() in the pdb documentation
https://bugs.python.org/issue35835  closed by Mariatta

#35836: ZeroDivisionError class should have a __name__ attr
https://bugs.python.org/issue35836  closed by steven.daprano

#35837: smtpd PureProxy breaks on mail_options keyword argument
https://bugs.python.org/issue35837  closed by r.david.murray

#35842: A potential bug about use of uninitialised variable
https://bugs.python.org/issue35842  closed by josh.r

#35850: CKAN installation went on script error
https://bugs.python.org/issue35850  closed by christian.heimes

#35853: Extend the functools module with more higher order function co
https://bugs.python.org/issue35853  closed by rhettinger

#35858: Consider adding the option of running shell/console commands i
https://bugs.python.org/issue35858  closed by jcrmatos

#35863: email.headers wraps headers badly
https://bugs.python.org/issue35863  closed by r.david.murray

#35864: Replace OrderedDict with regular dict in namedtuple's _asdict(
https://bugs.python.org/issue35864  closed by rhettinger

#35865: configparser document refers about random dict order
https://bugs.python.org/issue35865  closed by inada.naoki

#35881: test_type_comments leaks references and memory blocks
https://bugs.python.org/issue35881  closed by vstinner

From solipsis at pitrou.net  Sun Feb  3 10:19:25 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Sun, 3 Feb 2019 16:19:25 +0100
Subject: [Python-Dev] Difference between Include/internal and
 Include/cpython ?
Message-ID: <20190203161925.0115cf68@fsol>


Hello,

Can someone explain why we have two separate directories
Include/internal and Include/cpython?  What is the rule for declaring an
API inside one or another?

At first sight, it seems to me we're having gratuitous complication
here.  For example, I notice that PyFloat_Fini() is declared in
Include/cpython/pylifecycle.h but PyLong_Fini() is declared in
Include/internal/pycore_pylifecycle.h?

(and why the additional "pycore_XXX.h" naming convention for some of
those files?)

Regards

Antoine.



From ammar at ammaraskar.com  Sun Feb  3 11:10:16 2019
From: ammar at ammaraskar.com (Ammar Askar)
Date: Sun, 3 Feb 2019 11:10:16 -0500
Subject: [Python-Dev] Difference between Include/internal and
 Include/cpython ?
In-Reply-To: <20190203161925.0115cf68@fsol>
References: <20190203161925.0115cf68@fsol>
Message-ID: <CAG74Ji=7_uj67Wpybd1M0OM78R=u-KY22sxHQmSrs0OqEydAmg@mail.gmail.com>

This is the discussion where it was named:
https://discuss.python.org/t/poll-what-is-your-favorite-name-for-the-new-include-subdirectory/477?u=ammaraskar
and the bug explaining the motivation: https://bugs.python.org/issue35134

>(and why the additional "pycore_XXX.h" naming convention for some ofthose files?)

"* Include/internal/pycore_*.h is the "internal" API"

On Sun, Feb 3, 2019 at 10:20 AM Antoine Pitrou <solipsis at pitrou.net> wrote:
>
>
> Hello,
>
> Can someone explain why we have two separate directories
> Include/internal and Include/cpython?  What is the rule for declaring an
> API inside one or another?
>
> At first sight, it seems to me we're having gratuitous complication
> here.  For example, I notice that PyFloat_Fini() is declared in
> Include/cpython/pylifecycle.h but PyLong_Fini() is declared in
> Include/internal/pycore_pylifecycle.h?
>
> (and why the additional "pycore_XXX.h" naming convention for some of
> those files?)
>
> Regards
>
> Antoine.
>
>
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe: https://mail.python.org/mailman/options/python-dev/ammar%40ammaraskar.com

From solipsis at pitrou.net  Sun Feb  3 11:43:28 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Sun, 3 Feb 2019 17:43:28 +0100
Subject: [Python-Dev] Difference between Include/internal and
 Include/cpython ?
In-Reply-To: <CAG74Ji=7_uj67Wpybd1M0OM78R=u-KY22sxHQmSrs0OqEydAmg@mail.gmail.com>
References: <20190203161925.0115cf68@fsol>
 <CAG74Ji=7_uj67Wpybd1M0OM78R=u-KY22sxHQmSrs0OqEydAmg@mail.gmail.com>
Message-ID: <20190203174328.482c8175@fsol>


But in practice the distinction doesn't seem very conclusive.  Some
internal APIs end up in either of those two directories without any
clear reason why.

Regards

Antoine.


On Sun, 3 Feb 2019 11:10:16 -0500
Ammar Askar <ammar at ammaraskar.com> wrote:
> This is the discussion where it was named:
> https://discuss.python.org/t/poll-what-is-your-favorite-name-for-the-new-include-subdirectory/477?u=ammaraskar
> and the bug explaining the motivation: https://bugs.python.org/issue35134
> 
> >(and why the additional "pycore_XXX.h" naming convention for some ofthose files?)  
> 
> "* Include/internal/pycore_*.h is the "internal" API"
> 
> On Sun, Feb 3, 2019 at 10:20 AM Antoine Pitrou <solipsis at pitrou.net> wrote:
> >
> >
> > Hello,
> >
> > Can someone explain why we have two separate directories
> > Include/internal and Include/cpython?  What is the rule for declaring an
> > API inside one or another?
> >
> > At first sight, it seems to me we're having gratuitous complication
> > here.  For example, I notice that PyFloat_Fini() is declared in
> > Include/cpython/pylifecycle.h but PyLong_Fini() is declared in
> > Include/internal/pycore_pylifecycle.h?
> >
> > (and why the additional "pycore_XXX.h" naming convention for some of
> > those files?)
> >
> > Regards
> >
> > Antoine.
> >
> >
> > _______________________________________________
> > Python-Dev mailing list
> > Python-Dev at python.org
> > https://mail.python.org/mailman/listinfo/python-dev
> > Unsubscribe: https://mail.python.org/mailman/options/python-dev/ammar%40ammaraskar.com  


From solipsis at pitrou.net  Sun Feb  3 16:03:40 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Sun, 3 Feb 2019 22:03:40 +0100
Subject: [Python-Dev] Asking for reversion
Message-ID: <20190203220340.3158b236@fsol>


Hello,

I'd like to ask for the reversion of the changes done in
https://github.com/python/cpython/pull/11664

The reason is simple: the PR isn't complete, it lacks docs and tests.
It also didn't pass any review (this was pointed by Ronald), even
though it adds 1300 lines of code.  No programmer is perfect, so it's
statistically likely that the PR is defective.

With git, forks and branches, we definitely don't need to commit
unfinished PRs to the main repo.  It's perfectly fine to maintain
some non-trivial piece of work in a separate fork.  People do it on a
regular basis (for example I have currently two such
long-lived branches: one for PEP 556 and one for PEP 574).


Also, this is not the first time this happened.  Another
multiprocessing PR was merged some years ago without any docs or tests:
https://bugs.python.org/issue28053

Today that work /still/ lacks docs or tests, and there is a suspicion
that it doesn't work as intended (see issue comments).  It's probably
too late to revert it, but it's definitely a slippery slope.

Regards

Antoine.



From vstinner at redhat.com  Sun Feb  3 17:22:25 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Sun, 3 Feb 2019 23:22:25 +0100
Subject: [Python-Dev] Difference between Include/internal and
 Include/cpython ?
In-Reply-To: <20190203161925.0115cf68@fsol>
References: <20190203161925.0115cf68@fsol>
Message-ID: <CA+3bQGFFd2B2jyEe4ZHSLDiBpmHntPjhT8j7kwfjmZX3Za9+Cw@mail.gmail.com>

Hi Antoine,

The rules to decide what goes where have been discussed in the issues which
created Include/cpython/ and the issue moving more headers to
Include/internal/.

In short, internal/ should not be used outside CPython codebase. In Python
3.7, these headers were even not installed. I chose to install them because
I moved more headers into internal/ which is a backward incompatible
change. You should not use these headers outside CPython code base, but the
typical use case to use them are debug tools: debugger, tracer and
profiler. The internal/ subdir is not included in Python default search
path when you use python-config --cflags for example. It is a deliberate
choice that these headers are not easily accessible.

There file names are prefixed by pycore_ for practical reasons: if 2 header
files have the same name in internal/ and Include/, the C preprocessor can
pick the wrong one. See the internal/ issue which gives a concrete example
(but in Python 3.7).

cpython/ is just a practical separation to force developers to decide if a
new API is part of the stable API or not. Previously, too many APIs have
been added to the stable API by mistake (not on purpose).

About inconsistencies, I invite you to open issues. I worked by small
steps. I tried to not move too much code from "one API" (stable, cpython,
internal) to another. IMHO all _Init() and _Fini() APIs must be internal.
For historical reasons, they are even part of the public API (!) which is a
mistake. I don't see the point of calling them explicitly.

I tried to take notes at https://pythoncapi.readthedocs.io/ for the
rationale, examples and track progess, but I didn't update this site with
the work I did last 6 months.

I hope that it makes more sense to you now?

Victor


Le dimanche 3 f?vrier 2019, Antoine Pitrou <solipsis at pitrou.net> a ?crit :
>
> Hello,
>
> Can someone explain why we have two separate directories
> Include/internal and Include/cpython?  What is the rule for declaring an
> API inside one or another?
>
> At first sight, it seems to me we're having gratuitous complication
> here.  For example, I notice that PyFloat_Fini() is declared in
> Include/cpython/pylifecycle.h but PyLong_Fini() is declared in
> Include/internal/pycore_pylifecycle.h?
>
> (and why the additional "pycore_XXX.h" naming convention for some of
> those files?)
>
> Regards
>
> Antoine.
>
>
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
https://mail.python.org/mailman/options/python-dev/vstinner%40redhat.com
>

-- 
Night gathers, and now my watch begins. It shall not end until my death.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190203/1a603779/attachment.html>

From barry at python.org  Sun Feb  3 17:25:00 2019
From: barry at python.org (Barry Warsaw)
Date: Sun, 3 Feb 2019 14:25:00 -0800
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <20190203220340.3158b236@fsol>
References: <20190203220340.3158b236@fsol>
Message-ID: <714898D1-F99E-46CE-BE12-AC885629E49F@python.org>

On Feb 3, 2019, at 13:03, Antoine Pitrou <solipsis at pitrou.net> wrote:
> 
> I'd like to ask for the reversion of the changes done in
> https://github.com/python/cpython/pull/11664
> 
> The reason is simple: the PR isn't complete, it lacks docs and tests.
> It also didn't pass any review (this was pointed by Ronald), even
> though it adds 1300 lines of code.  No programmer is perfect, so it's
> statistically likely that the PR is defective.

I concur.  I actually think CI shouldn?t even pass without sufficiently covering tests and docs (sans a ?trivial? or other short circuiting label), but that might be unpopular.

-Barry

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: Message signed with OpenPGP
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190203/fac72696/attachment.sig>

From solipsis at pitrou.net  Sun Feb  3 17:40:59 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Sun, 3 Feb 2019 23:40:59 +0100
Subject: [Python-Dev] Difference between Include/internal and
 Include/cpython ?
In-Reply-To: <CA+3bQGFFd2B2jyEe4ZHSLDiBpmHntPjhT8j7kwfjmZX3Za9+Cw@mail.gmail.com>
References: <20190203161925.0115cf68@fsol>
 <CA+3bQGFFd2B2jyEe4ZHSLDiBpmHntPjhT8j7kwfjmZX3Za9+Cw@mail.gmail.com>
Message-ID: <20190203234059.2ba49a84@fsol>

On Sun, 3 Feb 2019 23:22:25 +0100
Victor Stinner <vstinner at redhat.com> wrote:
> Hi Antoine,
> 
> The rules to decide what goes where have been discussed in the issues which
> created Include/cpython/ and the issue moving more headers to
> Include/internal/.
> 
> In short, internal/ should not be used outside CPython codebase. In Python
> 3.7, these headers were even not installed. I chose to install them because
> I moved more headers into internal/ which is a backward incompatible
> change. You should not use these headers outside CPython code base, but the
> typical use case to use them are debug tools: debugger, tracer and
> profiler. The internal/ subdir is not included in Python default search
> path when you use python-config --cflags for example. It is a deliberate
> choice that these headers are not easily accessible.
> 
> There file names are prefixed by pycore_ for practical reasons: if 2 header
> files have the same name in internal/ and Include/, the C preprocessor can
> pick the wrong one. See the internal/ issue which gives a concrete example
> (but in Python 3.7).
> 
> cpython/ is just a practical separation to force developers to decide if a
> new API is part of the stable API or not. Previously, too many APIs have
> been added to the stable API by mistake (not on purpose).

Hmm, I see.  Thanks for the explanation.

Regards

Antoine.

From tjreedy at udel.edu  Sun Feb  3 19:31:18 2019
From: tjreedy at udel.edu (Terry Reedy)
Date: Sun, 3 Feb 2019 19:31:18 -0500
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <20190203220340.3158b236@fsol>
References: <20190203220340.3158b236@fsol>
Message-ID: <q3814o$2ben$1@blaine.gmane.org>

On 2/3/2019 4:03 PM, Antoine Pitrou wrote:
> 
> Hello,
> 
> I'd like to ask for the reversion of the changes done in
> https://github.com/python/cpython/pull/11664
> 
> The reason is simple: [over 1000 lines not reviewed, no tests, no docs]

Aside from the technical reasons Antoine gave, which I agree with, I 
think the merge was legally questionable, as a non-contributor is listed 
as a copyright holder.  Message 334805. https://bugs.python.org/issue35813

-- 
Terry Jan Reedy


From guido at python.org  Sun Feb  3 19:49:13 2019
From: guido at python.org (Guido van Rossum)
Date: Sun, 3 Feb 2019 16:49:13 -0800
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <q3814o$2ben$1@blaine.gmane.org>
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
Message-ID: <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>

I think this is now up to the 3.8 release manager.

On Sun, Feb 3, 2019 at 4:34 PM Terry Reedy <tjreedy at udel.edu> wrote:

> On 2/3/2019 4:03 PM, Antoine Pitrou wrote:
> >
> > Hello,
> >
> > I'd like to ask for the reversion of the changes done in
> > https://github.com/python/cpython/pull/11664
> >
> > The reason is simple: [over 1000 lines not reviewed, no tests, no docs]
>
> Aside from the technical reasons Antoine gave, which I agree with, I
> think the merge was legally questionable, as a non-contributor is listed
> as a copyright holder.  Message 334805. https://bugs.python.org/issue35813
>
> --
> Terry Jan Reedy
>
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/guido%40python.org
>


-- 
--Guido van Rossum (python.org/~guido)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190203/9b50a6b1/attachment.html>

From guido at python.org  Sun Feb  3 19:55:43 2019
From: guido at python.org (Guido van Rossum)
Date: Sun, 3 Feb 2019 16:55:43 -0800
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
 <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
Message-ID: <CAP7+vJ+Q=6eCoSwwa91+cShAkjA03Y-r+HpOu2y8sGmgtDcFpw@mail.gmail.com>

Also, did anyone ask Davin directly to roll it back?

On Sun, Feb 3, 2019 at 4:49 PM Guido van Rossum <guido at python.org> wrote:

> I think this is now up to the 3.8 release manager.
>
> On Sun, Feb 3, 2019 at 4:34 PM Terry Reedy <tjreedy at udel.edu> wrote:
>
>> On 2/3/2019 4:03 PM, Antoine Pitrou wrote:
>> >
>> > Hello,
>> >
>> > I'd like to ask for the reversion of the changes done in
>> > https://github.com/python/cpython/pull/11664
>> >
>> > The reason is simple: [over 1000 lines not reviewed, no tests, no docs]
>>
>> Aside from the technical reasons Antoine gave, which I agree with, I
>> think the merge was legally questionable, as a non-contributor is listed
>> as a copyright holder.  Message 334805.
>> https://bugs.python.org/issue35813
>>
>> --
>> Terry Jan Reedy
>>
>> _______________________________________________
>> Python-Dev mailing list
>> Python-Dev at python.org
>> https://mail.python.org/mailman/listinfo/python-dev
>> Unsubscribe:
>> https://mail.python.org/mailman/options/python-dev/guido%40python.org
>>
>
>
> --
> --Guido van Rossum (python.org/~guido)
>


-- 
--Guido van Rossum (python.org/~guido)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190203/8a917c64/attachment.html>

From tjreedy at udel.edu  Sun Feb  3 20:40:54 2019
From: tjreedy at udel.edu (Terry Reedy)
Date: Sun, 3 Feb 2019 20:40:54 -0500
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <CAP7+vJ+Q=6eCoSwwa91+cShAkjA03Y-r+HpOu2y8sGmgtDcFpw@mail.gmail.com>
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
 <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
 <CAP7+vJ+Q=6eCoSwwa91+cShAkjA03Y-r+HpOu2y8sGmgtDcFpw@mail.gmail.com>
Message-ID: <q38577$1qlm$2@blaine.gmane.org>

On 2/3/2019 7:55 PM, Guido van Rossum wrote:
> Also, did anyone ask Davin directly to roll it back?

Antoine posted on the issue, along with Robert O.  Robert reviewed and 
make several suggestions.

-- 
Terry Jan Reedy


From raymond.hettinger at gmail.com  Sun Feb  3 20:52:55 2019
From: raymond.hettinger at gmail.com (Raymond Hettinger)
Date: Sun, 3 Feb 2019 17:52:55 -0800
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <20190203220340.3158b236@fsol>
References: <20190203220340.3158b236@fsol>
Message-ID: <E19DF3D1-2FB4-4350-A0FF-B20A45A52C92@gmail.com>



> On Feb 3, 2019, at 1:03 PM, Antoine Pitrou <solipsis at pitrou.net> wrote:
> 
> I'd like to ask for the reversion of the changes done in
> https://github.com/python/cpython/pull/11664

Please work *with* Davin on this one.

It was only recently that you edited his name out of the list of maintainers for multiprocessing even though that is what he's been working on for the last two years and at the last two sprints.  I'd like to see more team work here rather than applying social pressures via python-dev (which is a *very* public list). 


Raymond


From raymond.hettinger at gmail.com  Sun Feb  3 21:10:43 2019
From: raymond.hettinger at gmail.com (Raymond Hettinger)
Date: Sun, 3 Feb 2019 18:10:43 -0800
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <q38577$1qlm$2@blaine.gmane.org>
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
 <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
 <CAP7+vJ+Q=6eCoSwwa91+cShAkjA03Y-r+HpOu2y8sGmgtDcFpw@mail.gmail.com>
 <q38577$1qlm$2@blaine.gmane.org>
Message-ID: <8933B3A4-DE0D-47AD-8A5A-10E7B54023D7@gmail.com>


> On Feb 3, 2019, at 5:40 PM, Terry Reedy <tjreedy at udel.edu> wrote:
> 
> On 2/3/2019 7:55 PM, Guido van Rossum wrote:
>> Also, did anyone ask Davin directly to roll it back?
> 
> Antoine posted on the issue, along with Robert O.  Robert reviewed and make several suggestions.

I think the PR sat in a stable state for many months, and it looks like RO's review comments came *after* the commit.  

FWIW, with dataclasses we decided to get the PR committed early, long before most of the tests and all of the docs. The principle was that bigger changes needed to go in as early as possible in the release cycle so that we could thoroughly exercise it (something that almost never happens while something is in the PR stage).  It would be great if the same came happen here.  IIRC, shared memory has long been the holy grail for multiprocessing, helping to mitigate its principle disadvantage (the cost of moving data between processes).  It's something we really want.

But let's see what the 3.8 release manager has to say.


Raymond



From python+python_dev at discontinuity.net  Sun Feb  3 22:12:38 2019
From: python+python_dev at discontinuity.net (Davin Potts)
Date: Sun, 3 Feb 2019 21:12:38 -0600
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <8933B3A4-DE0D-47AD-8A5A-10E7B54023D7@gmail.com>
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
 <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
 <CAP7+vJ+Q=6eCoSwwa91+cShAkjA03Y-r+HpOu2y8sGmgtDcFpw@mail.gmail.com>
 <q38577$1qlm$2@blaine.gmane.org>
 <8933B3A4-DE0D-47AD-8A5A-10E7B54023D7@gmail.com>
Message-ID: <CABHLM6sxvXGUc+V78X=94K+Gvv3mDnmoLRCzmb_BhFhi=m0P+w@mail.gmail.com>

I am attempting to do the right thing and am following the advice of other
core devs in what I have done thus far.

Borrowing heavily from what I've added to issue35813 just now:

This work is the result of ~1.5 years of development effort, much of it
accomplished at the last two core dev sprints.  The code behind it has been
stable since September 2018 and tested as an independently installable
package by multiple people.

I was encouraged by Lukasz, Yury, and others to check in this code early,
not waiting for tests and docs, in order to both solicit more feedback and
provide for broader testing.  I understand that doing such a thing is not
at all a novelty.  Thankfully it is doing that -- I hope that feedback
remains constructive and supportive.

There are some tests to be found in a branch (enh-tests-shmem) of
github.com/applio/cpython which I think should become more comprehensive
before inclusion.  Temporarily deferring and not including them as part of
the first alpha should reduce the complexity of that release.

Regarding the BSD license on the C code being adopted, my conversations
with Brett and subsequently Van have not raised concerns, far from it --
there is a process which is being followed to the letter.  If there are
other reasons to object to the thoughtful adoption of code licensed like
this one, that deserves a decoupled and larger discussion first.


Davin

On Sun, Feb 3, 2019 at 8:12 PM Raymond Hettinger <
raymond.hettinger at gmail.com> wrote:

>
> > On Feb 3, 2019, at 5:40 PM, Terry Reedy <tjreedy at udel.edu> wrote:
> >
> > On 2/3/2019 7:55 PM, Guido van Rossum wrote:
> >> Also, did anyone ask Davin directly to roll it back?
> >
> > Antoine posted on the issue, along with Robert O.  Robert reviewed and
> make several suggestions.
>
> I think the PR sat in a stable state for many months, and it looks like
> RO's review comments came *after* the commit.
>
> FWIW, with dataclasses we decided to get the PR committed early, long
> before most of the tests and all of the docs. The principle was that bigger
> changes needed to go in as early as possible in the release cycle so that
> we could thoroughly exercise it (something that almost never happens while
> something is in the PR stage).  It would be great if the same came happen
> here.  IIRC, shared memory has long been the holy grail for
> multiprocessing, helping to mitigate its principle disadvantage (the cost
> of moving data between processes).  It's something we really want.
>
> But let's see what the 3.8 release manager has to say.
>
>
> Raymond
>
>
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/python%2Bpython_dev%40discontinuity.net
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190203/82686044/attachment.html>

From python+python_dev at discontinuity.net  Sun Feb  3 22:25:27 2019
From: python+python_dev at discontinuity.net (Davin Potts)
Date: Sun, 3 Feb 2019 21:25:27 -0600
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <CABHLM6sxvXGUc+V78X=94K+Gvv3mDnmoLRCzmb_BhFhi=m0P+w@mail.gmail.com>
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
 <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
 <CAP7+vJ+Q=6eCoSwwa91+cShAkjA03Y-r+HpOu2y8sGmgtDcFpw@mail.gmail.com>
 <q38577$1qlm$2@blaine.gmane.org>
 <8933B3A4-DE0D-47AD-8A5A-10E7B54023D7@gmail.com>
 <CABHLM6sxvXGUc+V78X=94K+Gvv3mDnmoLRCzmb_BhFhi=m0P+w@mail.gmail.com>
Message-ID: <CABHLM6uum1CvxdO6ywkGjQfWBKQ=KPNVF9yxOE2jVt_iDybjhQ@mail.gmail.com>

On 2/3/2019 7:55 PM, Guido van Rossum wrote:
> Also, did anyone ask Davin directly to roll it back?

Simply put:  no.  There have been a number of reactionary comments in the
last 16 hours but no attempt to reach out to me directly during that time.


On Sun, Feb 3, 2019 at 8:12 PM Raymond Hettinger <
raymond.hettinger at gmail.com> wrote:
> It was only recently that you edited his name out of the list of
maintainers for multiprocessing
> even though that is what he's been working on for the last two years and
at the last two sprints.

I think it would be best to discuss Antoine's decision to take this
particular action without first consulting me, elsewhere and not part of
this thread.


As I said, I am happy to do the most constructive thing possible and I
sought the advice of those I highly respect first before doing as I have.


Davin


On Sun, Feb 3, 2019 at 9:12 PM Davin Potts <
python+python_dev at discontinuity.net> wrote:

> I am attempting to do the right thing and am following the advice of other
> core devs in what I have done thus far.
>
> Borrowing heavily from what I've added to issue35813 just now:
>
> This work is the result of ~1.5 years of development effort, much of it
> accomplished at the last two core dev sprints.  The code behind it has been
> stable since September 2018 and tested as an independently installable
> package by multiple people.
>
> I was encouraged by Lukasz, Yury, and others to check in this code early,
> not waiting for tests and docs, in order to both solicit more feedback and
> provide for broader testing.  I understand that doing such a thing is not
> at all a novelty.  Thankfully it is doing that -- I hope that feedback
> remains constructive and supportive.
>
> There are some tests to be found in a branch (enh-tests-shmem) of
> github.com/applio/cpython which I think should become more comprehensive
> before inclusion.  Temporarily deferring and not including them as part of
> the first alpha should reduce the complexity of that release.
>
> Regarding the BSD license on the C code being adopted, my conversations
> with Brett and subsequently Van have not raised concerns, far from it --
> there is a process which is being followed to the letter.  If there are
> other reasons to object to the thoughtful adoption of code licensed like
> this one, that deserves a decoupled and larger discussion first.
>
>
> Davin
>
> On Sun, Feb 3, 2019 at 8:12 PM Raymond Hettinger <
> raymond.hettinger at gmail.com> wrote:
>
>>
>> > On Feb 3, 2019, at 5:40 PM, Terry Reedy <tjreedy at udel.edu> wrote:
>> >
>> > On 2/3/2019 7:55 PM, Guido van Rossum wrote:
>> >> Also, did anyone ask Davin directly to roll it back?
>> >
>> > Antoine posted on the issue, along with Robert O.  Robert reviewed and
>> make several suggestions.
>>
>> I think the PR sat in a stable state for many months, and it looks like
>> RO's review comments came *after* the commit.
>>
>> FWIW, with dataclasses we decided to get the PR committed early, long
>> before most of the tests and all of the docs. The principle was that bigger
>> changes needed to go in as early as possible in the release cycle so that
>> we could thoroughly exercise it (something that almost never happens while
>> something is in the PR stage).  It would be great if the same came happen
>> here.  IIRC, shared memory has long been the holy grail for
>> multiprocessing, helping to mitigate its principle disadvantage (the cost
>> of moving data between processes).  It's something we really want.
>>
>> But let's see what the 3.8 release manager has to say.
>>
>>
>> Raymond
>>
>>
>> _______________________________________________
>> Python-Dev mailing list
>> Python-Dev at python.org
>> https://mail.python.org/mailman/listinfo/python-dev
>> Unsubscribe:
>> https://mail.python.org/mailman/options/python-dev/python%2Bpython_dev%40discontinuity.net
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190203/07919728/attachment.html>

From barry at python.org  Mon Feb  4 00:52:40 2019
From: barry at python.org (Barry Warsaw)
Date: Sun, 3 Feb 2019 21:52:40 -0800
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <8933B3A4-DE0D-47AD-8A5A-10E7B54023D7@gmail.com>
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
 <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
 <CAP7+vJ+Q=6eCoSwwa91+cShAkjA03Y-r+HpOu2y8sGmgtDcFpw@mail.gmail.com>
 <q38577$1qlm$2@blaine.gmane.org>
 <8933B3A4-DE0D-47AD-8A5A-10E7B54023D7@gmail.com>
Message-ID: <80174879-97D5-4516-97DF-093C980F363D@python.org>

On Feb 3, 2019, at 18:10, Raymond Hettinger <raymond.hettinger at gmail.com> wrote:
> 
> FWIW, with dataclasses we decided to get the PR committed early, long before most of the tests and all of the docs. The principle was that bigger changes needed to go in as early as possible in the release cycle so that we could thoroughly exercise it (something that almost never happens while something is in the PR stage).

I think that should generally be the exception, but if it does happen, there ought to be a release blocker issue for the tests and docs.  The problem then is if those things *don?t* happen and we get too late in the release cycle to roll the change back.

-Barry

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: Message signed with OpenPGP
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190203/3a966141/attachment.sig>

From ronaldoussoren at mac.com  Mon Feb  4 01:53:49 2019
From: ronaldoussoren at mac.com (Ronald Oussoren)
Date: Mon, 4 Feb 2019 07:53:49 +0100
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <8933B3A4-DE0D-47AD-8A5A-10E7B54023D7@gmail.com>
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
 <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
 <CAP7+vJ+Q=6eCoSwwa91+cShAkjA03Y-r+HpOu2y8sGmgtDcFpw@mail.gmail.com>
 <q38577$1qlm$2@blaine.gmane.org>
 <8933B3A4-DE0D-47AD-8A5A-10E7B54023D7@gmail.com>
Message-ID: <90A448A1-9854-4D66-A6E7-A1F97FEBC3B0@mac.com>


> On 4 Feb 2019, at 03:10, Raymond Hettinger <raymond.hettinger at gmail.com> wrote:
> 
> 
>> On Feb 3, 2019, at 5:40 PM, Terry Reedy <tjreedy at udel.edu> wrote:
>> 
>> On 2/3/2019 7:55 PM, Guido van Rossum wrote:
>>> Also, did anyone ask Davin directly to roll it back?
>> 
>> Antoine posted on the issue, along with Robert O.  Robert reviewed and make several suggestions.

@Terry: Robert is usually called Ronald :-)

> 
> I think the PR sat in a stable state for many months, and it looks like RO's review comments came *after* the commit.  

That?s because I only noticed the PR after commit: The PR was merged within an hour of creating the BPO issue. 

> 
> FWIW, with dataclasses we decided to get the PR committed early, long before most of the tests and all of the docs. The principle was that bigger changes needed to go in as early as possible in the release cycle so that we could thoroughly exercise it (something that almost never happens while something is in the PR stage).  It would be great if the same came happen here.  IIRC, shared memory has long been the holy grail for multiprocessing, helping to mitigate its principle disadvantage (the cost of moving data between processes).  It's something we really want.

But with dataclasses there was public discussion on the API.  This is a new API with no documentation in a part of the library that is known to be complex in nature.

Ronald
--

Twitter: @ronaldoussoren
Blog: https://blog.ronaldoussoren.net/

From ronaldoussoren at mac.com  Mon Feb  4 04:23:09 2019
From: ronaldoussoren at mac.com (Ronald Oussoren)
Date: Mon, 4 Feb 2019 10:23:09 +0100
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <CABHLM6uum1CvxdO6ywkGjQfWBKQ=KPNVF9yxOE2jVt_iDybjhQ@mail.gmail.com>
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
 <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
 <CAP7+vJ+Q=6eCoSwwa91+cShAkjA03Y-r+HpOu2y8sGmgtDcFpw@mail.gmail.com>
 <q38577$1qlm$2@blaine.gmane.org>
 <8933B3A4-DE0D-47AD-8A5A-10E7B54023D7@gmail.com>
 <CABHLM6sxvXGUc+V78X=94K+Gvv3mDnmoLRCzmb_BhFhi=m0P+w@mail.gmail.com>
 <CABHLM6uum1CvxdO6ywkGjQfWBKQ=KPNVF9yxOE2jVt_iDybjhQ@mail.gmail.com>
Message-ID: <2CCB0A9B-3B0B-460B-86FD-DE441F64B459@mac.com>



> On 4 Feb 2019, at 04:25, Davin Potts <python+python_dev at discontinuity.net> wrote:
> 
> On 2/3/2019 7:55 PM, Guido van Rossum wrote:
> > Also, did anyone ask Davin directly to roll it back?
> 
> Simply put:  no.  There have been a number of reactionary comments in the last 16 hours but no attempt to reach out to me directly during that time.
> 

I asked a question about the commit yesterday night in the tracker and was waiting for a response (which I fully expected to take some time due to timezone differences and this being a volunteer driven project). 

Ronald

From solipsis at pitrou.net  Mon Feb  4 04:27:44 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Mon, 4 Feb 2019 10:27:44 +0100
Subject: [Python-Dev] Asking for reversion
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
 <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
 <CAP7+vJ+Q=6eCoSwwa91+cShAkjA03Y-r+HpOu2y8sGmgtDcFpw@mail.gmail.com>
 <q38577$1qlm$2@blaine.gmane.org>
 <8933B3A4-DE0D-47AD-8A5A-10E7B54023D7@gmail.com>
 <CABHLM6sxvXGUc+V78X=94K+Gvv3mDnmoLRCzmb_BhFhi=m0P+w@mail.gmail.com>
 <CABHLM6uum1CvxdO6ywkGjQfWBKQ=KPNVF9yxOE2jVt_iDybjhQ@mail.gmail.com>
Message-ID: <20190204102744.18e0b141@fsol>

On Sun, 3 Feb 2019 21:25:27 -0600
Davin Potts <python+python_dev at discontinuity.net> wrote:
> On 2/3/2019 7:55 PM, Guido van Rossum wrote:
> > Also, did anyone ask Davin directly to roll it back?  
> 
> Simply put:  no.  There have been a number of reactionary comments in the
> last 16 hours but no attempt to reach out to me directly during that time.

By construction, if I post a comment on an issue you opened yourself on
the bug tracker, you are receiving those comments.

I'm not sure why a private message would be necessary.  Generally, we
refrain from doing things in private except if there are personal
issues.

Regards

Antoine.



From solipsis at pitrou.net  Mon Feb  4 04:33:22 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Mon, 4 Feb 2019 10:33:22 +0100
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <E19DF3D1-2FB4-4350-A0FF-B20A45A52C92@gmail.com>
References: <20190203220340.3158b236@fsol>
 <E19DF3D1-2FB4-4350-A0FF-B20A45A52C92@gmail.com>
Message-ID: <20190204103322.5b549fd1@fsol>

On Sun, 3 Feb 2019 17:52:55 -0800
Raymond Hettinger <raymond.hettinger at gmail.com> wrote:
> > On Feb 3, 2019, at 1:03 PM, Antoine Pitrou <solipsis at pitrou.net> wrote:
> > 
> > I'd like to ask for the reversion of the changes done in
> > https://github.com/python/cpython/pull/11664  
> 
> Please work *with* Davin on this one.

You know, Raymond, I'm a volunteer and I dedicate my time to whatever I
want.  If someone pushes some unfinished work, it is perfectly normal
to ask for reversion instead of feeling obliged to finish the work
myself.

Regards

Antoine.

From solipsis at pitrou.net  Mon Feb  4 04:31:02 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Mon, 4 Feb 2019 10:31:02 +0100
Subject: [Python-Dev] Asking for reversion
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
 <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
 <CAP7+vJ+Q=6eCoSwwa91+cShAkjA03Y-r+HpOu2y8sGmgtDcFpw@mail.gmail.com>
 <q38577$1qlm$2@blaine.gmane.org>
 <8933B3A4-DE0D-47AD-8A5A-10E7B54023D7@gmail.com>
Message-ID: <20190204103102.76c74feb@fsol>

On Sun, 3 Feb 2019 18:10:43 -0800
Raymond Hettinger <raymond.hettinger at gmail.com> wrote:
> > On Feb 3, 2019, at 5:40 PM, Terry Reedy <tjreedy at udel.edu> wrote:
> > 
> > On 2/3/2019 7:55 PM, Guido van Rossum wrote:  
> >> Also, did anyone ask Davin directly to roll it back?  
> > 
> > Antoine posted on the issue, along with Robert O.  Robert reviewed and make several suggestions.  
> 
> I think the PR sat in a stable state for many months, 

According to Github, it was opened 11 days ago.
The first commit itself is 12 days old (again according to Github):
https://github.com/python/cpython/pull/11664/commits/90f4a6cb2da8e187fa38b05c3f347cd602dd69c5

Now, perhaps the work itself is much older.

But regardless, you cannot expect someone to take notice of a PR or
issue if they are not put in CC.  It is very much against our usual
conventions to check in large pieces of code without asking anyone for
review.

Regards

Antoine.



From solipsis at pitrou.net  Mon Feb  4 04:39:06 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Mon, 4 Feb 2019 10:39:06 +0100
Subject: [Python-Dev] Asking for reversion
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
 <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
 <CAP7+vJ+Q=6eCoSwwa91+cShAkjA03Y-r+HpOu2y8sGmgtDcFpw@mail.gmail.com>
 <q38577$1qlm$2@blaine.gmane.org>
 <8933B3A4-DE0D-47AD-8A5A-10E7B54023D7@gmail.com>
 <CABHLM6sxvXGUc+V78X=94K+Gvv3mDnmoLRCzmb_BhFhi=m0P+w@mail.gmail.com>
Message-ID: <20190204103906.13a8e20d@fsol>

On Sun, 3 Feb 2019 21:12:38 -0600
Davin Potts <python+python_dev at discontinuity.net> wrote:
> 
> I was encouraged by Lukasz, Yury, and others to check in this code early,
> not waiting for tests and docs, in order to both solicit more feedback and
> provide for broader testing.

For the record: submitting a PR without tests or docs is perfectly
fine, and a reasonable way to ask for feedback.  Merging that PR is
not, usually (especially as you didn't wait for feedback).

So there might have been a misunderstanding between you and
Lukasz, Yury and the "others".  Or perhaps this is another instance of
taking a disruptive decision in private...

Regards

Antoine.



From lukasz at langa.pl  Mon Feb  4 05:36:47 2019
From: lukasz at langa.pl (=?utf-8?Q?=C5=81ukasz_Langa?=)
Date: Mon, 4 Feb 2019 11:36:47 +0100
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
 <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
Message-ID: <DED40378-CFE8-46ED-B0C4-014F9FE2936A@langa.pl>


> On 4 Feb 2019, at 01:49, Guido van Rossum <guido at python.org> wrote:
> 
> I think this is now up to the 3.8 release manager.

I responded on the tracker: https://bugs.python.org/issue35813#msg334817

I wrote:

> @Davin, in what time can you fill in the missing tests and documentation?  If this is something you finish do before alpha2, I'm inclined to leave the change in.
> 
> As it stands, I missed the controversy yesterday as I was busy making my first release.  So the merge *got released* in alpha1.  I would prefer to fix the missing pieces forward instead of reverting and re-submitting which will only thrash blame and history at this point.
> 
> FTR, I do agree with Antoine, Ronald and others that in the future such big changes should be as close to their ready state at merge time.



@Raymond, would you be willing to work with Davin on finishing this work in time for alpha2?


- ?
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: Message signed with OpenPGP
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190204/c31e3315/attachment.sig>

From solipsis at pitrou.net  Mon Feb  4 05:37:16 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Mon, 4 Feb 2019 11:37:16 +0100
Subject: [Python-Dev] About multiprocessing maintainership
Message-ID: <20190204113716.4368387b@fsol>


Hello,

In a recent message, Raymond dramatically pretends that I would have
"edited out" Davin of the maintainers list for the multiprocessing
module.

What I did (*) is different: I asked to mark Davin inactive and to stop
auto-assigning him on bug tracker issues.  Davin was /still/ listed in
the experts list, along with me and others.  IOW, there was no "editing
out".

(*) https://github.com/python/devguide/pull/435

The reason I did this is simple: Davin does not do, and has almost
never done, any actual maintenance work on multiprocessing (if you are
not convinced, just go through the git history, and the PRs that were
merged in the ~4 last years).  He usually does not respond to tracker
issues opened by users.  He does not review PRs.  The only sizable
piece of work he committed is, as I mentioned in the previous thread,
still untested and undocumented.

Auto-assigning someone who never (AFAICT) responds to issues ultimately
does a disservice to users, whose complaints go unanswered; while other
people, who /do/ respond to users, are not aware of those stale issues.

Regards

Antoine.



From stephane at wirtel.be  Mon Feb  4 05:58:27 2019
From: stephane at wirtel.be (Stephane Wirtel)
Date: Mon, 4 Feb 2019 11:58:27 +0100
Subject: [Python-Dev] Why a merge for 3.8.0a1?
Message-ID: <20190204105827.GA24384@xps>

Hi all,

After a git pull, I have seen there is a merge for v3.8.0a1 by ?ukasz
Langa, why? I think the code should keep a linear commit and in this
case, it's against the "commit&squash" of CPython and Github :/

Thank you for your response.

St?phane

-- 
St?phane Wirtel - https://wirtel.be - @matrixise

From lukasz at langa.pl  Mon Feb  4 06:03:08 2019
From: lukasz at langa.pl (=?utf-8?Q?=C5=81ukasz_Langa?=)
Date: Mon, 4 Feb 2019 12:03:08 +0100
Subject: [Python-Dev] Why a merge for 3.8.0a1?
In-Reply-To: <20190204105827.GA24384@xps>
References: <20190204105827.GA24384@xps>
Message-ID: <30BDE9B6-C213-4A3E-ADD8-0FCB3E3385D0@langa.pl>


> On 4 Feb 2019, at 11:58, Stephane Wirtel <stephane at wirtel.be> wrote:
> 
> Hi all,
> 
> After a git pull, I have seen there is a merge for v3.8.0a1 by ?ukasz
> Langa, why? I think the code should keep a linear commit and in this
> case, it's against the "commit&squash" of CPython and Github :/
> 
> Thank you for your response.

Tagging a release is different from a regular PR in the sense that you want the commit hash that you tagged as a given version to *remain the same*. In the mean time, other developers can (and will!) merge pull requests. If you were to rebase *the release tag* over their changes, the commit hash wouldn't match anymore. If you were to rebase *their changes* over your release tag, you'd have to force-push to update their changes.

This is described in PEP 101.

- ?
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: Message signed with OpenPGP
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190204/673eae3c/attachment.sig>

From lukasz at langa.pl  Mon Feb  4 06:32:25 2019
From: lukasz at langa.pl (=?utf-8?Q?=C5=81ukasz_Langa?=)
Date: Mon, 4 Feb 2019 12:32:25 +0100
Subject: [Python-Dev] [RELEASE] Python 3.8.0a1 is now available for testing
Message-ID: <C9EA8FEA-C427-41FD-8566-0201F0AA42EA@langa.pl>

I packaged my first release. *wipes sweat off of face*

Go get it here:
https://www.python.org/downloads/release/python-380a1/

Python 3.8.0a1 is the first of four planned alpha releases of Python 3.8,
the next feature release of Python.  During the alpha phase, Python 3.8
remains under heavy development: additional features will be added
and existing features may be modified or deleted.  Please keep in mind
that this is a preview release and its use is not recommended for
production environments.  The next preview release, 3.8.0a2, is planned
for 2019-02-24.

Apart from building the Mac installers, Ned helped me a lot with the
process, thank you!  Ernest was super quick providing me with all
required access and fixing a Unicode problem I found in Salt,
thank you!

Finally, this release was made on a train to D?sseldorf. There's a PyPy
sprint there. The train is pretty cool, makes this "Wasm! Wasm!" sound.

- ?

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: Message signed with OpenPGP
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190204/25489a0b/attachment.sig>

From stephane at wirtel.be  Mon Feb  4 07:50:51 2019
From: stephane at wirtel.be (Stephane Wirtel)
Date: Mon, 4 Feb 2019 13:50:51 +0100
Subject: [Python-Dev] Why a merge for 3.8.0a1?
In-Reply-To: <30BDE9B6-C213-4A3E-ADD8-0FCB3E3385D0@langa.pl>
References: <20190204105827.GA24384@xps>
 <30BDE9B6-C213-4A3E-ADD8-0FCB3E3385D0@langa.pl>
Message-ID: <20190204125051.GA29197@xps>

On 02/04, ?ukasz Langa wrote:
>
>> On 4 Feb 2019, at 11:58, Stephane Wirtel <stephane at wirtel.be> wrote:
>>
>> Hi all,
>>
>> After a git pull, I have seen there is a merge for v3.8.0a1 by ?ukasz
>> Langa, why? I think the code should keep a linear commit and in this
>> case, it's against the "commit&squash" of CPython and Github :/
>>
>> Thank you for your response.
>
>Tagging a release is different from a regular PR in the sense that you want the commit hash that you tagged as a given version to *remain the same*. In the mean time, other developers can (and will!) merge pull requests. If you were to rebase *the release tag* over their changes, the commit hash wouldn't match anymore. If you were to rebase *their changes* over your release tag, you'd have to force-push to update their changes.
>
>This is described in PEP 101.
>
>- ?

Hi ?ukasz,

Thank you for this explanation and I have checked the PEP 101 and also
the way for 3.7 and there is also a merge.

Thanks, today, I have learned one thing.

Have a nice day,

PS: Really sorry for this bad ping but I wanted to have an explanation.

St?phane



-- 
St?phane Wirtel - https://wirtel.be - @matrixise

From stephane at wirtel.be  Mon Feb  4 08:02:38 2019
From: stephane at wirtel.be (Stephane Wirtel)
Date: Mon, 4 Feb 2019 14:02:38 +0100
Subject: [Python-Dev] [RELEASE] Python 3.8.0a1 is now available for
 testing
In-Reply-To: <C9EA8FEA-C427-41FD-8566-0201F0AA42EA@langa.pl>
References: <C9EA8FEA-C427-41FD-8566-0201F0AA42EA@langa.pl>
Message-ID: <20190204130238.GB29197@xps>

On 02/04, ?ukasz Langa wrote:
>I packaged my first release. *wipes sweat off of face*
>
>Go get it here:
>https://www.python.org/downloads/release/python-380a1/
>
>Python 3.8.0a1 is the first of four planned alpha releases of Python 3.8,
>the next feature release of Python.  During the alpha phase, Python 3.8
>remains under heavy development: additional features will be added
>and existing features may be modified or deleted.  Please keep in mind
>that this is a preview release and its use is not recommended for
>production environments.  The next preview release, 3.8.0a2, is planned
>for 2019-02-24.
>
>Apart from building the Mac installers, Ned helped me a lot with the
>process, thank you!  Ernest was super quick providing me with all
>required access and fixing a Unicode problem I found in Salt,
>thank you!
>
>Finally, this release was made on a train to D?sseldorf. There's a PyPy
>sprint there. The train is pretty cool, makes this "Wasm! Wasm!" sound.
>
>- ?
>

Hi Lukasz,

Just one idea, we could create a Docker image with this alpha version.

This Docker image could be used with the CI of the main projects and the
test suites of these projects.

If we have some issues, we should create an issue for python 3.8.0a1.

Good idea?

Have a nice day,

St?phane

-- 
St?phane Wirtel - https://wirtel.be - @matrixise

From stephane at wirtel.be  Mon Feb  4 08:33:38 2019
From: stephane at wirtel.be (Stephane Wirtel)
Date: Mon, 4 Feb 2019 14:33:38 +0100
Subject: [Python-Dev] [RELEASE] Python 3.8.0a1 is now available for
 testing
In-Reply-To: <20190204130238.GB29197@xps>
References: <C9EA8FEA-C427-41FD-8566-0201F0AA42EA@langa.pl>
 <20190204130238.GB29197@xps>
Message-ID: <20190204133338.GA32737@xps>

It's unofficial but I used the Dockerfile for 3.7 and created this
Docker image:  

https://cloud.docker.com/u/matrixise/repository/docker/matrixise/python

docker pull matrixise/python:3.8.0a1

I am not an expert about the releasing of a Docker image but we could
work with that and try to improve it.

If one person use Gitlab-CI, this person can add a new test for this
version and use this image (matrixise/python:3.8.0a1) or an official
image, just for the tests...

St?phane


-- 
St?phane Wirtel - https://wirtel.be - @matrixise

From stephane at wirtel.be  Mon Feb  4 08:41:11 2019
From: stephane at wirtel.be (Stephane Wirtel)
Date: Mon, 4 Feb 2019 14:41:11 +0100
Subject: [Python-Dev] [RELEASE] Python 3.8.0a1 is now available for
 testing
In-Reply-To: <20190204133338.GA32737@xps>
References: <C9EA8FEA-C427-41FD-8566-0201F0AA42EA@langa.pl>
 <20190204130238.GB29197@xps> <20190204133338.GA32737@xps>
Message-ID: <20190204134111.GA2035@xps>

On 02/04, Stephane Wirtel wrote:
>It's unofficial but I used the Dockerfile for 3.7 and created this
>Docker image:
>
>https://cloud.docker.com/u/matrixise/repository/docker/matrixise/python
Sorry: here is the right link

https://hub.docker.com/r/matrixise/python


-- 
St?phane Wirtel - https://wirtel.be - @matrixise

From paul at ganssle.io  Mon Feb  4 08:48:05 2019
From: paul at ganssle.io (Paul Ganssle)
Date: Mon, 4 Feb 2019 08:48:05 -0500
Subject: [Python-Dev] Return type of datetime subclasses added to
 timedelta
In-Reply-To: <CAP7+vJKbQeTgROAtNLvXMwK5xjO8V=pCCs-CHpGAnt+G5TZcyg@mail.gmail.com>
References: <1059740e-cc65-205d-5986-a9397463a315@ganssle.io>
 <CAP7h-xa-Dp8TXrm7Oa=jDwf0wyBfVy-6zK08w219q0jVaYACiQ@mail.gmail.com>
 <bb5120e0-159e-106d-04c6-2a15f7398966@ganssle.io>
 <CAP7+vJL3JrRFstg_QNdq5C4kHkxdsbKyACJBxWSPUbyuTjao3g@mail.gmail.com>
 <2415dd60-b6b4-30b0-90d2-c0c8b22314c7@ganssle.io>
 <CAP7+vJKbQeTgROAtNLvXMwK5xjO8V=pCCs-CHpGAnt+G5TZcyg@mail.gmail.com>
Message-ID: <8faf2a5b-305c-e83b-33bd-e5eacc8609a7@ganssle.io>

Hey all,

This thread about the return type of datetime operations seems to have
stopped without any explicit decision - I think I responded to everyone
who had objections, but I think only Guido has given a +1 to whether or
not we should go ahead.

Have we got agreement to go ahead with this change? Are we still
targeting Python 3.8 here?

For those who don't want to dig through your old e-mails, here's the
archive link for this thread:
https://mail.python.org/pipermail/python-dev/2019-January/155984.html

If you want to start commenting on the actual implementation, it's
available here (though it's pretty simple):
https://github.com/python/cpython/pull/10902

Best,

Paul


On 1/6/19 7:17 PM, Guido van Rossum wrote:
> OK, I concede your point (and indeed I only tested this on 3.6). If we
> could break the backward compatibility for now() we presumably can
> break it for this purpose.
>
> On Sun, Jan 6, 2019 at 11:02 AM Paul Ganssle <paul at ganssle.io
> <mailto:paul at ganssle.io>> wrote:
>
>     I did address this in the original post - the assumption that the
>     subclass constructor will have the same arguments as the base
>     constructor is baked into many alternate constructors of datetime.
>     I acknowledge that this is a breaking change, but it is a small
>     one - anyone creating such a subclass that /cannot/ handled the
>     class being created this way would be broken in myriad ways.
>
>     We have also in recent years changed several alternate
>     constructors (including `replace`) to retain the original
>     subclass, which by your same standard would be a breaking change.
>     I believe there have been no complaints. In fact, between Python
>     3.6 and 3.7, the very example you showed broke:
>
>     Python 3.6.6:
>
>     >>> class D(datetime.datetime):
>     ...???? def __new__(cls):
>     ...???????? return cls.now()
>     ...
>     >>> D()
>     D(2019, 1, 6, 13, 49, 38, 842033)
>
>     Python 3.7.2:
>
>     >>> class D(datetime.datetime):
>     ...???? def __new__(cls):
>     ...???????? return cls.now()
>     ...
>     >>> D()
>     Traceback (most recent call last):
>     ? File "<stdin>", line 1, in <module>
>     ? File "<stdin>", line 3, in __new__
>     TypeError: __new__() takes 1 positional argument but 9 were given
>
>
>     We haven't seen any bug reports about this sort of thing; what we
>     /have/ been getting is bug reports that subclassing datetime
>     doesn't retain the subclass in various ways (because people /are/
>     using datetime subclasses). This is likely to cause very little in
>     the way of problems, but it will improve convenience for people
>     making datetime subclasses and almost certainly performance for
>     people using them (e.g. pendulum and arrow, which now need to take
>     a slow pure python route in many situations to work around this
>     problem).
>
>     If we're /really/ concerned with this backward compatibility
>     breaking, we could do the equivalent of:
>
>     try:
>     ??? return new_behavior(...)
>     except TypeError:
>     ??? warnings.warn("The semantics of timedelta addition have "
>     ????????????????? "changed in a way that raises an error in "
>     ????????????????? "this subclass. Please implement __add__ "
>     ????????????????? "if you need the old behavior.", DeprecationWarning)
>
>     Then after a suitable notice period drop the warning and turn it
>     to a hard error.
>
>     Best,
>
>     Paul
>
>     On 1/6/19 1:43 PM, Guido van Rossum wrote:
>>     I don't think datetime and builtins like int necessarily need to
>>     be aligned. But I do see a problem -- the __new__ and __init__
>>     methods defined in the subclass (if any) should allow for being
>>     called with the same signature as the base datetime class.
>>     Currently you can have a subclass of datetime whose __new__ has
>>     no arguments (or, more realistically, interprets its arguments
>>     differently). Instances of such a class can still be added to a
>>     timedelta. The proposal would cause this to break (since such an
>>     addition has to create a new instance, which calls __new__ and
>>     __init__). Since this is a backwards incompatibility, I don't see
>>     how it can be done -- and I also don't see many use cases, so I
>>     think it's not worth pursuing further.
>>
>>     Note that the same problem already happens with the
>>     .fromordinal() class method, though it doesn't happen with
>>     .fromdatetime() or .now():
>>
>>     >>> class D(datetime.datetime):
>>     ...?? def __new__(cls): return cls.now()
>>     ...
>>     >>> D()
>>     D(2019, 1, 6, 10, 33, 37, 161606)
>>     >>> D.fromordinal(100)
>>     Traceback (most recent call last):
>>     ? File "<stdin>", line 1, in <module>
>>     TypeError: __new__() takes 1 positional argument but 4 were given
>>     >>> D.fromtimestamp(123456789)
>>     D(1973, 11, 29, 13, 33, 9)
>>     >>>
>>
>>     On Sun, Jan 6, 2019 at 9:05 AM Paul Ganssle <paul at ganssle.io
>>     <mailto:paul at ganssle.io>> wrote:
>>
>>         I can think of many reasons why datetime is different from
>>         builtins, though to be honest I'm not sure that consistency
>>         for its own sake is really a strong argument for keeping a
>>         counter-intuitive behavior - and to be honest I'm open to the
>>         idea that /all/ arithmetic types /should/ have some form of
>>         this change.
>>
>>         That said, I would say that the biggest difference between
>>         datetime and builtins (other than the fact that datetime is
>>         /not/ a builtin, and as such doesn't necessarily need to be
>>         categorized in this group), is that unlike almost all other
>>         arithmetic types, /datetime/ has a special, dedicated type
>>         for describing differences in datetimes. Using your example
>>         of a float subclass, consider that without the behavior of
>>         "addition of floats returns floats", it would be hard to
>>         predict what would happen in this situation:
>>
>>         >>> F(1.2) + 3.4
>>
>>         Would that always return a float, even though F(1.2) + F(3.4)
>>         returns an F? Would that return an F because F is the
>>         left-hand operand? Would it return a float because float is
>>         the right-hand operand? Would you walk the MROs and find the
>>         lowest type in common between the operands and return that?
>>         It's not entirely clear which subtype predominates. With
>>         datetime, you have:
>>
>>         datetime - datetime -> timedelta
>>         datetime ? timedelta -> datetime
>>         timedelta ? timedelta -> timedelta
>>
>>         There's no operation between two datetime objects that would
>>         return a datetime object, so it's always clear: operations
>>         between datetime subclasses return timedelta, operations
>>         between a datetime object and a timedelta return the subclass
>>         of the datetime that it was added to or subtracted from.
>>
>>         Of course, the real way to resolve whether datetime should be
>>         different from int/float/string/etc is to look at why this
>>         choice was actually made for those types in the first place,
>>         and decide whether datetime is like them /in this respect/.
>>         The heterogeneous operations problem may be a reasonable
>>         justification for leaving the other builtins alone but
>>         changing datetime, but if someone knows of other fundamental
>>         reasons why the decision to have arithmetic operations always
>>         create the base class was chosen, please let me know.
>>
>>         Best,
>>         Paul
>>
>>         On 1/5/19 3:55 AM, Alexander Belopolsky wrote:
>>>
>>>
>>>         On Wed, Jan 2, 2019 at 10:18 PM Paul Ganssle
>>>         <paul at ganssle.io <mailto:paul at ganssle.io>> wrote:
>>>
>>>             .. the original objection was that this implementation
>>>             assumes that the datetime subclass has a constructor
>>>             with the same (or a sufficiently similar) signature as
>>>             datetime.
>>>
>>>         While this was used as a possible rationale for the way
>>>         standard types behave, the main objection to changing
>>>         datetime classes is that it will make them behave
>>>         differently from builtins.? For example:
>>>
>>>         >>> class F(float):
>>>         ...? ? ?pass
>>>         ...
>>>         >>> type(F.fromhex('AA'))
>>>         <class '__main__.F'>
>>>         >>> type(F(1) + F(2))
>>>         <class 'float'>
>>>
>>>             This may be a legitimate gripe, but unfortunately that
>>>             ship has sailed long ago. All of datetime's alternate
>>>             constructors make this assumption. Any subclass that
>>>             does not meet this requirement must have worked around
>>>             it long ago (or they don't care about alternate
>>>             constructors).
>>>
>>>
>>>         This is right, but the same argument is equally applicable
>>>         to int, float, etc. subclasses.? If you want to limit your
>>>         change to datetime types you should explain what makes these
>>>         types special.??
>>         _______________________________________________
>>         Python-Dev mailing list
>>         Python-Dev at python.org <mailto:Python-Dev at python.org>
>>         https://mail.python.org/mailman/listinfo/python-dev
>>         Unsubscribe:
>>         https://mail.python.org/mailman/options/python-dev/guido%40python.org
>>
>>
>>
>>     -- 
>>     --Guido van Rossum (python.org/~guido <http://python.org/~guido>)
>     _______________________________________________
>     Python-Dev mailing list
>     Python-Dev at python.org <mailto:Python-Dev at python.org>
>     https://mail.python.org/mailman/listinfo/python-dev
>     Unsubscribe:
>     https://mail.python.org/mailman/options/python-dev/guido%40python.org
>
>
>
> -- 
> --Guido van Rossum (python.org/~guido <http://python.org/~guido>)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190204/221d897c/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: OpenPGP digital signature
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190204/221d897c/attachment-0001.sig>

From stephane at wirtel.be  Mon Feb  4 09:26:08 2019
From: stephane at wirtel.be (Stephane Wirtel)
Date: Mon, 4 Feb 2019 15:26:08 +0100
Subject: [Python-Dev] [RELEASE] Python 3.8.0a1 is now available for
 testing
In-Reply-To: <C9EA8FEA-C427-41FD-8566-0201F0AA42EA@langa.pl>
References: <C9EA8FEA-C427-41FD-8566-0201F0AA42EA@langa.pl>
Message-ID: <20190204142608.GB2035@xps>

Hi ?ukasz,

I have some issues with pytest and this release, you can see this BPO

https://bugs.python.org/issue35895

Have a nice day and thank you for your job.

St?phane

-- 
St?phane Wirtel - https://wirtel.be - @matrixise

From python+python_dev at discontinuity.net  Mon Feb  4 10:24:38 2019
From: python+python_dev at discontinuity.net (Davin Potts)
Date: Mon, 4 Feb 2019 09:24:38 -0600
Subject: [Python-Dev] About multiprocessing maintainership
In-Reply-To: <20190204113716.4368387b@fsol>
References: <20190204113716.4368387b@fsol>
Message-ID: <CABHLM6v8agqyvVSG4gRT4b8qT-mOajAoin6e_ygfUx5g3nQn8A@mail.gmail.com>

Antoine's change to the devguide was made on the basis that "he doesn't
contribute anymore" which, going by Antoine's own description in this
thread, he contradicts.

My current effort, mentioned in Antoine's other thread, is not my single
largest contribution.  I have been impressed by the volume of time that
Antoine is able to spend on the issue tracker. Because he and I generally
agree on what actions to take on an issue, when he is quick to jump on
issues it is uncommon for me to feel the need to say something myself just
to play a numbers game or to make my presence felt -- that's part of being
a team.  There have been incidents where I disagree with Antoine and
explain the reasoning in an issue but later Antoine goes on to do whatever
he wants, disregarding what I wrote -- because I am not in a position to
necessarily react or respond as frequently, I've generally only discovered
this much later.  I regard this latter interaction as unhealthy.

I have been part of several group discussions (among core developers) now
regarding how to balance the efforts of contributors with copious time to
devote versus those which must be extra judicious in how they spend their
more limited time.  We recognize this as an ongoing concern and here it is
again.  If we are supportive of one another, we can find a way to work
through such things.

I joined the core developer team to help others and give back especially
when it involved the then-neglected multiprocessing module.  When I am
personally attacked in a discussion on an issue by someone I do not know,
it hurts and demoralizes me -- I know that all of the core developers
experience this.  When I am spending time on multiprocessing only to be
surprised by a claim that I don't contribute anymore, it hurts and
demoralizes me.  When I read hand-picked statistics to support a slanted
narrative designed to belittle my contributions, it hurts and demoralizes
me.  I know different people react to such things differently but in my
case I have occasionally needed to take time away from cpython to detox --
in 2018, such incidents led to my losing more than a month of time more
than once.

Regarding support for one another:  At the core developer sprint last year,
I volunteered to remotely host Antoine on my laptop so that he could
video-conference into the governance discussions we were having there.  A
few weeks later, Antoine is "editing me out" of the maintainers list
without any further communication.  If we only let the loudest people
contribute then we lose the quiet contributors and push them out.



Davin



On Mon, Feb 4, 2019 at 4:39 AM Antoine Pitrou <solipsis at pitrou.net> wrote:

>
> Hello,
>
> In a recent message, Raymond dramatically pretends that I would have
> "edited out" Davin of the maintainers list for the multiprocessing
> module.
>
> What I did (*) is different: I asked to mark Davin inactive and to stop
> auto-assigning him on bug tracker issues.  Davin was /still/ listed in
> the experts list, along with me and others.  IOW, there was no "editing
> out".
>
> (*) https://github.com/python/devguide/pull/435
>
> The reason I did this is simple: Davin does not do, and has almost
> never done, any actual maintenance work on multiprocessing (if you are
> not convinced, just go through the git history, and the PRs that were
> merged in the ~4 last years).  He usually does not respond to tracker
> issues opened by users.  He does not review PRs.  The only sizable
> piece of work he committed is, as I mentioned in the previous thread,
> still untested and undocumented.
>
> Auto-assigning someone who never (AFAICT) responds to issues ultimately
> does a disservice to users, whose complaints go unanswered; while other
> people, who /do/ respond to users, are not aware of those stale issues.
>
> Regards
>
> Antoine.
>
>
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/python%2Bpython_dev%40discontinuity.net
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190204/566a0498/attachment.html>

From zachary.ware+pydev at gmail.com  Mon Feb  4 10:45:39 2019
From: zachary.ware+pydev at gmail.com (Zachary Ware)
Date: Mon, 4 Feb 2019 09:45:39 -0600
Subject: [Python-Dev] About multiprocessing maintainership
In-Reply-To: <20190204113716.4368387b@fsol>
References: <20190204113716.4368387b@fsol>
Message-ID: <CAKJDb-NK74X2=hEvwPQ+avGj1gsWYP9U5SgeKky=YB1YvzAVnA@mail.gmail.com>

On Mon, Feb 4, 2019 at 4:39 AM Antoine Pitrou <solipsis at pitrou.net> wrote:
> What I did (*) is different: I asked to mark Davin inactive and to stop
> auto-assigning him on bug tracker issues.  Davin was /still/ listed in
> the experts list, along with me and others.  IOW, there was no "editing
> out".

Auto-assignment (and auto-add-to-nosy-list, for that matter) is
handled by the "components" of the bug tracker, see
bugs.python.org/component.  The experts list is used just for
populating the auto-completion for the nosy-list (that is, typing
"multi" in the nosy list entry field brings up "multiprocessing:
davin,pitrou" currently).  Marking a dev as "(inactive)" in the
experts list removes them from that auto-completion.

We've long discussed the possibility of rearranging how bpo does
auto-nosy/auto-assign such that a reporter can tag the affected
module(s) and auto-nosy based on the experts list.  That would take
significant effort which probably isn't worth doing unless PEP581
winds up rejected, but in the meantime we could easily add a
`multiprocessing` component that does whatever auto-nosy and/or
auto-assignment we want.

-- 
Zach

From antoine at python.org  Mon Feb  4 10:48:17 2019
From: antoine at python.org (Antoine Pitrou)
Date: Mon, 4 Feb 2019 16:48:17 +0100
Subject: [Python-Dev] About multiprocessing maintainership
In-Reply-To: <CABHLM6v8agqyvVSG4gRT4b8qT-mOajAoin6e_ygfUx5g3nQn8A@mail.gmail.com>
References: <20190204113716.4368387b@fsol>
 <CABHLM6v8agqyvVSG4gRT4b8qT-mOajAoin6e_ygfUx5g3nQn8A@mail.gmail.com>
Message-ID: <84b82b3a-55be-91a2-3388-7e3c5360d1d7@python.org>


Hello Davin,

I would like this discussion to be constructive and not vindicative.  So
I would ask that we leave personal attacks out of this.

> I have been part of several group discussions (among core developers)
> now regarding how to balance the efforts of contributors with copious
> time to devote versus those which must be extra judicious in how they
> spend their more limited time.

It is a misconception to think that I would have "copious time" to
devote to the bug tracker and general contribution work.  I don't.

Actually, I find I am not responsive enough on such issues when they
fall in my areas of expertise.  For users and contributors, it is
generally demotivating to have to wait several weeks before a response
comes.

> A few weeks later, Antoine is "editing me out" of the
> maintainers list without any further communication.

You haven't been "edited out".  You were left in the maintainers list
(really an "experts list"), together with Richard Oudkirk who is the
original author of multiprocessing, but also Jesse Noller and me.

Again, I have found that frequently multiprocessing issues get
neglected.  This is in part because you are auto-assigned on such
issues, and therefore users and other contributors think you'll deal
with the issues, which you don't.

I could not guess by myself that you have been busy working in private
on a feature for the past 1.5 years.  So by all accounts you definitely
seemed to be "inactive" as far as multiprocessing maintenance goes.

My concern is to improve the likelihood of users getting a response on
multiprocessing issues.  One important factor is to be honest to users
who is actually available to respond to issues.

If you have another suggestion as to how act on this, please do.

Regards

Antoine.

From guido at python.org  Mon Feb  4 11:38:34 2019
From: guido at python.org (Guido van Rossum)
Date: Mon, 4 Feb 2019 08:38:34 -0800
Subject: [Python-Dev] Return type of datetime subclasses added to
 timedelta
In-Reply-To: <8faf2a5b-305c-e83b-33bd-e5eacc8609a7@ganssle.io>
References: <1059740e-cc65-205d-5986-a9397463a315@ganssle.io>
 <CAP7h-xa-Dp8TXrm7Oa=jDwf0wyBfVy-6zK08w219q0jVaYACiQ@mail.gmail.com>
 <bb5120e0-159e-106d-04c6-2a15f7398966@ganssle.io>
 <CAP7+vJL3JrRFstg_QNdq5C4kHkxdsbKyACJBxWSPUbyuTjao3g@mail.gmail.com>
 <2415dd60-b6b4-30b0-90d2-c0c8b22314c7@ganssle.io>
 <CAP7+vJKbQeTgROAtNLvXMwK5xjO8V=pCCs-CHpGAnt+G5TZcyg@mail.gmail.com>
 <8faf2a5b-305c-e83b-33bd-e5eacc8609a7@ganssle.io>
Message-ID: <CAP7+vJLc3N4wHzZxKCmT-C61X9YeTjVh4MT0OdTV7Lt2PbdKQw@mail.gmail.com>

I recommend that you submit a PR so we can get it into 3.8 alpha 2.

On Mon, Feb 4, 2019 at 5:50 AM Paul Ganssle <paul at ganssle.io> wrote:

> Hey all,
>
> This thread about the return type of datetime operations seems to have
> stopped without any explicit decision - I think I responded to everyone who
> had objections, but I think only Guido has given a +1 to whether or not we
> should go ahead.
>
> Have we got agreement to go ahead with this change? Are we still targeting
> Python 3.8 here?
>
> For those who don't want to dig through your old e-mails, here's the
> archive link for this thread:
> https://mail.python.org/pipermail/python-dev/2019-January/155984.html
>
> If you want to start commenting on the actual implementation, it's
> available here (though it's pretty simple):
> https://github.com/python/cpython/pull/10902
>
> Best,
>
> Paul
>
>
> On 1/6/19 7:17 PM, Guido van Rossum wrote:
>
> OK, I concede your point (and indeed I only tested this on 3.6). If we
> could break the backward compatibility for now() we presumably can break it
> for this purpose.
>
> On Sun, Jan 6, 2019 at 11:02 AM Paul Ganssle <paul at ganssle.io> wrote:
>
>> I did address this in the original post - the assumption that the
>> subclass constructor will have the same arguments as the base constructor
>> is baked into many alternate constructors of datetime. I acknowledge that
>> this is a breaking change, but it is a small one - anyone creating such a
>> subclass that *cannot* handled the class being created this way would be
>> broken in myriad ways.
>>
>> We have also in recent years changed several alternate constructors
>> (including `replace`) to retain the original subclass, which by your same
>> standard would be a breaking change. I believe there have been no
>> complaints. In fact, between Python 3.6 and 3.7, the very example you
>> showed broke:
>>
>> Python 3.6.6:
>>
>> >>> class D(datetime.datetime):
>> ...     def __new__(cls):
>> ...         return cls.now()
>> ...
>> >>> D()
>> D(2019, 1, 6, 13, 49, 38, 842033)
>>
>> Python 3.7.2:
>>
>> >>> class D(datetime.datetime):
>> ...     def __new__(cls):
>> ...         return cls.now()
>> ...
>> >>> D()
>> Traceback (most recent call last):
>>   File "<stdin>", line 1, in <module>
>>   File "<stdin>", line 3, in __new__
>> TypeError: __new__() takes 1 positional argument but 9 were given
>>
>>
>> We haven't seen any bug reports about this sort of thing; what we *have*
>> been getting is bug reports that subclassing datetime doesn't retain the
>> subclass in various ways (because people *are* using datetime
>> subclasses). This is likely to cause very little in the way of problems,
>> but it will improve convenience for people making datetime subclasses and
>> almost certainly performance for people using them (e.g. pendulum and
>> arrow, which now need to take a slow pure python route in many situations
>> to work around this problem).
>>
>> If we're *really* concerned with this backward compatibility breaking,
>> we could do the equivalent of:
>>
>> try:
>>     return new_behavior(...)
>> except TypeError:
>>     warnings.warn("The semantics of timedelta addition have "
>>                   "changed in a way that raises an error in "
>>                   "this subclass. Please implement __add__ "
>>                   "if you need the old behavior.", DeprecationWarning)
>>
>> Then after a suitable notice period drop the warning and turn it to a
>> hard error.
>>
>> Best,
>>
>> Paul
>> On 1/6/19 1:43 PM, Guido van Rossum wrote:
>>
>> I don't think datetime and builtins like int necessarily need to be
>> aligned. But I do see a problem -- the __new__ and __init__ methods defined
>> in the subclass (if any) should allow for being called with the same
>> signature as the base datetime class. Currently you can have a subclass of
>> datetime whose __new__ has no arguments (or, more realistically, interprets
>> its arguments differently). Instances of such a class can still be added to
>> a timedelta. The proposal would cause this to break (since such an addition
>> has to create a new instance, which calls __new__ and __init__). Since this
>> is a backwards incompatibility, I don't see how it can be done -- and I
>> also don't see many use cases, so I think it's not worth pursuing further.
>>
>> Note that the same problem already happens with the .fromordinal() class
>> method, though it doesn't happen with .fromdatetime() or .now():
>>
>> >>> class D(datetime.datetime):
>> ...   def __new__(cls): return cls.now()
>> ...
>> >>> D()
>> D(2019, 1, 6, 10, 33, 37, 161606)
>> >>> D.fromordinal(100)
>> Traceback (most recent call last):
>>   File "<stdin>", line 1, in <module>
>> TypeError: __new__() takes 1 positional argument but 4 were given
>> >>> D.fromtimestamp(123456789)
>> D(1973, 11, 29, 13, 33, 9)
>> >>>
>>
>> On Sun, Jan 6, 2019 at 9:05 AM Paul Ganssle <paul at ganssle.io> wrote:
>>
>>> I can think of many reasons why datetime is different from builtins,
>>> though to be honest I'm not sure that consistency for its own sake is
>>> really a strong argument for keeping a counter-intuitive behavior - and to
>>> be honest I'm open to the idea that *all* arithmetic types *should*
>>> have some form of this change.
>>>
>>> That said, I would say that the biggest difference between datetime and
>>> builtins (other than the fact that datetime is *not* a builtin, and as
>>> such doesn't necessarily need to be categorized in this group), is that
>>> unlike almost all other arithmetic types, *datetime* has a special,
>>> dedicated type for describing differences in datetimes. Using your example
>>> of a float subclass, consider that without the behavior of "addition of
>>> floats returns floats", it would be hard to predict what would happen in
>>> this situation:
>>>
>>> >>> F(1.2) + 3.4
>>>
>>> Would that always return a float, even though F(1.2) + F(3.4) returns an
>>> F? Would that return an F because F is the left-hand operand? Would it
>>> return a float because float is the right-hand operand? Would you walk the
>>> MROs and find the lowest type in common between the operands and return
>>> that? It's not entirely clear which subtype predominates. With datetime,
>>> you have:
>>>
>>> datetime - datetime -> timedelta
>>> datetime ? timedelta -> datetime
>>> timedelta ? timedelta -> timedelta
>>>
>>> There's no operation between two datetime objects that would return a
>>> datetime object, so it's always clear: operations between datetime
>>> subclasses return timedelta, operations between a datetime object and a
>>> timedelta return the subclass of the datetime that it was added to or
>>> subtracted from.
>>>
>>> Of course, the real way to resolve whether datetime should be different
>>> from int/float/string/etc is to look at why this choice was actually made
>>> for those types in the first place, and decide whether datetime is like
>>> them *in this respect*. The heterogeneous operations problem may be a
>>> reasonable justification for leaving the other builtins alone but changing
>>> datetime, but if someone knows of other fundamental reasons why the
>>> decision to have arithmetic operations always create the base class was
>>> chosen, please let me know.
>>>
>>> Best,
>>> Paul
>>> On 1/5/19 3:55 AM, Alexander Belopolsky wrote:
>>>
>>>
>>>
>>> On Wed, Jan 2, 2019 at 10:18 PM Paul Ganssle <paul at ganssle.io> wrote:
>>>
>>>> .. the original objection was that this implementation assumes that the
>>>> datetime subclass has a constructor with the same (or a sufficiently
>>>> similar) signature as datetime.
>>>>
>>> While this was used as a possible rationale for the way standard types
>>> behave, the main objection to changing datetime classes is that it will
>>> make them behave differently from builtins.  For example:
>>>
>>> >>> class F(float):
>>> ...     pass
>>> ...
>>> >>> type(F.fromhex('AA'))
>>> <class '__main__.F'>
>>> >>> type(F(1) + F(2))
>>> <class 'float'>
>>>
>>> This may be a legitimate gripe, but unfortunately that ship has sailed
>>>> long ago. All of datetime's alternate constructors make this assumption.
>>>> Any subclass that does not meet this requirement must have worked around it
>>>> long ago (or they don't care about alternate constructors).
>>>>
>>>
>>> This is right, but the same argument is equally applicable to int,
>>> float, etc. subclasses.  If you want to limit your change to datetime types
>>> you should explain what makes these types special.
>>>
>>> _______________________________________________
>>> Python-Dev mailing list
>>> Python-Dev at python.org
>>> https://mail.python.org/mailman/listinfo/python-dev
>>> Unsubscribe:
>>> https://mail.python.org/mailman/options/python-dev/guido%40python.org
>>>
>>
>>
>> --
>> --Guido van Rossum (python.org/~guido)
>>
>> _______________________________________________
>> Python-Dev mailing list
>> Python-Dev at python.org
>> https://mail.python.org/mailman/listinfo/python-dev
>> Unsubscribe:
>> https://mail.python.org/mailman/options/python-dev/guido%40python.org
>>
>
>
> --
> --Guido van Rossum (python.org/~guido)
>
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/guido%40python.org
>


-- 
--Guido van Rossum (python.org/~guido)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190204/c0888c88/attachment-0001.html>

From paul at ganssle.io  Mon Feb  4 11:39:24 2019
From: paul at ganssle.io (Paul Ganssle)
Date: Mon, 4 Feb 2019 11:39:24 -0500
Subject: [Python-Dev] Return type of datetime subclasses added to
 timedelta
In-Reply-To: <CAP7+vJLc3N4wHzZxKCmT-C61X9YeTjVh4MT0OdTV7Lt2PbdKQw@mail.gmail.com>
References: <1059740e-cc65-205d-5986-a9397463a315@ganssle.io>
 <CAP7h-xa-Dp8TXrm7Oa=jDwf0wyBfVy-6zK08w219q0jVaYACiQ@mail.gmail.com>
 <bb5120e0-159e-106d-04c6-2a15f7398966@ganssle.io>
 <CAP7+vJL3JrRFstg_QNdq5C4kHkxdsbKyACJBxWSPUbyuTjao3g@mail.gmail.com>
 <2415dd60-b6b4-30b0-90d2-c0c8b22314c7@ganssle.io>
 <CAP7+vJKbQeTgROAtNLvXMwK5xjO8V=pCCs-CHpGAnt+G5TZcyg@mail.gmail.com>
 <8faf2a5b-305c-e83b-33bd-e5eacc8609a7@ganssle.io>
 <CAP7+vJLc3N4wHzZxKCmT-C61X9YeTjVh4MT0OdTV7Lt2PbdKQw@mail.gmail.com>
Message-ID: <c1f442eb-16ca-6282-38cf-268a2ced6f67@ganssle.io>

There's already a PR, actually, #10902:
https://github.com/python/cpython/pull/10902

Victor reviewed and approved it, I think before I started this thread,
so now it's just waiting on merge.

On 2/4/19 11:38 AM, Guido van Rossum wrote:
> I recommend that you submit a PR so we can get it into 3.8 alpha 2.
>
> On Mon, Feb 4, 2019 at 5:50 AM Paul Ganssle <paul at ganssle.io
> <mailto:paul at ganssle.io>> wrote:
>
>     Hey all,
>
>     This thread about the return type of datetime operations seems to
>     have stopped without any explicit decision - I think I responded
>     to everyone who had objections, but I think only Guido has given a
>     +1 to whether or not we should go ahead.
>
>     Have we got agreement to go ahead with this change? Are we still
>     targeting Python 3.8 here?
>
>     For those who don't want to dig through your old e-mails, here's
>     the archive link for this thread:
>     https://mail.python.org/pipermail/python-dev/2019-January/155984.html
>
>     If you want to start commenting on the actual implementation, it's
>     available here (though it's pretty simple):
>     https://github.com/python/cpython/pull/10902
>
>     Best,
>
>     Paul
>
>
>     On 1/6/19 7:17 PM, Guido van Rossum wrote:
>>     OK, I concede your point (and indeed I only tested this on 3.6).
>>     If we could break the backward compatibility for now() we
>>     presumably can break it for this purpose.
>>
>>     On Sun, Jan 6, 2019 at 11:02 AM Paul Ganssle <paul at ganssle.io
>>     <mailto:paul at ganssle.io>> wrote:
>>
>>         I did address this in the original post - the assumption that
>>         the subclass constructor will have the same arguments as the
>>         base constructor is baked into many alternate constructors of
>>         datetime. I acknowledge that this is a breaking change, but
>>         it is a small one - anyone creating such a subclass that
>>         /cannot/ handled the class being created this way would be
>>         broken in myriad ways.
>>
>>         We have also in recent years changed several alternate
>>         constructors (including `replace`) to retain the original
>>         subclass, which by your same standard would be a breaking
>>         change. I believe there have been no complaints. In fact,
>>         between Python 3.6 and 3.7, the very example you showed broke:
>>
>>         Python 3.6.6:
>>
>>         >>> class D(datetime.datetime):
>>         ...???? def __new__(cls):
>>         ...???????? return cls.now()
>>         ...
>>         >>> D()
>>         D(2019, 1, 6, 13, 49, 38, 842033)
>>
>>         Python 3.7.2:
>>
>>         >>> class D(datetime.datetime):
>>         ...???? def __new__(cls):
>>         ...???????? return cls.now()
>>         ...
>>         >>> D()
>>         Traceback (most recent call last):
>>         ? File "<stdin>", line 1, in <module>
>>         ? File "<stdin>", line 3, in __new__
>>         TypeError: __new__() takes 1 positional argument but 9 were given
>>
>>
>>         We haven't seen any bug reports about this sort of thing;
>>         what we /have/ been getting is bug reports that subclassing
>>         datetime doesn't retain the subclass in various ways (because
>>         people /are/ using datetime subclasses). This is likely to
>>         cause very little in the way of problems, but it will improve
>>         convenience for people making datetime subclasses and almost
>>         certainly performance for people using them (e.g. pendulum
>>         and arrow, which now need to take a slow pure python route in
>>         many situations to work around this problem).
>>
>>         If we're /really/ concerned with this backward compatibility
>>         breaking, we could do the equivalent of:
>>
>>         try:
>>         ??? return new_behavior(...)
>>         except TypeError:
>>         ??? warnings.warn("The semantics of timedelta addition have "
>>         ????????????????? "changed in a way that raises an error in "
>>         ????????????????? "this subclass. Please implement __add__ "
>>         ????????????????? "if you need the old behavior.",
>>         DeprecationWarning)
>>
>>         Then after a suitable notice period drop the warning and turn
>>         it to a hard error.
>>
>>         Best,
>>
>>         Paul
>>
>>         On 1/6/19 1:43 PM, Guido van Rossum wrote:
>>>         I don't think datetime and builtins like int necessarily
>>>         need to be aligned. But I do see a problem -- the __new__
>>>         and __init__ methods defined in the subclass (if any) should
>>>         allow for being called with the same signature as the base
>>>         datetime class. Currently you can have a subclass of
>>>         datetime whose __new__ has no arguments (or, more
>>>         realistically, interprets its arguments differently).
>>>         Instances of such a class can still be added to a timedelta.
>>>         The proposal would cause this to break (since such an
>>>         addition has to create a new instance, which calls __new__
>>>         and __init__). Since this is a backwards incompatibility, I
>>>         don't see how it can be done -- and I also don't see many
>>>         use cases, so I think it's not worth pursuing further.
>>>
>>>         Note that the same problem already happens with the
>>>         .fromordinal() class method, though it doesn't happen with
>>>         .fromdatetime() or .now():
>>>
>>>         >>> class D(datetime.datetime):
>>>         ...?? def __new__(cls): return cls.now()
>>>         ...
>>>         >>> D()
>>>         D(2019, 1, 6, 10, 33, 37, 161606)
>>>         >>> D.fromordinal(100)
>>>         Traceback (most recent call last):
>>>         ? File "<stdin>", line 1, in <module>
>>>         TypeError: __new__() takes 1 positional argument but 4 were
>>>         given
>>>         >>> D.fromtimestamp(123456789)
>>>         D(1973, 11, 29, 13, 33, 9)
>>>         >>>
>>>
>>>         On Sun, Jan 6, 2019 at 9:05 AM Paul Ganssle <paul at ganssle.io
>>>         <mailto:paul at ganssle.io>> wrote:
>>>
>>>             I can think of many reasons why datetime is different
>>>             from builtins, though to be honest I'm not sure that
>>>             consistency for its own sake is really a strong argument
>>>             for keeping a counter-intuitive behavior - and to be
>>>             honest I'm open to the idea that /all/ arithmetic types
>>>             /should/ have some form of this change.
>>>
>>>             That said, I would say that the biggest difference
>>>             between datetime and builtins (other than the fact that
>>>             datetime is /not/ a builtin, and as such doesn't
>>>             necessarily need to be categorized in this group), is
>>>             that unlike almost all other arithmetic types,
>>>             /datetime/ has a special, dedicated type for describing
>>>             differences in datetimes. Using your example of a float
>>>             subclass, consider that without the behavior of
>>>             "addition of floats returns floats", it would be hard to
>>>             predict what would happen in this situation:
>>>
>>>             >>> F(1.2) + 3.4
>>>
>>>             Would that always return a float, even though F(1.2) +
>>>             F(3.4) returns an F? Would that return an F because F is
>>>             the left-hand operand? Would it return a float because
>>>             float is the right-hand operand? Would you walk the MROs
>>>             and find the lowest type in common between the operands
>>>             and return that? It's not entirely clear which subtype
>>>             predominates. With datetime, you have:
>>>
>>>             datetime - datetime -> timedelta
>>>             datetime ? timedelta -> datetime
>>>             timedelta ? timedelta -> timedelta
>>>
>>>             There's no operation between two datetime objects that
>>>             would return a datetime object, so it's always clear:
>>>             operations between datetime subclasses return timedelta,
>>>             operations between a datetime object and a timedelta
>>>             return the subclass of the datetime that it was added to
>>>             or subtracted from.
>>>
>>>             Of course, the real way to resolve whether datetime
>>>             should be different from int/float/string/etc is to look
>>>             at why this choice was actually made for those types in
>>>             the first place, and decide whether datetime is like
>>>             them /in this respect/. The heterogeneous operations
>>>             problem may be a reasonable justification for leaving
>>>             the other builtins alone but changing datetime, but if
>>>             someone knows of other fundamental reasons why the
>>>             decision to have arithmetic operations always create the
>>>             base class was chosen, please let me know.
>>>
>>>             Best,
>>>             Paul
>>>
>>>             On 1/5/19 3:55 AM, Alexander Belopolsky wrote:
>>>>
>>>>
>>>>             On Wed, Jan 2, 2019 at 10:18 PM Paul Ganssle
>>>>             <paul at ganssle.io <mailto:paul at ganssle.io>> wrote:
>>>>
>>>>                 .. the original objection was that this
>>>>                 implementation assumes that the datetime subclass
>>>>                 has a constructor with the same (or a sufficiently
>>>>                 similar) signature as datetime.
>>>>
>>>>             While this was used as a possible rationale for the way
>>>>             standard types behave, the main objection to changing
>>>>             datetime classes is that it will make them behave
>>>>             differently from builtins.? For example:
>>>>
>>>>             >>> class F(float):
>>>>             ...? ? ?pass
>>>>             ...
>>>>             >>> type(F.fromhex('AA'))
>>>>             <class '__main__.F'>
>>>>             >>> type(F(1) + F(2))
>>>>             <class 'float'>
>>>>
>>>>                 This may be a legitimate gripe, but unfortunately
>>>>                 that ship has sailed long ago. All of datetime's
>>>>                 alternate constructors make this assumption. Any
>>>>                 subclass that does not meet this requirement must
>>>>                 have worked around it long ago (or they don't care
>>>>                 about alternate constructors).
>>>>
>>>>
>>>>             This is right, but the same argument is equally
>>>>             applicable to int, float, etc. subclasses.? If you want
>>>>             to limit your change to datetime types you should
>>>>             explain what makes these types special.??
>>>             _______________________________________________
>>>             Python-Dev mailing list
>>>             Python-Dev at python.org <mailto:Python-Dev at python.org>
>>>             https://mail.python.org/mailman/listinfo/python-dev
>>>             Unsubscribe:
>>>             https://mail.python.org/mailman/options/python-dev/guido%40python.org
>>>
>>>
>>>
>>>         -- 
>>>         --Guido van Rossum (python.org/~guido
>>>         <http://python.org/~guido>)
>>         _______________________________________________
>>         Python-Dev mailing list
>>         Python-Dev at python.org <mailto:Python-Dev at python.org>
>>         https://mail.python.org/mailman/listinfo/python-dev
>>         Unsubscribe:
>>         https://mail.python.org/mailman/options/python-dev/guido%40python.org
>>
>>
>>
>>     -- 
>>     --Guido van Rossum (python.org/~guido <http://python.org/~guido>)
>     _______________________________________________
>     Python-Dev mailing list
>     Python-Dev at python.org <mailto:Python-Dev at python.org>
>     https://mail.python.org/mailman/listinfo/python-dev
>     Unsubscribe:
>     https://mail.python.org/mailman/options/python-dev/guido%40python.org
>
>
>
> -- 
> --Guido van Rossum (python.org/~guido <http://python.org/~guido>)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190204/2ad41e88/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: OpenPGP digital signature
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190204/2ad41e88/attachment.sig>

From solipsis at pitrou.net  Mon Feb  4 12:10:44 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Mon, 4 Feb 2019 18:10:44 +0100
Subject: [Python-Dev] About multiprocessing maintainership
References: <20190204113716.4368387b@fsol>
 <CAKJDb-NK74X2=hEvwPQ+avGj1gsWYP9U5SgeKky=YB1YvzAVnA@mail.gmail.com>
Message-ID: <20190204181044.306a2dfe@fsol>

On Mon, 4 Feb 2019 09:45:39 -0600
Zachary Ware <zachary.ware+pydev at gmail.com> wrote:
> On Mon, Feb 4, 2019 at 4:39 AM Antoine Pitrou <solipsis at pitrou.net> wrote:
> > What I did (*) is different: I asked to mark Davin inactive and to stop
> > auto-assigning him on bug tracker issues.  Davin was /still/ listed in
> > the experts list, along with me and others.  IOW, there was no "editing
> > out".  
> 
> Auto-assignment (and auto-add-to-nosy-list, for that matter) is
> handled by the "components" of the bug tracker, see
> bugs.python.org/component.  The experts list is used just for
> populating the auto-completion for the nosy-list (that is, typing
> "multi" in the nosy list entry field brings up "multiprocessing:
> davin,pitrou" currently).  Marking a dev as "(inactive)" in the
> experts list removes them from that auto-completion.

Thanks for the clarification.

In any case, here is how things usually happen.  A user files a bug
report for a certain module M.  A triager takes notice, looks up the
relevant expert(s) in the developer's guide.  If an expert is listed
with issue assignment allowed (the asterisk "*" besides the name), then
the triager assumes that expert is available and assigns the issue to
them.  If the expert with an asterisk doesn't respond to the issue,
the issue may very well get forgotten.

So it's important that experts with an asterisk are actually available
to deal with user reports.

Regards

Antoine.



From barry at python.org  Mon Feb  4 13:14:41 2019
From: barry at python.org (Barry Warsaw)
Date: Mon, 4 Feb 2019 10:14:41 -0800
Subject: [Python-Dev] [RELEASE] Python 3.8.0a1 is now available for
 testing
In-Reply-To: <20190204130238.GB29197@xps>
References: <C9EA8FEA-C427-41FD-8566-0201F0AA42EA@langa.pl>
 <20190204130238.GB29197@xps>
Message-ID: <23ED9695-7715-40DE-9DD5-F6A3C482612F@python.org>

On Feb 4, 2019, at 05:02, Stephane Wirtel <stephane at wirtel.be> wrote:
> 
> Just one idea, we could create a Docker image with this alpha version.
> 
> This Docker image could be used with the CI of the main projects and the
> test suites of these projects.
> 
> If we have some issues, we should create an issue for python 3.8.0a1.

The time machine strikes again!

https://gitlab.com/python-devs/ci-images/tree/master

We call these ?semi-official?!  The current image takes a slightly different approach, by including all the latest Python versions from 2.7, and 3.4-3.8, plus git head.  I just pushed an update for the latest Python 3.8 alpha and 3.7.2.  It?s building now, but the image should be published on quay.io as soon as that?s done.

Contributions most welcome!

-Barry

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: Message signed with OpenPGP
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190204/5f4e4bb6/attachment.sig>

From ericsnowcurrently at gmail.com  Mon Feb  4 13:35:48 2019
From: ericsnowcurrently at gmail.com (Eric Snow)
Date: Mon, 4 Feb 2019 11:35:48 -0700
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <DED40378-CFE8-46ED-B0C4-014F9FE2936A@langa.pl>
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
 <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
 <DED40378-CFE8-46ED-B0C4-014F9FE2936A@langa.pl>
Message-ID: <CALFfu7AbrJAYNByJfZD3x+zDAR70VQiN0C4KSCLe4wCBK9=95Q@mail.gmail.com>

The main problem here seems to be a shortage of communication. :/
Also, I agree on the exceptional nature of merging incomplete PRs.

-eric

On Mon, Feb 4, 2019 at 3:37 AM ?ukasz Langa <lukasz at langa.pl> wrote:
>
>
> > On 4 Feb 2019, at 01:49, Guido van Rossum <guido at python.org> wrote:
> >
> > I think this is now up to the 3.8 release manager.
>
> I responded on the tracker: https://bugs.python.org/issue35813#msg334817
>
> I wrote:
>
> > @Davin, in what time can you fill in the missing tests and documentation?  If this is something you finish do before alpha2, I'm inclined to leave the change in.
> >
> > As it stands, I missed the controversy yesterday as I was busy making my first release.  So the merge *got released* in alpha1.  I would prefer to fix the missing pieces forward instead of reverting and re-submitting which will only thrash blame and history at this point.
> >
> > FTR, I do agree with Antoine, Ronald and others that in the future such big changes should be as close to their ready state at merge time.
>
>
>
> @Raymond, would you be willing to work with Davin on finishing this work in time for alpha2?
>
>
> - ?
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe: https://mail.python.org/mailman/options/python-dev/ericsnowcurrently%40gmail.com

From guido at python.org  Mon Feb  4 14:19:16 2019
From: guido at python.org (Guido van Rossum)
Date: Mon, 4 Feb 2019 11:19:16 -0800
Subject: [Python-Dev] Return type of datetime subclasses added to
 timedelta
In-Reply-To: <c1f442eb-16ca-6282-38cf-268a2ced6f67@ganssle.io>
References: <1059740e-cc65-205d-5986-a9397463a315@ganssle.io>
 <CAP7h-xa-Dp8TXrm7Oa=jDwf0wyBfVy-6zK08w219q0jVaYACiQ@mail.gmail.com>
 <bb5120e0-159e-106d-04c6-2a15f7398966@ganssle.io>
 <CAP7+vJL3JrRFstg_QNdq5C4kHkxdsbKyACJBxWSPUbyuTjao3g@mail.gmail.com>
 <2415dd60-b6b4-30b0-90d2-c0c8b22314c7@ganssle.io>
 <CAP7+vJKbQeTgROAtNLvXMwK5xjO8V=pCCs-CHpGAnt+G5TZcyg@mail.gmail.com>
 <8faf2a5b-305c-e83b-33bd-e5eacc8609a7@ganssle.io>
 <CAP7+vJLc3N4wHzZxKCmT-C61X9YeTjVh4MT0OdTV7Lt2PbdKQw@mail.gmail.com>
 <c1f442eb-16ca-6282-38cf-268a2ced6f67@ganssle.io>
Message-ID: <CAP7+vJ+3iMvjm5Ef5Bd=K_CBhxPwzxp1c0OC-f5sgGzJXnMK0A@mail.gmail.com>

OK, I approved the PR. Can some other core dev ensure that it gets merged?
No backports though!

On Mon, Feb 4, 2019 at 8:46 AM Paul Ganssle <paul at ganssle.io> wrote:

> There's already a PR, actually, #10902:
> https://github.com/python/cpython/pull/10902
>
> Victor reviewed and approved it, I think before I started this thread, so
> now it's just waiting on merge.
> On 2/4/19 11:38 AM, Guido van Rossum wrote:
>
> I recommend that you submit a PR so we can get it into 3.8 alpha 2.
>
> On Mon, Feb 4, 2019 at 5:50 AM Paul Ganssle <paul at ganssle.io> wrote:
>
>> Hey all,
>>
>> This thread about the return type of datetime operations seems to have
>> stopped without any explicit decision - I think I responded to everyone who
>> had objections, but I think only Guido has given a +1 to whether or not we
>> should go ahead.
>>
>> Have we got agreement to go ahead with this change? Are we still
>> targeting Python 3.8 here?
>>
>> For those who don't want to dig through your old e-mails, here's the
>> archive link for this thread:
>> https://mail.python.org/pipermail/python-dev/2019-January/155984.html
>>
>> If you want to start commenting on the actual implementation, it's
>> available here (though it's pretty simple):
>> https://github.com/python/cpython/pull/10902
>>
>> Best,
>>
>> Paul
>>
>>
>> On 1/6/19 7:17 PM, Guido van Rossum wrote:
>>
>> OK, I concede your point (and indeed I only tested this on 3.6). If we
>> could break the backward compatibility for now() we presumably can break it
>> for this purpose.
>>
>> On Sun, Jan 6, 2019 at 11:02 AM Paul Ganssle <paul at ganssle.io> wrote:
>>
>>> I did address this in the original post - the assumption that the
>>> subclass constructor will have the same arguments as the base constructor
>>> is baked into many alternate constructors of datetime. I acknowledge that
>>> this is a breaking change, but it is a small one - anyone creating such a
>>> subclass that *cannot* handled the class being created this way would
>>> be broken in myriad ways.
>>>
>>> We have also in recent years changed several alternate constructors
>>> (including `replace`) to retain the original subclass, which by your same
>>> standard would be a breaking change. I believe there have been no
>>> complaints. In fact, between Python 3.6 and 3.7, the very example you
>>> showed broke:
>>>
>>> Python 3.6.6:
>>>
>>> >>> class D(datetime.datetime):
>>> ...     def __new__(cls):
>>> ...         return cls.now()
>>> ...
>>> >>> D()
>>> D(2019, 1, 6, 13, 49, 38, 842033)
>>>
>>> Python 3.7.2:
>>>
>>> >>> class D(datetime.datetime):
>>> ...     def __new__(cls):
>>> ...         return cls.now()
>>> ...
>>> >>> D()
>>> Traceback (most recent call last):
>>>   File "<stdin>", line 1, in <module>
>>>   File "<stdin>", line 3, in __new__
>>> TypeError: __new__() takes 1 positional argument but 9 were given
>>>
>>>
>>> We haven't seen any bug reports about this sort of thing; what we *have*
>>> been getting is bug reports that subclassing datetime doesn't retain the
>>> subclass in various ways (because people *are* using datetime
>>> subclasses). This is likely to cause very little in the way of problems,
>>> but it will improve convenience for people making datetime subclasses and
>>> almost certainly performance for people using them (e.g. pendulum and
>>> arrow, which now need to take a slow pure python route in many situations
>>> to work around this problem).
>>>
>>> If we're *really* concerned with this backward compatibility breaking,
>>> we could do the equivalent of:
>>>
>>> try:
>>>     return new_behavior(...)
>>> except TypeError:
>>>     warnings.warn("The semantics of timedelta addition have "
>>>                   "changed in a way that raises an error in "
>>>                   "this subclass. Please implement __add__ "
>>>                   "if you need the old behavior.", DeprecationWarning)
>>>
>>> Then after a suitable notice period drop the warning and turn it to a
>>> hard error.
>>>
>>> Best,
>>>
>>> Paul
>>> On 1/6/19 1:43 PM, Guido van Rossum wrote:
>>>
>>> I don't think datetime and builtins like int necessarily need to be
>>> aligned. But I do see a problem -- the __new__ and __init__ methods defined
>>> in the subclass (if any) should allow for being called with the same
>>> signature as the base datetime class. Currently you can have a subclass of
>>> datetime whose __new__ has no arguments (or, more realistically, interprets
>>> its arguments differently). Instances of such a class can still be added to
>>> a timedelta. The proposal would cause this to break (since such an addition
>>> has to create a new instance, which calls __new__ and __init__). Since this
>>> is a backwards incompatibility, I don't see how it can be done -- and I
>>> also don't see many use cases, so I think it's not worth pursuing further.
>>>
>>> Note that the same problem already happens with the .fromordinal() class
>>> method, though it doesn't happen with .fromdatetime() or .now():
>>>
>>> >>> class D(datetime.datetime):
>>> ...   def __new__(cls): return cls.now()
>>> ...
>>> >>> D()
>>> D(2019, 1, 6, 10, 33, 37, 161606)
>>> >>> D.fromordinal(100)
>>> Traceback (most recent call last):
>>>   File "<stdin>", line 1, in <module>
>>> TypeError: __new__() takes 1 positional argument but 4 were given
>>> >>> D.fromtimestamp(123456789)
>>> D(1973, 11, 29, 13, 33, 9)
>>> >>>
>>>
>>> On Sun, Jan 6, 2019 at 9:05 AM Paul Ganssle <paul at ganssle.io> wrote:
>>>
>>>> I can think of many reasons why datetime is different from builtins,
>>>> though to be honest I'm not sure that consistency for its own sake is
>>>> really a strong argument for keeping a counter-intuitive behavior - and to
>>>> be honest I'm open to the idea that *all* arithmetic types *should*
>>>> have some form of this change.
>>>>
>>>> That said, I would say that the biggest difference between datetime and
>>>> builtins (other than the fact that datetime is *not* a builtin, and as
>>>> such doesn't necessarily need to be categorized in this group), is that
>>>> unlike almost all other arithmetic types, *datetime* has a special,
>>>> dedicated type for describing differences in datetimes. Using your example
>>>> of a float subclass, consider that without the behavior of "addition of
>>>> floats returns floats", it would be hard to predict what would happen in
>>>> this situation:
>>>>
>>>> >>> F(1.2) + 3.4
>>>>
>>>> Would that always return a float, even though F(1.2) + F(3.4) returns
>>>> an F? Would that return an F because F is the left-hand operand? Would it
>>>> return a float because float is the right-hand operand? Would you walk the
>>>> MROs and find the lowest type in common between the operands and return
>>>> that? It's not entirely clear which subtype predominates. With datetime,
>>>> you have:
>>>>
>>>> datetime - datetime -> timedelta
>>>> datetime ? timedelta -> datetime
>>>> timedelta ? timedelta -> timedelta
>>>>
>>>> There's no operation between two datetime objects that would return a
>>>> datetime object, so it's always clear: operations between datetime
>>>> subclasses return timedelta, operations between a datetime object and a
>>>> timedelta return the subclass of the datetime that it was added to or
>>>> subtracted from.
>>>>
>>>> Of course, the real way to resolve whether datetime should be different
>>>> from int/float/string/etc is to look at why this choice was actually made
>>>> for those types in the first place, and decide whether datetime is like
>>>> them *in this respect*. The heterogeneous operations problem may be a
>>>> reasonable justification for leaving the other builtins alone but changing
>>>> datetime, but if someone knows of other fundamental reasons why the
>>>> decision to have arithmetic operations always create the base class was
>>>> chosen, please let me know.
>>>>
>>>> Best,
>>>> Paul
>>>> On 1/5/19 3:55 AM, Alexander Belopolsky wrote:
>>>>
>>>>
>>>>
>>>> On Wed, Jan 2, 2019 at 10:18 PM Paul Ganssle <paul at ganssle.io> wrote:
>>>>
>>>>> .. the original objection was that this implementation assumes that
>>>>> the datetime subclass has a constructor with the same (or a sufficiently
>>>>> similar) signature as datetime.
>>>>>
>>>> While this was used as a possible rationale for the way standard types
>>>> behave, the main objection to changing datetime classes is that it will
>>>> make them behave differently from builtins.  For example:
>>>>
>>>> >>> class F(float):
>>>> ...     pass
>>>> ...
>>>> >>> type(F.fromhex('AA'))
>>>> <class '__main__.F'>
>>>> >>> type(F(1) + F(2))
>>>> <class 'float'>
>>>>
>>>> This may be a legitimate gripe, but unfortunately that ship has sailed
>>>>> long ago. All of datetime's alternate constructors make this assumption.
>>>>> Any subclass that does not meet this requirement must have worked around it
>>>>> long ago (or they don't care about alternate constructors).
>>>>>
>>>>
>>>> This is right, but the same argument is equally applicable to int,
>>>> float, etc. subclasses.  If you want to limit your change to datetime types
>>>> you should explain what makes these types special.
>>>>
>>>> _______________________________________________
>>>> Python-Dev mailing list
>>>> Python-Dev at python.org
>>>> https://mail.python.org/mailman/listinfo/python-dev
>>>> Unsubscribe:
>>>> https://mail.python.org/mailman/options/python-dev/guido%40python.org
>>>>
>>>
>>>
>>> --
>>> --Guido van Rossum (python.org/~guido)
>>>
>>> _______________________________________________
>>> Python-Dev mailing list
>>> Python-Dev at python.org
>>> https://mail.python.org/mailman/listinfo/python-dev
>>> Unsubscribe:
>>> https://mail.python.org/mailman/options/python-dev/guido%40python.org
>>>
>>
>>
>> --
>> --Guido van Rossum (python.org/~guido)
>>
>> _______________________________________________
>> Python-Dev mailing list
>> Python-Dev at python.org
>> https://mail.python.org/mailman/listinfo/python-dev
>> Unsubscribe:
>> https://mail.python.org/mailman/options/python-dev/guido%40python.org
>>
>
>
> --
> --Guido van Rossum (python.org/~guido)
>
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/guido%40python.org
>


-- 
--Guido van Rossum (python.org/~guido)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190204/0054d0e7/attachment.html>

From alexander.belopolsky at gmail.com  Mon Feb  4 14:38:00 2019
From: alexander.belopolsky at gmail.com (Alexander Belopolsky)
Date: Mon, 4 Feb 2019 14:38:00 -0500
Subject: [Python-Dev] Return type of datetime subclasses added to
 timedelta
In-Reply-To: <CAP7+vJ+3iMvjm5Ef5Bd=K_CBhxPwzxp1c0OC-f5sgGzJXnMK0A@mail.gmail.com>
References: <1059740e-cc65-205d-5986-a9397463a315@ganssle.io>
 <CAP7h-xa-Dp8TXrm7Oa=jDwf0wyBfVy-6zK08w219q0jVaYACiQ@mail.gmail.com>
 <bb5120e0-159e-106d-04c6-2a15f7398966@ganssle.io>
 <CAP7+vJL3JrRFstg_QNdq5C4kHkxdsbKyACJBxWSPUbyuTjao3g@mail.gmail.com>
 <2415dd60-b6b4-30b0-90d2-c0c8b22314c7@ganssle.io>
 <CAP7+vJKbQeTgROAtNLvXMwK5xjO8V=pCCs-CHpGAnt+G5TZcyg@mail.gmail.com>
 <8faf2a5b-305c-e83b-33bd-e5eacc8609a7@ganssle.io>
 <CAP7+vJLc3N4wHzZxKCmT-C61X9YeTjVh4MT0OdTV7Lt2PbdKQw@mail.gmail.com>
 <c1f442eb-16ca-6282-38cf-268a2ced6f67@ganssle.io>
 <CAP7+vJ+3iMvjm5Ef5Bd=K_CBhxPwzxp1c0OC-f5sgGzJXnMK0A@mail.gmail.com>
Message-ID: <CAP7h-xYw_p9CF_L1nSkhAmr0wyVDSnG_LkLJm+ts9QNYQhXduQ@mail.gmail.com>

I'll merge it tonight.

On Mon, Feb 4, 2019 at 2:22 PM Guido van Rossum <guido at python.org> wrote:

> OK, I approved the PR. Can some other core dev ensure that it gets merged?
> No backports though!
>
> On Mon, Feb 4, 2019 at 8:46 AM Paul Ganssle <paul at ganssle.io> wrote:
>
>> There's already a PR, actually, #10902:
>> https://github.com/python/cpython/pull/10902
>>
>> Victor reviewed and approved it, I think before I started this thread, so
>> now it's just waiting on merge.
>> On 2/4/19 11:38 AM, Guido van Rossum wrote:
>>
>> I recommend that you submit a PR so we can get it into 3.8 alpha 2.
>>
>> On Mon, Feb 4, 2019 at 5:50 AM Paul Ganssle <paul at ganssle.io> wrote:
>>
>>> Hey all,
>>>
>>> This thread about the return type of datetime operations seems to have
>>> stopped without any explicit decision - I think I responded to everyone who
>>> had objections, but I think only Guido has given a +1 to whether or not we
>>> should go ahead.
>>>
>>> Have we got agreement to go ahead with this change? Are we still
>>> targeting Python 3.8 here?
>>>
>>> For those who don't want to dig through your old e-mails, here's the
>>> archive link for this thread:
>>> https://mail.python.org/pipermail/python-dev/2019-January/155984.html
>>>
>>> If you want to start commenting on the actual implementation, it's
>>> available here (though it's pretty simple):
>>> https://github.com/python/cpython/pull/10902
>>>
>>> Best,
>>>
>>> Paul
>>>
>>>
>>> On 1/6/19 7:17 PM, Guido van Rossum wrote:
>>>
>>> OK, I concede your point (and indeed I only tested this on 3.6). If we
>>> could break the backward compatibility for now() we presumably can break it
>>> for this purpose.
>>>
>>> On Sun, Jan 6, 2019 at 11:02 AM Paul Ganssle <paul at ganssle.io> wrote:
>>>
>>>> I did address this in the original post - the assumption that the
>>>> subclass constructor will have the same arguments as the base constructor
>>>> is baked into many alternate constructors of datetime. I acknowledge that
>>>> this is a breaking change, but it is a small one - anyone creating such a
>>>> subclass that *cannot* handled the class being created this way would
>>>> be broken in myriad ways.
>>>>
>>>> We have also in recent years changed several alternate constructors
>>>> (including `replace`) to retain the original subclass, which by your same
>>>> standard would be a breaking change. I believe there have been no
>>>> complaints. In fact, between Python 3.6 and 3.7, the very example you
>>>> showed broke:
>>>>
>>>> Python 3.6.6:
>>>>
>>>> >>> class D(datetime.datetime):
>>>> ...     def __new__(cls):
>>>> ...         return cls.now()
>>>> ...
>>>> >>> D()
>>>> D(2019, 1, 6, 13, 49, 38, 842033)
>>>>
>>>> Python 3.7.2:
>>>>
>>>> >>> class D(datetime.datetime):
>>>> ...     def __new__(cls):
>>>> ...         return cls.now()
>>>> ...
>>>> >>> D()
>>>> Traceback (most recent call last):
>>>>   File "<stdin>", line 1, in <module>
>>>>   File "<stdin>", line 3, in __new__
>>>> TypeError: __new__() takes 1 positional argument but 9 were given
>>>>
>>>>
>>>> We haven't seen any bug reports about this sort of thing; what we
>>>> *have* been getting is bug reports that subclassing datetime doesn't
>>>> retain the subclass in various ways (because people *are* using
>>>> datetime subclasses). This is likely to cause very little in the way of
>>>> problems, but it will improve convenience for people making datetime
>>>> subclasses and almost certainly performance for people using them (e.g.
>>>> pendulum and arrow, which now need to take a slow pure python route in many
>>>> situations to work around this problem).
>>>>
>>>> If we're *really* concerned with this backward compatibility breaking,
>>>> we could do the equivalent of:
>>>>
>>>> try:
>>>>     return new_behavior(...)
>>>> except TypeError:
>>>>     warnings.warn("The semantics of timedelta addition have "
>>>>                   "changed in a way that raises an error in "
>>>>                   "this subclass. Please implement __add__ "
>>>>                   "if you need the old behavior.", DeprecationWarning)
>>>>
>>>> Then after a suitable notice period drop the warning and turn it to a
>>>> hard error.
>>>>
>>>> Best,
>>>>
>>>> Paul
>>>> On 1/6/19 1:43 PM, Guido van Rossum wrote:
>>>>
>>>> I don't think datetime and builtins like int necessarily need to be
>>>> aligned. But I do see a problem -- the __new__ and __init__ methods defined
>>>> in the subclass (if any) should allow for being called with the same
>>>> signature as the base datetime class. Currently you can have a subclass of
>>>> datetime whose __new__ has no arguments (or, more realistically, interprets
>>>> its arguments differently). Instances of such a class can still be added to
>>>> a timedelta. The proposal would cause this to break (since such an addition
>>>> has to create a new instance, which calls __new__ and __init__). Since this
>>>> is a backwards incompatibility, I don't see how it can be done -- and I
>>>> also don't see many use cases, so I think it's not worth pursuing further.
>>>>
>>>> Note that the same problem already happens with the .fromordinal()
>>>> class method, though it doesn't happen with .fromdatetime() or .now():
>>>>
>>>> >>> class D(datetime.datetime):
>>>> ...   def __new__(cls): return cls.now()
>>>> ...
>>>> >>> D()
>>>> D(2019, 1, 6, 10, 33, 37, 161606)
>>>> >>> D.fromordinal(100)
>>>> Traceback (most recent call last):
>>>>   File "<stdin>", line 1, in <module>
>>>> TypeError: __new__() takes 1 positional argument but 4 were given
>>>> >>> D.fromtimestamp(123456789)
>>>> D(1973, 11, 29, 13, 33, 9)
>>>> >>>
>>>>
>>>> On Sun, Jan 6, 2019 at 9:05 AM Paul Ganssle <paul at ganssle.io> wrote:
>>>>
>>>>> I can think of many reasons why datetime is different from builtins,
>>>>> though to be honest I'm not sure that consistency for its own sake is
>>>>> really a strong argument for keeping a counter-intuitive behavior - and to
>>>>> be honest I'm open to the idea that *all* arithmetic types *should*
>>>>> have some form of this change.
>>>>>
>>>>> That said, I would say that the biggest difference between datetime
>>>>> and builtins (other than the fact that datetime is *not* a builtin,
>>>>> and as such doesn't necessarily need to be categorized in this group), is
>>>>> that unlike almost all other arithmetic types, *datetime* has a
>>>>> special, dedicated type for describing differences in datetimes. Using your
>>>>> example of a float subclass, consider that without the behavior of
>>>>> "addition of floats returns floats", it would be hard to predict what would
>>>>> happen in this situation:
>>>>>
>>>>> >>> F(1.2) + 3.4
>>>>>
>>>>> Would that always return a float, even though F(1.2) + F(3.4) returns
>>>>> an F? Would that return an F because F is the left-hand operand? Would it
>>>>> return a float because float is the right-hand operand? Would you walk the
>>>>> MROs and find the lowest type in common between the operands and return
>>>>> that? It's not entirely clear which subtype predominates. With datetime,
>>>>> you have:
>>>>>
>>>>> datetime - datetime -> timedelta
>>>>> datetime ? timedelta -> datetime
>>>>> timedelta ? timedelta -> timedelta
>>>>>
>>>>> There's no operation between two datetime objects that would return a
>>>>> datetime object, so it's always clear: operations between datetime
>>>>> subclasses return timedelta, operations between a datetime object and a
>>>>> timedelta return the subclass of the datetime that it was added to or
>>>>> subtracted from.
>>>>>
>>>>> Of course, the real way to resolve whether datetime should be
>>>>> different from int/float/string/etc is to look at why this choice was
>>>>> actually made for those types in the first place, and decide whether
>>>>> datetime is like them *in this respect*. The heterogeneous operations
>>>>> problem may be a reasonable justification for leaving the other builtins
>>>>> alone but changing datetime, but if someone knows of other fundamental
>>>>> reasons why the decision to have arithmetic operations always create the
>>>>> base class was chosen, please let me know.
>>>>>
>>>>> Best,
>>>>> Paul
>>>>> On 1/5/19 3:55 AM, Alexander Belopolsky wrote:
>>>>>
>>>>>
>>>>>
>>>>> On Wed, Jan 2, 2019 at 10:18 PM Paul Ganssle <paul at ganssle.io> wrote:
>>>>>
>>>>>> .. the original objection was that this implementation assumes that
>>>>>> the datetime subclass has a constructor with the same (or a sufficiently
>>>>>> similar) signature as datetime.
>>>>>>
>>>>> While this was used as a possible rationale for the way standard types
>>>>> behave, the main objection to changing datetime classes is that it will
>>>>> make them behave differently from builtins.  For example:
>>>>>
>>>>> >>> class F(float):
>>>>> ...     pass
>>>>> ...
>>>>> >>> type(F.fromhex('AA'))
>>>>> <class '__main__.F'>
>>>>> >>> type(F(1) + F(2))
>>>>> <class 'float'>
>>>>>
>>>>> This may be a legitimate gripe, but unfortunately that ship has sailed
>>>>>> long ago. All of datetime's alternate constructors make this assumption.
>>>>>> Any subclass that does not meet this requirement must have worked around it
>>>>>> long ago (or they don't care about alternate constructors).
>>>>>>
>>>>>
>>>>> This is right, but the same argument is equally applicable to int,
>>>>> float, etc. subclasses.  If you want to limit your change to datetime types
>>>>> you should explain what makes these types special.
>>>>>
>>>>> _______________________________________________
>>>>> Python-Dev mailing list
>>>>> Python-Dev at python.org
>>>>> https://mail.python.org/mailman/listinfo/python-dev
>>>>> Unsubscribe:
>>>>> https://mail.python.org/mailman/options/python-dev/guido%40python.org
>>>>>
>>>>
>>>>
>>>> --
>>>> --Guido van Rossum (python.org/~guido)
>>>>
>>>> _______________________________________________
>>>> Python-Dev mailing list
>>>> Python-Dev at python.org
>>>> https://mail.python.org/mailman/listinfo/python-dev
>>>> Unsubscribe:
>>>> https://mail.python.org/mailman/options/python-dev/guido%40python.org
>>>>
>>>
>>>
>>> --
>>> --Guido van Rossum (python.org/~guido)
>>>
>>> _______________________________________________
>>> Python-Dev mailing list
>>> Python-Dev at python.org
>>> https://mail.python.org/mailman/listinfo/python-dev
>>> Unsubscribe:
>>> https://mail.python.org/mailman/options/python-dev/guido%40python.org
>>>
>>
>>
>> --
>> --Guido van Rossum (python.org/~guido)
>>
>> _______________________________________________
>> Python-Dev mailing list
>> Python-Dev at python.org
>> https://mail.python.org/mailman/listinfo/python-dev
>> Unsubscribe:
>> https://mail.python.org/mailman/options/python-dev/guido%40python.org
>>
>
>
> --
> --Guido van Rossum (python.org/~guido)
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/alexander.belopolsky%40gmail.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190204/d76f0151/attachment-0001.html>

From raymond.hettinger at gmail.com  Mon Feb  4 15:26:12 2019
From: raymond.hettinger at gmail.com (Raymond Hettinger)
Date: Mon, 4 Feb 2019 12:26:12 -0800
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <DED40378-CFE8-46ED-B0C4-014F9FE2936A@langa.pl>
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
 <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
 <DED40378-CFE8-46ED-B0C4-014F9FE2936A@langa.pl>
Message-ID: <3C809B94-0C17-4574-BB2A-2B32917BB5C3@gmail.com>


> On Feb 4, 2019, at 2:36 AM, ?ukasz Langa <lukasz at langa.pl> wrote:
> 
> @Raymond, would you be willing to work with Davin on finishing this work in time for alpha2?

I would be happy to help, but this is beyond my technical ability.  The people who are qualified to work on this have already chimed in on the discussion.  Fortunately, I think this is a feature that everyone wants. So it just a matter of getting the experts on the subject to team-up and help get it done.


Raymond






From stephane at wirtel.be  Tue Feb  5 05:24:20 2019
From: stephane at wirtel.be (Stephane Wirtel)
Date: Tue, 5 Feb 2019 11:24:20 +0100
Subject: [Python-Dev] [RELEASE] Python 3.8.0a1 is now available for
 testing
In-Reply-To: <23ED9695-7715-40DE-9DD5-F6A3C482612F@python.org>
References: <C9EA8FEA-C427-41FD-8566-0201F0AA42EA@langa.pl>
 <20190204130238.GB29197@xps>
 <23ED9695-7715-40DE-9DD5-F6A3C482612F@python.org>
Message-ID: <20190205102420.GA7969@xps>

Hi Barry,

I was not aware of this image. So it's true that it's very useful.

Thank you very much,

St?phane

On 02/04, Barry Warsaw wrote:
>On Feb 4, 2019, at 05:02, Stephane Wirtel <stephane at wirtel.be> wrote:
>>
>> Just one idea, we could create a Docker image with this alpha version.
>>
>> This Docker image could be used with the CI of the main projects and the
>> test suites of these projects.
>>
>> If we have some issues, we should create an issue for python 3.8.0a1.
>
>The time machine strikes again!
>
>https://gitlab.com/python-devs/ci-images/tree/master
>
>We call these ?semi-official?!  The current image takes a slightly different approach, by including all the latest Python versions from 2.7, and 3.4-3.8, plus git head.  I just pushed an update for the latest Python 3.8 alpha and 3.7.2.  It?s building now, but the image should be published on quay.io as soon as that?s done.
>
>Contributions most welcome!
>
>-Barry
>



>_______________________________________________
>Python-Dev mailing list
>Python-Dev at python.org
>https://mail.python.org/mailman/listinfo/python-dev
>Unsubscribe: https://mail.python.org/mailman/options/python-dev/stephane%40wirtel.be


-- 
St?phane Wirtel - https://wirtel.be - @matrixise

From daveshawley at gmail.com  Tue Feb  5 07:05:05 2019
From: daveshawley at gmail.com (David Shawley)
Date: Tue, 5 Feb 2019 07:05:05 -0500
Subject: [Python-Dev] bpo-32972: Add unittest.AsyncioTestCase review (for
 3.8?)
Message-ID: <6BC0939D-0388-45F0-B1EC-E7AE9201FBCE@gmail.com>

Hi everyone, I added a PR to add a sub-class of unittest.TestCase that makes it possible to write async test methods.  I wrote this a few months ago and it is waiting on core review.  Is there a core dev that can take up this review?  I would love to have this functionality in the core.

Lukasz - should we add this to Python 3.8 or is it too late for feature additions?

BPO link: https://bugs.python.org/issue32972 <https://bugs.python.org/issue32972>
Github PR: https://github.com/python/cpython/pull/10296 <https://github.com/python/cpython/pull/10296>

cheers, dave.
--
"State and behavior. State and behavior. If it doesn?t bundle state and behavior in a sensible way, it should not be an object, and there should not be a class that produces it." eevee

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190205/5e06d7ca/attachment.html>

From solipsis at pitrou.net  Tue Feb  5 11:44:20 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Tue, 5 Feb 2019 17:44:20 +0100
Subject: [Python-Dev] bpo-32972: Add unittest.AsyncioTestCase review
 (for 3.8?)
References: <6BC0939D-0388-45F0-B1EC-E7AE9201FBCE@gmail.com>
Message-ID: <20190205174420.00fef68d@fsol>


Hi David,

I cannot comment on the PR, but since the functionality is
asyncio-specific, I would suggest moving it to a dedicate
`asyncio.testing` module, or something similar, rather than leaving it
in `unittest` proper.

Regards

Antoine.


On Tue, 5 Feb 2019 07:05:05 -0500
David Shawley <daveshawley at gmail.com> wrote:
> Hi everyone, I added a PR to add a sub-class of unittest.TestCase that makes it possible to write async test methods.  I wrote this a few months ago and it is waiting on core review.  Is there a core dev that can take up this review?  I would love to have this functionality in the core.
> 
> Lukasz - should we add this to Python 3.8 or is it too late for feature additions?
> 
> BPO link: https://bugs.python.org/issue32972 <https://bugs.python.org/issue32972>
> Github PR: https://github.com/python/cpython/pull/10296 <https://github.com/python/cpython/pull/10296>
> 
> cheers, dave.
> --
> "State and behavior. State and behavior. If it doesn?t bundle state and behavior in a sensible way, it should not be an object, and there should not be a class that produces it." eevee
> 
> 




From g.rodola at gmail.com  Tue Feb  5 12:52:58 2019
From: g.rodola at gmail.com (Giampaolo Rodola')
Date: Tue, 5 Feb 2019 18:52:58 +0100
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <CABHLM6sxvXGUc+V78X=94K+Gvv3mDnmoLRCzmb_BhFhi=m0P+w@mail.gmail.com>
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
 <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
 <CAP7+vJ+Q=6eCoSwwa91+cShAkjA03Y-r+HpOu2y8sGmgtDcFpw@mail.gmail.com>
 <q38577$1qlm$2@blaine.gmane.org>
 <8933B3A4-DE0D-47AD-8A5A-10E7B54023D7@gmail.com>
 <CABHLM6sxvXGUc+V78X=94K+Gvv3mDnmoLRCzmb_BhFhi=m0P+w@mail.gmail.com>
Message-ID: <CAFYqXL-XNfAusumYbOADR-=38HWPJ6SOv0bWf4ttG1eKd=GViw@mail.gmail.com>

On Mon, Feb 4, 2019 at 4:21 AM Davin Potts <
python+python_dev at discontinuity.net> wrote:

> I am attempting to do the right thing and am following the advice of other
> core devs in what I have done thus far.
>
> Borrowing heavily from what I've added to issue35813 just now:
>
> This work is the result of ~1.5 years of development effort, much of it
> accomplished at the last two core dev sprints.  The code behind it has been
> stable since September 2018 and tested as an independently installable
> package by multiple people.
>
> I was encouraged by Lukasz, Yury, and others to check in this code early,
> not waiting for tests and docs, in order to both solicit more feedback and
> provide for broader testing.  I understand that doing such a thing is not
> at all a novelty.
>

Actually it is a novelty (you should wait for review and approval). The
main problem I have with this PR is that it seems to introduce 8 brand new
APIs, but since there is no doc, docstrings or tests it's unclear which
ones are supposed to be used, how or whether they are supposed to supersede
or deprecate older (slower) ones involving inter process communication. The
introduction of new APIs in the stdlib is a sensitive topic because once
they get in they stay in, so a discussion should occur early on,
definitively not at alphaX stage. Don't mean to point fingers here, the
goal in itself (zero-copy, a topic I recently contributed to myself for the
shutil module) is certainly valuable, but I concur and think this change
should be reverted and post-poned for 3.9.

-- 
Giampaolo - http://grodola.blogspot.com
-- 
Giampaolo - http://grodola.blogspot.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190205/e9fa7007/attachment.html>

From nas-python at arctrix.com  Tue Feb  5 14:07:40 2019
From: nas-python at arctrix.com (Neil Schemenauer)
Date: Tue, 5 Feb 2019 13:07:40 -0600
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <CAFYqXL-XNfAusumYbOADR-=38HWPJ6SOv0bWf4ttG1eKd=GViw@mail.gmail.com>
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
 <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
 <CAP7+vJ+Q=6eCoSwwa91+cShAkjA03Y-r+HpOu2y8sGmgtDcFpw@mail.gmail.com>
 <q38577$1qlm$2@blaine.gmane.org>
 <8933B3A4-DE0D-47AD-8A5A-10E7B54023D7@gmail.com>
 <CABHLM6sxvXGUc+V78X=94K+Gvv3mDnmoLRCzmb_BhFhi=m0P+w@mail.gmail.com>
 <CAFYqXL-XNfAusumYbOADR-=38HWPJ6SOv0bWf4ttG1eKd=GViw@mail.gmail.com>
Message-ID: <20190205190740.atccbo33wprrxonw@python.ca>

On 2019-02-05, Giampaolo Rodola' wrote:
> The main problem I have with this PR is that it seems to introduce
> 8 brand new APIs, but since there is no doc, docstrings or tests
> it's unclear which ones are supposed to be used, how or whether
> they are supposed to supersede or deprecate older (slower) ones
> involving inter process communication.

New or changed APIs are my major concern as well.  Localized
problems can be fixed later without much trouble.  However, APIs
"lock" us in and make it harder to change things later.  Also, will
new APIs need to be eventually supported by other Python
implementations?  I would imagine that doing zero-copy mixed with
alternative garbage collection strategies could be complicated.
Could we somehow mark these APIs as experimental in 3.8?

My gut reaction is that we shouldn't revert.  However, looking at
the changes, it seems 'multiprocessing.shared_memory' could be an
external extension package that lives in PyPI.  It doesn't require
changes to other interpreter internals.  It doesn't seem to require
internal Python header files.

Regards,

  Neil

From raymond.hettinger at gmail.com  Tue Feb  5 14:35:49 2019
From: raymond.hettinger at gmail.com (Raymond Hettinger)
Date: Tue, 5 Feb 2019 11:35:49 -0800
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <CAFYqXL-XNfAusumYbOADR-=38HWPJ6SOv0bWf4ttG1eKd=GViw@mail.gmail.com>
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
 <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
 <CAP7+vJ+Q=6eCoSwwa91+cShAkjA03Y-r+HpOu2y8sGmgtDcFpw@mail.gmail.com>
 <q38577$1qlm$2@blaine.gmane.org>
 <8933B3A4-DE0D-47AD-8A5A-10E7B54023D7@gmail.com>
 <CABHLM6sxvXGUc+V78X=94K+Gvv3mDnmoLRCzmb_BhFhi=m0P+w@mail.gmail.com>
 <CAFYqXL-XNfAusumYbOADR-=38HWPJ6SOv0bWf4ttG1eKd=GViw@mail.gmail.com>
Message-ID: <C7660F80-E05F-47B1-A5BE-B36DC31115DB@gmail.com>


> On Feb 5, 2019, at 9:52 AM, Giampaolo Rodola' <g.rodola at gmail.com> wrote:
> 
>  The main problem I have with this PR is that it seems to introduce 8 brand new APIs, but since there is no doc, docstrings or tests it's unclear which ones are supposed to be used, how or whether they are supposed to supersede or deprecate older (slower) ones involving inter process communication.

The release manger already opined that if tests and docs get finished for the second alpha, he prefers not to have a reversion and would rather on build on top of what already shipped in the first alpha.  FWIW, the absence of docs isn't desirable but it isn't atypical.  PEP 572 code landed without the docs. Docs for dataclasses arrived much after the code. The same was true for the decimal module. Hopefully, everyone will team up with Davin and help him get the ball over the goal line.

BTW, this is a feature we really want.  Our multicore story for Python isn't a good one.  Due to the GIL, threading usually can't exploit multiple cores for better performance.  Async has lower overhead than threading but achieves its gains by keeping all the data in a single process.  That leaves us with multiprocessing where the primary obstacle has been the heavy cost of moving data between processes.  If that cost can be reduced, we've got a winning story for multicore.

This patch is one of the better things that is happening to Python.  Aside from last week's procedural missteps and communication issues surrounding the commit, the many months of prior work on this have been stellar. How about we stop using a highly public forum to pile up on Davin (being the subject of a thread like this can be a soul crushing experience).  Right now, he could really use some help and support from everyone on the team.


Raymond



From nas-python at arctrix.com  Tue Feb  5 14:41:14 2019
From: nas-python at arctrix.com (Neil Schemenauer)
Date: Tue, 5 Feb 2019 13:41:14 -0600
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <20190205190740.atccbo33wprrxonw@python.ca>
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
 <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
 <CAP7+vJ+Q=6eCoSwwa91+cShAkjA03Y-r+HpOu2y8sGmgtDcFpw@mail.gmail.com>
 <q38577$1qlm$2@blaine.gmane.org>
 <8933B3A4-DE0D-47AD-8A5A-10E7B54023D7@gmail.com>
 <CABHLM6sxvXGUc+V78X=94K+Gvv3mDnmoLRCzmb_BhFhi=m0P+w@mail.gmail.com>
 <CAFYqXL-XNfAusumYbOADR-=38HWPJ6SOv0bWf4ttG1eKd=GViw@mail.gmail.com>
 <20190205190740.atccbo33wprrxonw@python.ca>
Message-ID: <20190205194114.m2pgnlz6bdubkjus@python.ca>

I wrote:
> Could we somehow mark these APIs as experimental in 3.8?

It seems the change "e5ef45b8f519a9be9965590e1a0a587ff584c180" the
one we are discussing.  It adds two new files:

  Lib/multiprocessing/shared_memory.py
  Modules/_multiprocessing/posixshmem.c

It doesn't introduce new C APIs.  So, only
multiprocessing.shared_memory seems public.  I see we have PEP 411
that should cover this case:

  https://www.python.org/dev/peps/pep-0411/

The setup.py code could be more defensive.  Maybe only build on
platforms that have supported word sizes etc?  For 3.8, could it be
activated by uncommenting a line in Modules/Setup, rather than by
setup.py?

What happens in shared_memory if the _posixshmem module is not
available?  On Windows it seems like an import error is raised.
Otherwise, _PosixSharedMemory becomes 'object'.  Does that mean the
API still works but you lose the zero-copy speed?

Regards,

  Neil

From ethan at stoneleaf.us  Tue Feb  5 16:12:21 2019
From: ethan at stoneleaf.us (Ethan Furman)
Date: Tue, 5 Feb 2019 13:12:21 -0800
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <C7660F80-E05F-47B1-A5BE-B36DC31115DB@gmail.com>
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
 <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
 <CAP7+vJ+Q=6eCoSwwa91+cShAkjA03Y-r+HpOu2y8sGmgtDcFpw@mail.gmail.com>
 <q38577$1qlm$2@blaine.gmane.org>
 <8933B3A4-DE0D-47AD-8A5A-10E7B54023D7@gmail.com>
 <CABHLM6sxvXGUc+V78X=94K+Gvv3mDnmoLRCzmb_BhFhi=m0P+w@mail.gmail.com>
 <CAFYqXL-XNfAusumYbOADR-=38HWPJ6SOv0bWf4ttG1eKd=GViw@mail.gmail.com>
 <C7660F80-E05F-47B1-A5BE-B36DC31115DB@gmail.com>
Message-ID: <3d865bbe-071d-3b97-a34c-5b877704d1cc@stoneleaf.us>

On 02/05/2019 11:35 AM, Raymond Hettinger wrote:

> How about we stop using a highly public forum to pile up on Davin (being the subject of a thread like this can be a soul crushing experience).

Thank you for the reminder.

>  Right now, he could really use some help and support from everyone on the team.

I am really looking forward to this enhancement.  Thank you, Davin, and everyone else who has, and will, work on it.

--
~Ethan~

From tjreedy at udel.edu  Tue Feb  5 17:20:47 2019
From: tjreedy at udel.edu (Terry Reedy)
Date: Tue, 5 Feb 2019 17:20:47 -0500
Subject: [Python-Dev] bpo-32972: Add unittest.AsyncioTestCase review
 (for 3.8?)
In-Reply-To: <20190205174420.00fef68d@fsol>
References: <6BC0939D-0388-45F0-B1EC-E7AE9201FBCE@gmail.com>
 <20190205174420.00fef68d@fsol>
Message-ID: <q3d282$4amg$1@blaine.gmane.org>

On 2/5/2019 11:44 AM, Antoine Pitrou wrote:

> I cannot comment on the PR, but since the functionality is
> asyncio-specific, I would suggest moving it to a dedicate
> `asyncio.testing` module, or something similar, rather than leaving it
> in `unittest` proper.

That is one of the options discussed on the issue.

  On Tue, 5 Feb 2019 07:05:05 -0500
> David Shawley <daveshawley at gmail.com> wrote:
>> Hi everyone, I added a PR to add a sub-class of unittest.TestCase that makes it possible to write async test methods.  I wrote this a few months ago and it is waiting on core review.  Is there a core dev that can take up this review?  I would love to have this functionality in the core.
>>
>> Lukasz - should we add this to Python 3.8 or is it too late for feature additions?

Features can be added until beta1, and until that, additions are not the 
release manager decision.

>> BPO link: https://bugs.python.org/issue32972 <https://bugs.python.org/issue32972>
>> Github PR: https://github.com/python/cpython/pull/10296 <https://github.com/python/cpython/pull/10296>

All or most of the relevant people are nosy on the issue.  So a reminder 
there would be appropriate.  However, from my cursory scan, it is not 
clear if the 5 core devs involved (marked by blue and yellow snakes) 
agree on exactly what more should be added.  Perhaps you should 
summarize what you think there is and is not agreement on.

-- 
Terry Jan Reedy


From barry at python.org  Tue Feb  5 17:33:02 2019
From: barry at python.org (Barry Warsaw)
Date: Tue, 5 Feb 2019 14:33:02 -0800
Subject: [Python-Dev] [RELEASE] Python 3.8.0a1 is now available for
 testing
In-Reply-To: <20190205102420.GA7969@xps>
References: <C9EA8FEA-C427-41FD-8566-0201F0AA42EA@langa.pl>
 <20190204130238.GB29197@xps>
 <23ED9695-7715-40DE-9DD5-F6A3C482612F@python.org> <20190205102420.GA7969@xps>
Message-ID: <37A1D61F-AF75-4F66-9279-677505623EDE@python.org>

On Feb 5, 2019, at 02:24, Stephane Wirtel <stephane at wirtel.be> wrote:
> 
> I was not aware of this image. So it's true that it's very useful.
> 
> Thank you very much,

You?re welcome!  I just pushed an update to add 3.8.0a1 to the set of Python?s (including git head).  Do you think there?s a better way to publicize these images?

Cheers,
-Barry

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: Message signed with OpenPGP
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190205/54b31c15/attachment.sig>

From Paul.Monson at microsoft.com  Tue Feb  5 20:09:23 2019
From: Paul.Monson at microsoft.com (Paul Monson)
Date: Wed, 6 Feb 2019 01:09:23 +0000
Subject: [Python-Dev] CPython on Windows ARM32
Message-ID: <CY4PR2101MB080464E8971D5B93F1C94732F96F0@CY4PR2101MB0804.namprd21.prod.outlook.com>

Hi Python Developers,



I'm Paul Monson, I've spent about 20 years working with embedded software.  Since 2010 I've worked for Microsoft as a developer.



Our team is working with CPython on Azure IoT Edge devices that run on x64-based devices.



We would like to extend that support to Windows running on ARM 32-bit devices and have a working proof-of-concept.  Our team is prepared to provide support for CPython for Windows on ARM32 for 10 years, and to provide build bots for ARM32.



I like to propose that the initial sequence of PRs could be:
- Update to OpenSSL 1.1.1 (without anything ARM specific) - ready to go
- Migrate to libffi directly (finish https://github.com/python/cpython/pull/3806<https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fpython%2Fcpython%2Fpull%2F3806&data=02%7C01%7CPaul.Monson%40microsoft.com%7C0e38d9367d2d4240725d08d680dedde6%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C636838092030320471&sdata=7Mgsyy9SifmIRroagp1NZ0cx77vhRC%2BzxpUoHSQblB4%3D&reserved=0>)
- Build file updates for OpenSSL ARM and check into cpython-bin-deps
- Build file updates for CPython ARM
- ctypes updates for ARM
- Test module skips for ARM
- Library updates and related test fixes for ARM



Updating OpenSSL and libffi are independent of ARM support but need to be done as prerequisites.  OpenSSL 1.1.0 doesn't have support for ARM32 on Windows but OpenSSL 1.1.1 does.



I have OpenSSL 1.1.1a ready to check in to master with all tests passing on x86 and x64 on Windows.  Since work has already been done on this for other platforms only very small changes were needed for Windows.



I have also integrated and tested the current libffi on Windows x64.  Some additonal porting of x86 assembler to MSVC tools will need to be done.  I have a working port of ARM32 assembler for MSVC but it may need to be brought up to date and cleaned up.



The last four all need to go in together, but can be reviewed separately.



We are not planning to support Tk/Tcl on ARM32 because Windows IoT Core, Windows containers don't support GDI, which is a depenency of Tk/Tcl.



Since Window IoT Core and Windows container don't support the .msi or .exe installers found on python.org my team at Microsoft will build the CPython for Windows ARM32 from the official repo and distribute it.



Thanks in advance,

Paul

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190206/7f864248/attachment.html>

From steve.dower at python.org  Tue Feb  5 20:35:28 2019
From: steve.dower at python.org (Steve Dower)
Date: Tue, 5 Feb 2019 17:35:28 -0800
Subject: [Python-Dev] CPython on Windows ARM32
In-Reply-To: <CY4PR2101MB080464E8971D5B93F1C94732F96F0@CY4PR2101MB0804.namprd21.prod.outlook.com>
References: <CY4PR2101MB080464E8971D5B93F1C94732F96F0@CY4PR2101MB0804.namprd21.prod.outlook.com>
Message-ID: <bc867b42-03dc-1678-abca-ea1816c84fe0@python.org>

Just confirming for the list that I'm aware of this and supportive, but
am not the dedicated support for this effort.

I also haven't reviewed the changes yet, but provided nobody is strongly
opposed to taking on a supported platform (without additional releases
on python.org), I expect I'll do a big part of the reviewing then.

Cheers,
Steve

On 05Feb.2019 1709, Paul Monson via Python-Dev wrote:
> Hi Python Developers,
> 
> I'm Paul Monson, I've spent about 20 years working with embedded
> software.? Since 2010 I've worked for Microsoft as a developer.
> 
> Our team is working with CPython on Azure IoT Edge devices that run on
> x64-based devices.
> 
> We would like to extend that support to Windows running on ARM 32-bit
> devices and have a working proof-of-concept.? Our team is prepared to
> provide support for CPython for Windows on ARM32 for 10 years, and to
> provide build bots for ARM32.
> 
> I like to propose that the initial sequence of PRs could be:
> - Update to OpenSSL 1.1.1 (without anything ARM specific) - ready to go
> - Migrate to libffi directly (finish https://github.com/python/cpython/pull/3806)
> - Build file updates for OpenSSL ARM and check into cpython-bin-deps
> - Build file updates for CPython ARM
> - ctypes updates for ARM
> - Test module skips for ARM
> - Library updates and related test fixes for ARM
> 
> Updating OpenSSL and libffi are independent of ARM support but need to
> be done as prerequisites.? OpenSSL 1.1.0 doesn't have support for ARM32
> on Windows but OpenSSL 1.1.1 does.
> 
> I have OpenSSL 1.1.1a ready to check in to master with all tests passing
> on x86 and x64 on Windows.? Since work has already been done on this for
> other platforms only very small changes were needed for Windows.
> 
> I have also integrated and tested the current libffi on Windows x64.?
> Some additonal porting of x86 assembler to MSVC tools will need to be
> done.? I have a working port of ARM32 assembler for MSVC but it may need
> to be brought up to date and cleaned up.
> 
> The last four all need to go in together, but can be reviewed separately.
> 
> We are not planning to support Tk/Tcl on ARM32 because Windows IoT Core,
> Windows containers don't support GDI, which is a depenency of Tk/Tcl.
> 
> Since Window IoT Core and Windows container don't support the .msi or
> .exe installers found on python.org my team at Microsoft will build the
> CPython for Windows ARM32 from the official repo and distribute it.
> 
> Thanks in advance,
> 
> Paul

From zachary.ware+pydev at gmail.com  Tue Feb  5 22:10:36 2019
From: zachary.ware+pydev at gmail.com (Zachary Ware)
Date: Tue, 5 Feb 2019 21:10:36 -0600
Subject: [Python-Dev] CPython on Windows ARM32
In-Reply-To: <bc867b42-03dc-1678-abca-ea1816c84fe0@python.org>
References: <CY4PR2101MB080464E8971D5B93F1C94732F96F0@CY4PR2101MB0804.namprd21.prod.outlook.com>
 <bc867b42-03dc-1678-abca-ea1816c84fe0@python.org>
Message-ID: <CAKJDb-PpB5MPo9tvqGok47xYWFqdZZh3rao8dAUP9EtKrkk-9Q@mail.gmail.com>

On Tue, Feb 5, 2019 at 7:37 PM Steve Dower <steve.dower at python.org> wrote:
> I also haven't reviewed the changes yet, but provided nobody is strongly
> opposed to taking on a supported platform (without additional releases
> on python.org), I expect I'll do a big part of the reviewing then.

I'm all for the first two changes (especially the second), and if 10
years of pledged corporate support for a new platform is the price we
have to pay for them, I'm ok with that :).  I expect I'll be
automatically added to any issues/PRs that come of this, but I'll keep
an eye out for them anyway and give reviews as I'm able.  I'll also
help get the build bots set up when we're ready for them.

-- 
Zach

From stephane at wirtel.be  Wed Feb  6 02:43:39 2019
From: stephane at wirtel.be (Stephane Wirtel)
Date: Wed, 6 Feb 2019 08:43:39 +0100
Subject: [Python-Dev] [RELEASE] Python 3.8.0a1 is now available for
 testing
In-Reply-To: <37A1D61F-AF75-4F66-9279-677505623EDE@python.org>
References: <C9EA8FEA-C427-41FD-8566-0201F0AA42EA@langa.pl>
 <20190204130238.GB29197@xps>
 <23ED9695-7715-40DE-9DD5-F6A3C482612F@python.org>
 <20190205102420.GA7969@xps>
 <37A1D61F-AF75-4F66-9279-677505623EDE@python.org>
Message-ID: <20190206074339.GA23428@xps>

On 02/05, Barry Warsaw wrote:
>On Feb 5, 2019, at 02:24, Stephane Wirtel <stephane at wirtel.be> wrote:
>You?re welcome!  I just pushed an update to add 3.8.0a1 to the set of Python?s (including git head).  Do you think there?s a better way to publicize these images?

I know that Julien Palard wanted a docker image with all the versions of
Python, see: https://github.com/docker-library/python/issues/373

For my part, I wanted to propose a docker image with the last version of
Python and try to use it for the detection of bugs in the main python
projects (django, numpy, flask, pandas, etc...) with a CI (example:
Gitlab-CI)

First issue: pytest uses the ast module of python and since 3.8.0a1, the
tests do not pass -> new issue for pytest

Cheers,

St?phane

-- 
St?phane Wirtel - https://wirtel.be - @matrixise

From tjreedy at udel.edu  Wed Feb  6 03:54:52 2019
From: tjreedy at udel.edu (Terry Reedy)
Date: Wed, 6 Feb 2019 03:54:52 -0500
Subject: [Python-Dev] CPython on Windows ARM32
In-Reply-To: <CAKJDb-PpB5MPo9tvqGok47xYWFqdZZh3rao8dAUP9EtKrkk-9Q@mail.gmail.com>
References: <CY4PR2101MB080464E8971D5B93F1C94732F96F0@CY4PR2101MB0804.namprd21.prod.outlook.com>
 <bc867b42-03dc-1678-abca-ea1816c84fe0@python.org>
 <CAKJDb-PpB5MPo9tvqGok47xYWFqdZZh3rao8dAUP9EtKrkk-9Q@mail.gmail.com>
Message-ID: <q3e7cv$tdp$1@blaine.gmane.org>

On 2/5/2019 10:10 PM, Zachary Ware wrote:

> I'm all for the first two changes (especially the second), and if 10
> years of pledged corporate support for a new platform is the price we
> have to pay for them, I'm ok with that :).

I would expect that the main question should be the density of 
WinArm32-specific ifdefs in the main code and extensions other than ctypes.

-- 
Terry Jan Reedy


From ncoghlan at gmail.com  Wed Feb  6 06:28:49 2019
From: ncoghlan at gmail.com (Nick Coghlan)
Date: Wed, 6 Feb 2019 21:28:49 +1000
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <20190205190740.atccbo33wprrxonw@python.ca>
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
 <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
 <CAP7+vJ+Q=6eCoSwwa91+cShAkjA03Y-r+HpOu2y8sGmgtDcFpw@mail.gmail.com>
 <q38577$1qlm$2@blaine.gmane.org>
 <8933B3A4-DE0D-47AD-8A5A-10E7B54023D7@gmail.com>
 <CABHLM6sxvXGUc+V78X=94K+Gvv3mDnmoLRCzmb_BhFhi=m0P+w@mail.gmail.com>
 <CAFYqXL-XNfAusumYbOADR-=38HWPJ6SOv0bWf4ttG1eKd=GViw@mail.gmail.com>
 <20190205190740.atccbo33wprrxonw@python.ca>
Message-ID: <CADiSq7dpdVa4MWRTMmxbMqy0ujEx8C7XKnykNNiJ0w_JT9nGJg@mail.gmail.com>

On Wed, 6 Feb 2019 at 05:17, Neil Schemenauer <nas-python at arctrix.com> wrote:
> My gut reaction is that we shouldn't revert.  However, looking at
> the changes, it seems 'multiprocessing.shared_memory' could be an
> external extension package that lives in PyPI.  It doesn't require
> changes to other interpreter internals.  It doesn't seem to require
> internal Python header files.

The desired dependency in this case goes the other way: we'd like this
in the standard library so that other standard library components can
use it, and it can eventually become part of the "assumed baseline"
that the reference Python interpreter offers to projects building on
top of it.

Cheers,
Nick.

-- 
Nick Coghlan   |   ncoghlan at gmail.com   |   Brisbane, Australia

From g.rodola at gmail.com  Wed Feb  6 06:51:09 2019
From: g.rodola at gmail.com (Giampaolo Rodola')
Date: Wed, 6 Feb 2019 12:51:09 +0100
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <C7660F80-E05F-47B1-A5BE-B36DC31115DB@gmail.com>
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
 <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
 <CAP7+vJ+Q=6eCoSwwa91+cShAkjA03Y-r+HpOu2y8sGmgtDcFpw@mail.gmail.com>
 <q38577$1qlm$2@blaine.gmane.org>
 <8933B3A4-DE0D-47AD-8A5A-10E7B54023D7@gmail.com>
 <CABHLM6sxvXGUc+V78X=94K+Gvv3mDnmoLRCzmb_BhFhi=m0P+w@mail.gmail.com>
 <CAFYqXL-XNfAusumYbOADR-=38HWPJ6SOv0bWf4ttG1eKd=GViw@mail.gmail.com>
 <C7660F80-E05F-47B1-A5BE-B36DC31115DB@gmail.com>
Message-ID: <CAFYqXL9bOj42T5RrYzwLsFuSrmpJRLZKSexT=otfdNEnBvvaZw@mail.gmail.com>

Davin,
I am not familiar with the multiprocessing module, so take the following
with a big grain of salt. I took a look at the PR, then I got an idea of
how multiprocessing module is organized by reading the doc. Here's some
food for thought in terms of API reorganization.

SharedMemoryManager, SharedMemoryServer
---------------------------------------

It appears to me these are the 2 main public classes, and after reading the
doc it seems they really belong to "managers
<https://docs.python.org/3/library/multiprocessing.html#multiprocessing-managers>"
(multiprocessing.managers namespace). Also:
* SharedMemoryManager is a subclass of multiprocessing.managers.SyncManager
* SharedMemoryServer is a subclass of multiprocessing.managers.Server
shared_memory.py could be renamed to _shared_memory.py and managers.py
could import and expose these 2 classes only.

Support APIs
------------

These are objects which seem to be used in support of the 2 classes above,
but apparently are not meant to be public. As such they could simply live
in _shared_memory.py and not be exposed:

- shareable_wrap(): used only in SharedMemoryTracker.wrap()
- SharedMemoryTracker: used only by SharedMemoryServer
- SharedMemory, WindowsNamedSharedMemory, PosixSharedMemory: used by
shareable_wrap() and SharedMemoryTracker
- ShareableList: it appears this is not used, but by reading here
<https://github.com/python/cpython/blob/e0e5065daef36dafe10a46eaa8b7800274d73062/Lib/multiprocessing/managers.py#L1194>
I have a doubt: shouldn't it be register()ed against SharedMemoryManager?

C extension module
------------------

- ExistentialError, Error - it appears these are not used
- PermissionsException, ExistentialException - I concur with Ronald
Oussoren's review: you could simply use PyErr_SetFromErrno() and let the
original OSError exception bubble up. Same for O_CREAT, O_EXCL, O_CREX,
O_TRUNC which are already exposed in the os module. I have a couple of
other minor nitpicks re. the code but I will comment on the PR.

Compatibility
-------------

I'm not sure if SyncManager and SharedMemoryManager are fully
interchangeable so I think the doc should clarify this. SyncManager handles
a certain set of types
<https://github.com/python/cpython/blob/e0e5065daef36dafe10a46eaa8b7800274d73062/Lib/multiprocessing/managers.py#L1183>.
It appears SharedMemoryManager is supposedly able to do the same except for
lists
<https://github.com/applio/cpython/blob/516cf4ac14af257913f46216973c09d58eb259d5/Lib/multiprocessing/shared_memory.py#L227>.
Is my assumption correct? Also, multiprocessing.Manager() by default
returns a SyncManager. If we'll get to a point where SyncManager and
SharedMemoryManager are able to handle the same types it'd be good to
return SharedMemoryManager as the default, but it's probably safer to leave
it for later. Unless they are already there (I don't know) it would be good
to have a full set of unit-tests for all the register()ed types and test
them against SyncManager and SharedMemoryManager. That would give an idea
on the real interchangeability of these 2 classes and would also help
writing a comprehensive doc.

Hope this helps.

-- 
Giampaolo - http://grodola.blogspot.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190206/aa2e949f/attachment.html>

From encukou at gmail.com  Wed Feb  6 07:23:42 2019
From: encukou at gmail.com (Petr Viktorin)
Date: Wed, 6 Feb 2019 13:23:42 +0100
Subject: [Python-Dev] [RELEASE] Python 3.8.0a1 is now available for
 testing
In-Reply-To: <20190206074339.GA23428@xps>
References: <C9EA8FEA-C427-41FD-8566-0201F0AA42EA@langa.pl>
 <20190204130238.GB29197@xps>
 <23ED9695-7715-40DE-9DD5-F6A3C482612F@python.org> <20190205102420.GA7969@xps>
 <37A1D61F-AF75-4F66-9279-677505623EDE@python.org>
 <20190206074339.GA23428@xps>
Message-ID: <ecf1e24b-538b-2585-e4d2-80994827fd11@gmail.com>

On 2/6/19 8:43 AM, Stephane Wirtel wrote:
> On 02/05, Barry Warsaw wrote:
>> On Feb 5, 2019, at 02:24, Stephane Wirtel <stephane at wirtel.be> wrote:
>> You?re welcome!? I just pushed an update to add 3.8.0a1 to the set of 
>> Python?s (including git head).? Do you think there?s a better way to 
>> publicize these images?
> 
> I know that Julien Palard wanted a docker image with all the versions of
> Python, see: https://github.com/docker-library/python/issues/373
> 
> For my part, I wanted to propose a docker image with the last version of
> Python and try to use it for the detection of bugs in the main python
> projects (django, numpy, flask, pandas, etc...) with a CI (example:
> Gitlab-CI)
> 
> First issue: pytest uses the ast module of python and since 3.8.0a1, the
> tests do not pass -> new issue for pytest

FWIW, we're preparing to rebuild all Fedora packages with the 3.8 
alphas/betas, so everything's tested when 3.8.0 is released: 
https://fedoraproject.org/wiki/Changes/Python3.8

That should cover the main Python projects, too.

From doko at ubuntu.com  Wed Feb  6 08:26:55 2019
From: doko at ubuntu.com (Matthias Klose)
Date: Wed, 6 Feb 2019 14:26:55 +0100
Subject: [Python-Dev] [RELEASE] Python 3.8.0a1 is now available for
 testing
In-Reply-To: <ecf1e24b-538b-2585-e4d2-80994827fd11@gmail.com>
References: <C9EA8FEA-C427-41FD-8566-0201F0AA42EA@langa.pl>
 <20190204130238.GB29197@xps>
 <23ED9695-7715-40DE-9DD5-F6A3C482612F@python.org> <20190205102420.GA7969@xps>
 <37A1D61F-AF75-4F66-9279-677505623EDE@python.org>
 <20190206074339.GA23428@xps> <ecf1e24b-538b-2585-e4d2-80994827fd11@gmail.com>
Message-ID: <cf44ac42-b609-886d-1ed3-439213fdeef9@ubuntu.com>

On 06.02.19 13:23, Petr Viktorin wrote:
> FWIW, we're preparing to rebuild all Fedora packages with the 3.8 alphas/betas,
> so everything's tested when 3.8.0 is released:
> https://fedoraproject.org/wiki/Changes/Python3.8
> 
> That should cover the main Python projects, too.

well, the real challenge is that all test suites of third party packages still
pass on all architectures.  From past transitions, I know that this costs the
most time and resources.  But yes, targeting 3.8 for Ubuntu 20.04 LTS as well.

Matthias

From encukou at gmail.com  Wed Feb  6 08:49:56 2019
From: encukou at gmail.com (Petr Viktorin)
Date: Wed, 6 Feb 2019 14:49:56 +0100
Subject: [Python-Dev] [RELEASE] Python 3.8.0a1 is now available for
 testing
In-Reply-To: <cf44ac42-b609-886d-1ed3-439213fdeef9@ubuntu.com>
References: <C9EA8FEA-C427-41FD-8566-0201F0AA42EA@langa.pl>
 <20190204130238.GB29197@xps>
 <23ED9695-7715-40DE-9DD5-F6A3C482612F@python.org> <20190205102420.GA7969@xps>
 <37A1D61F-AF75-4F66-9279-677505623EDE@python.org>
 <20190206074339.GA23428@xps> <ecf1e24b-538b-2585-e4d2-80994827fd11@gmail.com>
 <cf44ac42-b609-886d-1ed3-439213fdeef9@ubuntu.com>
Message-ID: <d9de0971-9d83-1b2c-0207-be558352c894@gmail.com>

On 2/6/19 2:26 PM, Matthias Klose wrote:
> On 06.02.19 13:23, Petr Viktorin wrote:
>> FWIW, we're preparing to rebuild all Fedora packages with the 3.8 alphas/betas,
>> so everything's tested when 3.8.0 is released:
>> https://fedoraproject.org/wiki/Changes/Python3.8
>>
>> That should cover the main Python projects, too.
> 
> well, the real challenge is that all test suites of third party packages still
> pass on all architectures.  From past transitions, I know that this costs the
> most time and resources. 

Same experience here.

In Fedora, tests are generally run as part of the build.
(Sorry, that was definitely not obvious from my message!)

> But yes, targeting 3.8 for Ubuntu 20.04 LTS as well.

\o/

From g.rodola at gmail.com  Wed Feb  6 11:58:32 2019
From: g.rodola at gmail.com (Giampaolo Rodola')
Date: Wed, 6 Feb 2019 17:58:32 +0100
Subject: [Python-Dev] Asking for reversion
In-Reply-To: <CAFYqXL9bOj42T5RrYzwLsFuSrmpJRLZKSexT=otfdNEnBvvaZw@mail.gmail.com>
References: <20190203220340.3158b236@fsol> <q3814o$2ben$1@blaine.gmane.org>
 <CAP7+vJ+nMiqheykevTv4ubKJotp9uMsPKiEQwya70w0n3kK4Gw@mail.gmail.com>
 <CAP7+vJ+Q=6eCoSwwa91+cShAkjA03Y-r+HpOu2y8sGmgtDcFpw@mail.gmail.com>
 <q38577$1qlm$2@blaine.gmane.org>
 <8933B3A4-DE0D-47AD-8A5A-10E7B54023D7@gmail.com>
 <CABHLM6sxvXGUc+V78X=94K+Gvv3mDnmoLRCzmb_BhFhi=m0P+w@mail.gmail.com>
 <CAFYqXL-XNfAusumYbOADR-=38HWPJ6SOv0bWf4ttG1eKd=GViw@mail.gmail.com>
 <C7660F80-E05F-47B1-A5BE-B36DC31115DB@gmail.com>
 <CAFYqXL9bOj42T5RrYzwLsFuSrmpJRLZKSexT=otfdNEnBvvaZw@mail.gmail.com>
Message-ID: <CAFYqXL_xn6+GXjuochevSABMZ3JOdr6T+rx-Ao4UYwZ+QMkKNg@mail.gmail.com>

On Wed, Feb 6, 2019 at 12:51 PM Giampaolo Rodola' <g.rodola at gmail.com>
wrote:

>
> Unless they are already there (I don't know) it would be good to have a
> full set of unit-tests for all the register()ed types and test them against
> SyncManager and SharedMemoryManager. That would give an idea on the real
> interchangeability of these 2 classes and would also help writing a
> comprehensive doc.
>

In order to speed up the alpha2 inclusion process I created a PR which
implements what said above:
https://github.com/python/cpython/pull/11772
https://bugs.python.org/issue35917
Apparently SharedMemoryManager works out of the box and presents no
differences with SyncManager, but the list type is not using ShareableList.
When I attempted to register it with "SharedMemoryManager.register('list',
list, ShareableList)" I got the following error:

Traceback (most recent call last):
  File "foo.py", line 137, in test_list
    o = self.manager.list()
  File "/home/giampaolo/svn/cpython/Lib/multiprocessing/managers.py", line
702, in temp
    proxy = proxytype(
TypeError: __init__() got an unexpected keyword argument 'manager'

I am not sure how to fix that (I'll leave it up to Davin). The tests as-is
are independent from PR-11772 so I suppose they can be reviewed/checked-in
regardless of the changes which will affect shared_memory.py.

-- 
Giampaolo - http://grodola.blogspot.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190206/bfd317b7/attachment-0001.html>

From solipsis at pitrou.net  Wed Feb  6 12:06:06 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Wed, 6 Feb 2019 18:06:06 +0100
Subject: [Python-Dev] About the future of multi-process Python
Message-ID: <20190206180606.0dbcd927@fsol>


Hello,

For the record there are number of initiatives currently to boost the
usefulness and efficiency of multi-process computation in Python.

One of them is PEP 574 (zero-copy pickling with out-of-band buffers),
which I'm working on.

Another is Pierre Glaser's work on allowing pickling of dynamic
functions and classes with the C-accelerated _pickle module (rather than
the slow pure Python implementation):
https://bugs.python.org/issue35900
https://bugs.python.org/issue35911

Another is Davin's work on shared memory managers.

There are also emerging standards like Apache Arrow that provide a
shared, runtime-agnostic, compute-friendly representation for in-memory
tabular data, and third-party frameworks like Dask which are
potentially able to work on top of that and expose nice end-user APIs.

For maximum synergy between these initiatives and the resulting APIs,
it is better if things are done in the open ;-)

Regards

Antoine.



From steve.dower at python.org  Wed Feb  6 13:23:38 2019
From: steve.dower at python.org (Steve Dower)
Date: Wed, 6 Feb 2019 10:23:38 -0800
Subject: [Python-Dev] About the future of multi-process Python
In-Reply-To: <20190206180606.0dbcd927@fsol>
References: <20190206180606.0dbcd927@fsol>
Message-ID: <dc8b0f46-012f-1e66-3f19-858c6bb6a81f@python.org>

On 06Feb2019 0906, Antoine Pitrou wrote:
> For the record there are number of initiatives currently to boost the
> usefulness and efficiency of multi-process computation in Python.
> 
> One of them is PEP 574 (zero-copy pickling with out-of-band buffers),
> which I'm working on.
> 
> Another is Pierre Glaser's work on allowing pickling of dynamic
> functions and classes with the C-accelerated _pickle module (rather than
> the slow pure Python implementation):
> https://bugs.python.org/issue35900
> https://bugs.python.org/issue35911
> 
> Another is Davin's work on shared memory managers.
> 
> There are also emerging standards like Apache Arrow that provide a
> shared, runtime-agnostic, compute-friendly representation for in-memory
> tabular data, and third-party frameworks like Dask which are
> potentially able to work on top of that and expose nice end-user APIs.
> 
> For maximum synergy between these initiatives and the resulting APIs,
> it is better if things are done in the open ;-)

Hopefully our steering council can determine (or delegate the 
determination of) the direction we should go here so we can all be 
pulling in the same direction :)

That said, there are certainly a number of interacting components and 
not a lot of information about how they interact and overlap. A good 
start would be to identify the likely overlap of this work to see where 
they can build upon each other rather than competing, as well as 
estimating the long-term burden of standardising.

Cheers,
Steve

From steve.dower at python.org  Wed Feb  6 14:15:53 2019
From: steve.dower at python.org (Steve Dower)
Date: Wed, 6 Feb 2019 11:15:53 -0800
Subject: [Python-Dev] CPython on Windows ARM32
In-Reply-To: <q3e7cv$tdp$1@blaine.gmane.org>
References: <CY4PR2101MB080464E8971D5B93F1C94732F96F0@CY4PR2101MB0804.namprd21.prod.outlook.com>
 <bc867b42-03dc-1678-abca-ea1816c84fe0@python.org>
 <CAKJDb-PpB5MPo9tvqGok47xYWFqdZZh3rao8dAUP9EtKrkk-9Q@mail.gmail.com>
 <q3e7cv$tdp$1@blaine.gmane.org>
Message-ID: <ae89069d-8d17-5798-1e1c-09bc5be47e62@python.org>

On 06Feb2019 0054, Terry Reedy wrote:
> On 2/5/2019 10:10 PM, Zachary Ware wrote:
> 
>> I'm all for the first two changes (especially the second), and if 10
>> years of pledged corporate support for a new platform is the price we
>> have to pay for them, I'm ok with that :).
> 
> I would expect that the main question should be the density of 
> WinArm32-specific ifdefs in the main code and extensions other than ctypes.
> 

Agreed. I've asked Paul to post the "final" PR early, even though it 
will take some refactoring as other PRs go in, so that we can see the 
broader picture now.

There's also an option to create an ARM-specific pyconfig.h if 
necessary, but I don't believe it will be.

I created https://bugs.python.org/issue35920 for this work.

Cheers,
Steve

From Paul.Monson at microsoft.com  Wed Feb  6 14:50:45 2019
From: Paul.Monson at microsoft.com (Paul Monson)
Date: Wed, 6 Feb 2019 19:50:45 +0000
Subject: [Python-Dev] CPython on Windows ARM32
In-Reply-To: <ae89069d-8d17-5798-1e1c-09bc5be47e62@python.org>
References: <CY4PR2101MB080464E8971D5B93F1C94732F96F0@CY4PR2101MB0804.namprd21.prod.outlook.com>
 <bc867b42-03dc-1678-abca-ea1816c84fe0@python.org>
 <CAKJDb-PpB5MPo9tvqGok47xYWFqdZZh3rao8dAUP9EtKrkk-9Q@mail.gmail.com>
 <q3e7cv$tdp$1@blaine.gmane.org>
 <ae89069d-8d17-5798-1e1c-09bc5be47e62@python.org>
Message-ID: <CY4PR2101MB0804F56B44B0E09122FF154EF96F0@CY4PR2101MB0804.namprd21.prod.outlook.com>

The PR is here: https://github.com/python/cpython/pull/11774
Searching _M_ARM I see these #ifdef changes outside of ctypes:
* Include\pyport.h  - adds on to existing MSVC ifdef
* Include\pythonrun.h - adds on to existing MSVC ifdef
* Modules\_decimal\libmpdec\bits.h
* Python\ceval.c - workaround compiler bug, could be replaced with #pragma optimize around entire function.

-----Original Message-----
From: Steve Dower <steve.dower at python.org> 
Sent: Wednesday, February 6, 2019 11:16 AM
To: Terry Reedy <tjreedy at udel.edu>; python-dev at python.org; Paul Monson <Paul.Monson at microsoft.com>
Subject: Re: [Python-Dev] CPython on Windows ARM32

On 06Feb2019 0054, Terry Reedy wrote:
> On 2/5/2019 10:10 PM, Zachary Ware wrote:
> 
>> I'm all for the first two changes (especially the second), and if 10 
>> years of pledged corporate support for a new platform is the price we 
>> have to pay for them, I'm ok with that :).
> 
> I would expect that the main question should be the density of 
> WinArm32-specific ifdefs in the main code and extensions other than ctypes.
> 

Agreed. I've asked Paul to post the "final" PR early, even though it will take some refactoring as other PRs go in, so that we can see the broader picture now.

There's also an option to create an ARM-specific pyconfig.h if necessary, but I don't believe it will be.

I created https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fbugs.python.org%2Fissue35920&amp;data=02%7C01%7Cpaul.monson%40microsoft.com%7Cf1e74ec935774410f37008d68c678537%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C1%7C636850773687302395&amp;sdata=OPOHUbWy3%2FFEdjXC5MY8NRMVetZ73Rwo2lsngrLL8rs%3D&amp;reserved=0 for this work.

Cheers,
Steve

From christian at python.org  Wed Feb  6 17:23:50 2019
From: christian at python.org (Christian Heimes)
Date: Wed, 6 Feb 2019 23:23:50 +0100
Subject: [Python-Dev] CPython on Windows ARM32
In-Reply-To: <CY4PR2101MB080464E8971D5B93F1C94732F96F0@CY4PR2101MB0804.namprd21.prod.outlook.com>
References: <CY4PR2101MB080464E8971D5B93F1C94732F96F0@CY4PR2101MB0804.namprd21.prod.outlook.com>
Message-ID: <436fca54-dae6-e5d6-e5e0-42614588c717@python.org>

On 06/02/2019 02.09, Paul Monson via Python-Dev wrote:
> Updating OpenSSL and libffi are independent of ARM support but need to
> be done as prerequisites.? OpenSSL 1.1.0 doesn't have support for ARM32
> on Windows but OpenSSL 1.1.1 does.
> 
> ?
> 
> I have OpenSSL 1.1.1a ready to check in to master with all tests passing
> on x86 and x64 on Windows.? Since work has already been done on this for
> other platforms only very small changes were needed for Windows.

+1 for OpenSSL 1.1.1 from the maintainer of the ssl module. The new
version also introduces TLS 1.3 support. Linux distributions have been
switching to OpenSSL 1.1.1 for a while. If it's good enough for RHEL 8,
then it's good enough for us, too.

Do you want to update Python 3.8 (master) only or also 3.7? I'm not
strictly against updating 3.7. However we have traditionally kept the
OpenSSL version of each branch stable. 1.1.1 comes with new features,
stricter security settings and some ciphers removed.

Christian

From steve.dower at python.org  Wed Feb  6 18:28:05 2019
From: steve.dower at python.org (Steve Dower)
Date: Wed, 6 Feb 2019 15:28:05 -0800
Subject: [Python-Dev] CPython on Windows ARM32
In-Reply-To: <436fca54-dae6-e5d6-e5e0-42614588c717@python.org>
References: <CY4PR2101MB080464E8971D5B93F1C94732F96F0@CY4PR2101MB0804.namprd21.prod.outlook.com>
 <436fca54-dae6-e5d6-e5e0-42614588c717@python.org>
Message-ID: <1c36ef6d-9e54-f78c-9672-7e7beffb2301@python.org>

On 06Feb2019 1423, Christian Heimes wrote:
> Do you want to update Python 3.8 (master) only or also 3.7? I'm not
> strictly against updating 3.7. However we have traditionally kept the
> OpenSSL version of each branch stable. 1.1.1 comes with new features,
> stricter security settings and some ciphers removed.

I would prefer to stay on 1.1.0 for 3.7, but it's up to the release manager.

Cheers,
Steve

From nad at python.org  Wed Feb  6 18:41:03 2019
From: nad at python.org (Ned Deily)
Date: Wed, 6 Feb 2019 18:41:03 -0500
Subject: [Python-Dev] CPython on Windows ARM32
In-Reply-To: <1c36ef6d-9e54-f78c-9672-7e7beffb2301@python.org>
References: <CY4PR2101MB080464E8971D5B93F1C94732F96F0@CY4PR2101MB0804.namprd21.prod.outlook.com>
 <436fca54-dae6-e5d6-e5e0-42614588c717@python.org>
 <1c36ef6d-9e54-f78c-9672-7e7beffb2301@python.org>
Message-ID: <E3DCEF17-74DB-4838-9AC7-A2553979CAA3@python.org>

On Feb 6, 2019, at 18:28, Steve Dower <steve.dower at python.org> wrote:
> On 06Feb2019 1423, Christian Heimes wrote:
>> Do you want to update Python 3.8 (master) only or also 3.7? I'm not
>> strictly against updating 3.7. However we have traditionally kept the
>> OpenSSL version of each branch stable. 1.1.1 comes with new features,
>> stricter security settings and some ciphers removed.
> I would prefer to stay on 1.1.0 for 3.7, but it's up to the release manager.

Me, too.  I am concerned that 1.1.1 support has not had a lot of exposure yet.  Even the "What's New" document for 3.7 states: "The ssl module has preliminary and experimental support for TLS 1.3 and OpenSSL 1.1.1. "

I am OK with fixes for 1.1.1 support but I think it would be premature to change the Windows and/or macOS installers from 1.1.0 to 1.1.1.

--
  Ned Deily
  nad at python.org -- []


From Paul.Monson at microsoft.com  Wed Feb  6 21:58:10 2019
From: Paul.Monson at microsoft.com (Paul Monson)
Date: Thu, 7 Feb 2019 02:58:10 +0000
Subject: [Python-Dev] CPython on Windows ARM32
In-Reply-To: <1c36ef6d-9e54-f78c-9672-7e7beffb2301@python.org>
References: <CY4PR2101MB080464E8971D5B93F1C94732F96F0@CY4PR2101MB0804.namprd21.prod.outlook.com>
 <436fca54-dae6-e5d6-e5e0-42614588c717@python.org>
 <1c36ef6d-9e54-f78c-9672-7e7beffb2301@python.org>
Message-ID: <CY4PR2101MB0804DC49B3D5E69E2405D7ADF9680@CY4PR2101MB0804.namprd21.prod.outlook.com>

Here are the current OpenSSL 1.1.1a changes I have, in a seperate PR
I did some additional testing and have some test failures to investigate tomorrows

test_parse_cert_CVE_2019_5010 only fails win32 debug (access violation)
   works for amd64 debug/release and win32 release

test_load_default_certs_env_windows fails on win32 and amd64 retail.  skipped on debug

-----Original Message-----
From: Steve Dower <steve.dower at python.org> 
Sent: Wednesday, February 6, 2019 3:28 PM
To: Christian Heimes <christian at python.org>; Paul Monson <Paul.Monson at microsoft.com>; python-dev at python.org; Ned Deily <nad at python.org>
Subject: Re: [Python-Dev] CPython on Windows ARM32

On 06Feb2019 1423, Christian Heimes wrote:
> Do you want to update Python 3.8 (master) only or also 3.7? I'm not 
> strictly against updating 3.7. However we have traditionally kept the 
> OpenSSL version of each branch stable. 1.1.1 comes with new features, 
> stricter security settings and some ciphers removed.

I would prefer to stay on 1.1.0 for 3.7, but it's up to the release manager.

Cheers,
Steve

From stephane at wirtel.be  Thu Feb  7 11:16:22 2019
From: stephane at wirtel.be (Stephane Wirtel)
Date: Thu, 7 Feb 2019 17:16:22 +0100
Subject: [Python-Dev] [RELEASE] Python 3.8.0a1 is now available for
 testing
In-Reply-To: <ecf1e24b-538b-2585-e4d2-80994827fd11@gmail.com>
References: <C9EA8FEA-C427-41FD-8566-0201F0AA42EA@langa.pl>
 <20190204130238.GB29197@xps>
 <23ED9695-7715-40DE-9DD5-F6A3C482612F@python.org>
 <20190205102420.GA7969@xps>
 <37A1D61F-AF75-4F66-9279-677505623EDE@python.org>
 <20190206074339.GA23428@xps>
 <ecf1e24b-538b-2585-e4d2-80994827fd11@gmail.com>
Message-ID: <20190207161622.GA29057@xps>

On 02/06, Petr Viktorin wrote:
>On 2/6/19 8:43 AM, Stephane Wirtel wrote:
>>On 02/05, Barry Warsaw wrote:
>>>On Feb 5, 2019, at 02:24, Stephane Wirtel <stephane at wirtel.be> wrote:
>>>You?re welcome!? I just pushed an update to add 3.8.0a1 to the set 
>>>of Python?s (including git head).? Do you think there?s a better 
>>>way to publicize these images?
>>
>>I know that Julien Palard wanted a docker image with all the versions of
>>Python, see: https://github.com/docker-library/python/issues/373
>>
>>For my part, I wanted to propose a docker image with the last version of
>>Python and try to use it for the detection of bugs in the main python
>>projects (django, numpy, flask, pandas, etc...) with a CI (example:
>>Gitlab-CI)
>>
>>First issue: pytest uses the ast module of python and since 3.8.0a1, the
>>tests do not pass -> new issue for pytest
>
>FWIW, we're preparing to rebuild all Fedora packages with the 3.8 
>alphas/betas, so everything's tested when 3.8.0 is released: 
>https://fedoraproject.org/wiki/Changes/Python3.8
Hi Petr,

Will you execute the tests of these packages?

I have a small discussion with Julien Palard and I wanted to create a
small CI where I will execute the tests of the updated packages from
the RSS feed of PyPI.

The first one was pytest


-- 
St?phane Wirtel - https://wirtel.be - @matrixise

From stephane at wirtel.be  Thu Feb  7 11:17:21 2019
From: stephane at wirtel.be (Stephane Wirtel)
Date: Thu, 7 Feb 2019 17:17:21 +0100
Subject: [Python-Dev] [RELEASE] Python 3.8.0a1 is now available for
 testing
In-Reply-To: <d9de0971-9d83-1b2c-0207-be558352c894@gmail.com>
References: <C9EA8FEA-C427-41FD-8566-0201F0AA42EA@langa.pl>
 <20190204130238.GB29197@xps>
 <23ED9695-7715-40DE-9DD5-F6A3C482612F@python.org>
 <20190205102420.GA7969@xps>
 <37A1D61F-AF75-4F66-9279-677505623EDE@python.org>
 <20190206074339.GA23428@xps>
 <ecf1e24b-538b-2585-e4d2-80994827fd11@gmail.com>
 <cf44ac42-b609-886d-1ed3-439213fdeef9@ubuntu.com>
 <d9de0971-9d83-1b2c-0207-be558352c894@gmail.com>
Message-ID: <20190207161721.GB29057@xps>

Sorry Petr,

I didn't see this message with the test suites.

-- 
St?phane Wirtel - https://wirtel.be - @matrixise

From nas-python at arctrix.com  Thu Feb  7 13:19:14 2019
From: nas-python at arctrix.com (Neil Schemenauer)
Date: Thu, 7 Feb 2019 12:19:14 -0600
Subject: [Python-Dev] About the future of multi-process Python
In-Reply-To: <20190206180606.0dbcd927@fsol>
References: <20190206180606.0dbcd927@fsol>
Message-ID: <20190207181914.veoz32gymxrdj2ki@python.ca>

On 2019-02-06, Antoine Pitrou wrote:
> For maximum synergy between these initiatives and the resulting APIs,
> it is better if things are done in the open ;-)

Hi Antoine,

It would be good if we could have some feedback from alternative
Python implementations as well.  I suspect they might want to 
support these APIs.  Doing zero-copy or sharing memory areas could
be a challenge with a compacting GC, for example.  In that case,
having something in the API that tells the VM that a certain chunk
of memory cannot move would be helpful.

Regards,

  Neil

From christian at python.org  Fri Feb  8 05:21:03 2019
From: christian at python.org (Christian Heimes)
Date: Fri, 8 Feb 2019 11:21:03 +0100
Subject: [Python-Dev] CPython on Windows ARM32
In-Reply-To: <E3DCEF17-74DB-4838-9AC7-A2553979CAA3@python.org>
References: <CY4PR2101MB080464E8971D5B93F1C94732F96F0@CY4PR2101MB0804.namprd21.prod.outlook.com>
 <436fca54-dae6-e5d6-e5e0-42614588c717@python.org>
 <1c36ef6d-9e54-f78c-9672-7e7beffb2301@python.org>
 <E3DCEF17-74DB-4838-9AC7-A2553979CAA3@python.org>
Message-ID: <3b7f78b0-89a6-0ce8-5e1e-3c606faf1ce1@python.org>

On 07/02/2019 00.41, Ned Deily wrote:
> On Feb 6, 2019, at 18:28, Steve Dower <steve.dower at python.org> wrote:
>> On 06Feb2019 1423, Christian Heimes wrote:
>>> Do you want to update Python 3.8 (master) only or also 3.7? I'm not
>>> strictly against updating 3.7. However we have traditionally kept the
>>> OpenSSL version of each branch stable. 1.1.1 comes with new features,
>>> stricter security settings and some ciphers removed.
>> I would prefer to stay on 1.1.0 for 3.7, but it's up to the release manager.
> 
> Me, too.  I am concerned that 1.1.1 support has not had a lot of exposure yet.  Even the "What's New" document for 3.7 states: "The ssl module has preliminary and experimental support for TLS 1.3 and OpenSSL 1.1.1. "

That's from the alpha and beta phase of OpenSSL. Support for 1.1.1 is as
stable as it can get.

> I am OK with fixes for 1.1.1 support but I think it would be premature to change the Windows and/or macOS installers from 1.1.0 to 1.1.1.

1.1.1a is a solid release. Debian testing, Fedora, and RHEL 8 beta have
been shipping and testing 1.1.1 for a while. In my professional opinion
it's less about stability but more about backwards compatibility issues.
TLS 1.3 behaves slightly differently and 1.1.1 has dropped some weak
ciphers.

Christian


From encukou at gmail.com  Fri Feb  8 06:21:36 2019
From: encukou at gmail.com (Petr Viktorin)
Date: Fri, 8 Feb 2019 12:21:36 +0100
Subject: [Python-Dev] [RELEASE] Python 3.8.0a1 is now available for
 testing
In-Reply-To: <20190207161622.GA29057@xps>
References: <C9EA8FEA-C427-41FD-8566-0201F0AA42EA@langa.pl>
 <20190204130238.GB29197@xps>
 <23ED9695-7715-40DE-9DD5-F6A3C482612F@python.org> <20190205102420.GA7969@xps>
 <37A1D61F-AF75-4F66-9279-677505623EDE@python.org>
 <20190206074339.GA23428@xps> <ecf1e24b-538b-2585-e4d2-80994827fd11@gmail.com>
 <20190207161622.GA29057@xps>
Message-ID: <b7203272-511b-081b-fff8-9098c40fec6e@gmail.com>

On 2/7/19 5:16 PM, Stephane Wirtel wrote:
> On 02/06, Petr Viktorin wrote:
>> On 2/6/19 8:43 AM, Stephane Wirtel wrote:
>>> On 02/05, Barry Warsaw wrote:
>>>> On Feb 5, 2019, at 02:24, Stephane Wirtel <stephane at wirtel.be> wrote:
>>>> You?re welcome!? I just pushed an update to add 3.8.0a1 to the set 
>>>> of Python?s (including git head).? Do you think there?s a better way 
>>>> to publicize these images?
>>>
>>> I know that Julien Palard wanted a docker image with all the versions of
>>> Python, see: https://github.com/docker-library/python/issues/373
>>>
>>> For my part, I wanted to propose a docker image with the last version of
>>> Python and try to use it for the detection of bugs in the main python
>>> projects (django, numpy, flask, pandas, etc...) with a CI (example:
>>> Gitlab-CI)
>>>
>>> First issue: pytest uses the ast module of python and since 3.8.0a1, the
>>> tests do not pass -> new issue for pytest
>>
>> FWIW, we're preparing to rebuild all Fedora packages with the 3.8 
>> alphas/betas, so everything's tested when 3.8.0 is released: 
>> https://fedoraproject.org/wiki/Changes/Python3.8
> Hi Petr,
> 
> Will you execute the tests of these packages?

It's best practice to include the test suite in Fedora packages.
Sometimes it's not ? e.g. if the tests need network access, or all extra 
testing dependencies aren't available, or most frequently, the 
maintainer is just lazy.
If you have a specific package in mind, I can check. Currently django & 
numpy get tested; flask & pandas don't.

For 3.7, we did the rebuild much later in the cycle. The builds 
themselves caught async/await SyntaxErrors, and tests caught a lot of 
StopIteration leaking. At the time it felt like no one really knew what 
porting to 3.7.0 would look like ? similar to how people didn't think 
"unicode" would be a big problem in py3k. That's what we're trying to 
avoid for 3.8.0.

> I have a small discussion with Julien Palard and I wanted to create a
> small CI where I will execute the tests of the updated packages from
> the RSS feed of PyPI.
>
> The first one was pytest 

That sounds exciting! Something like that is on my "interesting possible 
projects" list, but alas, not at the top :(


From j.castillo.2nd at gmail.com  Fri Feb  8 11:13:34 2019
From: j.castillo.2nd at gmail.com (Javier Castillo II)
Date: Fri, 8 Feb 2019 10:13:34 -0600
Subject: [Python-Dev] find_library and issue21622
Message-ID: <CAGSMmmk17NV76VTgbxVq1iCxPzPUa+wzrm-pzv_t5frHm3vdOQ@mail.gmail.com>

Ran into some issues trying to deploy in an alpine container, where I wound
up coming across the issue. I found a solution ( not sure if an ideal
solution can exist ) that walks the paths in the environment variable
LD_LIBRARY_PATH. This was submitted in github PR 10460, but not sure if
there were any technical issues with this impacting its review.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190208/67a4a7aa/attachment.html>

From solipsis at pitrou.net  Fri Feb  8 12:43:34 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Fri, 8 Feb 2019 18:43:34 +0100
Subject: [Python-Dev] About the future of multi-process Python
In-Reply-To: <20190207181914.veoz32gymxrdj2ki@python.ca>
References: <20190206180606.0dbcd927@fsol>
 <20190207181914.veoz32gymxrdj2ki@python.ca>
Message-ID: <20190208184334.2ba482f4@fsol>

On Thu, 7 Feb 2019 12:19:14 -0600
Neil Schemenauer <nas-python at arctrix.com> wrote:
> On 2019-02-06, Antoine Pitrou wrote:
> > For maximum synergy between these initiatives and the resulting APIs,
> > it is better if things are done in the open ;-)  
> 
> Hi Antoine,
> 
> It would be good if we could have some feedback from alternative
> Python implementations as well.  I suspect they might want to 
> support these APIs.  Doing zero-copy or sharing memory areas could
> be a challenge with a compacting GC, for example.  In that case,
> having something in the API that tells the VM that a certain chunk
> of memory cannot move would be helpful.

Both PEP 574 and Davin's shared-memory work build on top of the
PEP 3118 buffer API.  So I would expect that any Python implementation
with support for the buffer API to have the required infrastructure
to also support those initiatives.  The details may deserve to be
clarified, though. I'll try to send an e-mail and ask for feedback.

Regards

Antoine.

From status at bugs.python.org  Fri Feb  8 13:07:53 2019
From: status at bugs.python.org (Python tracker)
Date: Fri, 08 Feb 2019 18:07:53 +0000
Subject: [Python-Dev] Summary of Python tracker Issues
Message-ID: <20190208180753.1.782F2F2B9AA3561B@roundup.psfhosted.org>


ACTIVITY SUMMARY (2019-02-01 - 2019-02-08)
Python tracker at https://bugs.python.org/

To view or respond to any of the issues listed below, click on the issue.
Do NOT respond to this message.

Issues counts and deltas:
  open    6998 (+13)
  closed 40696 (+47)
  total  47694 (+60)

Open issues with patches: 2783 


Issues opened (43)
==================

#35885: configparser: indentation
https://bugs.python.org/issue35885  opened by mrs.red

#35886: Move PyInterpreterState into Include/internal/pycore_pystate.h
https://bugs.python.org/issue35886  opened by eric.snow

#35887: Doc string for updating the frozen version of importlib in _bo
https://bugs.python.org/issue35887  opened by nnja

#35888: ssl module - could not get the server certificate w/o complete
https://bugs.python.org/issue35888  opened by Lee Eric

#35889: sqlite3.Row doesn't have useful repr
https://bugs.python.org/issue35889  opened by vlad

#35891: urllib.parse.splituser has no suitable replacement
https://bugs.python.org/issue35891  opened by jaraco

#35892: Fix awkwardness of statistics.mode() for multimodal datasets
https://bugs.python.org/issue35892  opened by rhettinger

#35893: distutils fails to build extension on windows when it is a pac
https://bugs.python.org/issue35893  opened by ronaldoussoren

#35898: The TARGETDIR variable must be provided when invoking this ins
https://bugs.python.org/issue35898  opened by Thomas Trummer

#35899: '_is_sunder' function in 'enum' module fails on empty string
https://bugs.python.org/issue35899  opened by Maxpxt

#35900: Add pickler hook for the user to customize the serialization o
https://bugs.python.org/issue35900  opened by pierreglaser

#35901: json.dumps infinite recurssion
https://bugs.python.org/issue35901  opened by MultiSosnooley

#35903: Build of posixshmem.c should probe for required OS functions
https://bugs.python.org/issue35903  opened by nascheme

#35904: Add statistics.fmean(seq)
https://bugs.python.org/issue35904  opened by rhettinger

#35905: macOS build docs need refresh (2019)
https://bugs.python.org/issue35905  opened by jaraco

#35906: Header Injection in urllib
https://bugs.python.org/issue35906  opened by push0ebp

#35907: Unnecessary URL scheme exists to allow file:// reading file  i
https://bugs.python.org/issue35907  opened by push0ebp

#35912: _testembed.c fails to compile when using --with-cxx-main in th
https://bugs.python.org/issue35912  opened by pablogsal

#35913: asyncore: allow handling of half closed connections
https://bugs.python.org/issue35913  opened by Isaac Boukris

#35915: re.search extreme slowness (looks like hang/livelock), searchi
https://bugs.python.org/issue35915  opened by benspiller

#35918: multiprocessing's SyncManager.dict.has_key() method is broken
https://bugs.python.org/issue35918  opened by giampaolo.rodola

#35919: multiprocessing: shared manager Pool fails with AttributeError
https://bugs.python.org/issue35919  opened by giampaolo.rodola

#35920: Windows 10 ARM32 platform support
https://bugs.python.org/issue35920  opened by steve.dower

#35921: Use ccache by default
https://bugs.python.org/issue35921  opened by pitrou

#35922: robotparser crawl_delay and request_rate do not work with no m
https://bugs.python.org/issue35922  opened by joseph_myers

#35923: Update the BuiltinImporter in importlib to use loader._ORIGIN 
https://bugs.python.org/issue35923  opened by nnja

#35924: curses segfault resizing window
https://bugs.python.org/issue35924  opened by Josiah Ulfers

#35925: test_httplib test_nntplib test_ssl fail on ARMv7 Debian buster
https://bugs.python.org/issue35925  opened by pablogsal

#35926: Need openssl 1.1.1 support on Windows for ARM and ARM64
https://bugs.python.org/issue35926  opened by Paul Monson

#35927: Intra-package References Documentation Incomplete
https://bugs.python.org/issue35927  opened by ADataGman

#35928: socket makefile read-write discards received data
https://bugs.python.org/issue35928  opened by pravn

#35930: Raising an exception raised in a "future" instance will create
https://bugs.python.org/issue35930  opened by jcea

#35931: pdb: "debug print(" crashes with SyntaxError
https://bugs.python.org/issue35931  opened by blueyed

#35933: python doc does not say that the state kwarg in Pickler.save_r
https://bugs.python.org/issue35933  opened by pierreglaser

#35934: Add socket.bind_socket() utility function
https://bugs.python.org/issue35934  opened by giampaolo.rodola

#35935: threading.Event().wait() not interruptable with Ctrl-C on Wind
https://bugs.python.org/issue35935  opened by Chris Billington

#35936: Give modulefinder some much-needed updates.
https://bugs.python.org/issue35936  opened by brandtbucher

#35937: Add instancemethod to types.py
https://bugs.python.org/issue35937  opened by bup

#35939: Remove urllib.parse._splittype from mimetypes.guess_type
https://bugs.python.org/issue35939  opened by corona10

#35940: multiprocessing manager tests fail in the Refleaks buildbots
https://bugs.python.org/issue35940  opened by pablogsal

#35941: ssl.enum_certificates() regression
https://bugs.python.org/issue35941  opened by schlenk

#35942: posixmodule.c:path_converter() returns an invalid exception me
https://bugs.python.org/issue35942  opened by lukasz.langa

#35943: PyImport_GetModule() can return partially-initialized module
https://bugs.python.org/issue35943  opened by pitrou



Most recent 15 issues with no replies (15)
==========================================

#35942: posixmodule.c:path_converter() returns an invalid exception me
https://bugs.python.org/issue35942

#35940: multiprocessing manager tests fail in the Refleaks buildbots
https://bugs.python.org/issue35940

#35939: Remove urllib.parse._splittype from mimetypes.guess_type
https://bugs.python.org/issue35939

#35936: Give modulefinder some much-needed updates.
https://bugs.python.org/issue35936

#35934: Add socket.bind_socket() utility function
https://bugs.python.org/issue35934

#35931: pdb: "debug print(" crashes with SyntaxError
https://bugs.python.org/issue35931

#35930: Raising an exception raised in a "future" instance will create
https://bugs.python.org/issue35930

#35928: socket makefile read-write discards received data
https://bugs.python.org/issue35928

#35927: Intra-package References Documentation Incomplete
https://bugs.python.org/issue35927

#35926: Need openssl 1.1.1 support on Windows for ARM and ARM64
https://bugs.python.org/issue35926

#35924: curses segfault resizing window
https://bugs.python.org/issue35924

#35920: Windows 10 ARM32 platform support
https://bugs.python.org/issue35920

#35919: multiprocessing: shared manager Pool fails with AttributeError
https://bugs.python.org/issue35919

#35918: multiprocessing's SyncManager.dict.has_key() method is broken
https://bugs.python.org/issue35918

#35912: _testembed.c fails to compile when using --with-cxx-main in th
https://bugs.python.org/issue35912



Most recent 15 issues waiting for review (15)
=============================================

#35936: Give modulefinder some much-needed updates.
https://bugs.python.org/issue35936

#35934: Add socket.bind_socket() utility function
https://bugs.python.org/issue35934

#35931: pdb: "debug print(" crashes with SyntaxError
https://bugs.python.org/issue35931

#35926: Need openssl 1.1.1 support on Windows for ARM and ARM64
https://bugs.python.org/issue35926

#35922: robotparser crawl_delay and request_rate do not work with no m
https://bugs.python.org/issue35922

#35921: Use ccache by default
https://bugs.python.org/issue35921

#35920: Windows 10 ARM32 platform support
https://bugs.python.org/issue35920

#35913: asyncore: allow handling of half closed connections
https://bugs.python.org/issue35913

#35906: Header Injection in urllib
https://bugs.python.org/issue35906

#35903: Build of posixshmem.c should probe for required OS functions
https://bugs.python.org/issue35903

#35900: Add pickler hook for the user to customize the serialization o
https://bugs.python.org/issue35900

#35887: Doc string for updating the frozen version of importlib in _bo
https://bugs.python.org/issue35887

#35886: Move PyInterpreterState into Include/internal/pycore_pystate.h
https://bugs.python.org/issue35886

#35878: ast.c: end_col_offset may be used uninitialized in this functi
https://bugs.python.org/issue35878

#35876: test_start_new_session for posix_spawnp fails
https://bugs.python.org/issue35876



Top 10 most discussed issues (10)
=================================

#35813: shared memory construct to avoid need for serialization betwee
https://bugs.python.org/issue35813  19 msgs

#35904: Add statistics.fmean(seq)
https://bugs.python.org/issue35904  11 msgs

#35913: asyncore: allow handling of half closed connections
https://bugs.python.org/issue35913  11 msgs

#35921: Use ccache by default
https://bugs.python.org/issue35921   9 msgs

#35706: Make it easier to use a venv with an embedded Python interpret
https://bugs.python.org/issue35706   7 msgs

#35893: distutils fails to build extension on windows when it is a pac
https://bugs.python.org/issue35893   7 msgs

#30670: pprint for dict in sorted order or insert order?
https://bugs.python.org/issue30670   6 msgs

#35907: Unnecessary URL scheme exists to allow file:// reading file  i
https://bugs.python.org/issue35907   6 msgs

#34572: C unpickling bypasses import thread safety
https://bugs.python.org/issue34572   5 msgs

#35933: python doc does not say that the state kwarg in Pickler.save_r
https://bugs.python.org/issue35933   5 msgs



Issues closed (46)
==================

#20001: pathlib inheritance diagram too large
https://bugs.python.org/issue20001  closed by inada.naoki

#22474: No explanation of how a task gets destroyed in asyncio 'task' 
https://bugs.python.org/issue22474  closed by cheryl.sabella

#24087: Documentation doesn't explain the term "coroutine" (PEP 342)
https://bugs.python.org/issue24087  closed by paul.moore

#24209: Allow IPv6 bind in http.server
https://bugs.python.org/issue24209  closed by jaraco

#26256: Fast decimalisation and conversion to other bases
https://bugs.python.org/issue26256  closed by skrah

#27344: zipfile *does* support utf-8 filenames
https://bugs.python.org/issue27344  closed by cheryl.sabella

#29734: os.stat handle leak
https://bugs.python.org/issue29734  closed by steve.dower

#30130: array.array is not an instance of collections.MutableSequence
https://bugs.python.org/issue30130  closed by cheryl.sabella

#32560: [EASY C] inherit the py launcher's STARTUPINFO
https://bugs.python.org/issue32560  closed by steve.dower

#33316: Windows: PyThread_release_lock always fails
https://bugs.python.org/issue33316  closed by steve.dower

#33895: LoadLibraryExW called with GIL held can cause deadlock
https://bugs.python.org/issue33895  closed by steve.dower

#34691: _contextvars missing in xmaster branch Windows build?
https://bugs.python.org/issue34691  closed by steve.dower

#35299: LGHT0091: Duplicate symbol 'File:include_pyconfig.h' found
https://bugs.python.org/issue35299  closed by steve.dower

#35358: Document that importlib.import_module accepts names that are n
https://bugs.python.org/issue35358  closed by matrixise

#35485: tkinter windows turn black while resized using Tk 8.6.9.1 on m
https://bugs.python.org/issue35485  closed by ned.deily

#35605: backported patch requires new sphinx, minimum sphinx version w
https://bugs.python.org/issue35605  closed by ned.deily

#35606: Add prod() function to the math module
https://bugs.python.org/issue35606  closed by rhettinger

#35615: "RuntimeError: Dictionary changed size during iteration" when 
https://bugs.python.org/issue35615  closed by pitrou

#35642: _asynciomodule.c compiled in both pythoncore.vcxproj and _asyn
https://bugs.python.org/issue35642  closed by steve.dower

#35686: BufferError with memory.release()
https://bugs.python.org/issue35686  closed by skrah

#35692: pathlib.Path.exists() on non-existent drive raises WinError in
https://bugs.python.org/issue35692  closed by steve.dower

#35758: Disable x87 control word for MSVC ARM compiler
https://bugs.python.org/issue35758  closed by Minmin.Gong

#35851: Make search result in online docs keep their position when sea
https://bugs.python.org/issue35851  closed by xtreak

#35861: test_named_expressions raises SyntaxWarning
https://bugs.python.org/issue35861  closed by emilyemorehouse

#35862: Change the environment for a new process
https://bugs.python.org/issue35862  closed by steve.dower

#35872: Creating venv from venv no longer works in 3.7.2
https://bugs.python.org/issue35872  closed by steve.dower

#35873: Controlling venv from venv no longer works in 3.7.2
https://bugs.python.org/issue35873  closed by steve.dower

#35877: parenthesis is mandatory for named expressions in while statem
https://bugs.python.org/issue35877  closed by emilyemorehouse

#35879: test_type_comments leaks references
https://bugs.python.org/issue35879  closed by gvanrossum

#35884: Add variable access benchmark to Tools/Scripts
https://bugs.python.org/issue35884  closed by rhettinger

#35890: Cleanup some non-consistent API callings
https://bugs.python.org/issue35890  closed by steve.dower

#35894: Apparent regression in 3.8-dev: 'TypeError: required field "ty
https://bugs.python.org/issue35894  closed by gvanrossum

#35895: the test suite of pytest failed with 3.8.0a1
https://bugs.python.org/issue35895  closed by gvanrossum

#35896: sysconfig.get_platform returns wrong value when Python 32b is 
https://bugs.python.org/issue35896  closed by steve.dower

#35897: Support list as argument to .startswith()
https://bugs.python.org/issue35897  closed by rhettinger

#35902: Forking from background thread
https://bugs.python.org/issue35902  closed by pitrou

#35908: build with building extension modules as builtins is broken in
https://bugs.python.org/issue35908  closed by doko

#35909: Zip Slip Vulnerability
https://bugs.python.org/issue35909  closed by christian.heimes

#35910: Curious problem with my choice of variables
https://bugs.python.org/issue35910  closed by matrixise

#35911: add a cell construtor, and expose the cell type in Lib/types.p
https://bugs.python.org/issue35911  closed by pitrou

#35914: [2.7] PyStructSequence objects not behaving like nametuple
https://bugs.python.org/issue35914  closed by eric.snow

#35916: 3.6.5 try/except/else/finally block executes code with typos, 
https://bugs.python.org/issue35916  closed by SilentGhost

#35917: multiprocessing: provide unit-tests for manager classes and sh
https://bugs.python.org/issue35917  closed by pitrou

#35929: Spam
https://bugs.python.org/issue35929  closed by Mariatta

#35932: Interpreter gets stuck while applying a regex pattern
https://bugs.python.org/issue35932  closed by tim.peters

#35938: crash of METADATA file cannot be fixed by reinstall of python
https://bugs.python.org/issue35938  closed by steven.daprano


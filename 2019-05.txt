From tjreedy at udel.edu  Wed May  1 01:12:10 2019
From: tjreedy at udel.edu (Terry Reedy)
Date: Wed, 1 May 2019 01:12:10 -0400
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
In-Reply-To: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
Message-ID: <qab9rb$5a7r$1@blaine.gmane.org>

On 4/30/2019 5:24 PM, Chris Withers wrote:
> Hi All,
> 
> I have a crazy idea of getting unittest.mock up to 100% code coverage.
> 
> I noticed at the bottom of all of the test files in testmock/, there's a:
> 
> if __name__ == '__main__':
>  ??? unittest.main()
> 
> ...block.

Such blocks should be excluded from coverage by the default .coveragerc 
file.  Mine came with

exclude_lines =
     # Don't complain if non-runnable code isn't run:
     if 0:
     if __name__ == .__main__.:
     if DEBUG:


-- 
Terry Jan Reedy



From chris at withers.org  Wed May  1 02:13:16 2019
From: chris at withers.org (Chris Withers)
Date: Wed, 1 May 2019 07:13:16 +0100
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
In-Reply-To: <qab9rb$5a7r$1@blaine.gmane.org>
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
 <qab9rb$5a7r$1@blaine.gmane.org>
Message-ID: <98f5b8b6-6582-e348-c0fc-472ba228f131@withers.org>

On 01/05/2019 06:12, Terry Reedy wrote:
> Such blocks should be excluded from coverage by the default .coveragerc 
> file.? Mine came with
> 
> exclude_lines =
>  ??? # Don't complain if non-runnable code isn't run:
>  ??? if 0:
>  ??? if __name__ == .__main__.:
>  ??? if DEBUG:

Which .coveragerc are you referring to? There isn't one in the cpython 
repo and a current release of coverage.py doesn't appear to exclude 
these lines for me:

https://circleci.com/gh/testing-cabal/mock/20

(line 44 in mock/tests/testsentinel.py)

Chris

From storchaka at gmail.com  Wed May  1 02:46:57 2019
From: storchaka at gmail.com (Serhiy Storchaka)
Date: Wed, 1 May 2019 09:46:57 +0300
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
In-Reply-To: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
Message-ID: <qabfcq$4dkk$1@blaine.gmane.org>

01.05.19 00:24, Chris Withers ????:
> I have a crazy idea of getting unittest.mock up to 100% code coverage.
> 
> I noticed at the bottom of all of the test files in testmock/, there's a:
> 
> if __name__ == '__main__':
>  ??? unittest.main()
> 
> ...block.
> 
> How would people feel about these going away? I don't *think* they're 
> needed now that we have unittest discover, but thought I'd ask.

These lines were added for purpose. They are needed for running tests in 
separate file as a script.

$ ./python Lib/unittest/test/testmock/testcallable.py -v
test_attributes (__main__.TestCallable) ... ok
test_create_autospec (__main__.TestCallable) ... ok
test_create_autospec_instance (__main__.TestCallable) ... ok
test_hierarchy (__main__.TestCallable) ... ok
test_non_callable (__main__.TestCallable) ... ok
test_patch_spec (__main__.TestCallable) ... ok
test_patch_spec_callable_class (__main__.TestCallable) ... ok
test_patch_spec_instance (__main__.TestCallable) ... ok
test_patch_spec_set (__main__.TestCallable) ... ok
test_patch_spec_set_instance (__main__.TestCallable) ... ok
test_subclasses (__main__.TestCallable) ... ok

----------------------------------------------------------------------
Ran 11 tests in 0.040s

OK


From chris at withers.org  Wed May  1 03:09:55 2019
From: chris at withers.org (Chris Withers)
Date: Wed, 1 May 2019 08:09:55 +0100
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
In-Reply-To: <qabfcq$4dkk$1@blaine.gmane.org>
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
 <qabfcq$4dkk$1@blaine.gmane.org>
Message-ID: <10a06aab-7190-c41e-d5f7-64e1b64005ad@withers.org>

On 01/05/2019 07:46, Serhiy Storchaka wrote:
> 01.05.19 00:24, Chris Withers ????:
>> I have a crazy idea of getting unittest.mock up to 100% code coverage.
>>
>> I noticed at the bottom of all of the test files in testmock/, there's a:
>>
>> if __name__ == '__main__':
>> ???? unittest.main()
>>
>> ...block.
>>
>> How would people feel about these going away? I don't *think* they're 
>> needed now that we have unittest discover, but thought I'd ask.
> 
> These lines were added for purpose. They are needed for running tests in 
> separate file as a script.
> 
> $ ./python Lib/unittest/test/testmock/testcallable.py -v
> test_attributes (__main__.TestCallable) ... ok
> test_create_autospec (__main__.TestCallable) ... ok
> test_create_autospec_instance (__main__.TestCallable) ... ok
> test_hierarchy (__main__.TestCallable) ... ok
> test_non_callable (__main__.TestCallable) ... ok
> test_patch_spec (__main__.TestCallable) ... ok
> test_patch_spec_callable_class (__main__.TestCallable) ... ok
> test_patch_spec_instance (__main__.TestCallable) ... ok
> test_patch_spec_set (__main__.TestCallable) ... ok
> test_patch_spec_set_instance (__main__.TestCallable) ... ok
> test_subclasses (__main__.TestCallable) ... ok

Right, but that's not the documented way of running individual suites in 
the devguide.

I'm happy to remove these on the basis that there should be one and only 
one way of doing things like this.

Chris

From tjreedy at udel.edu  Wed May  1 06:24:59 2019
From: tjreedy at udel.edu (Terry Reedy)
Date: Wed, 1 May 2019 06:24:59 -0400
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
In-Reply-To: <98f5b8b6-6582-e348-c0fc-472ba228f131@withers.org>
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
 <qab9rb$5a7r$1@blaine.gmane.org>
 <98f5b8b6-6582-e348-c0fc-472ba228f131@withers.org>
Message-ID: <qabs5s$7vhm$1@blaine.gmane.org>

On 5/1/2019 2:13 AM, Chris Withers wrote:
> On 01/05/2019 06:12, Terry Reedy wrote:
>> Such blocks should be excluded from coverage by the default 
>> .coveragerc file.? Mine came with
>>
>> exclude_lines =
>> ???? # Don't complain if non-runnable code isn't run:
>> ???? if 0:
>> ???? if __name__ == .__main__.:
>> ???? if DEBUG:

I am fairly sure these are the original lines.  I added more to my 
personal copy to exclude some things specific to idlelib files.  Idlelib 
files also have the same statement as the mock files.  It is very handy 
for development.

> Which .coveragerc are you referring to? 

The file in the directory that contains Ned's coverage package.
At least that is where it is for me.

> There isn't one in the cpython repo

Since /coverage is not in the Python repo either, I would not expect it 
to be.

> and a current release of coverage.py doesn't appear to exclude 
> these lines for me:

> https://circleci.com/gh/testing-cabal/mock/20
> 
> (line 44 in mock/tests/testsentinel.py)

I consider this a problem in the circleci coverage setup, not in the 
mock files.  A faulty exclude-lines section leads to a faulty coverage 
calculation.  Ned made it user-editable for a reason.

-- 
Terry Jan Reedy



From solipsis at pitrou.net  Wed May  1 06:48:31 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Wed, 1 May 2019 12:48:31 +0200
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
Message-ID: <20190501124831.7faadb2b@fsol>

On Tue, 30 Apr 2019 22:24:53 +0100
Chris Withers <chris at withers.org> wrote:
> Hi All,
> 
> I have a crazy idea of getting unittest.mock up to 100% code coverage.
> 
> I noticed at the bottom of all of the test files in testmock/, there's a:
> 
> if __name__ == '__main__':
>  ??? unittest.main()
> 
> ...block.
> 
> How would people feel about these going away? I don't *think* they're 
> needed now that we have unittest discover, but thought I'd ask.

If you are only asking to remove them because you want that score of
100% coverage, then I think you shouldn't.

Regards

Antoine.



From vstinner at redhat.com  Wed May  1 08:21:54 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Wed, 1 May 2019 08:21:54 -0400
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
In-Reply-To: <10a06aab-7190-c41e-d5f7-64e1b64005ad@withers.org>
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
 <qabfcq$4dkk$1@blaine.gmane.org>
 <10a06aab-7190-c41e-d5f7-64e1b64005ad@withers.org>
Message-ID: <CA+3bQGFiVS5Adu6dr8jnxZSMe6tBi=wH6aUN5-NYhE1EBkQBmQ@mail.gmail.com>

Le mer. 1 mai 2019 ? 03:12, Chris Withers <chris at withers.org> a ?crit :
> Right, but that's not the documented way of running individual suites in
> the devguide.

Maybe, but I'm using that sometimes and it's useful for some specific
issues. Is it possible to run an individual test file using unittest?

Something like ./python -m unittest
Lib/unittest/test/testmock/testcallable.py -v

Victor
-- 
Night gathers, and now my watch begins. It shall not end until my death.

From chris at withers.org  Wed May  1 08:30:40 2019
From: chris at withers.org (Chris Withers)
Date: Wed, 1 May 2019 13:30:40 +0100
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
In-Reply-To: <CA+3bQGFiVS5Adu6dr8jnxZSMe6tBi=wH6aUN5-NYhE1EBkQBmQ@mail.gmail.com>
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
 <qabfcq$4dkk$1@blaine.gmane.org>
 <10a06aab-7190-c41e-d5f7-64e1b64005ad@withers.org>
 <CA+3bQGFiVS5Adu6dr8jnxZSMe6tBi=wH6aUN5-NYhE1EBkQBmQ@mail.gmail.com>
Message-ID: <a0dd16c9-475a-e15b-114d-fde7121dd5de@withers.org>

On 01/05/2019 13:21, Victor Stinner wrote:
> Le mer. 1 mai 2019 ? 03:12, Chris Withers <chris at withers.org> a ?crit :
>> Right, but that's not the documented way of running individual suites in
>> the devguide.
> 
> Maybe, but I'm using that sometimes and it's useful for some specific
> issues. Is it possible to run an individual test file using unittest?
> 
> Something like ./python -m unittest
> Lib/unittest/test/testmock/testcallable.py -v

Yep:

$ ./python.exe -m unittest Lib/unittest/test/testmock/testsentinel.py
......
----------------------------------------------------------------------
Ran 6 tests in 0.002s

$ ./python.exe -m unittest -v Lib/unittest/test/testmock/testsentinel.py
testBases (Lib.unittest.test.testmock.testsentinel.SentinelTest) ... ok
testCopy (Lib.unittest.test.testmock.testsentinel.SentinelTest) ... ok
testDEFAULT (Lib.unittest.test.testmock.testsentinel.SentinelTest) ... ok
testPickle (Lib.unittest.test.testmock.testsentinel.SentinelTest) ... ok
testSentinelName (Lib.unittest.test.testmock.testsentinel.SentinelTest) 
... ok
testSentinels (Lib.unittest.test.testmock.testsentinel.SentinelTest) ... ok

----------------------------------------------------------------------
Ran 6 tests in 0.003s

OK

$ ./python.exe -m unittest -v unittest.test.testmock.testsentinel
testBases (unittest.test.testmock.testsentinel.SentinelTest) ... ok
testCopy (unittest.test.testmock.testsentinel.SentinelTest) ... ok
testDEFAULT (unittest.test.testmock.testsentinel.SentinelTest) ... ok
testPickle (unittest.test.testmock.testsentinel.SentinelTest) ... ok
testSentinelName (unittest.test.testmock.testsentinel.SentinelTest) ... ok
testSentinels (unittest.test.testmock.testsentinel.SentinelTest) ... ok

----------------------------------------------------------------------
Ran 6 tests in 0.003s

cheers,

Chris

From p.f.moore at gmail.com  Wed May  1 08:37:01 2019
From: p.f.moore at gmail.com (Paul Moore)
Date: Wed, 1 May 2019 13:37:01 +0100
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
In-Reply-To: <20190501124831.7faadb2b@fsol>
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
 <20190501124831.7faadb2b@fsol>
Message-ID: <CACac1F9OJdkc_v0dQJwBMn_nEMecxkLMXKr9f8efQgF4EN4UjA@mail.gmail.com>

I agree - removing this just to make the coverage figures look pretty
seems like the wrong motivation.

Configuring coverage to understand that you want to exclude these
lines from the checking would be fine, as would accepting that a
coverage of slightly less than 100% is OK. Removing functionality that
people use (whether or not they have other ways of getting the same
results) needs a stronger justification, IMO.

Paul

On Wed, 1 May 2019 at 11:51, Antoine Pitrou <solipsis at pitrou.net> wrote:
>
> On Tue, 30 Apr 2019 22:24:53 +0100
> Chris Withers <chris at withers.org> wrote:
> > Hi All,
> >
> > I have a crazy idea of getting unittest.mock up to 100% code coverage.
> >
> > I noticed at the bottom of all of the test files in testmock/, there's a:
> >
> > if __name__ == '__main__':
> >      unittest.main()
> >
> > ...block.
> >
> > How would people feel about these going away? I don't *think* they're
> > needed now that we have unittest discover, but thought I'd ask.
>
> If you are only asking to remove them because you want that score of
> 100% coverage, then I think you shouldn't.
>
> Regards
>
> Antoine.
>
>
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe: https://mail.python.org/mailman/options/python-dev/p.f.moore%40gmail.com

From storchaka at gmail.com  Wed May  1 08:39:15 2019
From: storchaka at gmail.com (Serhiy Storchaka)
Date: Wed, 1 May 2019 15:39:15 +0300
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
In-Reply-To: <10a06aab-7190-c41e-d5f7-64e1b64005ad@withers.org>
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
 <qabfcq$4dkk$1@blaine.gmane.org>
 <10a06aab-7190-c41e-d5f7-64e1b64005ad@withers.org>
Message-ID: <qac41d$623f$1@blaine.gmane.org>

01.05.19 10:09, Chris Withers ????:
> Right, but that's not the documented way of running individual suites in 
> the devguide.
> 
> I'm happy to remove these on the basis that there should be one and only 
> one way of doing things like this.

This principle is not applicable here because the Python testsuite is 
not a public API. It is not for use of Python users.

We try to support several different ways of running tests. This allows 
to catch some environment depended flaws in tests and serves as a kind 
of the test of unittest itself. Not all test files are made discoverable 
yet, but we move in this direction.

I do not see what is wrong here and suggest to not break working code.


From chris at withers.org  Wed May  1 08:51:22 2019
From: chris at withers.org (Chris Withers)
Date: Wed, 1 May 2019 13:51:22 +0100
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
In-Reply-To: <CACac1F9OJdkc_v0dQJwBMn_nEMecxkLMXKr9f8efQgF4EN4UjA@mail.gmail.com>
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
 <20190501124831.7faadb2b@fsol>
 <CACac1F9OJdkc_v0dQJwBMn_nEMecxkLMXKr9f8efQgF4EN4UjA@mail.gmail.com>
Message-ID: <d5689034-bce2-9f8c-b53b-01a020565798@withers.org>

On 01/05/2019 13:37, Paul Moore wrote:
> I agree - removing this just to make the coverage figures look pretty
> seems like the wrong motivation.
> 
> Configuring coverage to understand that you want to exclude these
> lines from the checking would be fine, as would accepting that a
> coverage of slightly less than 100% is OK. Removing functionality that
> people use (whether or not they have other ways of getting the same
> results) needs a stronger justification, IMO.

It's an interesting point; I personally don't see much value in coverage 
of less than 100%, if you're going to look at coverage: no-one is going 
to focus on or potentially even notice whether coverage moved from 99% 
to 99% (no typo), even though a bunch of new uncovered code may have 
been introduced.

If people are actually using these blocks, then so be it, but it feels 
like the people who want them to stick around are saying they're using 
them just on the off chance they might use them, which feels like a poor 
reason to keep a bunch of dead code around.

I'm not sure I understand how triggering via unittest or via unittest 
(again, no typo, both these __main__ blocks and python -m unittest are 
using the same test runner) could make a difference.

Chris

From chris at withers.org  Wed May  1 08:56:44 2019
From: chris at withers.org (Chris Withers)
Date: Wed, 1 May 2019 13:56:44 +0100
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
In-Reply-To: <qac41d$623f$1@blaine.gmane.org>
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
 <qabfcq$4dkk$1@blaine.gmane.org>
 <10a06aab-7190-c41e-d5f7-64e1b64005ad@withers.org>
 <qac41d$623f$1@blaine.gmane.org>
Message-ID: <d5fb0b92-baef-7b04-8ac2-97a7e1ed1222@withers.org>

Sorry, accidentally include a comment for this in a reply to Paul:

On 01/05/2019 13:39, Serhiy Storchaka wrote:
> We try to support several different ways of running tests. This allows 
> to catch some environment depended flaws in tests and serves as a kind 
> of the test of unittest itself. Not all test files are made discoverable 
> yet, but we move in this direction.

I'm not sure I understand how triggering via unittest or via unittest 
(no typo, both these __main__ blocks and python -m unittest are using 
the same test runner) could make a difference.

And sorry, to be clear, I'm only taking about the ones in 
unittest/mock/testmock - Rob Collins confirmed these where never needed 
in a private reply:

> They were never needed ?
> 
> Removal is fine with me.


Chris

From p.f.moore at gmail.com  Wed May  1 09:22:48 2019
From: p.f.moore at gmail.com (Paul Moore)
Date: Wed, 1 May 2019 14:22:48 +0100
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
In-Reply-To: <d5689034-bce2-9f8c-b53b-01a020565798@withers.org>
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
 <20190501124831.7faadb2b@fsol>
 <CACac1F9OJdkc_v0dQJwBMn_nEMecxkLMXKr9f8efQgF4EN4UjA@mail.gmail.com>
 <d5689034-bce2-9f8c-b53b-01a020565798@withers.org>
Message-ID: <CACac1F90cVoU7DeSD2QkYTeSD+TLT80EkNoStx0pZZoY0iV4kQ@mail.gmail.com>

On Wed, 1 May 2019 at 13:53, Chris Withers <chris at withers.org> wrote:
>
> On 01/05/2019 13:37, Paul Moore wrote:
> > I agree - removing this just to make the coverage figures look pretty
> > seems like the wrong motivation.
> >
> > Configuring coverage to understand that you want to exclude these
> > lines from the checking would be fine, as would accepting that a
> > coverage of slightly less than 100% is OK. Removing functionality that
> > people use (whether or not they have other ways of getting the same
> > results) needs a stronger justification, IMO.
>
> It's an interesting point; I personally don't see much value in coverage
> of less than 100%, if you're going to look at coverage: no-one is going
> to focus on or potentially even notice whether coverage moved from 99%
> to 99% (no typo), even though a bunch of new uncovered code may have
> been introduced.

That's a fair point.

> If people are actually using these blocks, then so be it, but it feels
> like the people who want them to stick around are saying they're using
> them just on the off chance they might use them, which feels like a poor
> reason to keep a bunch of dead code around.

If your argument was "this is dead code, and should be removed to help
future maintenance", I'd have no problem with that. My point was
simply that I think that adjusting the code to make the coverage stats
hit 100% feels like going at things the wrong way round.

Is it really that difficult to simply tell coverage to ignore them? I
thought someone had already pointed to a coveragerc file that let you
do this.

Personally, I don't use those blocks at all, so it doesn't matter to
me whether they stay or go in any practical sense.
Paul

From chris at withers.org  Wed May  1 09:30:01 2019
From: chris at withers.org (Chris Withers)
Date: Wed, 1 May 2019 14:30:01 +0100
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
In-Reply-To: <CACac1F90cVoU7DeSD2QkYTeSD+TLT80EkNoStx0pZZoY0iV4kQ@mail.gmail.com>
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
 <20190501124831.7faadb2b@fsol>
 <CACac1F9OJdkc_v0dQJwBMn_nEMecxkLMXKr9f8efQgF4EN4UjA@mail.gmail.com>
 <d5689034-bce2-9f8c-b53b-01a020565798@withers.org>
 <CACac1F90cVoU7DeSD2QkYTeSD+TLT80EkNoStx0pZZoY0iV4kQ@mail.gmail.com>
Message-ID: <05ef1790-dc90-f5a6-a25c-9ba5abc66a3a@withers.org>

On 01/05/2019 14:22, Paul Moore wrote:
>> If people are actually using these blocks, then so be it, but it feels
>> like the people who want them to stick around are saying they're using
>> them just on the off chance they might use them, which feels like a poor
>> reason to keep a bunch of dead code around.
> 
> If your argument was "this is dead code, and should be removed to help
> future maintenance", I'd have no problem with that. 

Yep, that's exactly my point :-)
The dev guide shows how to run individual tests without these and 
doesn't mention them at all. As someone coming back to core dev late 
last year, I was left wondering whether I *should* be using them and 
that created confusion for me; having only one way to do things seems 
like a good thing here.

> My point was
> simply that I think that adjusting the code to make the coverage stats
> hit 100% feels like going at things the wrong way round.

Agreed, but my focus here is to get to 100% for mock so that it's clear 
that all the code is there for a reason; mock is very complicated by 
necessity, and having examples of why code needs to be there is what I'm 
aiming for most of all.

> Is it really that difficult to simply tell coverage to ignore them? I
> thought someone had already pointed to a coveragerc file that let you
> do this.

It would be if the cpython repo had a coveragerc, but it does not.
People maintaining their own ad-hoc coverage configs seems like a pretty 
bad idea.

> Personally, I don't use those blocks at all, so it doesn't matter to
> me whether they stay or go in any practical sense.

Right, that's by gut feeling here: I don't want people encountering this 
mock codebase to have to wonder whether they should be running the tests 
using these blocks versus the way described in the dev guide, and 
stressing about what the differences might be, when there aren't any...

Chris

From tir.karthi at gmail.com  Wed May  1 09:52:23 2019
From: tir.karthi at gmail.com (Karthikeyan)
Date: Wed, 1 May 2019 19:22:23 +0530
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
In-Reply-To: <qac41d$623f$1@blaine.gmane.org>
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
 <qabfcq$4dkk$1@blaine.gmane.org>
 <10a06aab-7190-c41e-d5f7-64e1b64005ad@withers.org>
 <qac41d$623f$1@blaine.gmane.org>
Message-ID: <CAAjsFLSBWQ+0t6_M4B1YqdO4fUHoC41d-5tD43aaTGt-4_P_0A@mail.gmail.com>

On Wed, May 1, 2019 at 6:13 PM Serhiy Storchaka <storchaka at gmail.com> wrote:

> 01.05.19 10:09, Chris Withers ????:
> > Right, but that's not the documented way of running individual suites in
> > the devguide.
> >
> > I'm happy to remove these on the basis that there should be one and only
> > one way of doing things like this.
>
> This principle is not applicable here because the Python testsuite is
> not a public API. It is not for use of Python users.
>
> We try to support several different ways of running tests. This allows
> to catch some environment depended flaws in tests and serves as a kind
> of the test of unittest itself. Not all test files are made discoverable
> yet, but we move in this direction.
>

Agreed. This also has helped in the past to find issues like
https://bugs.python.org/issue29512#msg299045.


>
> I do not see what is wrong here and suggest to not break working code.
>
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/tir.karthi%40gmail.com
>


-- 
Regards,
Karthikeyan S
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190501/913dbe5b/attachment.html>

From chris at withers.org  Wed May  1 10:20:48 2019
From: chris at withers.org (Chris Withers)
Date: Wed, 1 May 2019 15:20:48 +0100
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
In-Reply-To: <CAAjsFLSBWQ+0t6_M4B1YqdO4fUHoC41d-5tD43aaTGt-4_P_0A@mail.gmail.com>
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
 <qabfcq$4dkk$1@blaine.gmane.org>
 <10a06aab-7190-c41e-d5f7-64e1b64005ad@withers.org>
 <qac41d$623f$1@blaine.gmane.org>
 <CAAjsFLSBWQ+0t6_M4B1YqdO4fUHoC41d-5tD43aaTGt-4_P_0A@mail.gmail.com>
Message-ID: <f0ba14d7-faa1-3b3d-5660-6620ebe7464a@withers.org>

On 01/05/2019 14:52, Karthikeyan wrote:
> 
> 
>     We try to support several different ways of running tests. This allows
>     to catch some environment depended flaws in tests and serves as a kind
>     of the test of unittest itself. Not all test files are made
>     discoverable
>     yet, but we move in this direction.
> 
> Agreed. This also has helped in the past to find issues like 
> https://bugs.python.org/issue29512#msg299045.

My read of that issue is that issue is that the only problem that was 
found is that an ambiguous way of running tests, which isn't included in 
the devguide, and maybe for good reason, caused a problem which sucked 
up a bunch of Victor's time.

The reason Lib/test/ was on sys.path was because the tests were run with 
./python Lib/test/test_bisect.py, when it shouldn't be.

Had it been run with:

./ python -m test.test_bisect

...it would not have been, and bisect.py would not have needed renaming 
to bisect_cmd.py.

Chris

From jerrywiltse at gmail.com  Wed May  1 11:09:19 2019
From: jerrywiltse at gmail.com (Gerald Wiltse)
Date: Wed, 1 May 2019 11:09:19 -0400
Subject: [Python-Dev] Location of CI for Windows Embeddable Distro
Message-ID: <CAML1RCC0vw2V_bitZ0rJFc-VzLgZNShe0wNCb4oZSK0gZYVgfA@mail.gmail.com>

I looked through all the windows builders here and could not find any
which generate this package, can anyone tell me where the work happens?  I
also tried searching looking for scripts and CI files which create the
package in all the relevant repos and could not find those either.

Is this information not public?
Is it a manual build?

Gerald R. Wiltse
jerrywiltse at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190501/af16da11/attachment.html>

From turnbull.stephen.fw at u.tsukuba.ac.jp  Wed May  1 12:09:13 2019
From: turnbull.stephen.fw at u.tsukuba.ac.jp (Stephen J. Turnbull)
Date: Thu, 2 May 2019 01:09:13 +0900
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
In-Reply-To: <d5689034-bce2-9f8c-b53b-01a020565798@withers.org>
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
 <20190501124831.7faadb2b@fsol>
 <CACac1F9OJdkc_v0dQJwBMn_nEMecxkLMXKr9f8efQgF4EN4UjA@mail.gmail.com>
 <d5689034-bce2-9f8c-b53b-01a020565798@withers.org>
Message-ID: <23753.50345.124026.479885@turnbull.sk.tsukuba.ac.jp>

Executive summary:

"There should be a tool" (sorry, I'm not volunteering any time soon)
that could be added to $VCS diff (say, "git coverage-diff" or "git
diff --coverage").

Chris Withers writes:

 > It's an interesting point; I personally don't see much value in coverage 
 > of less than 100%, if you're going to look at coverage: no-one is going 
 > to focus on or potentially even notice whether coverage moved from 99% 
 > to 99% (no typo), even though a bunch of new uncovered code may have 
 > been introduced.

I agree with the point you're making (that the difference between 100%
and 99% is a very significant indicator that "something needs to be
done here, it's obvious what, and [depending on project process] it's
obvious who, too"), but it's also true that 99% is 
better than 98% and definitely better than 90% or less.

Your point that it matters *which* 1% is more important, I think (see
"Executive summary").

 > If people are actually using these blocks, then so be it, but it feels 
 > like the people who want them to stick around are saying they're using 
 > them just on the off chance they might use them, which feels like a poor 
 > reason to keep a bunch of dead code around.

At least one person says he uses it, although I don't know how that
fits with Robert's statement that "it was never needed".

Steve

From steve.dower at python.org  Wed May  1 12:22:55 2019
From: steve.dower at python.org (Steve Dower)
Date: Wed, 1 May 2019 12:22:55 -0400
Subject: [Python-Dev] Location of CI for Windows Embeddable Distro
In-Reply-To: <CAML1RCC0vw2V_bitZ0rJFc-VzLgZNShe0wNCb4oZSK0gZYVgfA@mail.gmail.com>
References: <CAML1RCC0vw2V_bitZ0rJFc-VzLgZNShe0wNCb4oZSK0gZYVgfA@mail.gmail.com>
Message-ID: <b4196920-94d4-f2de-c444-31d236752a64@python.org>

On 01May2019 1109, Gerald Wiltse wrote:
> I looked through all the windows builders here and could not find any 
> which?generate this package, can anyone tell me where the work happens?  
> I also tried searching looking for scripts and CI files which create the 
> package in all the relevant repos and could not find those either.
> 
> Is this information not public?

It's just not obviously documented (yet). We use the "PC/layout" script 
(run as "python PC/layout -h" to get arguments). You'll want at least 
--preset-embed and either --copy or --zip to specify where the layout is 
created.

> Is it a manual build?

It's semi-automated, but it's only triggered for releases and so it's 
not part of the normal CI configuration.

Hope that helps,
Steve

From solipsis at pitrou.net  Wed May  1 12:36:07 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Wed, 1 May 2019 18:36:07 +0200
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
 <20190501124831.7faadb2b@fsol>
 <CACac1F9OJdkc_v0dQJwBMn_nEMecxkLMXKr9f8efQgF4EN4UjA@mail.gmail.com>
 <d5689034-bce2-9f8c-b53b-01a020565798@withers.org>
 <CACac1F90cVoU7DeSD2QkYTeSD+TLT80EkNoStx0pZZoY0iV4kQ@mail.gmail.com>
 <05ef1790-dc90-f5a6-a25c-9ba5abc66a3a@withers.org>
Message-ID: <20190501183607.12fcdbe9@fsol>

On Wed, 1 May 2019 14:30:01 +0100
Chris Withers <chris at withers.org> wrote:
> 
> > Is it really that difficult to simply tell coverage to ignore them? I
> > thought someone had already pointed to a coveragerc file that let you
> > do this.  
> 
> It would be if the cpython repo had a coveragerc, but it does not.

Well, perhaps that could be added ;-)

Regards

Antoine.



From jerrywiltse at gmail.com  Wed May  1 13:05:36 2019
From: jerrywiltse at gmail.com (Gerald Wiltse)
Date: Wed, 1 May 2019 13:05:36 -0400
Subject: [Python-Dev] Location of CI for Windows Embeddable Distro
In-Reply-To: <b4196920-94d4-f2de-c444-31d236752a64@python.org>
References: <CAML1RCC0vw2V_bitZ0rJFc-VzLgZNShe0wNCb4oZSK0gZYVgfA@mail.gmail.com>
 <b4196920-94d4-f2de-c444-31d236752a64@python.org>
Message-ID: <CAML1RCBGVu-pnzcJ1Czxv_aFAgs+DgfPB9rjtXHsjdnRp=4eOw@mail.gmail.com>

That does help, thanks so much for the fast response!  I now see how it's
executed on Azure pipelines also, so that should be enough for me to
reverse engineer the rest.

Followup questions if you have time:
1. It seems that directory doesn't exist in the 3.6 branches/tags, so it
must have been done a different way back then.  Do you think it's
back-portable to 3.6?
2. One of our objectives is to effectively create a nearly identical
embeddable package for linux. Do you think the layout code is generic
enough to be modified to create a linux equivalent?

Obviously, there are many alternative methods and documents for creating
"embeddable" pythons on linux, but the windows package has all the
characteristics we want, and of course we'd like our Windows and Linux
process build and packaging processes to be as similar as possible, so it
seems attractive to try to port this layout script to linux.


Gerald R. Wiltse
jerrywiltse at gmail.com



On Wed, May 1, 2019 at 12:22 PM Steve Dower <steve.dower at python.org> wrote:

> On 01May2019 1109, Gerald Wiltse wrote:
> > I looked through all the windows builders here and could not find any
> > which generate this package, can anyone tell me where the work happens?
> > I also tried searching looking for scripts and CI files which create the
> > package in all the relevant repos and could not find those either.
> >
> > Is this information not public?
>
> It's just not obviously documented (yet). We use the "PC/layout" script
> (run as "python PC/layout -h" to get arguments). You'll want at least
> --preset-embed and either --copy or --zip to specify where the layout is
> created.
>
> > Is it a manual build?
>
> It's semi-automated, but it's only triggered for releases and so it's
> not part of the normal CI configuration.
>
> Hope that helps,
> Steve
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190501/c831ff35/attachment.html>

From steve.dower at python.org  Wed May  1 13:57:34 2019
From: steve.dower at python.org (Steve Dower)
Date: Wed, 1 May 2019 13:57:34 -0400
Subject: [Python-Dev] Location of CI for Windows Embeddable Distro
In-Reply-To: <CAML1RCBGVu-pnzcJ1Czxv_aFAgs+DgfPB9rjtXHsjdnRp=4eOw@mail.gmail.com>
References: <CAML1RCC0vw2V_bitZ0rJFc-VzLgZNShe0wNCb4oZSK0gZYVgfA@mail.gmail.com>
 <b4196920-94d4-f2de-c444-31d236752a64@python.org>
 <CAML1RCBGVu-pnzcJ1Czxv_aFAgs+DgfPB9rjtXHsjdnRp=4eOw@mail.gmail.com>
Message-ID: <a94aff02-6bdd-9147-8c15-c04c4e244825@python.org>

On 01May2019 1305, Gerald Wiltse wrote:
> That does help, thanks so much for the fast response!? I now see how 
> it's executed on Azure pipelines also, so that should be enough for me 
> to reverse engineer the rest.
> 
> Followup questions if you have time:
> 1. It seems that directory doesn't exist in the 3.6 branches/tags, so it 
> must have been done a different way back then.? Do you think it's 
> back-portable to 3.6?

Yep, it should work with 3.6. There were scripts under Tools/msi back 
then that did the same thing, but with the Store app I rewrote it to be 
more flexible.

> 2. One of our objectives is to effectively create a nearly identical 
> embeddable package for linux. Do you think the layout code is generic 
> enough to be modified to create a linux equivalent?

Probably not, it's under the "PC" directory because it is entirely 
CPython specific.

I'd love to be able to have a similar embeddable distro for Linux (and 
macOS), and I'll be investing some of my time in working towards this, 
but it's far more complicated than simply laying out the right files. If 
you're interested in helping with this, then we're in the right place to 
discuss it, but we'll likely have to move to the issue tracker at some 
point once we figure out who else wants/needs to be involved.

> Obviously, there are many alternative methods and documents for creating 
> "embeddable" pythons on linux, but the windows package has all the 
> characteristics we want, and of course we'd like our Windows and Linux 
> process build and packaging processes to be as similar as possible, so 
> it seems attractive to try to port this layout script to linux.

"make install" already does the same thing, but the install location 
matters at build time, so it's a little more complex to make it work as 
an embedded runtime. I'm sure there are people who know how to make it 
work though.

Cheers,
Steve

From chris at withers.org  Wed May  1 14:13:51 2019
From: chris at withers.org (Chris Withers)
Date: Wed, 1 May 2019 19:13:51 +0100
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
In-Reply-To: <23753.50345.124026.479885@turnbull.sk.tsukuba.ac.jp>
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
 <20190501124831.7faadb2b@fsol>
 <CACac1F9OJdkc_v0dQJwBMn_nEMecxkLMXKr9f8efQgF4EN4UjA@mail.gmail.com>
 <d5689034-bce2-9f8c-b53b-01a020565798@withers.org>
 <23753.50345.124026.479885@turnbull.sk.tsukuba.ac.jp>
Message-ID: <d57265cb-55f0-34df-dbe9-01e593ff250c@withers.org>

On 01/05/2019 17:09, Stephen J. Turnbull wrote:
> Executive summary:
> 
> "There should be a tool" (sorry, I'm not volunteering any time soon)
> that could be added to $VCS diff (say, "git coverage-diff" or "git
> diff --coverage").

That sounds like a very hard problem to solve...

>   > If people are actually using these blocks, then so be it, but it feels
>   > like the people who want them to stick around are saying they're using
>   > them just on the off chance they might use them, which feels like a poor
>   > reason to keep a bunch of dead code around.
> 
> At least one person says he uses it, although I don't know how that
> fits with Robert's statement that "it was never needed".

Right, but the more we discuss this, the stronger my feeling that these 
should be removed everywhere, rather than just the few in 
unittest.test.test_mock that I intend to remove.

Running:

./python some/package/test_whatever.py

...sets up a fundamentally hostile sys.path. As Karthikeyan highlighted, 
in https://bugs.python.org/issue29512 this resulted in a year's mucking 
around on a new tool that was added, and resulted in that tool getting a 
slightly more clumsy name.

Running:

./python -m unittest some.package.test_whatever

...uses exactly the same runner, just without the unfortunate sys.path 
addition.

I thought https://www.python.org/dev/peps/pep-0582/ had something about 
no longer add '.' to sys.path, but looks like I was mistaken.

Chris

From tir.karthi at gmail.com  Wed May  1 15:00:13 2019
From: tir.karthi at gmail.com (Karthikeyan)
Date: Thu, 2 May 2019 00:30:13 +0530
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
In-Reply-To: <d57265cb-55f0-34df-dbe9-01e593ff250c@withers.org>
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
 <20190501124831.7faadb2b@fsol>
 <CACac1F9OJdkc_v0dQJwBMn_nEMecxkLMXKr9f8efQgF4EN4UjA@mail.gmail.com>
 <d5689034-bce2-9f8c-b53b-01a020565798@withers.org>
 <23753.50345.124026.479885@turnbull.sk.tsukuba.ac.jp>
 <d57265cb-55f0-34df-dbe9-01e593ff250c@withers.org>
Message-ID: <CAAjsFLQaUAfonbm=Ds5FrE_eoj5JbJJbVRJ6amwfdhruUKUAkA@mail.gmail.com>

> I thought https://www.python.org/dev/peps/pep-0582/ had something about
> no longer add '.' to sys.path, but looks like I was mistaken.
>

It was discussed [0] in the past with respect to security since Perl did a
similar change and PEP 432 is also mentioned in the thread. [1]

[0] https://mail.python.org/pipermail/python-ideas/2017-June/045842.html
[1] https://mail.python.org/pipermail/python-ideas/2017-June/045849.html

-- 
Regards,
Karthikeyan S
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190502/b9b9d08a/attachment.html>

From jerrywiltse at gmail.com  Wed May  1 14:47:23 2019
From: jerrywiltse at gmail.com (Gerald Wiltse)
Date: Wed, 1 May 2019 14:47:23 -0400
Subject: [Python-Dev] Location of CI for Windows Embeddable Distro
In-Reply-To: <a94aff02-6bdd-9147-8c15-c04c4e244825@python.org>
References: <CAML1RCC0vw2V_bitZ0rJFc-VzLgZNShe0wNCb4oZSK0gZYVgfA@mail.gmail.com>
 <b4196920-94d4-f2de-c444-31d236752a64@python.org>
 <CAML1RCBGVu-pnzcJ1Czxv_aFAgs+DgfPB9rjtXHsjdnRp=4eOw@mail.gmail.com>
 <a94aff02-6bdd-9147-8c15-c04c4e244825@python.org>
Message-ID: <CAML1RCDn8r_gLgAg7ZiVLn_mNvcpp4=NoyGc102dY3_HByE6aw@mail.gmail.com>

Yes, I'll help with this, and I try to get signed up with an account for
the issue tracker ASAP.

I've just started trying to build create the embeddable package for windows
locally (all from source).  Once I have that automated, I'll take a naive
stab at the Linux layout.  I'm sure i'll soon hit the additional
complications you're talking about and come back to you with questions.

Gerald R. Wiltse
jerrywiltse at gmail.com



On Wed, May 1, 2019 at 1:57 PM Steve Dower <steve.dower at python.org> wrote:

> On 01May2019 1305, Gerald Wiltse wrote:
> > That does help, thanks so much for the fast response!  I now see how
> > it's executed on Azure pipelines also, so that should be enough for me
> > to reverse engineer the rest.
> >
> > Followup questions if you have time:
> > 1. It seems that directory doesn't exist in the 3.6 branches/tags, so it
> > must have been done a different way back then.  Do you think it's
> > back-portable to 3.6?
>
> Yep, it should work with 3.6. There were scripts under Tools/msi back
> then that did the same thing, but with the Store app I rewrote it to be
> more flexible.
>
> > 2. One of our objectives is to effectively create a nearly identical
> > embeddable package for linux. Do you think the layout code is generic
> > enough to be modified to create a linux equivalent?
>
> Probably not, it's under the "PC" directory because it is entirely
> CPython specific.
>
> I'd love to be able to have a similar embeddable distro for Linux (and
> macOS), and I'll be investing some of my time in working towards this,
> but it's far more complicated than simply laying out the right files. If
> you're interested in helping with this, then we're in the right place to
> discuss it, but we'll likely have to move to the issue tracker at some
> point once we figure out who else wants/needs to be involved.
>
> > Obviously, there are many alternative methods and documents for creating
> > "embeddable" pythons on linux, but the windows package has all the
> > characteristics we want, and of course we'd like our Windows and Linux
> > process build and packaging processes to be as similar as possible, so
> > it seems attractive to try to port this layout script to linux.
>
> "make install" already does the same thing, but the install location
> matters at build time, so it's a little more complex to make it work as
> an embedded runtime. I'm sure there are people who know how to make it
> work though.
>
> Cheers,
> Steve
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190501/20e55a46/attachment.html>

From ncoghlan at gmail.com  Wed May  1 15:49:24 2019
From: ncoghlan at gmail.com (Nick Coghlan)
Date: Wed, 1 May 2019 12:49:24 -0700
Subject: [Python-Dev] PEP 574 ready for review
In-Reply-To: <20190430101428.204457e6@fsol>
References: <20190430101428.204457e6@fsol>
Message-ID: <CADiSq7c-eWwtkZ3RYW0eVAvzWMBpMKWY4bioXaXkVy+1nJwfVQ@mail.gmail.com>

Thanks Antoine.

As BDFL-Delegate I'm happy with this version of the PEP, so it's my
pleasure to accept it for inclusion in Python 3.8.

Regards,
Nick.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190501/459f8393/attachment-0001.html>

From turnbull.stephen.fw at u.tsukuba.ac.jp  Wed May  1 16:21:56 2019
From: turnbull.stephen.fw at u.tsukuba.ac.jp (Stephen J. Turnbull)
Date: Thu, 2 May 2019 05:21:56 +0900
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
In-Reply-To: <d57265cb-55f0-34df-dbe9-01e593ff250c@withers.org>
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
 <20190501124831.7faadb2b@fsol>
 <CACac1F9OJdkc_v0dQJwBMn_nEMecxkLMXKr9f8efQgF4EN4UjA@mail.gmail.com>
 <d5689034-bce2-9f8c-b53b-01a020565798@withers.org>
 <23753.50345.124026.479885@turnbull.sk.tsukuba.ac.jp>
 <d57265cb-55f0-34df-dbe9-01e593ff250c@withers.org>
Message-ID: <23753.65508.650064.941497@turnbull.sk.tsukuba.ac.jp>

Chris Withers writes:
 > On 01/05/2019 17:09, Stephen J. Turnbull wrote:
 > > Executive summary:
 > > 
 > > "There should be a tool" (sorry, I'm not volunteering any time soon)
 > > that could be added to $VCS diff (say, "git coverage-diff" or "git
 > > diff --coverage").
 > 
 > That sounds like a very hard problem to solve...

I would say "compute-intensive" and "refactor-discouraging".
Presumably a detailed coverage report would identify missing coverage
by unit (line, function, branch), and if there was a canonical
ordering on units those reports could be text diffed.  Of course most
refactorings will break that -- maybe that would be useless, but most
refactorings will break any diff and we still manage to find them
useful.  I don't know enough to guess: such considerations are why I'm
explicitly refusing to volunteer....

 > Right, but the more we discuss this, the stronger my feeling that
 > these should be removed everywhere, rather than just the few in
 > unittest.test.test_mock that I intend to remove.

I personally don't have a problem with that proposal or "Chris's
feeling as sufficient condition" in practice, as I don't run tests
that way (they frequently don't have an appropriate script interface,
so I never developed the habit).  My point was more that different
people have different feelings about this, and there's some "talking
past" going on because the concrete basis for those increasingly
strong feelings on both sides seems to mostly be "I haven't heard any
concrete reasons to change my mind (and likely more important, my way
of doing things) so my original reasons carry the issue".

Steve


From tjreedy at udel.edu  Wed May  1 17:12:42 2019
From: tjreedy at udel.edu (Terry Reedy)
Date: Wed, 1 May 2019 17:12:42 -0400
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
In-Reply-To: <05ef1790-dc90-f5a6-a25c-9ba5abc66a3a@withers.org>
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
 <20190501124831.7faadb2b@fsol>
 <CACac1F9OJdkc_v0dQJwBMn_nEMecxkLMXKr9f8efQgF4EN4UjA@mail.gmail.com>
 <d5689034-bce2-9f8c-b53b-01a020565798@withers.org>
 <CACac1F90cVoU7DeSD2QkYTeSD+TLT80EkNoStx0pZZoY0iV4kQ@mail.gmail.com>
 <05ef1790-dc90-f5a6-a25c-9ba5abc66a3a@withers.org>
Message-ID: <qad24b$3mhr$1@blaine.gmane.org>

On 5/1/2019 9:30 AM, Chris Withers wrote:

> Agreed, but my focus here is to get to 100% for mock so that it's clear 
> that all the code is there for a reason; mock is very complicated by 
> necessity, and having examples of why code needs to be there is what I'm 
> aiming for most of all.

I agree that complete 100.000% test coverage is a nice ideal, but 
sometimes the last percent can take hours to accomplish, if it is indeed 
sensibly possible.  (If mock has no OS dependencies, then it may be for 
mock.)  It is up to the individual developer to decide what is the 
priority to spend development time on.

>> Is it really that difficult to simply tell coverage to ignore them? I
>> thought someone had already pointed to a coveragerc file that let you
>> do this.
> 
> It would be if the cpython repo had a coveragerc, but it does not.

I have asked more that once what .coveragerc file is being used by CI 
and whether we can somehow properly customize it for CPython.  I have 
not gotten an answer.

The devguide chapter (5) on coverage is deficient in not even mentioning 
customization.

> People maintaining their own ad-hoc coverage configs seems like a pretty 
> bad idea.

I would prefer not having to do that.  But it is better than always 
getting bogus numbers.  At least *I* can determine the real single-file 
test coverage for idlelib files (on Windows), even if the public 
coverage reports are misleading.  Unless I forget, I record it on the 
first line of text_xxx files.

> Right, that's by gut feeling here: I don't want people encountering this 
> mock codebase to have to wonder whether they should be running the tests 
> using these blocks versus the way described in the dev guide,

The devguide describes the dependable but clumsy way to run tests from a 
command line.  In my opinion, it is the worst way when one is editing a 
particular file. It is *much* easier to hit one key (F5 in IDLE) in an 
editor than to switch to a terminal window and type something like

   > python -m unittest idlelib.idle_test.test_configdialog

It is much better to have a SyntaxError marked in the editor than 
displayed in a terminal or shell.  Live tracebacks in an IDE, that can 
jump to exception locations in an editor are better than a dead 
traceback in a terminal window.

With IDLE there is also the issue that automated unittests cannot 
completely replace human action and judgment.  However, displaying 
isolated dialogs for human interaction can be automated.  The 'if main' 
blocks for dialog modules do so.  For example, for configdialog:

if __name__ == '__main__':
     from unittest import main
     main('idlelib.idle_test.test_configdialog', verbosity=2, exit=False)

     from idlelib.idle_test.htest import run
     run(ConfigDialog)

One can either close the box or check the visual appearance and live 
behavior of the dialog.  In this case, running the class is sufficient. 
For other modules, additional setup code is needed, which should be 
excluded from coverage.

> and stressing about what the differences might be, when there aren't any...

Unittest users should know that it has both code and command line APIs.
The devguide should mention running tests from code with main or refer 
to the appropriate section of the unittest doc.  It should at least 
document the use of

if __name__ == '__main__':
     unittest.main(verbosity=2)

in test_xxx modules.


-- 
Terry Jan Reedy


From jerrywiltse at gmail.com  Thu May  2 11:24:37 2019
From: jerrywiltse at gmail.com (Gerald Wiltse)
Date: Thu, 2 May 2019 11:24:37 -0400
Subject: [Python-Dev] Location of CI for Windows Embeddable Distro
In-Reply-To: <CAML1RCDn8r_gLgAg7ZiVLn_mNvcpp4=NoyGc102dY3_HByE6aw@mail.gmail.com>
References: <CAML1RCC0vw2V_bitZ0rJFc-VzLgZNShe0wNCb4oZSK0gZYVgfA@mail.gmail.com>
 <b4196920-94d4-f2de-c444-31d236752a64@python.org>
 <CAML1RCBGVu-pnzcJ1Czxv_aFAgs+DgfPB9rjtXHsjdnRp=4eOw@mail.gmail.com>
 <a94aff02-6bdd-9147-8c15-c04c4e244825@python.org>
 <CAML1RCDn8r_gLgAg7ZiVLn_mNvcpp4=NoyGc102dY3_HByE6aw@mail.gmail.com>
Message-ID: <CAML1RCDM4hM1TxTB5CMhCh4Kzd-mv9jNLfL2a1yUbH07j7-euA@mail.gmail.com>

I've successfully automated the build of the embedded zip on Windows for
3.6 on my internal CI using tools/msi script.

Moving onto linux, can you please summarize the primary
challenges/differences for creating the embeddable zip for linux?

Gerald R. Wiltse
jerrywiltse at gmail.com



On Wed, May 1, 2019 at 2:47 PM Gerald Wiltse <jerrywiltse at gmail.com> wrote:

> Yes, I'll help with this, and I try to get signed up with an account for
> the issue tracker ASAP.
>
> I've just started trying to build create the embeddable package for
> windows locally (all from source).  Once I have that automated, I'll take a
> naive stab at the Linux layout.  I'm sure i'll soon hit the additional
> complications you're talking about and come back to you with questions.
>
> Gerald R. Wiltse
> jerrywiltse at gmail.com
>
>
>
> On Wed, May 1, 2019 at 1:57 PM Steve Dower <steve.dower at python.org> wrote:
>
>> On 01May2019 1305, Gerald Wiltse wrote:
>> > That does help, thanks so much for the fast response!  I now see how
>> > it's executed on Azure pipelines also, so that should be enough for me
>> > to reverse engineer the rest.
>> >
>> > Followup questions if you have time:
>> > 1. It seems that directory doesn't exist in the 3.6 branches/tags, so
>> it
>> > must have been done a different way back then.  Do you think it's
>> > back-portable to 3.6?
>>
>> Yep, it should work with 3.6. There were scripts under Tools/msi back
>> then that did the same thing, but with the Store app I rewrote it to be
>> more flexible.
>>
>> > 2. One of our objectives is to effectively create a nearly identical
>> > embeddable package for linux. Do you think the layout code is generic
>> > enough to be modified to create a linux equivalent?
>>
>> Probably not, it's under the "PC" directory because it is entirely
>> CPython specific.
>>
>> I'd love to be able to have a similar embeddable distro for Linux (and
>> macOS), and I'll be investing some of my time in working towards this,
>> but it's far more complicated than simply laying out the right files. If
>> you're interested in helping with this, then we're in the right place to
>> discuss it, but we'll likely have to move to the issue tracker at some
>> point once we figure out who else wants/needs to be involved.
>>
>> > Obviously, there are many alternative methods and documents for
>> creating
>> > "embeddable" pythons on linux, but the windows package has all the
>> > characteristics we want, and of course we'd like our Windows and Linux
>> > process build and packaging processes to be as similar as possible, so
>> > it seems attractive to try to port this layout script to linux.
>>
>> "make install" already does the same thing, but the install location
>> matters at build time, so it's a little more complex to make it work as
>> an embedded runtime. I'm sure there are people who know how to make it
>> work though.
>>
>> Cheers,
>> Steve
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190502/00974dc5/attachment.html>

From mcepl at cepl.eu  Thu May  2 12:24:28 2019
From: mcepl at cepl.eu (=?UTF-8?Q?Mat=C4=9Bj?= Cepl)
Date: Thu, 02 May 2019 18:24:28 +0200
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
 <qabfcq$4dkk$1@blaine.gmane.org>
Message-ID: <slrnqcm6ds.846.mcepl@milic.suse.cz>

On 2019-05-01, 06:46 GMT, Serhiy Storchaka wrote:
> These lines were added for purpose. They are needed for 
> running tests in separate file as a script.
>
> $ ./python Lib/unittest/test/testmock/testcallable.py -v
> test_attributes (__main__.TestCallable) ... ok

Isn't the standard way how to run one module just?

    $ ./python -mtest -v testmock.testcallable

Best,

Mat?j
-- 
https://matej.ceplovi.cz/blog/, Jabber: mcepl at ceplovi.cz
GPG Finger: 3C76 A027 CA45 AD70 98B5  BC1D 7920 5802 880B C9D8
 
As long as we are thinking of natural values we must say that the
sun looks down on nothing half so good as a household laughing
together over a meal, or two friends talking over a pint of beer,
or a man alone reading a book that interests him; and that all
economies, politics, laws, armies, and institutions, save insofar
as they prolong and multiply such scenes, are a mere ploughing
the sand and sowing the ocean, a meaningless vanity and vexation
of the spirit. Collective activities are, of course, necessary,
but this is the end to which they are necessary.
  -- C.S. Lewis, ?Membership? in ?The Weight of Glory?


From jerrywiltse at gmail.com  Thu May  2 14:56:19 2019
From: jerrywiltse at gmail.com (Gerald Wiltse)
Date: Thu, 2 May 2019 14:56:19 -0400
Subject: [Python-Dev] Location of CI for Windows Embeddable Distro
In-Reply-To: <CAML1RCDM4hM1TxTB5CMhCh4Kzd-mv9jNLfL2a1yUbH07j7-euA@mail.gmail.com>
References: <CAML1RCC0vw2V_bitZ0rJFc-VzLgZNShe0wNCb4oZSK0gZYVgfA@mail.gmail.com>
 <b4196920-94d4-f2de-c444-31d236752a64@python.org>
 <CAML1RCBGVu-pnzcJ1Czxv_aFAgs+DgfPB9rjtXHsjdnRp=4eOw@mail.gmail.com>
 <a94aff02-6bdd-9147-8c15-c04c4e244825@python.org>
 <CAML1RCDn8r_gLgAg7ZiVLn_mNvcpp4=NoyGc102dY3_HByE6aw@mail.gmail.com>
 <CAML1RCDM4hM1TxTB5CMhCh4Kzd-mv9jNLfL2a1yUbH07j7-euA@mail.gmail.com>
Message-ID: <CAML1RCB-LC9xUJu5pJjeRFSgDBSGDrrHWD3u+cT48=dHaqS6eQ@mail.gmail.com>

With minimal patching of tools/msi/make_zip.py, I was able to create an
equivalent zip package on Linux.  It doesn't work out of the box of
course.  I had to do two commands

My biggest concern is that even if the layout is "correct" on linux, the
python runtime might not actually support being run like this on Linux.
Perhaps the code for using python36.zip as a landmark and source of modules
is only implemented on Windows.  Do you know if that is the case?

    tmp$ export LD_LIBRARY_PATH=$(pwd)
    tmp$ export PYTHONHOME=$(pwd)
    tmp$ export PYTHONPATH=$(pwd)
    tmp$ ./python
    Fatal Python error: Py_Initialize: Unable to get the locale encoding
    ModuleNotFoundError: No module named 'encodings'

    Current thread 0x00007fdde9eb1680 (most recent call first):
    Aborted (core dumped)

Here's the full directory structure, error, and patch I created. Any
additional feedback would be great.

https://gist.github.com/solvingj/87305e0f70e14d738d6989ba2f41352f

Gerald R. Wiltse
jerrywiltse at gmail.com



On Thu, May 2, 2019 at 11:24 AM Gerald Wiltse <jerrywiltse at gmail.com> wrote:

> I've successfully automated the build of the embedded zip on Windows for
> 3.6 on my internal CI using tools/msi script.
>
> Moving onto linux, can you please summarize the primary
> challenges/differences for creating the embeddable zip for linux?
>
> Gerald R. Wiltse
> jerrywiltse at gmail.com
>
>
>
> On Wed, May 1, 2019 at 2:47 PM Gerald Wiltse <jerrywiltse at gmail.com>
> wrote:
>
>> Yes, I'll help with this, and I try to get signed up with an account for
>> the issue tracker ASAP.
>>
>> I've just started trying to build create the embeddable package for
>> windows locally (all from source).  Once I have that automated, I'll take a
>> naive stab at the Linux layout.  I'm sure i'll soon hit the additional
>> complications you're talking about and come back to you with questions.
>>
>> Gerald R. Wiltse
>> jerrywiltse at gmail.com
>>
>>
>>
>> On Wed, May 1, 2019 at 1:57 PM Steve Dower <steve.dower at python.org>
>> wrote:
>>
>>> On 01May2019 1305, Gerald Wiltse wrote:
>>> > That does help, thanks so much for the fast response!  I now see how
>>> > it's executed on Azure pipelines also, so that should be enough for me
>>> > to reverse engineer the rest.
>>> >
>>> > Followup questions if you have time:
>>> > 1. It seems that directory doesn't exist in the 3.6 branches/tags, so
>>> it
>>> > must have been done a different way back then.  Do you think it's
>>> > back-portable to 3.6?
>>>
>>> Yep, it should work with 3.6. There were scripts under Tools/msi back
>>> then that did the same thing, but with the Store app I rewrote it to be
>>> more flexible.
>>>
>>> > 2. One of our objectives is to effectively create a nearly identical
>>> > embeddable package for linux. Do you think the layout code is generic
>>> > enough to be modified to create a linux equivalent?
>>>
>>> Probably not, it's under the "PC" directory because it is entirely
>>> CPython specific.
>>>
>>> I'd love to be able to have a similar embeddable distro for Linux (and
>>> macOS), and I'll be investing some of my time in working towards this,
>>> but it's far more complicated than simply laying out the right files. If
>>> you're interested in helping with this, then we're in the right place to
>>> discuss it, but we'll likely have to move to the issue tracker at some
>>> point once we figure out who else wants/needs to be involved.
>>>
>>> > Obviously, there are many alternative methods and documents for
>>> creating
>>> > "embeddable" pythons on linux, but the windows package has all the
>>> > characteristics we want, and of course we'd like our Windows and Linux
>>> > process build and packaging processes to be as similar as possible, so
>>> > it seems attractive to try to port this layout script to linux.
>>>
>>> "make install" already does the same thing, but the install location
>>> matters at build time, so it's a little more complex to make it work as
>>> an embedded runtime. I'm sure there are people who know how to make it
>>> work though.
>>>
>>> Cheers,
>>> Steve
>>>
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190502/3f755990/attachment.html>

From vstinner at redhat.com  Thu May  2 15:59:02 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Thu, 2 May 2019 15:59:02 -0400
Subject: [Python-Dev] RFC: PEP 587 "Python Initialization Configuration":
 2nd version
Message-ID: <CA+3bQGF7XbUT1WfO3KB+9Xa-si30ozQY6h0J2bBqpi6rj-XG9g@mail.gmail.com>

Hi,

Thanks to Steve Dower's feedback, I enhanced and completed my PEP 587.
Main changes:

* It is now possible to read the configuration and then modify the
read configuration. For example, new directories can be added to
PyConfig.module_search_paths (see the example below and the example in
the PEP)
* PyConfig is now "dynamic" by default: strings are duplicated and
PyConfig_Clear() must be called to release memory
* PyConfig now only uses wchar_t* for strings (unicode): char* (bytes)
is no longer used. I had to hack CPython internals for that :-)
* I added a "_config_version" private field to PyPreConfig and
PyConfig to prepare the backward compatibility for future changes.
* I removed the Open Question section: all known issues have been fixed.

During the Language Summit, Brett Cannon said that Steve Dower
declined the offer to be the BDFL-delegate for this PEP. Thomas
Wouters proposed himself to be the new BDFL-delegate.

Example to read the configuration, append a directory to sys.path
(module_search_paths) and then initialize Python with this
configuration:

    void init_python(void)
    {
        PyInitError err;
        PyConfig config = PyConfig_INIT;

        err = PyConfig_Read(&config);
        if (_Py_INIT_FAILED(err)) {
            goto fail;
        }

        err = PyWideStringList_Append(&config.module_search_paths,
                                      L"/path/to/more/modules");
        if (_Py_INIT_FAILED(err)) {
            goto fail;
        }

        err = Py_InitializeFromConfig(&config);
        if (_Py_INIT_FAILED(err)) {
            goto fail;
        }

        PyConfig_Clear(&config);
        return;

    fail:
        PyConfig_Clear(&config);
        Py_ExitInitError(err);
    }

The HTML version will be online shortly:
https://www.python.org/dev/peps/pep-0587/

Full text below.

Victor


PEP: 587
Title: Python Initialization Configuration
Author: Nick Coghlan <ncoghlan at gmail.com>, Victor Stinner <vstinner at redhat.com>
Discussions-To: python-dev at python.org
Status: Draft
Type: Standards Track
Content-Type: text/x-rst
Created: 27-Mar-2019
Python-Version: 3.8

Abstract
========

Add a new C API to configure the Python Initialization providing finer
control on the whole configuration and better error reporting.


Rationale
=========

Python is highly configurable but its configuration evolved organically:
configuration parameters is scattered all around the code using
different ways to set them (mostly global configuration variables and
functions).  A straightforward and reliable way to configure Python is
needed. Some configuration parameters are not accessible from the C API,
or not easily.

The C API of Python 3.7 Initialization takes ``wchar_t*`` strings as
input whereas the Python filesystem encoding is set during the
initialization.

This PEP is a partial implementation of PEP 432 which is the overall
design.  New fields can be added later to ``PyConfig`` structure to
finish the implementation of the PEP 432 (add a new partial
initialization which allows to configure Python using Python objects to
finish the full initialization).


Python Initialization C API
===========================

This PEP proposes to add the following new structures, functions and
macros.

New structures (4):

* ``PyConfig``
* ``PyInitError``
* ``PyPreConfig``
* ``PyWideStringList``

New functions (16):

* ``Py_PreInitialize(config)``
* ``Py_PreInitializeFromArgs(config, argc, argv)``
* ``Py_PreInitializeFromWideArgs(config, argc, argv)``
* ``PyWideStringList_Append(list, item)``
* ``PyConfig_DecodeLocale(config_str, str)``
* ``PyConfig_SetString(config_str, str)``
* ``PyConfig_Read(config)``
* ``PyConfig_SetArgv(config, argc, argv)``
* ``PyConfig_SetWideArgv(config, argc, argv)``
* ``PyConfig_Clear(config)``
* ``Py_InitializeFromConfig(config)``
* ``Py_InitializeFromArgs(config, argc, argv)``
* ``Py_InitializeFromWideArgs(config, argc, argv)``
* ``Py_UnixMain(argc, argv)``
* ``Py_ExitInitError(err)``
* ``Py_RunMain()``

New macros (9):

* ``PyPreConfig_INIT``
* ``PyConfig_INIT``
* ``Py_INIT_OK()``
* ``Py_INIT_ERR(MSG)``
* ``Py_INIT_NO_MEMORY()``
* ``Py_INIT_EXIT(EXITCODE)``
* ``Py_INIT_IS_ERROR(err)``
* ``Py_INIT_IS_EXIT(err)``
* ``Py_INIT_FAILED(err)``

This PEP also adds ``_PyRuntimeState.preconfig`` (``PyPreConfig`` type)
and ``PyInterpreterState.config`` (``PyConfig`` type) fields to these
internal structures. ``PyInterpreterState.config`` becomes the new
reference configuration, replacing global configuration variables and
other private variables.


PyWideStringList
----------------

``PyWideStringList`` is a list of ``wchar_t*`` strings.

Example to initialize a string from C static array::

    static wchar_t* argv[2] = {
        L"-c",
        L"pass",
    };
    PyWideStringList config_argv = PyWideStringList_INIT;
    config_argv.length = Py_ARRAY_LENGTH(argv);
    config_argv.items = argv;

``PyWideStringList`` structure fields:

* ``length`` (``Py_ssize_t``)
* ``items`` (``wchar_t**``)

Methods:

* ``PyInitError PyWideStringList_Append(PyWideStringList *list, const
wchar_t *item)``:
  Append *item* to *list*.

If *length* is non-zero, *items* must be non-NULL and all strings must
be non-NULL.

PyInitError
-----------

``PyInitError`` is a structure to store an error message or an exit code
for the Python Initialization. For an error, it stores the C function
name which created the error.

Example::

    PyInitError alloc(void **ptr, size_t size)
    {
        *ptr = PyMem_RawMalloc(size);
        if (*ptr == NULL) {
            return Py_INIT_NO_MEMORY();
        }
        return Py_INIT_OK();
    }

    int main(int argc, char **argv)
    {
        void *ptr;
        PyInitError err = alloc(&ptr, 16);
        if (Py_INIT_FAILED(err)) {
            Py_ExitInitError(err);
        }
        PyMem_Free(ptr);
        return 0;
    }

``PyInitError`` fields:

* ``exitcode`` (``int``):
  argument passed to ``exit()`` on Unix and to ``ExitProcess()`` on
  Windows. Only set by ``Py_INIT_EXIT()``.
* ``err_msg`` (``const char*``): error message
* private ``_func`` field: used by ``Py_INIT_ERR()`` to store the C
  function name which created the error.
* private ``_type`` field: for internal usage only.

Macro to create an error:

* ``Py_INIT_OK()``: success
* ``Py_INIT_ERR(err_msg)``: initialization error with a message
* ``Py_INIT_NO_MEMORY()``: memory allocation failure (out of memory)
* ``Py_INIT_EXIT(exitcode)``: exit Python with the specified exit code

Other macros and functions:

* ``Py_INIT_IS_ERROR(err)``: Is the result an error?
* ``Py_INIT_IS_EXIT(err)``: Is the result an exit?
* ``Py_INIT_FAILED(err)``: Is the result an error or an exit? Similar
  to ``Py_INIT_IS_ERROR(err) || Py_INIT_IS_EXIT(err)``.
* ``Py_ExitInitError(err)``: Call ``exit(exitcode)`` on Unix or
  ``ExitProcess(exitcode)`` if the result is an exit, call
  ``Py_FatalError(err_msg)`` if the result is an error. Must not be
  called if the result is a success.

Pre-Initialization with PyPreConfig
-----------------------------------

``PyPreConfig`` structure is used to pre-initialize Python:

* Set the memory allocator
* Configure the LC_CTYPE locale
* Set the UTF-8 mode

Example using the pre-initialization to enable the UTF-8 Mode::

    PyPreConfig preconfig = PyPreConfig_INIT;
    preconfig.utf8_mode = 1;

    PyInitError err = Py_PreInitialize(&preconfig);
    if (Py_INIT_FAILED(err)) {
        Py_ExitInitError(err);
    }

    /* at this point, Python will speak UTF-8 */

    Py_Initialize();
    /* ... use Python API here ... */
    Py_Finalize();

Functions to pre-initialize Python:

* ``PyInitError Py_PreInitialize(const PyPreConfig *config)``
* ``PyInitError Py_PreInitializeFromArgs(const PyPreConfig *config,
int argc, char **argv)``
* ``PyInitError Py_PreInitializeFromWideArgs(const PyPreConfig
*config, int argc, wchar_t **argv)``

If Python should be pre-initialized explicitly first and then
initialized with command line arguments, it is possible to pass these
command line arguments to the pre-initialization since they impact the
encodings. For example, ``-X utf8`` enables the UTF-8 Mode.

These functions can be called with *config* set to ``NULL``. The caller
is responsible to handle error using ``Py_INIT_FAILED()`` and
``Py_ExitInitError()``.

``PyPreConfig`` fields:

* ``allocator`` (``char*``): name of the memory allocator (ex: ``"malloc"``)
* ``coerce_c_locale_warn`` (``int``): if non-zero, emit a warning if
the C locale
  is coerced.
* ``coerce_c_locale`` (``int``): if equals to 2, coerce the C locale;
if equals to
  1, read the LC_CTYPE to decide if it should be coerced.
* ``dev_mode`` (``int``): see ``PyConfig.dev_mode``
* ``isolated`` (``int``): see ``PyConfig.isolated``
* ``legacy_windows_fs_encoding`` (``int``, Windows only): if non-zero, set the
  Python filesystem encoding to ``"mbcs"``.
* ``use_environment`` (``int``): see ``PyConfig.use_environment``
* ``utf8_mode`` (``int``): if non-zero, enable the UTF-8 mode

There is also a private field which is for internal-usage only:

* ``_config_version`` (``int``): Configuration version, used for ABI
  compatibility

The C locale coercion (PEP 538) and the UTF-8 Mode (PEP 540) are
disabled by default in ``PyPreConfig``. Set ``coerce_c_locale``,
``coerce_c_locale_warn`` and ``utf8_mode`` to ``-1`` to let Python
enable them depending on the user configuration.

Initialization with PyConfig
----------------------------

The ``PyConfig`` structure contains all parameters to configure Python.

Example::

    PyInitError err;
    PyConfig config = PyConfig_INIT;

    err = PyConfig_SetString(&config.program_name, L"my_program");
    if (_Py_INIT_FAILED(err)) {
        Py_ExitInitError(err);
    }

    err = Py_InitializeFromConfig(&config);
    PyConfig_Clear(&config);

    if (Py_INIT_FAILED(err)) {
        Py_ExitInitError(err);
    }

``PyConfig`` methods:

* ``PyInitError PyConfig_SetString(wchar_t **config_str, const wchar_t *str)``:
  Set a config wide string field from *str* (copy the string)
* ``PyInitError PyConfig_DecodeLocale(wchar_t **config_str, const char *str)``:
  Decode *str* using ``Py_DecodeLocale()`` and set the result into
  ``*config_str``. Pre-initialize Python if needed to ensure that
  encodings are properly configured.
* ``PyInitError PyConfig_SetArgv(PyConfig *config, int argc, char **argv)``:
  Set command line arguments (decode bytes). Pre-initialize Python if
  needed to ensure that encodings are properly configured.
* ``PyInitError PyConfig_SetWideArgv(PyConfig *config, int argc,
wchar_t **argv)``:
  Set command line arguments (wide characters).
* ``PyInitError PyConfig_Read(PyConfig *config)``:
  Read all Python configuration
* ``void PyConfig_Clear(PyConfig *config)``:
  Release memory

Functions to initialize Python:

* ``PyInitError Py_InitializeFromConfig(const PyConfig *config)``

These functions can be called with *config* set to ``NULL``. The caller
is responsible to handler error using ``Py_INIT_FAILED()`` and
``Py_ExitInitError()``.

PyConfig fields:

* ``argv`` (``PyWideStringList``): ``sys.argv``
* ``base_exec_prefix`` (``wchar_t*``): ``sys.base_exec_prefix``
* ``base_prefix`` (``wchar_t*``): ``sys.base_prefix``
* ``buffered_stdio`` (``int``): if equals to 0, enable unbuffered mode,
  make stdout and stderr streams to be unbuffered.
* ``bytes_warning`` (``int``): if equals to 1, issue a warning when
  comparing ``bytes`` or ``bytearray`` with ``str``, or comparing
  ``bytes`` with ``int``. If equal or greater to 2, raise a
  ``BytesWarning`` exception.
* ``check_hash_pycs_mode`` (``wchar_t*``): ``--check-hash-based-pycs``
  command line option value (see PEP 552)
* ``dev_mode`` (``int``): Development mode
* ``dll_path`` (``wchar_t*``, Windows only): Windows DLL path
* ``dump_refs`` (``int``): if non-zero, display all objects still alive
  at exit
* ``exec_prefix`` (``wchar_t*``): ``sys.exec_prefix``
* ``executable`` (``wchar_t*``): ``sys.executable``
* ``faulthandler`` (``int``): if non-zero, call
  ``faulthandler.enable()``
* ``filesystem_encoding`` (``wchar_t*``): Filesystem encoding,
  ``sys.getfilesystemencoding()``
* ``filesystem_errors`` (``wchar_t*``): Filesystem encoding errors,
  ``sys.getfilesystemencodeerrors()``
* ``use_hash_seed`` (``int``), ``hash_seed`` (``unsigned long``):
  randomized hash function seed
* ``home`` (``wchar_t*``): Python home
* ``import_time`` (``int``): if non-zero, profile import time
* ``inspect`` (``int``): enter interactive mode after executing a script or a
  command
* ``install_signal_handlers`` (``int``): install signal handlers?
* ``interactive`` (``int``): interactive mode
* ``legacy_windows_stdio`` (``int``, Windows only): if non-zero, use
  ``io.FileIO`` instead of ``WindowsConsoleIO`` for ``sys.stdin``,
  ``sys.stdout`` and ``sys.stderr``.
* ``malloc_stats`` (``int``): if non-zero, dump memory allocation
  statistics at exit
* ``module_search_path_env`` (``wchar_t*``): ``PYTHONPATH``
environment variale value
* ``use_module_search_paths`` (``int``), ``module_search_paths``
  (``PyWideStringList``): ``sys.path``
* ``optimization_level`` (``int``): compilation optimization level
* ``parser_debug`` (``int``): if non-zero, turn on parser debugging output (for
  expert only, depending on compilation options).
* ``prefix`` (``wchar_t*``): ``sys.prefix``
* ``program_name`` (``wchar_t*``): Program name
* ``program`` (``wchar_t*``): ``argv[0]`` or an empty string
* ``pycache_prefix`` (``wchar_t*``): ``.pyc`` cache prefix
* ``quiet`` (``int``): quiet mode (ex: don't display the copyright and version
  messages even in interactive mode)
* ``run_command`` (``wchar_t*``): ``-c COMMAND`` argument
* ``run_filename`` (``wchar_t*``): ``python3 SCRIPT`` argument
* ``run_module`` (``wchar_t*``): ``python3 -m MODULE`` argument
* ``show_alloc_count`` (``int``): show allocation counts at exit?
* ``show_ref_count`` (``int``): show total reference count at exit?
* ``site_import`` (``int``): import the ``site`` module at startup?
* ``skip_source_first_line`` (``int``): skip the first line of the source
* ``stdio_encoding`` (``wchar_t*``), ``stdio_errors`` (``wchar_t*``):
encoding and encoding errors of
  ``sys.stdin``, ``sys.stdout`` and ``sys.stderr``
* ``tracemalloc`` (``int``): if non-zero, call
  ``tracemalloc.start(value)``
* ``user_site_directory`` (``int``): if non-zero, add user site directory to
  ``sys.path``
* ``verbose`` (``int``): if non-zero, enable verbose mode
* ``warnoptions`` (``PyWideStringList``): options of the ``warnings``
module to build filters
* ``write_bytecode`` (``int``): if non-zero, write ``.pyc`` files
* ``xoptions`` (``PyWideStringList``): ``sys._xoptions``

There are also private fields which are for internal-usage only:

* ``_config_version`` (``int``): Configuration version, used for ABI
  compatibility
* ``_frozen`` (``int``): Emit warning when computing the path
  configuration?
* ``_install_importlib`` (``int``): Install importlib?

More complete commented example modifying the configuration before
calling ``PyConfig_Read()`` and then modify the read configuration::

    PyInitError init_python(const char *program_name)
    {
        PyInitError err;
        PyConfig config = PyConfig_INIT;

        /* Set the program name before reading the configuraton
           (decode byte string from the locale encoding) */
        err = PyConfig_DecodeLocale(&config.program_name,
                                    program_name);
        if (_Py_INIT_FAILED(err)) {
            goto fail;
        }

        /* Read all configuration at once */
        err = PyConfig_Read(&config);
        if (_Py_INIT_FAILED(err)) {
            goto fail;
        }

        /* Append our custom search path to sys.path */
        err = PyWideStringList_Append(&config.module_search_paths,
                                      L"/path/to/more/modules");
        if (_Py_INIT_FAILED(err)) {
            goto fail;
        }

        /* Override executable computed by PyConfig_Read() */
        err = PyConfig_SetString(&config.executable, L"my_executable");
        if (_Py_INIT_FAILED(err)) {
            goto fail;
        }

        err = Py_InitializeFromConfig(&config);

        /* Py_InitializeFromConfig() copied config which must now be
           cleared to release memory */
        PyConfig_Clear(&config);

        return err;

    fail:
        PyConfig_Clear(&config);
        Py_ExitInitError(err);
    }

.. note::
   ``PyConfig`` does not have any field for extra inittab functions:
   ``PyImport_AppendInittab()`` and ``PyImport_ExtendInittab()``
   functions are still relevant.


Initialization with static PyConfig
-----------------------------------

When no ``PyConfig`` method is used but only
``Py_InitializeFromConfig()``, the caller is responsible for managing
``PyConfig`` memory which means that static strings and static string
lists can be used rather than using dynamically allocated memory.  It
can be used for most simple configurations.

Example of Python initialization enabling the isolated mode::

    PyConfig config = PyConfig_INIT;
    config.isolated = 1;

    PyInitError err = Py_InitializeFromConfig(&config);
    if (Py_INIT_FAILED(err)) {
        Py_ExitInitError(err);
    }
    /* ... use Python API here ... */
    Py_Finalize();

In this example, ``PyConfig_Clear()`` is not needed since ``config``
does not contain any dynamically allocated string:
``Py_InitializeFromConfig`` is responsible for filling other fields
and manage the memory.

For convenience, two other functions are provided:

* ``PyInitError Py_InitializeFromArgs(const PyConfig *config, int
argc, char **argv)``
* ``PyInitError Py_InitializeFromWideArgs(const PyConfig *config, int
argc, wchar_t **argv)``

These functions can be used with static ``PyConfig``.

Pseudo-code of ``Py_InitializeFromArgs()``::

    PyInitError init_with_args(const PyConfig *src_config, int argc,
char **argv)
    {
        PyInitError err;
        PyConfig config = PyConfig_INIT;

        /* Copy strings and string lists
         * (memory dynamically allocated on the heap) */
        err = _PyConfig_Copy(&config, src_config);
        if (Py_INIT_FAILED(err)) {
            goto exit;
        }

        /* Set config.argv: decode argv bytes. Pre-initialize Python
           if needed to ensure that the encodings are properly
           configured. */
        err = PyConfig_SetArgv(&config, argc, argv);
        if (Py_INIT_FAILED(err)) {
            goto exit;
        }

        err = Py_InitializeFromConfig(&config);

    exit:
        PyConfig_Clear(&config);
        return err;
    }

where ``_PyConfig_Copy()`` is an internal function. The actual
implementation of ``Py_InitializeFromArgs()`` is more complex.


Py_UnixMain()
-------------

Python 3.7 provides a high-level ``Py_Main()`` function which requires
to pass command line arguments as ``wchar_t*`` strings. It is
non-trivial to use the correct encoding to decode bytes. Python has its
own set of issues with C locale coercion and UTF-8 Mode.

This PEP adds a new ``Py_UnixMain()`` function which takes command line
arguments as bytes::

    int Py_UnixMain(int argc, char **argv)

Py_RunMain()
------------

The new ``Py_RunMain()`` function executes the command
(``PyConfig.run_command``), the script (``PyConfig.run_filename``) or
the module (``PyConfig.run_module``) specified on the command line or in
the configuration, and then finalizes Python. It returns an exit status
that can be passed to the ``exit()`` function.

Example of custom Python executable always running in isolated mode::

    #include <Python.h>

    int main(int argc, char *argv[])
    {
        PyConfig config = PyConfig_INIT;
        config.isolated = 1;

        PyInitError err = Py_InitializeFromArgs(&config, argc, argv);
        if (Py_INIT_FAILED(err)) {
            Py_ExitInitError(err);
        }

        /* put more configuration code here if needed */

        return Py_RunMain();
    }

The example is a basic implementation of the "System Python Executable"
discussed in PEP 432.


Memory allocations and Py_DecodeLocale()
----------------------------------------

Python memory allocation functions like ``PyMem_RawMalloc()`` must not
be used before Python pre-initialization.  Calling directly ``malloc()``
and ``free()`` is always safe.

For ``PyPreConfig`` and static ``PyConfig``, the caller is responsible
to manage dynamically allocated strings, but static strings and static
string lists are fine.

Dynamic ``PyConfig`` requires to call ``PyConfig_Clear()`` to release
memory.

``Py_DecodeLocale()`` must not be called before the pre-initialization.

When using dynanic configuration, ``PyConfig_DecodeLocale()`` must be
used instead of ``Py_DecodeLocale()``.


Backwards Compatibility
=======================

This PEP only adds a new API: it leaves the existing API unchanged and
has no impact on the backwards compatibility.


Annex: Python Configuration
===========================

Priority and Rules
------------------

Priority of configuration parameters, highest to lowest:

* ``PyConfig``
* ``PyPreConfig``
* Configuration files
* Command line options
* Environment variables
* Global configuration variables

Priority of warning options, highest to lowest:

* ``PyConfig.warnoptions``
* ``PyConfig.dev_mode`` (add ``"default"``)
* ``PYTHONWARNINGS`` environment variables
* ``-W WARNOPTION`` command line argument
* ``PyConfig.bytes_warning`` (add ``"error::BytesWarning"`` if greater
  than 1, or add ``"default::BytesWarning``)

Rules on ``PyConfig`` and ``PyPreConfig`` parameters:

* If ``isolated`` is non-zero, ``use_environment`` and
  ``user_site_directory`` are set to 0
* If ``legacy_windows_fs_encoding`` is non-zero, ``utf8_mode`` is set to
  0
* If ``dev_mode`` is non-zero, ``allocator`` is set to ``"debug"``,
  ``faulthandler`` is set to 1, and ``"default"`` filter is added to
  ``warnoptions``. But ``PYTHONMALLOC`` has the priority over
  ``dev_mode`` to set the memory allocator.

Configuration Files
-------------------

Python configuration files:

* ``pyvenv.cfg``
* ``python._pth`` (Windows only)
* ``pybuilddir.txt`` (Unix only)

Global Configuration Variables
------------------------------

Global configuration variables mapped to ``PyPreConfig`` fields:

========================================  ================================
Variable                                  Field
========================================  ================================
``Py_LegacyWindowsFSEncodingFlag``        ``legacy_windows_fs_encoding``
``Py_LegacyWindowsFSEncodingFlag``        ``legacy_windows_fs_encoding``
``Py_UTF8Mode``                           ``utf8_mode``
``Py_UTF8Mode``                           ``utf8_mode``
========================================  ================================

Global configuration variables mapped to ``PyConfig`` fields:

========================================  ================================
Variable                                  Field
========================================  ================================
``Py_BytesWarningFlag``                   ``bytes_warning``
``Py_DebugFlag``                          ``parser_debug``
``Py_DontWriteBytecodeFlag``              ``write_bytecode``
``Py_FileSystemDefaultEncodeErrors``      ``filesystem_errors``
``Py_FileSystemDefaultEncoding``          ``filesystem_encoding``
``Py_FrozenFlag``                         ``_frozen``
``Py_HasFileSystemDefaultEncoding``       ``filesystem_encoding``
``Py_HashRandomizationFlag``              ``use_hash_seed``, ``hash_seed``
``Py_IgnoreEnvironmentFlag``              ``use_environment``
``Py_InspectFlag``                        ``inspect``
``Py_InteractiveFlag``                    ``interactive``
``Py_IsolatedFlag``                       ``isolated``
``Py_LegacyWindowsStdioFlag``             ``legacy_windows_stdio``
``Py_NoSiteFlag``                         ``site_import``
``Py_NoUserSiteDirectory``                ``user_site_directory``
``Py_OptimizeFlag``                       ``optimization_level``
``Py_QuietFlag``                          ``quiet``
``Py_UnbufferedStdioFlag``                ``buffered_stdio``
``Py_VerboseFlag``                        ``verbose``
``_Py_HasFileSystemDefaultEncodeErrors``  ``filesystem_errors``
``Py_BytesWarningFlag``                   ``bytes_warning``
``Py_DebugFlag``                          ``parser_debug``
``Py_DontWriteBytecodeFlag``              ``write_bytecode``
``Py_FileSystemDefaultEncodeErrors``      ``filesystem_errors``
``Py_FileSystemDefaultEncoding``          ``filesystem_encoding``
``Py_FrozenFlag``                         ``_frozen``
``Py_HasFileSystemDefaultEncoding``       ``filesystem_encoding``
``Py_HashRandomizationFlag``              ``use_hash_seed``, ``hash_seed``
``Py_IgnoreEnvironmentFlag``              ``use_environment``
``Py_InspectFlag``                        ``inspect``
``Py_InteractiveFlag``                    ``interactive``
``Py_IsolatedFlag``                       ``isolated``
``Py_LegacyWindowsStdioFlag``             ``legacy_windows_stdio``
``Py_NoSiteFlag``                         ``site_import``
``Py_NoUserSiteDirectory``                ``user_site_directory``
``Py_OptimizeFlag``                       ``optimization_level``
``Py_QuietFlag``                          ``quiet``
``Py_UnbufferedStdioFlag``                ``buffered_stdio``
``Py_VerboseFlag``                        ``verbose``
``_Py_HasFileSystemDefaultEncodeErrors``  ``filesystem_errors``
========================================  ================================


``Py_LegacyWindowsFSEncodingFlag`` and ``Py_LegacyWindowsStdioFlag`` are
only available on Windows.

Command Line Arguments
----------------------

Usage::

    python3 [options]
    python3 [options] -c COMMAND
    python3 [options] -m MODULE
    python3 [options] SCRIPT


Command line options mapped to pseudo-action on ``PyConfig`` fields:

================================  ================================
Option                            ``PyPreConfig`` field
================================  ================================
``-X dev``                        ``dev_mode = 1``
``-X utf8=N``                     ``utf8_mode = N``
================================  ================================

Command line options mapped to pseudo-action on ``PyConfig`` fields:

================================  ================================
Option                            ``PyConfig`` field
================================  ================================
``-b``                            ``bytes_warning++``
``-B``                            ``write_bytecode = 0``
``-c COMMAND``                    ``run_module = COMMAND``
``--check-hash-based-pycs=MODE``  ``_check_hash_pycs_mode = MODE``
``-d``                            ``parser_debug++``
``-E``                            ``use_environment = 0``
``-i``                            ``inspect++`` and ``interactive++``
``-I``                            ``isolated = 1``
``-m MODULE``                     ``run_module = MODULE``
``-O``                            ``optimization_level++``
``-q``                            ``quiet++``
``-R``                            ``use_hash_seed = 0``
``-s``                            ``user_site_directory = 0``
``-S``                            ``site_import``
``-t``                            ignored (kept for backwards compatibility)
``-u``                            ``buffered_stdio = 0``
``-v``                            ``verbose++``
``-W WARNING``                    add ``WARNING`` to ``warnoptions``
``-x``                            ``skip_source_first_line = 1``
``-X XOPTION``                    add ``XOPTION`` to ``xoptions``
``-X dev``                        ``dev_mode = 1``
``-X faulthandler``               ``faulthandler = 1``
``-X importtime``                 ``import_time = 1``
``-X pycache_prefix=PREFIX``      ``pycache_prefix = PREFIX``
``-X show_alloc_count``           ``show_alloc_count = 1``
``-X show_ref_count``             ``show_ref_count = 1``
``-X tracemalloc=N``              ``tracemalloc = N``
================================  ================================

``-h``, ``-?`` and ``-V`` options are handled outside ``PyConfig``.

Environment Variables
---------------------

Environment variables mapped to ``PyPreConfig`` fields:

=================================  =============================================
Variable                           ``PyPreConfig`` field
=================================  =============================================
``PYTHONCOERCECLOCALE``            ``coerce_c_locale``, ``coerce_c_locale_warn``
``PYTHONDEVMODE``                  ``dev_mode``
``PYTHONLEGACYWINDOWSFSENCODING``  ``legacy_windows_fs_encoding``
``PYTHONMALLOC``                   ``allocator``
``PYTHONUTF8``                     ``utf8_mode``
=================================  =============================================

Environment variables mapped to ``PyConfig`` fields:

=================================  ====================================
Variable                           ``PyConfig`` field
=================================  ====================================
``PYTHONDEBUG``                    ``parser_debug``
``PYTHONDEVMODE``                  ``dev_mode``
``PYTHONDONTWRITEBYTECODE``        ``write_bytecode``
``PYTHONDUMPREFS``                 ``dump_refs``
``PYTHONEXECUTABLE``               ``program_name``
``PYTHONFAULTHANDLER``             ``faulthandler``
``PYTHONHASHSEED``                 ``use_hash_seed``, ``hash_seed``
``PYTHONHOME``                     ``home``
``PYTHONINSPECT``                  ``inspect``
``PYTHONIOENCODING``               ``stdio_encoding``, ``stdio_errors``
``PYTHONLEGACYWINDOWSSTDIO``       ``legacy_windows_stdio``
``PYTHONMALLOCSTATS``              ``malloc_stats``
``PYTHONNOUSERSITE``               ``user_site_directory``
``PYTHONOPTIMIZE``                 ``optimization_level``
``PYTHONPATH``                     ``module_search_path_env``
``PYTHONPROFILEIMPORTTIME``        ``import_time``
``PYTHONPYCACHEPREFIX,``           ``pycache_prefix``
``PYTHONTRACEMALLOC``              ``tracemalloc``
``PYTHONUNBUFFERED``               ``buffered_stdio``
``PYTHONVERBOSE``                  ``verbose``
``PYTHONWARNINGS``                 ``warnoptions``
=================================  ====================================

``PYTHONLEGACYWINDOWSFSENCODING`` and ``PYTHONLEGACYWINDOWSSTDIO`` are
specific to Windows.

``PYTHONDEVMODE`` is mapped to ``PyPreConfig.dev_mode`` and
``PyConfig.dev_mode``.


Annex: Python 3.7 API
=====================

Python 3.7 has 4 functions in its C API to initialize and finalize
Python:

* ``Py_Initialize()``, ``Py_InitializeEx()``: initialize Python
* ``Py_Finalize()``, ``Py_FinalizeEx()``: finalize Python

Python can be configured using scattered global configuration variables
(like ``Py_IgnoreEnvironmentFlag``) and using the following functions:

* ``PyImport_AppendInittab()``
* ``PyImport_ExtendInittab()``
* ``PyMem_SetAllocator()``
* ``PyMem_SetupDebugHooks()``
* ``PyObject_SetArenaAllocator()``
* ``Py_SetPath()``
* ``Py_SetProgramName()``
* ``Py_SetPythonHome()``
* ``Py_SetStandardStreamEncoding()``
* ``PySys_AddWarnOption()``
* ``PySys_AddXOption()``
* ``PySys_ResetWarnOptions()``

There is also a high-level ``Py_Main()`` function.


Copyright
=========

This document has been placed in the public domain.

From edwin at 211mainstreet.net  Thu May  2 16:20:10 2019
From: edwin at 211mainstreet.net (Edwin Zimmerman)
Date: Thu, 2 May 2019 16:20:10 -0400
Subject: [Python-Dev] RFC: PEP 587 "Python Initialization
 Configuration": 2nd version
In-Reply-To: <CA+3bQGF7XbUT1WfO3KB+9Xa-si30ozQY6h0J2bBqpi6rj-XG9g@mail.gmail.com>
References: <CA+3bQGF7XbUT1WfO3KB+9Xa-si30ozQY6h0J2bBqpi6rj-XG9g@mail.gmail.com>
Message-ID: <000001d50124$71ef0d40$55cd27c0$@211mainstreet.net>

On Thursday, May 02, 2019 Victor Stinner <vstinner at redhat.com> wrote:
>

According to this

> * ``run_command`` (``wchar_t*``): ``-c COMMAND`` argument
> * ``run_filename`` (``wchar_t*``): ``python3 SCRIPT`` argument
> * ``run_module`` (``wchar_t*``): ``python3 -m MODULE`` argument


this
> ``-c COMMAND``                    ``run_module = COMMAND``
should read "run_command = COMMAND".  Typo, not?



From jerrywiltse at gmail.com  Thu May  2 16:29:36 2019
From: jerrywiltse at gmail.com (Gerald Wiltse)
Date: Thu, 2 May 2019 16:29:36 -0400
Subject: [Python-Dev] Location of CI for Windows Embeddable Distro
In-Reply-To: <CAML1RCB-LC9xUJu5pJjeRFSgDBSGDrrHWD3u+cT48=dHaqS6eQ@mail.gmail.com>
References: <CAML1RCC0vw2V_bitZ0rJFc-VzLgZNShe0wNCb4oZSK0gZYVgfA@mail.gmail.com>
 <b4196920-94d4-f2de-c444-31d236752a64@python.org>
 <CAML1RCBGVu-pnzcJ1Czxv_aFAgs+DgfPB9rjtXHsjdnRp=4eOw@mail.gmail.com>
 <a94aff02-6bdd-9147-8c15-c04c4e244825@python.org>
 <CAML1RCDn8r_gLgAg7ZiVLn_mNvcpp4=NoyGc102dY3_HByE6aw@mail.gmail.com>
 <CAML1RCDM4hM1TxTB5CMhCh4Kzd-mv9jNLfL2a1yUbH07j7-euA@mail.gmail.com>
 <CAML1RCB-LC9xUJu5pJjeRFSgDBSGDrrHWD3u+cT48=dHaqS6eQ@mail.gmail.com>
Message-ID: <CAML1RCBKW2U+7cUL=aJXZ0Me5XPc0kNXweKG22RYbBSgK0vebg@mail.gmail.com>

Just an update based on testing.  If I zip the modules up into python36.zip
(whether in .py or .pyc form) the linux binary does not find them.  If I
copy them into the embedded root, alongside the python executable, it finds
them as expected.

This just makes it seem more like an issue where Linux binary does not
respect .zip file as a source of modules.

Gerald R. Wiltse
jerrywiltse at gmail.com



On Thu, May 2, 2019 at 2:56 PM Gerald Wiltse <jerrywiltse at gmail.com> wrote:

> With minimal patching of tools/msi/make_zip.py, I was able to create an
> equivalent zip package on Linux.  It doesn't work out of the box of
> course.  I had to do two commands
>
> My biggest concern is that even if the layout is "correct" on linux, the
> python runtime might not actually support being run like this on Linux.
> Perhaps the code for using python36.zip as a landmark and source of modules
> is only implemented on Windows.  Do you know if that is the case?
>
>     tmp$ export LD_LIBRARY_PATH=$(pwd)
>     tmp$ export PYTHONHOME=$(pwd)
>     tmp$ export PYTHONPATH=$(pwd)
>     tmp$ ./python
>     Fatal Python error: Py_Initialize: Unable to get the locale encoding
>     ModuleNotFoundError: No module named 'encodings'
>
>     Current thread 0x00007fdde9eb1680 (most recent call first):
>     Aborted (core dumped)
>
> Here's the full directory structure, error, and patch I created. Any
> additional feedback would be great.
>
> https://gist.github.com/solvingj/87305e0f70e14d738d6989ba2f41352f
>
> Gerald R. Wiltse
> jerrywiltse at gmail.com
>
>
>
> On Thu, May 2, 2019 at 11:24 AM Gerald Wiltse <jerrywiltse at gmail.com>
> wrote:
>
>> I've successfully automated the build of the embedded zip on Windows for
>> 3.6 on my internal CI using tools/msi script.
>>
>> Moving onto linux, can you please summarize the primary
>> challenges/differences for creating the embeddable zip for linux?
>>
>> Gerald R. Wiltse
>> jerrywiltse at gmail.com
>>
>>
>>
>> On Wed, May 1, 2019 at 2:47 PM Gerald Wiltse <jerrywiltse at gmail.com>
>> wrote:
>>
>>> Yes, I'll help with this, and I try to get signed up with an account for
>>> the issue tracker ASAP.
>>>
>>> I've just started trying to build create the embeddable package for
>>> windows locally (all from source).  Once I have that automated, I'll take a
>>> naive stab at the Linux layout.  I'm sure i'll soon hit the additional
>>> complications you're talking about and come back to you with questions.
>>>
>>> Gerald R. Wiltse
>>> jerrywiltse at gmail.com
>>>
>>>
>>>
>>> On Wed, May 1, 2019 at 1:57 PM Steve Dower <steve.dower at python.org>
>>> wrote:
>>>
>>>> On 01May2019 1305, Gerald Wiltse wrote:
>>>> > That does help, thanks so much for the fast response!  I now see how
>>>> > it's executed on Azure pipelines also, so that should be enough for
>>>> me
>>>> > to reverse engineer the rest.
>>>> >
>>>> > Followup questions if you have time:
>>>> > 1. It seems that directory doesn't exist in the 3.6 branches/tags, so
>>>> it
>>>> > must have been done a different way back then.  Do you think it's
>>>> > back-portable to 3.6?
>>>>
>>>> Yep, it should work with 3.6. There were scripts under Tools/msi back
>>>> then that did the same thing, but with the Store app I rewrote it to be
>>>> more flexible.
>>>>
>>>> > 2. One of our objectives is to effectively create a nearly identical
>>>> > embeddable package for linux. Do you think the layout code is generic
>>>> > enough to be modified to create a linux equivalent?
>>>>
>>>> Probably not, it's under the "PC" directory because it is entirely
>>>> CPython specific.
>>>>
>>>> I'd love to be able to have a similar embeddable distro for Linux (and
>>>> macOS), and I'll be investing some of my time in working towards this,
>>>> but it's far more complicated than simply laying out the right files.
>>>> If
>>>> you're interested in helping with this, then we're in the right place
>>>> to
>>>> discuss it, but we'll likely have to move to the issue tracker at some
>>>> point once we figure out who else wants/needs to be involved.
>>>>
>>>> > Obviously, there are many alternative methods and documents for
>>>> creating
>>>> > "embeddable" pythons on linux, but the windows package has all the
>>>> > characteristics we want, and of course we'd like our Windows and
>>>> Linux
>>>> > process build and packaging processes to be as similar as possible,
>>>> so
>>>> > it seems attractive to try to port this layout script to linux.
>>>>
>>>> "make install" already does the same thing, but the install location
>>>> matters at build time, so it's a little more complex to make it work as
>>>> an embedded runtime. I'm sure there are people who know how to make it
>>>> work though.
>>>>
>>>> Cheers,
>>>> Steve
>>>>
>>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190502/0d72e883/attachment.html>

From vstinner at redhat.com  Thu May  2 16:47:09 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Thu, 2 May 2019 16:47:09 -0400
Subject: [Python-Dev] RFC: PEP 587 "Python Initialization
 Configuration": 2nd version
In-Reply-To: <000001d50124$71ef0d40$55cd27c0$@211mainstreet.net>
References: <CA+3bQGF7XbUT1WfO3KB+9Xa-si30ozQY6h0J2bBqpi6rj-XG9g@mail.gmail.com>
 <000001d50124$71ef0d40$55cd27c0$@211mainstreet.net>
Message-ID: <CA+3bQGHdZAq2jFk5RsTTAn4dAif+-Z-1He95LntzA5aChBK-mA@mail.gmail.com>

Le jeu. 2 mai 2019 ? 16:20, Edwin Zimmerman <edwin at 211mainstreet.net> a ?crit :
> > ``-c COMMAND``                    ``run_module = COMMAND``
> should read "run_command = COMMAND".  Typo, not?

Oops, you're right: it's a typo. Now fixed:

``-c COMMAND``                    ``run_command = COMMAND``

Victor
-- 
Night gathers, and now my watch begins. It shall not end until my death.

From thatiparthysreenivas at gmail.com  Fri May  3 04:46:35 2019
From: thatiparthysreenivas at gmail.com (Srinivas Reddy Thatiparthy)
Date: Fri, 3 May 2019 14:16:35 +0530
Subject: [Python-Dev] Please merge : bpo-34848
Message-ID: <CAEaN0UYdbVxQGidEWibG+mS=AjosZ22oruRDfz2vu9w=7qT+CQ@mail.gmail.com>

Hi,
   The PR - https://github.com/python/cpython/pull/9877  has been approved
by Raymond long ago.  Please merge or comment if not mergeable.

Best Regards,
Srinivas Reddy Thatipathy
7768044110.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190503/58f4fe51/attachment.html>

From steve at holdenweb.com  Fri May  3 07:21:50 2019
From: steve at holdenweb.com (Steve Holden)
Date: Fri, 3 May 2019 12:21:50 +0100
Subject: [Python-Dev] Please merge : bpo-34848
In-Reply-To: <CAEaN0UYdbVxQGidEWibG+mS=AjosZ22oruRDfz2vu9w=7qT+CQ@mail.gmail.com>
References: <CAEaN0UYdbVxQGidEWibG+mS=AjosZ22oruRDfz2vu9w=7qT+CQ@mail.gmail.com>
Message-ID: <CAMofdRDpz56u_CODd+5pT+dMNMnGgAGWdhWPR7ycWrZhYaNYsw@mail.gmail.com>

Looks like the failure is due to absence of a News entry. Maybe add a "skip
news" label if this doesn't need to be documented?

Kind regards.
Steve Holden


On Fri, May 3, 2019 at 9:48 AM Srinivas Reddy Thatiparthy <
thatiparthysreenivas at gmail.com> wrote:

> Hi,
>    The PR - https://github.com/python/cpython/pull/9877  has been
> approved by Raymond long ago.  Please merge or comment if not mergeable.
>
> Best Regards,
> Srinivas Reddy Thatipathy
> 7768044110.
>
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/steve%40holdenweb.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190503/15e9e116/attachment.html>

From thatiparthysreenivas at gmail.com  Fri May  3 08:14:50 2019
From: thatiparthysreenivas at gmail.com (Srinivas Reddy Thatiparthy)
Date: Fri, 3 May 2019 17:44:50 +0530
Subject: [Python-Dev] Please merge : bpo-34848
In-Reply-To: <CAMofdRDpz56u_CODd+5pT+dMNMnGgAGWdhWPR7ycWrZhYaNYsw@mail.gmail.com>
References: <CAEaN0UYdbVxQGidEWibG+mS=AjosZ22oruRDfz2vu9w=7qT+CQ@mail.gmail.com>
 <CAMofdRDpz56u_CODd+5pT+dMNMnGgAGWdhWPR7ycWrZhYaNYsw@mail.gmail.com>
Message-ID: <CAEaN0UbFQNooJwH_Rk9YyyUXDzUqpHLA6eN90JUwL5o0VTc8gg@mail.gmail.com>

Yes, I agree. Please do as I do not have permission.


Best Regards,
Srinivas Reddy Thatipathy




On Fri, 3 May 2019 at 16:52, Steve Holden <steve at holdenweb.com> wrote:

> Looks like the failure is due to absence of a News entry. Maybe add a
> "skip news" label if this doesn't need to be documented?
>
> Kind regards.
> Steve Holden
>
>
> On Fri, May 3, 2019 at 9:48 AM Srinivas Reddy Thatiparthy <
> thatiparthysreenivas at gmail.com> wrote:
>
>> Hi,
>>    The PR - https://github.com/python/cpython/pull/9877  has been
>> approved by Raymond long ago.  Please merge or comment if not mergeable.
>>
>> Best Regards,
>> Srinivas Reddy Thatipathy
>> 7768044110.
>>
>> _______________________________________________
>> Python-Dev mailing list
>> Python-Dev at python.org
>> https://mail.python.org/mailman/listinfo/python-dev
>> Unsubscribe:
>> https://mail.python.org/mailman/options/python-dev/steve%40holdenweb.com
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190503/806e29ad/attachment.html>

From vstinner at redhat.com  Fri May  3 08:24:15 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Fri, 3 May 2019 08:24:15 -0400
Subject: [Python-Dev] Please merge : bpo-34848
In-Reply-To: <CAEaN0UYdbVxQGidEWibG+mS=AjosZ22oruRDfz2vu9w=7qT+CQ@mail.gmail.com>
References: <CAEaN0UYdbVxQGidEWibG+mS=AjosZ22oruRDfz2vu9w=7qT+CQ@mail.gmail.com>
Message-ID: <CA+3bQGE4_3N2pC=X2raov1ZoJ2KRkAj6aUeea4RhvSSHLzKC=g@mail.gmail.com>

Hi Srinivas,

I merged your obvious doc fix, thanks.

Does someone know how I can list pull requests which has been approved but
not merged yet?

Victor

Le vendredi 3 mai 2019, Srinivas Reddy Thatiparthy <
thatiparthysreenivas at gmail.com> a ?crit :
> Hi,
>    The PR - https://github.com/python/cpython/pull/9877  has been
approved by Raymond long ago.  Please merge or comment if not mergeable.
> Best Regards,
> Srinivas Reddy Thatipathy
> 7768044110.
>
>

-- 
Night gathers, and now my watch begins. It shall not end until my death.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190503/c207b5e8/attachment.html>

From mhroncok at redhat.com  Fri May  3 08:41:17 2019
From: mhroncok at redhat.com (=?UTF-8?Q?Miro_Hron=c4=8dok?=)
Date: Fri, 3 May 2019 14:41:17 +0200
Subject: [Python-Dev] Please merge : bpo-34848
In-Reply-To: <CA+3bQGE4_3N2pC=X2raov1ZoJ2KRkAj6aUeea4RhvSSHLzKC=g@mail.gmail.com>
References: <CAEaN0UYdbVxQGidEWibG+mS=AjosZ22oruRDfz2vu9w=7qT+CQ@mail.gmail.com>
 <CA+3bQGE4_3N2pC=X2raov1ZoJ2KRkAj6aUeea4RhvSSHLzKC=g@mail.gmail.com>
Message-ID: <10403b62-6025-30ae-74f5-ca096e275b27@redhat.com>

On 03. 05. 19 14:24, Victor Stinner wrote:
> Does someone know how I can list pull requests which has been approved but not 
> merged yet?

Add review:approved to the search filed.

https://github.com/python/cpython/pulls?q=is%3Apr+is%3Aopen+review%3Aapproved

Or click on **Reviews** in the top bar and select what you like.

-- 
Miro Hron?ok
--
Phone: +420777974800
IRC: mhroncok

From bcannon at gmail.com  Fri May  3 11:01:49 2019
From: bcannon at gmail.com (Brett Cannon)
Date: Fri, 3 May 2019 11:01:49 -0400
Subject: [Python-Dev] Please merge : bpo-34848
In-Reply-To: <10403b62-6025-30ae-74f5-ca096e275b27@redhat.com>
References: <CAEaN0UYdbVxQGidEWibG+mS=AjosZ22oruRDfz2vu9w=7qT+CQ@mail.gmail.com>
 <CA+3bQGE4_3N2pC=X2raov1ZoJ2KRkAj6aUeea4RhvSSHLzKC=g@mail.gmail.com>
 <10403b62-6025-30ae-74f5-ca096e275b27@redhat.com>
Message-ID: <CAP1=2W6Q4yeAmkOrtkX3ZS7QkpJDa5UhSH_HF3N0j55vJFgtTA@mail.gmail.com>

The "awaiting merge" was originally created to help with this.

On Fri., May 3, 2019, 08:51 Miro Hron?ok, <mhroncok at redhat.com> wrote:

> On 03. 05. 19 14:24, Victor Stinner wrote:
> > Does someone know how I can list pull requests which has been approved
> but not
> > merged yet?
>
> Add review:approved to the search filed.
>
>
> https://github.com/python/cpython/pulls?q=is%3Apr+is%3Aopen+review%3Aapproved
>
> Or click on **Reviews** in the top bar and select what you like.
>
> --
> Miro Hron?ok
> --
> Phone: +420777974800
> IRC: mhroncok
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/brett%40python.org
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190503/6d7d5383/attachment-0001.html>

From J.Demeyer at UGent.be  Fri May  3 11:38:56 2019
From: J.Demeyer at UGent.be (Jeroen Demeyer)
Date: Fri, 3 May 2019 17:38:56 +0200
Subject: [Python-Dev] PEP 580/590 proposals summary
Message-ID: <5CCC6090.6010202@UGent.be>

Hello all,

If we want to have a chance of implementing PEP 580/590 in Python 3.8, 
we shouldn't wait too long to make a decision on which proposal to accept.

As a summary, below I'll write the four proposals together with a star 
"score" for 3 criteria (there is no obvious best proposal, all have 
advantages and disadvantages):

- complexity: more stars is a protocol which is simpler to document and 
understand.
- implementation: more stars is a simpler implementation of CPython (not 
just of the protocol itself, but also the code using the protocol).
- performance: more stars is better performance for *existing* code. I'm 
using a minimum of 3 stars here, since the difference is not that big 
between the proposals.

Criteria that I am NOT considering:

- The performance for *new* code or the performance of wrappers 
generated by Argument Clinic: all proposals score excellent here.
- Complexity of implementations of external classes: this is hard to 
judge, since that depends a lot on what those external classes (outside 
of CPython) want to do.
- The work to implement the proposal in CPython: this is a one-time only 
thing that I'm volunteering to do anyway.
- Extensibility of the protocol: first of all, it's hard to define what 
this means exactly. Second, using Petr's idea of putting the flags 
inside the instance, every proposal becomes extensible at little cost.

Proposals:

(A) PEP 580
complexity:     *
implementation: *****
performance:    *****

(B) compromise: PEP 580 with a single calling convention
complexity:     ***
implementation: ****
performance:    ****

(C) PEP 590 with a single bound method class
complexity:     *****
implementation: ***
performance:    ***

(D) PEP 590
complexity:     *****
implementation: *
performance:    ****

I consider Petr's proposal (a more extensible variant of PEP 590 with 
flags inside the instance) a minor variation of PEP 590 for this purpose 
and no need to score it differently than "plain" PEP 590.

I tried to do this as unbiased as possible, even though I must admit 
that this is not really possible.

I'm considering not just the PEP and the existing implementation as 
written, but also ideas that haven't been implemented yet such as:
- proposals (A)-(C): rationalization of classes, in particular having a 
single class for bound methods (just like in PyPy).
- proposals (B)-(D): Mark Shannon's idea of having a dedicated 
vectorcall wrapper for each calling convention (one for METH_O, one for 
METH_VARARGS|METH_KEYWORDS, ...).
- using the protocol also for slot wrappers like object.__eq__

I'm NOT considering Petr's proposal of removing support for other 
calling conventions like METH_VARARGS because that won't happen any time 
soon.


Cheers,
Jeroen

From J.Demeyer at UGent.be  Fri May  3 11:40:55 2019
From: J.Demeyer at UGent.be (Jeroen Demeyer)
Date: Fri, 3 May 2019 17:40:55 +0200
Subject: [Python-Dev] Please merge : bpo-34848
In-Reply-To: <CA+3bQGE4_3N2pC=X2raov1ZoJ2KRkAj6aUeea4RhvSSHLzKC=g@mail.gmail.com>
References: <CAEaN0UYdbVxQGidEWibG+mS=AjosZ22oruRDfz2vu9w=7qT+CQ@mail.gmail.com>
 <CA+3bQGE4_3N2pC=X2raov1ZoJ2KRkAj6aUeea4RhvSSHLzKC=g@mail.gmail.com>
Message-ID: <5CCC6107.10900@UGent.be>

On 2019-05-03 14:24, Victor Stinner wrote:
> Hi Srinivas,
>
> I merged your obvious doc fix, thanks.

Can you please do the same for

https://github.com/python/cpython/pull/12784

From jerrywiltse at gmail.com  Fri May  3 11:55:12 2019
From: jerrywiltse at gmail.com (Gerald Wiltse)
Date: Fri, 3 May 2019 11:55:12 -0400
Subject: [Python-Dev] Location of CI for Windows Embeddable Distro
In-Reply-To: <CAML1RCBKW2U+7cUL=aJXZ0Me5XPc0kNXweKG22RYbBSgK0vebg@mail.gmail.com>
References: <CAML1RCC0vw2V_bitZ0rJFc-VzLgZNShe0wNCb4oZSK0gZYVgfA@mail.gmail.com>
 <b4196920-94d4-f2de-c444-31d236752a64@python.org>
 <CAML1RCBGVu-pnzcJ1Czxv_aFAgs+DgfPB9rjtXHsjdnRp=4eOw@mail.gmail.com>
 <a94aff02-6bdd-9147-8c15-c04c4e244825@python.org>
 <CAML1RCDn8r_gLgAg7ZiVLn_mNvcpp4=NoyGc102dY3_HByE6aw@mail.gmail.com>
 <CAML1RCDM4hM1TxTB5CMhCh4Kzd-mv9jNLfL2a1yUbH07j7-euA@mail.gmail.com>
 <CAML1RCB-LC9xUJu5pJjeRFSgDBSGDrrHWD3u+cT48=dHaqS6eQ@mail.gmail.com>
 <CAML1RCBKW2U+7cUL=aJXZ0Me5XPc0kNXweKG22RYbBSgK0vebg@mail.gmail.com>
Message-ID: <CAML1RCAYfX-GPF+Xpve_TAFS8r8uG9D+B6DThhBz_rqDaA9VUQ@mail.gmail.com>

Ok, disregard previous message.  I fixed the PYTHONPATH in my command
and the .pyc files and .  I also saw that python36._pth is specifically
only supported by windows.

Now i'm moved on to the following error:

zipimport.ZipImportError: can't decompress data; zlib not available

I'm on Ubuntu.  I've definitely got zlib1g-dev package installed, and I've
recompiled a number of times trying to get it to work.  I've tried Ubuntu
16 and 18.

Is this just a limitation on linux?

Gerald R. Wiltse
jerrywiltse at gmail.com



On Thu, May 2, 2019 at 4:29 PM Gerald Wiltse <jerrywiltse at gmail.com> wrote:

> Just an update based on testing.  If I zip the modules up into
> python36.zip (whether in .py or .pyc form) the linux binary does not find
> them.  If I copy them into the embedded root, alongside the python
> executable, it finds them as expected.
>
> This just makes it seem more like an issue where Linux binary does not
> respect .zip file as a source of modules.
>
> Gerald R. Wiltse
> jerrywiltse at gmail.com
>
>
>
> On Thu, May 2, 2019 at 2:56 PM Gerald Wiltse <jerrywiltse at gmail.com>
> wrote:
>
>> With minimal patching of tools/msi/make_zip.py, I was able to create an
>> equivalent zip package on Linux.  It doesn't work out of the box of
>> course.  I had to do two commands
>>
>> My biggest concern is that even if the layout is "correct" on linux, the
>> python runtime might not actually support being run like this on Linux.
>> Perhaps the code for using python36.zip as a landmark and source of modules
>> is only implemented on Windows.  Do you know if that is the case?
>>
>>     tmp$ export LD_LIBRARY_PATH=$(pwd)
>>     tmp$ export PYTHONHOME=$(pwd)
>>     tmp$ export PYTHONPATH=$(pwd)
>>     tmp$ ./python
>>     Fatal Python error: Py_Initialize: Unable to get the locale encoding
>>     ModuleNotFoundError: No module named 'encodings'
>>
>>     Current thread 0x00007fdde9eb1680 (most recent call first):
>>     Aborted (core dumped)
>>
>> Here's the full directory structure, error, and patch I created. Any
>> additional feedback would be great.
>>
>> https://gist.github.com/solvingj/87305e0f70e14d738d6989ba2f41352f
>>
>> Gerald R. Wiltse
>> jerrywiltse at gmail.com
>>
>>
>>
>> On Thu, May 2, 2019 at 11:24 AM Gerald Wiltse <jerrywiltse at gmail.com>
>> wrote:
>>
>>> I've successfully automated the build of the embedded zip on Windows for
>>> 3.6 on my internal CI using tools/msi script.
>>>
>>> Moving onto linux, can you please summarize the primary
>>> challenges/differences for creating the embeddable zip for linux?
>>>
>>> Gerald R. Wiltse
>>> jerrywiltse at gmail.com
>>>
>>>
>>>
>>> On Wed, May 1, 2019 at 2:47 PM Gerald Wiltse <jerrywiltse at gmail.com>
>>> wrote:
>>>
>>>> Yes, I'll help with this, and I try to get signed up with an account
>>>> for the issue tracker ASAP.
>>>>
>>>> I've just started trying to build create the embeddable package for
>>>> windows locally (all from source).  Once I have that automated, I'll take a
>>>> naive stab at the Linux layout.  I'm sure i'll soon hit the additional
>>>> complications you're talking about and come back to you with questions.
>>>>
>>>> Gerald R. Wiltse
>>>> jerrywiltse at gmail.com
>>>>
>>>>
>>>>
>>>> On Wed, May 1, 2019 at 1:57 PM Steve Dower <steve.dower at python.org>
>>>> wrote:
>>>>
>>>>> On 01May2019 1305, Gerald Wiltse wrote:
>>>>> > That does help, thanks so much for the fast response!  I now see how
>>>>> > it's executed on Azure pipelines also, so that should be enough for
>>>>> me
>>>>> > to reverse engineer the rest.
>>>>> >
>>>>> > Followup questions if you have time:
>>>>> > 1. It seems that directory doesn't exist in the 3.6 branches/tags,
>>>>> so it
>>>>> > must have been done a different way back then.  Do you think it's
>>>>> > back-portable to 3.6?
>>>>>
>>>>> Yep, it should work with 3.6. There were scripts under Tools/msi back
>>>>> then that did the same thing, but with the Store app I rewrote it to
>>>>> be
>>>>> more flexible.
>>>>>
>>>>> > 2. One of our objectives is to effectively create a nearly identical
>>>>> > embeddable package for linux. Do you think the layout code is
>>>>> generic
>>>>> > enough to be modified to create a linux equivalent?
>>>>>
>>>>> Probably not, it's under the "PC" directory because it is entirely
>>>>> CPython specific.
>>>>>
>>>>> I'd love to be able to have a similar embeddable distro for Linux (and
>>>>> macOS), and I'll be investing some of my time in working towards this,
>>>>> but it's far more complicated than simply laying out the right files.
>>>>> If
>>>>> you're interested in helping with this, then we're in the right place
>>>>> to
>>>>> discuss it, but we'll likely have to move to the issue tracker at some
>>>>> point once we figure out who else wants/needs to be involved.
>>>>>
>>>>> > Obviously, there are many alternative methods and documents for
>>>>> creating
>>>>> > "embeddable" pythons on linux, but the windows package has all the
>>>>> > characteristics we want, and of course we'd like our Windows and
>>>>> Linux
>>>>> > process build and packaging processes to be as similar as possible,
>>>>> so
>>>>> > it seems attractive to try to port this layout script to linux.
>>>>>
>>>>> "make install" already does the same thing, but the install location
>>>>> matters at build time, so it's a little more complex to make it work
>>>>> as
>>>>> an embedded runtime. I'm sure there are people who know how to make it
>>>>> work though.
>>>>>
>>>>> Cheers,
>>>>> Steve
>>>>>
>>>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190503/6388fb37/attachment.html>

From jerrywiltse at gmail.com  Fri May  3 13:02:51 2019
From: jerrywiltse at gmail.com (Gerald Wiltse)
Date: Fri, 3 May 2019 13:02:51 -0400
Subject: [Python-Dev] Location of CI for Windows Embeddable Distro
In-Reply-To: <CAML1RCAYfX-GPF+Xpve_TAFS8r8uG9D+B6DThhBz_rqDaA9VUQ@mail.gmail.com>
References: <CAML1RCC0vw2V_bitZ0rJFc-VzLgZNShe0wNCb4oZSK0gZYVgfA@mail.gmail.com>
 <b4196920-94d4-f2de-c444-31d236752a64@python.org>
 <CAML1RCBGVu-pnzcJ1Czxv_aFAgs+DgfPB9rjtXHsjdnRp=4eOw@mail.gmail.com>
 <a94aff02-6bdd-9147-8c15-c04c4e244825@python.org>
 <CAML1RCDn8r_gLgAg7ZiVLn_mNvcpp4=NoyGc102dY3_HByE6aw@mail.gmail.com>
 <CAML1RCDM4hM1TxTB5CMhCh4Kzd-mv9jNLfL2a1yUbH07j7-euA@mail.gmail.com>
 <CAML1RCB-LC9xUJu5pJjeRFSgDBSGDrrHWD3u+cT48=dHaqS6eQ@mail.gmail.com>
 <CAML1RCBKW2U+7cUL=aJXZ0Me5XPc0kNXweKG22RYbBSgK0vebg@mail.gmail.com>
 <CAML1RCAYfX-GPF+Xpve_TAFS8r8uG9D+B6DThhBz_rqDaA9VUQ@mail.gmail.com>
Message-ID: <CAML1RCADosCn4NyMnLVatUfDh=StysccbGcO=XhV8RuHebr89g@mail.gmail.com>

I have it working on linux now.  Is now a good time to open a ticket on
Issue Tracker?

Gerald R. Wiltse
jerrywiltse at gmail.com



On Fri, May 3, 2019 at 11:55 AM Gerald Wiltse <jerrywiltse at gmail.com> wrote:

> Ok, disregard previous message.  I fixed the PYTHONPATH in my command
> and the .pyc files and .  I also saw that python36._pth is specifically
> only supported by windows.
>
> Now i'm moved on to the following error:
>
> zipimport.ZipImportError: can't decompress data; zlib not available
>
> I'm on Ubuntu.  I've definitely got zlib1g-dev package installed, and I've
> recompiled a number of times trying to get it to work.  I've tried Ubuntu
> 16 and 18.
>
> Is this just a limitation on linux?
>
> Gerald R. Wiltse
> jerrywiltse at gmail.com
>
>
>
> On Thu, May 2, 2019 at 4:29 PM Gerald Wiltse <jerrywiltse at gmail.com>
> wrote:
>
>> Just an update based on testing.  If I zip the modules up into
>> python36.zip (whether in .py or .pyc form) the linux binary does not find
>> them.  If I copy them into the embedded root, alongside the python
>> executable, it finds them as expected.
>>
>> This just makes it seem more like an issue where Linux binary does not
>> respect .zip file as a source of modules.
>>
>> Gerald R. Wiltse
>> jerrywiltse at gmail.com
>>
>>
>>
>> On Thu, May 2, 2019 at 2:56 PM Gerald Wiltse <jerrywiltse at gmail.com>
>> wrote:
>>
>>> With minimal patching of tools/msi/make_zip.py, I was able to create an
>>> equivalent zip package on Linux.  It doesn't work out of the box of
>>> course.  I had to do two commands
>>>
>>> My biggest concern is that even if the layout is "correct" on linux, the
>>> python runtime might not actually support being run like this on Linux.
>>> Perhaps the code for using python36.zip as a landmark and source of modules
>>> is only implemented on Windows.  Do you know if that is the case?
>>>
>>>     tmp$ export LD_LIBRARY_PATH=$(pwd)
>>>     tmp$ export PYTHONHOME=$(pwd)
>>>     tmp$ export PYTHONPATH=$(pwd)
>>>     tmp$ ./python
>>>     Fatal Python error: Py_Initialize: Unable to get the locale encoding
>>>     ModuleNotFoundError: No module named 'encodings'
>>>
>>>     Current thread 0x00007fdde9eb1680 (most recent call first):
>>>     Aborted (core dumped)
>>>
>>> Here's the full directory structure, error, and patch I created. Any
>>> additional feedback would be great.
>>>
>>> https://gist.github.com/solvingj/87305e0f70e14d738d6989ba2f41352f
>>>
>>> Gerald R. Wiltse
>>> jerrywiltse at gmail.com
>>>
>>>
>>>
>>> On Thu, May 2, 2019 at 11:24 AM Gerald Wiltse <jerrywiltse at gmail.com>
>>> wrote:
>>>
>>>> I've successfully automated the build of the embedded zip on Windows
>>>> for 3.6 on my internal CI using tools/msi script.
>>>>
>>>> Moving onto linux, can you please summarize the primary
>>>> challenges/differences for creating the embeddable zip for linux?
>>>>
>>>> Gerald R. Wiltse
>>>> jerrywiltse at gmail.com
>>>>
>>>>
>>>>
>>>> On Wed, May 1, 2019 at 2:47 PM Gerald Wiltse <jerrywiltse at gmail.com>
>>>> wrote:
>>>>
>>>>> Yes, I'll help with this, and I try to get signed up with an account
>>>>> for the issue tracker ASAP.
>>>>>
>>>>> I've just started trying to build create the embeddable package for
>>>>> windows locally (all from source).  Once I have that automated, I'll take a
>>>>> naive stab at the Linux layout.  I'm sure i'll soon hit the additional
>>>>> complications you're talking about and come back to you with questions.
>>>>>
>>>>> Gerald R. Wiltse
>>>>> jerrywiltse at gmail.com
>>>>>
>>>>>
>>>>>
>>>>> On Wed, May 1, 2019 at 1:57 PM Steve Dower <steve.dower at python.org>
>>>>> wrote:
>>>>>
>>>>>> On 01May2019 1305, Gerald Wiltse wrote:
>>>>>> > That does help, thanks so much for the fast response!  I now see
>>>>>> how
>>>>>> > it's executed on Azure pipelines also, so that should be enough for
>>>>>> me
>>>>>> > to reverse engineer the rest.
>>>>>> >
>>>>>> > Followup questions if you have time:
>>>>>> > 1. It seems that directory doesn't exist in the 3.6 branches/tags,
>>>>>> so it
>>>>>> > must have been done a different way back then.  Do you think it's
>>>>>> > back-portable to 3.6?
>>>>>>
>>>>>> Yep, it should work with 3.6. There were scripts under Tools/msi back
>>>>>> then that did the same thing, but with the Store app I rewrote it to
>>>>>> be
>>>>>> more flexible.
>>>>>>
>>>>>> > 2. One of our objectives is to effectively create a nearly
>>>>>> identical
>>>>>> > embeddable package for linux. Do you think the layout code is
>>>>>> generic
>>>>>> > enough to be modified to create a linux equivalent?
>>>>>>
>>>>>> Probably not, it's under the "PC" directory because it is entirely
>>>>>> CPython specific.
>>>>>>
>>>>>> I'd love to be able to have a similar embeddable distro for Linux
>>>>>> (and
>>>>>> macOS), and I'll be investing some of my time in working towards
>>>>>> this,
>>>>>> but it's far more complicated than simply laying out the right files.
>>>>>> If
>>>>>> you're interested in helping with this, then we're in the right place
>>>>>> to
>>>>>> discuss it, but we'll likely have to move to the issue tracker at
>>>>>> some
>>>>>> point once we figure out who else wants/needs to be involved.
>>>>>>
>>>>>> > Obviously, there are many alternative methods and documents for
>>>>>> creating
>>>>>> > "embeddable" pythons on linux, but the windows package has all the
>>>>>> > characteristics we want, and of course we'd like our Windows and
>>>>>> Linux
>>>>>> > process build and packaging processes to be as similar as possible,
>>>>>> so
>>>>>> > it seems attractive to try to port this layout script to linux.
>>>>>>
>>>>>> "make install" already does the same thing, but the install location
>>>>>> matters at build time, so it's a little more complex to make it work
>>>>>> as
>>>>>> an embedded runtime. I'm sure there are people who know how to make
>>>>>> it
>>>>>> work though.
>>>>>>
>>>>>> Cheers,
>>>>>> Steve
>>>>>>
>>>>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190503/419e5e8c/attachment.html>

From jerrywiltse at gmail.com  Fri May  3 13:53:00 2019
From: jerrywiltse at gmail.com (Gerald Wiltse)
Date: Fri, 3 May 2019 13:53:00 -0400
Subject: [Python-Dev] Location of CI for Windows Embeddable Distro
In-Reply-To: <CAML1RCADosCn4NyMnLVatUfDh=StysccbGcO=XhV8RuHebr89g@mail.gmail.com>
References: <CAML1RCC0vw2V_bitZ0rJFc-VzLgZNShe0wNCb4oZSK0gZYVgfA@mail.gmail.com>
 <b4196920-94d4-f2de-c444-31d236752a64@python.org>
 <CAML1RCBGVu-pnzcJ1Czxv_aFAgs+DgfPB9rjtXHsjdnRp=4eOw@mail.gmail.com>
 <a94aff02-6bdd-9147-8c15-c04c4e244825@python.org>
 <CAML1RCDn8r_gLgAg7ZiVLn_mNvcpp4=NoyGc102dY3_HByE6aw@mail.gmail.com>
 <CAML1RCDM4hM1TxTB5CMhCh4Kzd-mv9jNLfL2a1yUbH07j7-euA@mail.gmail.com>
 <CAML1RCB-LC9xUJu5pJjeRFSgDBSGDrrHWD3u+cT48=dHaqS6eQ@mail.gmail.com>
 <CAML1RCBKW2U+7cUL=aJXZ0Me5XPc0kNXweKG22RYbBSgK0vebg@mail.gmail.com>
 <CAML1RCAYfX-GPF+Xpve_TAFS8r8uG9D+B6DThhBz_rqDaA9VUQ@mail.gmail.com>
 <CAML1RCADosCn4NyMnLVatUfDh=StysccbGcO=XhV8RuHebr89g@mail.gmail.com>
Message-ID: <CAML1RCBrtDMNDOH2sH5+P1sOG5jjRouGUxzej96mnxBGEyjyJg@mail.gmail.com>

Now that I have it working, I recall that the runtime challenge for a
portable/embeddable distro on Linux is in the system configuration
handling.  This has always been a complicated fundamental behavior which
has prevented or complicated many "portability" cases in the past.

There are many projects which have managed to ship portable/relocatable
python installations in the past.  Maybe looking at them will be helpful in
deciding how to deal with the situation here.

Gerald R. Wiltse
jerrywiltse at gmail.com



On Fri, May 3, 2019 at 1:02 PM Gerald Wiltse <jerrywiltse at gmail.com> wrote:

> I have it working on linux now.  Is now a good time to open a ticket on
> Issue Tracker?
>
> Gerald R. Wiltse
> jerrywiltse at gmail.com
>
>
>
> On Fri, May 3, 2019 at 11:55 AM Gerald Wiltse <jerrywiltse at gmail.com>
> wrote:
>
>> Ok, disregard previous message.  I fixed the PYTHONPATH in my command
>> and the .pyc files and .  I also saw that python36._pth is specifically
>> only supported by windows.
>>
>> Now i'm moved on to the following error:
>>
>> zipimport.ZipImportError: can't decompress data; zlib not available
>>
>> I'm on Ubuntu.  I've definitely got zlib1g-dev package installed, and
>> I've recompiled a number of times trying to get it to work.  I've tried
>> Ubuntu 16 and 18.
>>
>> Is this just a limitation on linux?
>>
>> Gerald R. Wiltse
>> jerrywiltse at gmail.com
>>
>>
>>
>> On Thu, May 2, 2019 at 4:29 PM Gerald Wiltse <jerrywiltse at gmail.com>
>> wrote:
>>
>>> Just an update based on testing.  If I zip the modules up into
>>> python36.zip (whether in .py or .pyc form) the linux binary does not find
>>> them.  If I copy them into the embedded root, alongside the python
>>> executable, it finds them as expected.
>>>
>>> This just makes it seem more like an issue where Linux binary does not
>>> respect .zip file as a source of modules.
>>>
>>> Gerald R. Wiltse
>>> jerrywiltse at gmail.com
>>>
>>>
>>>
>>> On Thu, May 2, 2019 at 2:56 PM Gerald Wiltse <jerrywiltse at gmail.com>
>>> wrote:
>>>
>>>> With minimal patching of tools/msi/make_zip.py, I was able to create an
>>>> equivalent zip package on Linux.  It doesn't work out of the box of
>>>> course.  I had to do two commands
>>>>
>>>> My biggest concern is that even if the layout is "correct" on linux,
>>>> the python runtime might not actually support being run like this on
>>>> Linux.  Perhaps the code for using python36.zip as a landmark and source of
>>>> modules is only implemented on Windows.  Do you know if that is the case?
>>>>
>>>>     tmp$ export LD_LIBRARY_PATH=$(pwd)
>>>>     tmp$ export PYTHONHOME=$(pwd)
>>>>     tmp$ export PYTHONPATH=$(pwd)
>>>>     tmp$ ./python
>>>>     Fatal Python error: Py_Initialize: Unable to get the locale encoding
>>>>     ModuleNotFoundError: No module named 'encodings'
>>>>
>>>>     Current thread 0x00007fdde9eb1680 (most recent call first):
>>>>     Aborted (core dumped)
>>>>
>>>> Here's the full directory structure, error, and patch I created. Any
>>>> additional feedback would be great.
>>>>
>>>> https://gist.github.com/solvingj/87305e0f70e14d738d6989ba2f41352f
>>>>
>>>> Gerald R. Wiltse
>>>> jerrywiltse at gmail.com
>>>>
>>>>
>>>>
>>>> On Thu, May 2, 2019 at 11:24 AM Gerald Wiltse <jerrywiltse at gmail.com>
>>>> wrote:
>>>>
>>>>> I've successfully automated the build of the embedded zip on Windows
>>>>> for 3.6 on my internal CI using tools/msi script.
>>>>>
>>>>> Moving onto linux, can you please summarize the primary
>>>>> challenges/differences for creating the embeddable zip for linux?
>>>>>
>>>>> Gerald R. Wiltse
>>>>> jerrywiltse at gmail.com
>>>>>
>>>>>
>>>>>
>>>>> On Wed, May 1, 2019 at 2:47 PM Gerald Wiltse <jerrywiltse at gmail.com>
>>>>> wrote:
>>>>>
>>>>>> Yes, I'll help with this, and I try to get signed up with an account
>>>>>> for the issue tracker ASAP.
>>>>>>
>>>>>> I've just started trying to build create the embeddable package for
>>>>>> windows locally (all from source).  Once I have that automated, I'll take a
>>>>>> naive stab at the Linux layout.  I'm sure i'll soon hit the additional
>>>>>> complications you're talking about and come back to you with questions.
>>>>>>
>>>>>> Gerald R. Wiltse
>>>>>> jerrywiltse at gmail.com
>>>>>>
>>>>>>
>>>>>>
>>>>>> On Wed, May 1, 2019 at 1:57 PM Steve Dower <steve.dower at python.org>
>>>>>> wrote:
>>>>>>
>>>>>>> On 01May2019 1305, Gerald Wiltse wrote:
>>>>>>> > That does help, thanks so much for the fast response!  I now see
>>>>>>> how
>>>>>>> > it's executed on Azure pipelines also, so that should be enough
>>>>>>> for me
>>>>>>> > to reverse engineer the rest.
>>>>>>> >
>>>>>>> > Followup questions if you have time:
>>>>>>> > 1. It seems that directory doesn't exist in the 3.6 branches/tags,
>>>>>>> so it
>>>>>>> > must have been done a different way back then.  Do you think it's
>>>>>>> > back-portable to 3.6?
>>>>>>>
>>>>>>> Yep, it should work with 3.6. There were scripts under Tools/msi
>>>>>>> back
>>>>>>> then that did the same thing, but with the Store app I rewrote it to
>>>>>>> be
>>>>>>> more flexible.
>>>>>>>
>>>>>>> > 2. One of our objectives is to effectively create a nearly
>>>>>>> identical
>>>>>>> > embeddable package for linux. Do you think the layout code is
>>>>>>> generic
>>>>>>> > enough to be modified to create a linux equivalent?
>>>>>>>
>>>>>>> Probably not, it's under the "PC" directory because it is entirely
>>>>>>> CPython specific.
>>>>>>>
>>>>>>> I'd love to be able to have a similar embeddable distro for Linux
>>>>>>> (and
>>>>>>> macOS), and I'll be investing some of my time in working towards
>>>>>>> this,
>>>>>>> but it's far more complicated than simply laying out the right
>>>>>>> files. If
>>>>>>> you're interested in helping with this, then we're in the right
>>>>>>> place to
>>>>>>> discuss it, but we'll likely have to move to the issue tracker at
>>>>>>> some
>>>>>>> point once we figure out who else wants/needs to be involved.
>>>>>>>
>>>>>>> > Obviously, there are many alternative methods and documents for
>>>>>>> creating
>>>>>>> > "embeddable" pythons on linux, but the windows package has all the
>>>>>>> > characteristics we want, and of course we'd like our Windows and
>>>>>>> Linux
>>>>>>> > process build and packaging processes to be as similar as
>>>>>>> possible, so
>>>>>>> > it seems attractive to try to port this layout script to linux.
>>>>>>>
>>>>>>> "make install" already does the same thing, but the install location
>>>>>>> matters at build time, so it's a little more complex to make it work
>>>>>>> as
>>>>>>> an embedded runtime. I'm sure there are people who know how to make
>>>>>>> it
>>>>>>> work though.
>>>>>>>
>>>>>>> Cheers,
>>>>>>> Steve
>>>>>>>
>>>>>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190503/5693a790/attachment-0001.html>

From status at bugs.python.org  Fri May  3 14:07:47 2019
From: status at bugs.python.org (Python tracker)
Date: Fri,  3 May 2019 18:07:47 +0000 (UTC)
Subject: [Python-Dev] Summary of Python tracker Issues
Message-ID: <20190503180747.44D9052B035@bugs.ams1.psf.io>


ACTIVITY SUMMARY (2019-04-26 - 2019-05-03)
Python tracker at https://bugs.python.org/

To view or respond to any of the issues listed below, click on the issue.
Do NOT respond to this message.

Issues counts and deltas:
  open    7081 ( -2)
  closed 41454 (+52)
  total  48535 (+50)

Open issues with patches: 2820 


Issues opened (41)
==================

#36356: Failure to build with address sanitizer
https://bugs.python.org/issue36356  reopened by vstinner

#36707: The "m" ABI flag of SOABI for pymalloc is no longer needed
https://bugs.python.org/issue36707  reopened by ned.deily

#36737: Warnings operate out of global runtime state.
https://bugs.python.org/issue36737  opened by eric.snow

#36738: Add 'array_hook' for json module
https://bugs.python.org/issue36738  opened by matomatical

#36739: "4.6. Defining Functions" should mention nonlocal
https://bugs.python.org/issue36739  opened by pbhd0815

#36743: Docs: Descript __get__ signature defined differently across th
https://bugs.python.org/issue36743  opened by jdufresne

#36744: functools.singledispatch: Shouldn't require a positional argum
https://bugs.python.org/issue36744  opened by KevinG

#36746: Create test for fcntl.lockf()
https://bugs.python.org/issue36746  opened by nanjekyejoannah

#36748: Optimize textio write buffering
https://bugs.python.org/issue36748  opened by inada.naoki

#36749: PPC64 AIX 3.x: compilation issue, linker fails to locate symbo
https://bugs.python.org/issue36749  opened by vstinner

#36750: test_socket leaks file descriptors on macOS
https://bugs.python.org/issue36750  opened by xtreak

#36751: Changes in the inspect module for PEP 570
https://bugs.python.org/issue36751  opened by pablogsal

#36752: test multiprocessing: test_rapid_restart() crash on AIX
https://bugs.python.org/issue36752  opened by vstinner

#36753: Python modules not linking to libpython causes issues for RTLD
https://bugs.python.org/issue36753  opened by reimar

#36754: Remove smart quotes in pydoc text
https://bugs.python.org/issue36754  opened by steve.dower

#36755: [2.7] test_httplib leaked [8, 8, 8] references with OpenSSL 1.
https://bugs.python.org/issue36755  opened by vstinner

#36756: tkinter tk.createcommand memory leak
https://bugs.python.org/issue36756  opened by WKraus

#36757: uuid constructor accept invalid strings (extra dash)
https://bugs.python.org/issue36757  opened by C??dric Cabessa

#36758: configured libdir not correctly passed to Python executable
https://bugs.python.org/issue36758  opened by michael-o

#36759: datetime: astimezone() results in OSError: [Errno 22] Invalid 
https://bugs.python.org/issue36759  opened by Snidhi

#36760: subprocess.run fails with capture_output=True and stderr=STDOU
https://bugs.python.org/issue36760  opened by Joe.Borg

#36761: Extended slice assignment + iterable unpacking
https://bugs.python.org/issue36761  opened by wim.glenn

#36762: Teach "import *" to warn when overwriting globals or builtins
https://bugs.python.org/issue36762  opened by rhettinger

#36763: PEP 587: Rework initialization API to prepare second version o
https://bugs.python.org/issue36763  opened by vstinner

#36766: Typos in docs and code comments
https://bugs.python.org/issue36766  opened by xtreak

#36767: Segmentation fault when running c extension on macOS
https://bugs.python.org/issue36767  opened by Senhui Guo

#36768: distutils.util.convert_path mangles windows paths with forward
https://bugs.python.org/issue36768  opened by LordAro

#36769: doc Document that fnmatch.filter supports any kind of iterable
https://bugs.python.org/issue36769  opened by adelfino

#36770: stdlib - shutil.make_archive - add support for different ZIP c
https://bugs.python.org/issue36770  opened by owenchia

#36771: Feature Request: An option to os.walk() to return os.DirEntry 
https://bugs.python.org/issue36771  opened by apocalyptech

#36772: Let lru_cache be used as a decorator with no arguments
https://bugs.python.org/issue36772  opened by rhettinger

#36773: Race condition during pickle.load()
https://bugs.python.org/issue36773  opened by papad

#36774: f-strings: Add a !d conversion for ease of debugging
https://bugs.python.org/issue36774  opened by eric.smith

#36777: unittest discover throws TypeError on empty packages
https://bugs.python.org/issue36777  opened by xtreak

#36778: test_site.StartupImportTests.test_startup_imports fails if def
https://bugs.python.org/issue36778  opened by Paul Monson

#36779: time.tzname returns empty string on Windows if default codepag
https://bugs.python.org/issue36779  opened by Paul Monson

#36780: Interpreter exit blocks waiting for futures of shut-down Threa
https://bugs.python.org/issue36780  opened by hniksic

#36781: Optimize sum() for bools
https://bugs.python.org/issue36781  opened by serhiy.storchaka

#36782: Add tests for the datetime C API
https://bugs.python.org/issue36782  opened by p-ganssle

#36783: No documentation for _FromXandFold C API functions
https://bugs.python.org/issue36783  opened by p-ganssle

#36784: __import__ with empty folder after importlib.invalidate_caches
https://bugs.python.org/issue36784  opened by xtreak



Most recent 15 issues with no replies (15)
==========================================

#36784: __import__ with empty folder after importlib.invalidate_caches
https://bugs.python.org/issue36784

#36781: Optimize sum() for bools
https://bugs.python.org/issue36781

#36780: Interpreter exit blocks waiting for futures of shut-down Threa
https://bugs.python.org/issue36780

#36779: time.tzname returns empty string on Windows if default codepag
https://bugs.python.org/issue36779

#36770: stdlib - shutil.make_archive - add support for different ZIP c
https://bugs.python.org/issue36770

#36769: doc Document that fnmatch.filter supports any kind of iterable
https://bugs.python.org/issue36769

#36768: distutils.util.convert_path mangles windows paths with forward
https://bugs.python.org/issue36768

#36766: Typos in docs and code comments
https://bugs.python.org/issue36766

#36758: configured libdir not correctly passed to Python executable
https://bugs.python.org/issue36758

#36755: [2.7] test_httplib leaked [8, 8, 8] references with OpenSSL 1.
https://bugs.python.org/issue36755

#36752: test multiprocessing: test_rapid_restart() crash on AIX
https://bugs.python.org/issue36752

#36748: Optimize textio write buffering
https://bugs.python.org/issue36748

#36738: Add 'array_hook' for json module
https://bugs.python.org/issue36738

#36732: test_asyncio: test_huge_content_recvinto() fails randomly
https://bugs.python.org/issue36732

#36728: Remove PyEval_ReInitThreads() from the public C API
https://bugs.python.org/issue36728



Most recent 15 issues waiting for review (15)
=============================================

#36778: test_site.StartupImportTests.test_startup_imports fails if def
https://bugs.python.org/issue36778

#36774: f-strings: Add a !d conversion for ease of debugging
https://bugs.python.org/issue36774

#36772: Let lru_cache be used as a decorator with no arguments
https://bugs.python.org/issue36772

#36771: Feature Request: An option to os.walk() to return os.DirEntry 
https://bugs.python.org/issue36771

#36770: stdlib - shutil.make_archive - add support for different ZIP c
https://bugs.python.org/issue36770

#36769: doc Document that fnmatch.filter supports any kind of iterable
https://bugs.python.org/issue36769

#36763: PEP 587: Rework initialization API to prepare second version o
https://bugs.python.org/issue36763

#36751: Changes in the inspect module for PEP 570
https://bugs.python.org/issue36751

#36749: PPC64 AIX 3.x: compilation issue, linker fails to locate symbo
https://bugs.python.org/issue36749

#36748: Optimize textio write buffering
https://bugs.python.org/issue36748

#36746: Create test for fcntl.lockf()
https://bugs.python.org/issue36746

#36743: Docs: Descript __get__ signature defined differently across th
https://bugs.python.org/issue36743

#36739: "4.6. Defining Functions" should mention nonlocal
https://bugs.python.org/issue36739

#36738: Add 'array_hook' for json module
https://bugs.python.org/issue36738

#36725: Reference leak regression with Python3.8a3
https://bugs.python.org/issue36725



Top 10 most discussed issues (10)
=================================

#36774: f-strings: Add a !d conversion for ease of debugging
https://bugs.python.org/issue36774  14 msgs

#36751: Changes in the inspect module for PEP 570
https://bugs.python.org/issue36751  12 msgs

#30458: [security][CVE-2019-9740][CVE-2019-9947] HTTP Header Injection
https://bugs.python.org/issue30458   9 msgs

#36763: PEP 587: Rework initialization API to prepare second version o
https://bugs.python.org/issue36763   9 msgs

#26493: Bad formatting in WinError 193 when using subprocess.check_cal
https://bugs.python.org/issue26493   8 msgs

#36710: Pass _PyRuntimeState as an argument rather than using the _PyR
https://bugs.python.org/issue36710   8 msgs

#34616: implement "Async exec"
https://bugs.python.org/issue34616   7 msgs

#35184: Makefile is not correctly generated when compiling pyextat wit
https://bugs.python.org/issue35184   5 msgs

#36356: Failure to build with address sanitizer
https://bugs.python.org/issue36356   5 msgs

#36540: PEP 570: Python Positional-Only Parameters
https://bugs.python.org/issue36540   5 msgs



Issues closed (51)
==================

#5166: ElementTree and minidom don't prevent creation of not well-for
https://bugs.python.org/issue5166  closed by scoder

#8583: Hardcoded namespace_separator in the cElementTree.XMLParser
https://bugs.python.org/issue8583  closed by scoder

#10328: re.sub[n] doesn't seem to handle /Z replacements correctly in 
https://bugs.python.org/issue10328  closed by serhiy.storchaka

#13611: Integrate ElementC14N module into xml.etree package
https://bugs.python.org/issue13611  closed by scoder

#14546: lll.py can't handle multiple parameters correctly
https://bugs.python.org/issue14546  closed by vstinner

#15388: SAX parse (ExpatParser) leaks file handle when given filename 
https://bugs.python.org/issue15388  closed by berker.peksag

#16425: minidom replaceChild(new_child, old_child) removes new_child e
https://bugs.python.org/issue16425  closed by scoder

#18675: Daemon Threads can seg fault
https://bugs.python.org/issue18675  closed by asvetlov

#19895: Cryptic error when subclassing multiprocessing classes
https://bugs.python.org/issue19895  closed by SilentGhost

#21403: cElementTree's Element creation handles attrib argument differ
https://bugs.python.org/issue21403  closed by scoder

#24638: asyncio "loop argument must agree with future" error message c
https://bugs.python.org/issue24638  closed by asvetlov

#27682: wsgiref BaseHandler / SimpleHandler can raise additional error
https://bugs.python.org/issue27682  closed by berker.peksag

#28460: Minidom, order of attributes, datachars
https://bugs.python.org/issue28460  closed by scoder

#28608: Support creating hardlink using `pathlib`
https://bugs.python.org/issue28608  closed by xtreak

#32235: test_xml_etree test_xml_etree_c failures with 2.7 and 3.6 bran
https://bugs.python.org/issue32235  closed by scoder

#34442: zlib module not built on windows
https://bugs.python.org/issue34442  closed by zach.ware

#34602: python3 resource.setrlimit strange behaviour under macOS
https://bugs.python.org/issue34602  closed by ned.deily

#35329: Documentation - capitalization issue
https://bugs.python.org/issue35329  closed by benjamin.peterson

#35502: Memory leak in xml.etree.ElementTree.iterparse
https://bugs.python.org/issue35502  closed by scoder

#35726: QueueHandler formatting affects other handlers
https://bugs.python.org/issue35726  closed by ned.deily

#35947: Update libffi_msvc to current version of libffi
https://bugs.python.org/issue35947  closed by Paul Monson

#35952: test.pythoninfo prints a stack trace and exits with 1 when the
https://bugs.python.org/issue35952  closed by vstinner

#36004: Add datetime.fromisocalendar
https://bugs.python.org/issue36004  closed by vstinner

#36025: Breaking change in PyDate_FromTimeStamp API
https://bugs.python.org/issue36025  closed by berker.peksag

#36341: bind() on AF_UNIX socket may fail in tests run as non-root
https://bugs.python.org/issue36341  closed by asvetlov

#36432: Running python test suite fails on macOS 10.14.4 with resource
https://bugs.python.org/issue36432  closed by ned.deily

#36475: PyEval_AcquireLock() and PyEval_AcquireThread() do not handle 
https://bugs.python.org/issue36475  closed by vstinner

#36509: Add iot layout for windows iot containers
https://bugs.python.org/issue36509  closed by Paul Monson

#36613: asyncio._wait() don't remove callback in case of exception
https://bugs.python.org/issue36613  closed by asvetlov

#36673: Comment/PI parsing support for ElementTree
https://bugs.python.org/issue36673  closed by scoder

#36676: Make ET.XMLParser target aware of namespace prefixes
https://bugs.python.org/issue36676  closed by scoder

#36699: building for riscv multilib (patch attached)
https://bugs.python.org/issue36699  closed by Andreas K. H??ttel

#36715: Dictionary initialization
https://bugs.python.org/issue36715  closed by rhettinger

#36716: Embedded Python fails to import module files with version_plat
https://bugs.python.org/issue36716  closed by ecosatto

#36719: regrtest --findleaks should fail if an uncollectable object is
https://bugs.python.org/issue36719  closed by vstinner

#36729: Delete unused text variable on tests
https://bugs.python.org/issue36729  closed by serhiy.storchaka

#36730: Change outdated references to macOS
https://bugs.python.org/issue36730  closed by berker.peksag

#36734: Modules/faulthandler.c does not compile on HP-UX due to bpo-35
https://bugs.python.org/issue36734  closed by vstinner

#36735: minimize disk size of cross-compiled python3.6
https://bugs.python.org/issue36735  closed by michalgr

#36736: Python crashes when calling win32file.LockFileEx
https://bugs.python.org/issue36736  closed by eryksun

#36740: zipimporter misses namespace packages for implicit dirs
https://bugs.python.org/issue36740  closed by jaraco

#36741: Variable about function and list
https://bugs.python.org/issue36741  closed by xtreak

#36742: urlsplit doesn't accept a NFKD hostname with a port number
https://bugs.python.org/issue36742  closed by steve.dower

#36745: A possible reference leak in PyObject_SetAttr()
https://bugs.python.org/issue36745  closed by asvetlov

#36747: Tools/scripts/setup.py is missing
https://bugs.python.org/issue36747  closed by vstinner

#36764: Types module doesn't have a type for _abc_data
https://bugs.python.org/issue36764  closed by serhiy.storchaka

#36765: Invalid grammar for f_expression
https://bugs.python.org/issue36765  closed by eric.smith

#36775: Rework filesystem codec implementation
https://bugs.python.org/issue36775  closed by vstinner

#36776: test_tools: test_lll_multiple_dirs() failed on  AMD64 Windows7
https://bugs.python.org/issue36776  closed by vstinner

#1613500: Write mode option for fileinput module.
https://bugs.python.org/issue1613500  closed by berker.peksag

#1191964: add non-blocking read and write methods to subprocess.Popen
https://bugs.python.org/issue1191964  closed by josiahcarlson

From solipsis at pitrou.net  Fri May  3 17:40:00 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Fri, 3 May 2019 23:40:00 +0200
Subject: [Python-Dev] PEP 574 ready for review
In-Reply-To: <CADiSq7c-eWwtkZ3RYW0eVAvzWMBpMKWY4bioXaXkVy+1nJwfVQ@mail.gmail.com>
References: <20190430101428.204457e6@fsol>
 <CADiSq7c-eWwtkZ3RYW0eVAvzWMBpMKWY4bioXaXkVy+1nJwfVQ@mail.gmail.com>
Message-ID: <20190503234000.267faa69@fsol>


On Wed, 1 May 2019 12:49:24 -0700
Nick Coghlan <ncoghlan at gmail.com> wrote:
> Thanks Antoine.
> 
> As BDFL-Delegate I'm happy with this version of the PEP, so it's my
> pleasure to accept it for inclusion in Python 3.8.

Thank you Nick!

The implementation has been posted for review at
https://github.com/python/cpython/pull/7076

Regards

Antoine.

From eric at trueblade.com  Fri May  3 22:46:03 2019
From: eric at trueblade.com (Eric V. Smith)
Date: Fri, 3 May 2019 22:46:03 -0400
Subject: [Python-Dev] Unicode identifiers in test files?
Message-ID: <b3ba2821-44cd-b0d4-143e-561d28da3737@trueblade.com>

Is there a policy against using Unicode identifiers in test files?

As part of adding !d to f-strings, there's a code path that's only 
executed if the text of the expression is non-ascii. The easiest way to 
exercise it, and the way I found a bug, is by using an identifier with 
Unicode chars. I know we have a policy against this in Lib/, but what 
about Lib/test/?

I could work around this with exec-ing some strings, but that seems like 
added confusion that I'd avoid with a real Unicode identifier.

Eric


From greg at krypto.org  Fri May  3 23:27:00 2019
From: greg at krypto.org (Gregory P. Smith)
Date: Fri, 3 May 2019 23:27:00 -0400
Subject: [Python-Dev] Unicode identifiers in test files?
In-Reply-To: <b3ba2821-44cd-b0d4-143e-561d28da3737@trueblade.com>
References: <b3ba2821-44cd-b0d4-143e-561d28da3737@trueblade.com>
Message-ID: <CAGE7PN+OW-rD7Ss2JUnHzxJAdQdsbnQik5me2y5zrFHVj7TVNA@mail.gmail.com>

On Fri, May 3, 2019 at 10:46 PM Eric V. Smith <eric at trueblade.com> wrote:

> Is there a policy against using Unicode identifiers in test files?
>
> As part of adding !d to f-strings, there's a code path that's only
> executed if the text of the expression is non-ascii. The easiest way to
> exercise it, and the way I found a bug, is by using an identifier with
> Unicode chars. I know we have a policy against this in Lib/, but what
> about Lib/test/?
>
> I could work around this with exec-ing some strings, but that seems like
> added confusion that I'd avoid with a real Unicode identifier.
>

At this point I'd just do it, make sure the file has an explicit coding
utf-8 comment up top just so it is clear it is intentional but everything
should be happy with it.

-gps


>
> Eric
>
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/greg%40krypto.org
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190503/fc6ace4b/attachment.html>

From steve at pearwood.info  Fri May  3 23:50:35 2019
From: steve at pearwood.info (Steven D'Aprano)
Date: Sat, 4 May 2019 13:50:35 +1000
Subject: [Python-Dev] Unicode identifiers in test files?
In-Reply-To: <b3ba2821-44cd-b0d4-143e-561d28da3737@trueblade.com>
References: <b3ba2821-44cd-b0d4-143e-561d28da3737@trueblade.com>
Message-ID: <20190504035034.GE5010@ando.pearwood.info>

On Fri, May 03, 2019 at 10:46:03PM -0400, Eric V. Smith wrote:
> Is there a policy against using Unicode identifiers in test files?
[...]
> I could work around this with exec-ing some strings, but that seems like 
> added confusion that I'd avoid with a real Unicode identifier.

"Look, that's why there's rules, understand? So that you *think* before 
you break 'em." -- Terry Pratchett, "The Thief Of Time"



-- 
Steven

From storchaka at gmail.com  Sat May  4 02:48:04 2019
From: storchaka at gmail.com (Serhiy Storchaka)
Date: Sat, 4 May 2019 09:48:04 +0300
Subject: [Python-Dev] Unicode identifiers in test files?
In-Reply-To: <b3ba2821-44cd-b0d4-143e-561d28da3737@trueblade.com>
References: <b3ba2821-44cd-b0d4-143e-561d28da3737@trueblade.com>
Message-ID: <qajcis$4c5$1@blaine.gmane.org>

04.05.19 05:46, Eric V. Smith ????:
> Is there a policy against using Unicode identifiers in test files?
> 
> As part of adding !d to f-strings, there's a code path that's only 
> executed if the text of the expression is non-ascii. The easiest way to 
> exercise it, and the way I found a bug, is by using an identifier with 
> Unicode chars. I know we have a policy against this in Lib/, but what 
> about Lib/test/?
> 
> I could work around this with exec-ing some strings, but that seems like 
> added confusion that I'd avoid with a real Unicode identifier.

Could you use string literals with non-ascii characters? They are more 
used in tests.


From eric at trueblade.com  Sat May  4 03:54:04 2019
From: eric at trueblade.com (Eric V. Smith)
Date: Sat, 4 May 2019 03:54:04 -0400
Subject: [Python-Dev] Unicode identifiers in test files?
In-Reply-To: <qajcis$4c5$1@blaine.gmane.org>
References: <b3ba2821-44cd-b0d4-143e-561d28da3737@trueblade.com>
 <qajcis$4c5$1@blaine.gmane.org>
Message-ID: <cdad4334-b454-ac3c-1f7b-6791bc8f3a5a@trueblade.com>

On 5/4/19 2:48 AM, Serhiy Storchaka wrote:
> 04.05.19 05:46, Eric V. Smith ????:
>> Is there a policy against using Unicode identifiers in test files?
>>
>> As part of adding !d to f-strings, there's a code path that's only
>> executed if the text of the expression is non-ascii. The easiest way
>> to exercise it, and the way I found a bug, is by using an identifier
>> with Unicode chars. I know we have a policy against this in Lib/, but
>> what about Lib/test/?
>>
>> I could work around this with exec-ing some strings, but that seems
>> like added confusion that I'd avoid with a real Unicode identifier.
>
> Could you use string literals with non-ascii characters? They are more
> used in tests.

Hi, Serhiy.

I could and will, yes: thanks for the suggestion. But for this specific 
feature, I also want to test with simple variable-only expressions. I'm 
either going to use a unicode identifier in the code, or eval one in a 
string. Doing the eval dance just seems like extra work for some sort of 
purity that I don't think is important in a test, unless someone can 
think of a good reason for it.

Eric

From eric at trueblade.com  Sat May  4 04:10:32 2019
From: eric at trueblade.com (Eric V. Smith)
Date: Sat, 4 May 2019 04:10:32 -0400
Subject: [Python-Dev] Unicode identifiers in test files?
In-Reply-To: <cdad4334-b454-ac3c-1f7b-6791bc8f3a5a@trueblade.com>
References: <b3ba2821-44cd-b0d4-143e-561d28da3737@trueblade.com>
 <qajcis$4c5$1@blaine.gmane.org>
 <cdad4334-b454-ac3c-1f7b-6791bc8f3a5a@trueblade.com>
Message-ID: <64330e01-d4c0-c048-a2fb-74810cf8d930@trueblade.com>

On 5/4/19 3:54 AM, Eric V. Smith wrote:
> On 5/4/19 2:48 AM, Serhiy Storchaka wrote:
>> 04.05.19 05:46, Eric V. Smith ????:
>>> Is there a policy against using Unicode identifiers in test files?
>>>
>>> As part of adding !d to f-strings, there's a code path that's only
>>> executed if the text of the expression is non-ascii. The easiest way
>>> to exercise it, and the way I found a bug, is by using an identifier
>>> with Unicode chars. I know we have a policy against this in Lib/, but
>>> what about Lib/test/?
>>>
>>> I could work around this with exec-ing some strings, but that seems
>>> like added confusion that I'd avoid with a real Unicode identifier.
>>
>> Could you use string literals with non-ascii characters? They are more
>> used in tests.
>
> Hi, Serhiy.
>
> I could and will, yes: thanks for the suggestion. But for this specific
> feature, I also want to test with simple variable-only expressions. I'm
> either going to use a unicode identifier in the code, or eval one in a
> string. Doing the eval dance just seems like extra work for some sort of
> purity that I don't think is important in a test, unless someone can
> think of a good reason for it.

And I just noticed that PEP 3131 has an exception for tests in its 
section that says the stdlib can't contain unicode identifiers:

https://www.python.org/dev/peps/pep-3131/#policy-specification

So, since it's the most direct and probably safest thing to do for a 
test, I'm going to use a unicode identier.

Thanks, all, for your ideas. Especially Greg for reminding me to add the 
coding comment.

Eric

From songofacandy at gmail.com  Sat May  4 04:45:38 2019
From: songofacandy at gmail.com (Inada Naoki)
Date: Sat, 4 May 2019 17:45:38 +0900
Subject: [Python-Dev] RFC: PEP 587 "Python Initialization
 Configuration": 2nd version
In-Reply-To: <CA+3bQGF7XbUT1WfO3KB+9Xa-si30ozQY6h0J2bBqpi6rj-XG9g@mail.gmail.com>
References: <CA+3bQGF7XbUT1WfO3KB+9Xa-si30ozQY6h0J2bBqpi6rj-XG9g@mail.gmail.com>
Message-ID: <CAEfz+TzBooCP+tZhd4QGGDz=fQi71EWdJrj=Aea6U34DuqD+uw@mail.gmail.com>

2019?5?3?(?) 4:59 Victor Stinner <vstinner at redhat.com>:
>
> * PyConfig now only uses wchar_t* for strings (unicode): char* (bytes)
> is no longer used. I had to hack CPython internals for that :-)

I prefer char* to wchar_t* on Unix.  Since UTF-8 dominated Unix world
in these decades, wchar_t* is less usable on Unix nowadays.

Is it impossible to use just char* on Unix and wchar_t* on Windows?

-- 
Inada Naoki  <songofacandy at gmail.com>

From vstinner at redhat.com  Sat May  4 11:45:49 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Sat, 4 May 2019 11:45:49 -0400
Subject: [Python-Dev] RFC: PEP 587 "Python Initialization
 Configuration": 2nd version
In-Reply-To: <CAEfz+TzBooCP+tZhd4QGGDz=fQi71EWdJrj=Aea6U34DuqD+uw@mail.gmail.com>
References: <CA+3bQGF7XbUT1WfO3KB+9Xa-si30ozQY6h0J2bBqpi6rj-XG9g@mail.gmail.com>
 <CAEfz+TzBooCP+tZhd4QGGDz=fQi71EWdJrj=Aea6U34DuqD+uw@mail.gmail.com>
Message-ID: <CA+3bQGEnPT2c_WmAOfbQHgutP1ShKv3N8dwFh7D2HHPxv7obQg@mail.gmail.com>

Hi INADA-san,

This PEP is the result of 2 years of refactoring to *simplify* the
*implementation*. I agree that bytes string is the native type on Unix.
But. On Windows, Unicode is the native type. On Python 3, Unicode is the
native type. One key of the simplified implementation is the unique
PyConfig structure. It means that all platforms have to use the same types.

I love the idea of using only wchar_t* for PyConfig because it makes Python
initialization more reliable. The question of the encoding used to decode
byte strings and any possible decoding error (very unlikely thanks to
surrogateescape) is better defined: it occurs when you set the parameter,
not "later during init".

The PEP adds Py_UnixMain() for most trivial use cases, and
PyConfig_DecodeLocale() and PyConfig_SetArgs() for more advanced cases.

Victor

Le samedi 4 mai 2019, Inada Naoki <songofacandy at gmail.com> a ?crit :
> 2019?5?3?(?) 4:59 Victor Stinner <vstinner at redhat.com>:
>>
>> * PyConfig now only uses wchar_t* for strings (unicode): char* (bytes)
>> is no longer used. I had to hack CPython internals for that :-)
>
> I prefer char* to wchar_t* on Unix.  Since UTF-8 dominated Unix world
> in these decades, wchar_t* is less usable on Unix nowadays.
>
> Is it impossible to use just char* on Unix and wchar_t* on Windows?
>
> --
> Inada Naoki  <songofacandy at gmail.com>
>

-- 
Night gathers, and now my watch begins. It shall not end until my death.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190504/f9a22929/attachment-0001.html>

From turnbull.stephen.fw at u.tsukuba.ac.jp  Sat May  4 17:02:47 2019
From: turnbull.stephen.fw at u.tsukuba.ac.jp (Stephen J. Turnbull)
Date: Sun, 5 May 2019 06:02:47 +0900
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
In-Reply-To: <qad24b$3mhr$1@blaine.gmane.org>
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
 <20190501124831.7faadb2b@fsol>
 <CACac1F9OJdkc_v0dQJwBMn_nEMecxkLMXKr9f8efQgF4EN4UjA@mail.gmail.com>
 <d5689034-bce2-9f8c-b53b-01a020565798@withers.org>
 <CACac1F90cVoU7DeSD2QkYTeSD+TLT80EkNoStx0pZZoY0iV4kQ@mail.gmail.com>
 <05ef1790-dc90-f5a6-a25c-9ba5abc66a3a@withers.org>
 <qad24b$3mhr$1@blaine.gmane.org>
Message-ID: <23757.65015.549415.193161@turnbull.sk.tsukuba.ac.jp>

Terry Reedy writes:

 > I agree that complete 100.000% test coverage is a nice ideal, but
 > sometimes the last percent can take hours to accomplish, if it is
 > indeed sensibly possible.

100% test coverage is an ideal.  Reports *claiming* 100% coverage,
however, are of practical benefit.  The point is to identify a
regression.

It's best to have 100% coverage, because it's possible that
improvements in the environment allow a test that wasn't reliable (==
deterministic) or maybe not even feasible before to become feasible
and reliable, and a coveragerc that says "oh, that line is OK" will
obscure that possibility.

But a *claim* (albeit somewhat undermined by a non-trivial coveragerc)
of 100% coverage means it's *easy to identify regressions in
coverage*.  I think that's a bigger deal, at least at this time.

 > I have asked more that once what .coveragerc file is being used by
 > CI and whether we can somehow properly customize it for CPython.

Seconded.  Thank you for pushing this, and for all the other efforts
you're making here.

Steve


From ericsnowcurrently at gmail.com  Sun May  5 09:47:07 2019
From: ericsnowcurrently at gmail.com (Eric Snow)
Date: Sun, 5 May 2019 09:47:07 -0400
Subject: [Python-Dev] PEP 574 ready for review
In-Reply-To: <CADiSq7c-eWwtkZ3RYW0eVAvzWMBpMKWY4bioXaXkVy+1nJwfVQ@mail.gmail.com>
References: <20190430101428.204457e6@fsol>
 <CADiSq7c-eWwtkZ3RYW0eVAvzWMBpMKWY4bioXaXkVy+1nJwfVQ@mail.gmail.com>
Message-ID: <CALFfu7A_BZgY7L-x2sPEoDpa65i8Sj1PW_wX+RRb4ADW5xQJag@mail.gmail.com>

On Wed, May 1, 2019, 15:49 Nick Coghlan <ncoghlan at gmail.com> wrote:

> As BDFL-Delegate I'm happy with this version of the PEP, so it's my
> pleasure to accept it for inclusion in Python 3.8.
>

Congratulations, Antoine!  This is a big deal and a lot of folks won't
realize it at first. :)

-eric

>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190505/91747d7a/attachment.html>

From encukou at gmail.com  Sun May  5 18:04:06 2019
From: encukou at gmail.com (Petr Viktorin)
Date: Sun, 5 May 2019 18:04:06 -0400
Subject: [Python-Dev] PEP 580/590 discussion
In-Reply-To: <1309c111-359e-1af6-2655-a16ffaad2994@redhat.com>
References: <CADiSq7f7GRJjZmoLAxpN5hovMT5=M73aJUi14HHFDNG=hssV7w@mail.gmail.com>
 <6c8356e3-f9b2-c39e-63c4-17f146d326b7@hotpy.org>
 <CA+=+wqBsUKWHRqjhRFShmY77vaxDPTFaafWtOB8dnyXQSthiZw@mail.gmail.com>
 <15b8a3d7-00ed-a5eb-475c-a3adee671b5f@hotpy.org> <5C9FEF82.50207@UGent.be>
 <d28319ff-a8aa-f218-b8ed-1d489ff9e324@redhat.com>
 <421f8182-4bc8-b8cf-82d6-ca4a4fbd2013@hotpy.org>
 <50d675b4-839c-6502-ad1a-a33ea9330000@redhat.com>
 <d1acd3b6-9cc9-abcc-6ccd-5cfeb5b2b7d2@hotpy.org>
 <b0197d1b-afa5-9681-0783-ed932c8b0a58@redhat.com> <5CC1C765.1020608@UGent.be>
 <1309c111-359e-1af6-2655-a16ffaad2994@redhat.com>
Message-ID: <CA+=+wqDmj99J-n6BKw0MB3ZCKJZ2edoXSsvjq7Ag8LTJjhJMNQ@mail.gmail.com>

Hello!
Sorry for the delay; PyCon is keeping me busy. On the other hand, I
did get to talk to a lot of smart people here!

I'm leaning toward accepting PEP 590 (with some changes still). Let's
start focusing on it.
As for the changes, I have these 4 points:

I feel that the API needs some contact with real users before it's set
in stone. That was the motivation behind my proposal for PEP 590 with
additional flags.
At PyCon, Nick Coghlan suggested another option make the API
"provisional":  make it formally private.
Py_TPFLAGS_HAVE_VECTORCALL would be underscore-prefixed, and the docs
would say that it can change. in Python 3.9, the semantics will be
finalized and the underscore removed.
This would allow high-maintenance projects (like Cython) to start
using it and give their feedback, and we'd have a chance to respond to
the feedback.

tp_vectorcall_offset should be what's replacing tp_print in the
struct. The current implementation has tp_vectorcall there. This way,
Cython can create vectorcall callables for older Pythons. (See PEP
580: https://www.python.org/dev/peps/pep-0580/#replacing-tp-print).

Subclassing should not be forbidden. Jeroen, do you want write a
section for how subclassing should work?

Given Jeroen's research and ideas that went into the PEP (and
hopefully, we'll incorporate some PEP 580 text as well), it seems fair
to list him as co-author of the accepted PEP, instead of just listing
PEP 580 in the acknowledgement section.


On some other points:

- Single bound method class for all kinds of function classes: This
would be a cleaner design, yes, but I don't see a pressing need. As
PEP 579 says, "this is a compounding issue", not a goal. As I recall,
that is the only major reason for CCALL_DEFARG.
PEP 590 says that x64 Windows passes 4 arguments in registers.
Admittedly, I haven't checked this, nor the performance implications
(so this would be a good point to argue!), but it seems like a good
reason to keep the argument count down. So, no CCALL_DEFARG.

- In reply to this Mark's note:
> PEP 590 is fully universal, it supports callables that can do anything with anything. There is no need for it to be extended because it already supports any possible behaviour.

I don't buy this point. The current tp_call also supports any possible
behavior. Here we want to support any behavior *efficiently*.
As a specific example: for calling PEP 590 callable with a kwarg dict,
there'll need to be an extra allocation. That's inefficient relative
to PEP 580 (or PEP 590 plus allowing a dict in "kwnames"). But I'm
willing to believe the inefficiency is acceptable.


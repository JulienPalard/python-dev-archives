From tjreedy at udel.edu  Wed May  1 01:12:10 2019
From: tjreedy at udel.edu (Terry Reedy)
Date: Wed, 1 May 2019 01:12:10 -0400
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
In-Reply-To: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
Message-ID: <qab9rb$5a7r$1@blaine.gmane.org>

On 4/30/2019 5:24 PM, Chris Withers wrote:
> Hi All,
> 
> I have a crazy idea of getting unittest.mock up to 100% code coverage.
> 
> I noticed at the bottom of all of the test files in testmock/, there's a:
> 
> if __name__ == '__main__':
>  ??? unittest.main()
> 
> ...block.

Such blocks should be excluded from coverage by the default .coveragerc 
file.  Mine came with

exclude_lines =
     # Don't complain if non-runnable code isn't run:
     if 0:
     if __name__ == .__main__.:
     if DEBUG:


-- 
Terry Jan Reedy



From chris at withers.org  Wed May  1 02:13:16 2019
From: chris at withers.org (Chris Withers)
Date: Wed, 1 May 2019 07:13:16 +0100
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
In-Reply-To: <qab9rb$5a7r$1@blaine.gmane.org>
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
 <qab9rb$5a7r$1@blaine.gmane.org>
Message-ID: <98f5b8b6-6582-e348-c0fc-472ba228f131@withers.org>

On 01/05/2019 06:12, Terry Reedy wrote:
> Such blocks should be excluded from coverage by the default .coveragerc 
> file.? Mine came with
> 
> exclude_lines =
>  ??? # Don't complain if non-runnable code isn't run:
>  ??? if 0:
>  ??? if __name__ == .__main__.:
>  ??? if DEBUG:

Which .coveragerc are you referring to? There isn't one in the cpython 
repo and a current release of coverage.py doesn't appear to exclude 
these lines for me:

https://circleci.com/gh/testing-cabal/mock/20

(line 44 in mock/tests/testsentinel.py)

Chris

From storchaka at gmail.com  Wed May  1 02:46:57 2019
From: storchaka at gmail.com (Serhiy Storchaka)
Date: Wed, 1 May 2019 09:46:57 +0300
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
In-Reply-To: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
Message-ID: <qabfcq$4dkk$1@blaine.gmane.org>

01.05.19 00:24, Chris Withers ????:
> I have a crazy idea of getting unittest.mock up to 100% code coverage.
> 
> I noticed at the bottom of all of the test files in testmock/, there's a:
> 
> if __name__ == '__main__':
>  ??? unittest.main()
> 
> ...block.
> 
> How would people feel about these going away? I don't *think* they're 
> needed now that we have unittest discover, but thought I'd ask.

These lines were added for purpose. They are needed for running tests in 
separate file as a script.

$ ./python Lib/unittest/test/testmock/testcallable.py -v
test_attributes (__main__.TestCallable) ... ok
test_create_autospec (__main__.TestCallable) ... ok
test_create_autospec_instance (__main__.TestCallable) ... ok
test_hierarchy (__main__.TestCallable) ... ok
test_non_callable (__main__.TestCallable) ... ok
test_patch_spec (__main__.TestCallable) ... ok
test_patch_spec_callable_class (__main__.TestCallable) ... ok
test_patch_spec_instance (__main__.TestCallable) ... ok
test_patch_spec_set (__main__.TestCallable) ... ok
test_patch_spec_set_instance (__main__.TestCallable) ... ok
test_subclasses (__main__.TestCallable) ... ok

----------------------------------------------------------------------
Ran 11 tests in 0.040s

OK


From chris at withers.org  Wed May  1 03:09:55 2019
From: chris at withers.org (Chris Withers)
Date: Wed, 1 May 2019 08:09:55 +0100
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
In-Reply-To: <qabfcq$4dkk$1@blaine.gmane.org>
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
 <qabfcq$4dkk$1@blaine.gmane.org>
Message-ID: <10a06aab-7190-c41e-d5f7-64e1b64005ad@withers.org>

On 01/05/2019 07:46, Serhiy Storchaka wrote:
> 01.05.19 00:24, Chris Withers ????:
>> I have a crazy idea of getting unittest.mock up to 100% code coverage.
>>
>> I noticed at the bottom of all of the test files in testmock/, there's a:
>>
>> if __name__ == '__main__':
>> ???? unittest.main()
>>
>> ...block.
>>
>> How would people feel about these going away? I don't *think* they're 
>> needed now that we have unittest discover, but thought I'd ask.
> 
> These lines were added for purpose. They are needed for running tests in 
> separate file as a script.
> 
> $ ./python Lib/unittest/test/testmock/testcallable.py -v
> test_attributes (__main__.TestCallable) ... ok
> test_create_autospec (__main__.TestCallable) ... ok
> test_create_autospec_instance (__main__.TestCallable) ... ok
> test_hierarchy (__main__.TestCallable) ... ok
> test_non_callable (__main__.TestCallable) ... ok
> test_patch_spec (__main__.TestCallable) ... ok
> test_patch_spec_callable_class (__main__.TestCallable) ... ok
> test_patch_spec_instance (__main__.TestCallable) ... ok
> test_patch_spec_set (__main__.TestCallable) ... ok
> test_patch_spec_set_instance (__main__.TestCallable) ... ok
> test_subclasses (__main__.TestCallable) ... ok

Right, but that's not the documented way of running individual suites in 
the devguide.

I'm happy to remove these on the basis that there should be one and only 
one way of doing things like this.

Chris

From tjreedy at udel.edu  Wed May  1 06:24:59 2019
From: tjreedy at udel.edu (Terry Reedy)
Date: Wed, 1 May 2019 06:24:59 -0400
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
In-Reply-To: <98f5b8b6-6582-e348-c0fc-472ba228f131@withers.org>
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
 <qab9rb$5a7r$1@blaine.gmane.org>
 <98f5b8b6-6582-e348-c0fc-472ba228f131@withers.org>
Message-ID: <qabs5s$7vhm$1@blaine.gmane.org>

On 5/1/2019 2:13 AM, Chris Withers wrote:
> On 01/05/2019 06:12, Terry Reedy wrote:
>> Such blocks should be excluded from coverage by the default 
>> .coveragerc file.? Mine came with
>>
>> exclude_lines =
>> ???? # Don't complain if non-runnable code isn't run:
>> ???? if 0:
>> ???? if __name__ == .__main__.:
>> ???? if DEBUG:

I am fairly sure these are the original lines.  I added more to my 
personal copy to exclude some things specific to idlelib files.  Idlelib 
files also have the same statement as the mock files.  It is very handy 
for development.

> Which .coveragerc are you referring to? 

The file in the directory that contains Ned's coverage package.
At least that is where it is for me.

> There isn't one in the cpython repo

Since /coverage is not in the Python repo either, I would not expect it 
to be.

> and a current release of coverage.py doesn't appear to exclude 
> these lines for me:

> https://circleci.com/gh/testing-cabal/mock/20
> 
> (line 44 in mock/tests/testsentinel.py)

I consider this a problem in the circleci coverage setup, not in the 
mock files.  A faulty exclude-lines section leads to a faulty coverage 
calculation.  Ned made it user-editable for a reason.

-- 
Terry Jan Reedy



From solipsis at pitrou.net  Wed May  1 06:48:31 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Wed, 1 May 2019 12:48:31 +0200
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
Message-ID: <20190501124831.7faadb2b@fsol>

On Tue, 30 Apr 2019 22:24:53 +0100
Chris Withers <chris at withers.org> wrote:
> Hi All,
> 
> I have a crazy idea of getting unittest.mock up to 100% code coverage.
> 
> I noticed at the bottom of all of the test files in testmock/, there's a:
> 
> if __name__ == '__main__':
>  ??? unittest.main()
> 
> ...block.
> 
> How would people feel about these going away? I don't *think* they're 
> needed now that we have unittest discover, but thought I'd ask.

If you are only asking to remove them because you want that score of
100% coverage, then I think you shouldn't.

Regards

Antoine.



From vstinner at redhat.com  Wed May  1 08:21:54 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Wed, 1 May 2019 08:21:54 -0400
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
In-Reply-To: <10a06aab-7190-c41e-d5f7-64e1b64005ad@withers.org>
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
 <qabfcq$4dkk$1@blaine.gmane.org>
 <10a06aab-7190-c41e-d5f7-64e1b64005ad@withers.org>
Message-ID: <CA+3bQGFiVS5Adu6dr8jnxZSMe6tBi=wH6aUN5-NYhE1EBkQBmQ@mail.gmail.com>

Le mer. 1 mai 2019 ? 03:12, Chris Withers <chris at withers.org> a ?crit :
> Right, but that's not the documented way of running individual suites in
> the devguide.

Maybe, but I'm using that sometimes and it's useful for some specific
issues. Is it possible to run an individual test file using unittest?

Something like ./python -m unittest
Lib/unittest/test/testmock/testcallable.py -v

Victor
-- 
Night gathers, and now my watch begins. It shall not end until my death.

From chris at withers.org  Wed May  1 08:30:40 2019
From: chris at withers.org (Chris Withers)
Date: Wed, 1 May 2019 13:30:40 +0100
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
In-Reply-To: <CA+3bQGFiVS5Adu6dr8jnxZSMe6tBi=wH6aUN5-NYhE1EBkQBmQ@mail.gmail.com>
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
 <qabfcq$4dkk$1@blaine.gmane.org>
 <10a06aab-7190-c41e-d5f7-64e1b64005ad@withers.org>
 <CA+3bQGFiVS5Adu6dr8jnxZSMe6tBi=wH6aUN5-NYhE1EBkQBmQ@mail.gmail.com>
Message-ID: <a0dd16c9-475a-e15b-114d-fde7121dd5de@withers.org>

On 01/05/2019 13:21, Victor Stinner wrote:
> Le mer. 1 mai 2019 ? 03:12, Chris Withers <chris at withers.org> a ?crit :
>> Right, but that's not the documented way of running individual suites in
>> the devguide.
> 
> Maybe, but I'm using that sometimes and it's useful for some specific
> issues. Is it possible to run an individual test file using unittest?
> 
> Something like ./python -m unittest
> Lib/unittest/test/testmock/testcallable.py -v

Yep:

$ ./python.exe -m unittest Lib/unittest/test/testmock/testsentinel.py
......
----------------------------------------------------------------------
Ran 6 tests in 0.002s

$ ./python.exe -m unittest -v Lib/unittest/test/testmock/testsentinel.py
testBases (Lib.unittest.test.testmock.testsentinel.SentinelTest) ... ok
testCopy (Lib.unittest.test.testmock.testsentinel.SentinelTest) ... ok
testDEFAULT (Lib.unittest.test.testmock.testsentinel.SentinelTest) ... ok
testPickle (Lib.unittest.test.testmock.testsentinel.SentinelTest) ... ok
testSentinelName (Lib.unittest.test.testmock.testsentinel.SentinelTest) 
... ok
testSentinels (Lib.unittest.test.testmock.testsentinel.SentinelTest) ... ok

----------------------------------------------------------------------
Ran 6 tests in 0.003s

OK

$ ./python.exe -m unittest -v unittest.test.testmock.testsentinel
testBases (unittest.test.testmock.testsentinel.SentinelTest) ... ok
testCopy (unittest.test.testmock.testsentinel.SentinelTest) ... ok
testDEFAULT (unittest.test.testmock.testsentinel.SentinelTest) ... ok
testPickle (unittest.test.testmock.testsentinel.SentinelTest) ... ok
testSentinelName (unittest.test.testmock.testsentinel.SentinelTest) ... ok
testSentinels (unittest.test.testmock.testsentinel.SentinelTest) ... ok

----------------------------------------------------------------------
Ran 6 tests in 0.003s

cheers,

Chris

From p.f.moore at gmail.com  Wed May  1 08:37:01 2019
From: p.f.moore at gmail.com (Paul Moore)
Date: Wed, 1 May 2019 13:37:01 +0100
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
In-Reply-To: <20190501124831.7faadb2b@fsol>
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
 <20190501124831.7faadb2b@fsol>
Message-ID: <CACac1F9OJdkc_v0dQJwBMn_nEMecxkLMXKr9f8efQgF4EN4UjA@mail.gmail.com>

I agree - removing this just to make the coverage figures look pretty
seems like the wrong motivation.

Configuring coverage to understand that you want to exclude these
lines from the checking would be fine, as would accepting that a
coverage of slightly less than 100% is OK. Removing functionality that
people use (whether or not they have other ways of getting the same
results) needs a stronger justification, IMO.

Paul

On Wed, 1 May 2019 at 11:51, Antoine Pitrou <solipsis at pitrou.net> wrote:
>
> On Tue, 30 Apr 2019 22:24:53 +0100
> Chris Withers <chris at withers.org> wrote:
> > Hi All,
> >
> > I have a crazy idea of getting unittest.mock up to 100% code coverage.
> >
> > I noticed at the bottom of all of the test files in testmock/, there's a:
> >
> > if __name__ == '__main__':
> >      unittest.main()
> >
> > ...block.
> >
> > How would people feel about these going away? I don't *think* they're
> > needed now that we have unittest discover, but thought I'd ask.
>
> If you are only asking to remove them because you want that score of
> 100% coverage, then I think you shouldn't.
>
> Regards
>
> Antoine.
>
>
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe: https://mail.python.org/mailman/options/python-dev/p.f.moore%40gmail.com

From storchaka at gmail.com  Wed May  1 08:39:15 2019
From: storchaka at gmail.com (Serhiy Storchaka)
Date: Wed, 1 May 2019 15:39:15 +0300
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
In-Reply-To: <10a06aab-7190-c41e-d5f7-64e1b64005ad@withers.org>
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
 <qabfcq$4dkk$1@blaine.gmane.org>
 <10a06aab-7190-c41e-d5f7-64e1b64005ad@withers.org>
Message-ID: <qac41d$623f$1@blaine.gmane.org>

01.05.19 10:09, Chris Withers ????:
> Right, but that's not the documented way of running individual suites in 
> the devguide.
> 
> I'm happy to remove these on the basis that there should be one and only 
> one way of doing things like this.

This principle is not applicable here because the Python testsuite is 
not a public API. It is not for use of Python users.

We try to support several different ways of running tests. This allows 
to catch some environment depended flaws in tests and serves as a kind 
of the test of unittest itself. Not all test files are made discoverable 
yet, but we move in this direction.

I do not see what is wrong here and suggest to not break working code.


From chris at withers.org  Wed May  1 08:51:22 2019
From: chris at withers.org (Chris Withers)
Date: Wed, 1 May 2019 13:51:22 +0100
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
In-Reply-To: <CACac1F9OJdkc_v0dQJwBMn_nEMecxkLMXKr9f8efQgF4EN4UjA@mail.gmail.com>
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
 <20190501124831.7faadb2b@fsol>
 <CACac1F9OJdkc_v0dQJwBMn_nEMecxkLMXKr9f8efQgF4EN4UjA@mail.gmail.com>
Message-ID: <d5689034-bce2-9f8c-b53b-01a020565798@withers.org>

On 01/05/2019 13:37, Paul Moore wrote:
> I agree - removing this just to make the coverage figures look pretty
> seems like the wrong motivation.
> 
> Configuring coverage to understand that you want to exclude these
> lines from the checking would be fine, as would accepting that a
> coverage of slightly less than 100% is OK. Removing functionality that
> people use (whether or not they have other ways of getting the same
> results) needs a stronger justification, IMO.

It's an interesting point; I personally don't see much value in coverage 
of less than 100%, if you're going to look at coverage: no-one is going 
to focus on or potentially even notice whether coverage moved from 99% 
to 99% (no typo), even though a bunch of new uncovered code may have 
been introduced.

If people are actually using these blocks, then so be it, but it feels 
like the people who want them to stick around are saying they're using 
them just on the off chance they might use them, which feels like a poor 
reason to keep a bunch of dead code around.

I'm not sure I understand how triggering via unittest or via unittest 
(again, no typo, both these __main__ blocks and python -m unittest are 
using the same test runner) could make a difference.

Chris

From chris at withers.org  Wed May  1 08:56:44 2019
From: chris at withers.org (Chris Withers)
Date: Wed, 1 May 2019 13:56:44 +0100
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
In-Reply-To: <qac41d$623f$1@blaine.gmane.org>
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
 <qabfcq$4dkk$1@blaine.gmane.org>
 <10a06aab-7190-c41e-d5f7-64e1b64005ad@withers.org>
 <qac41d$623f$1@blaine.gmane.org>
Message-ID: <d5fb0b92-baef-7b04-8ac2-97a7e1ed1222@withers.org>

Sorry, accidentally include a comment for this in a reply to Paul:

On 01/05/2019 13:39, Serhiy Storchaka wrote:
> We try to support several different ways of running tests. This allows 
> to catch some environment depended flaws in tests and serves as a kind 
> of the test of unittest itself. Not all test files are made discoverable 
> yet, but we move in this direction.

I'm not sure I understand how triggering via unittest or via unittest 
(no typo, both these __main__ blocks and python -m unittest are using 
the same test runner) could make a difference.

And sorry, to be clear, I'm only taking about the ones in 
unittest/mock/testmock - Rob Collins confirmed these where never needed 
in a private reply:

> They were never needed ?
> 
> Removal is fine with me.


Chris

From p.f.moore at gmail.com  Wed May  1 09:22:48 2019
From: p.f.moore at gmail.com (Paul Moore)
Date: Wed, 1 May 2019 14:22:48 +0100
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
In-Reply-To: <d5689034-bce2-9f8c-b53b-01a020565798@withers.org>
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
 <20190501124831.7faadb2b@fsol>
 <CACac1F9OJdkc_v0dQJwBMn_nEMecxkLMXKr9f8efQgF4EN4UjA@mail.gmail.com>
 <d5689034-bce2-9f8c-b53b-01a020565798@withers.org>
Message-ID: <CACac1F90cVoU7DeSD2QkYTeSD+TLT80EkNoStx0pZZoY0iV4kQ@mail.gmail.com>

On Wed, 1 May 2019 at 13:53, Chris Withers <chris at withers.org> wrote:
>
> On 01/05/2019 13:37, Paul Moore wrote:
> > I agree - removing this just to make the coverage figures look pretty
> > seems like the wrong motivation.
> >
> > Configuring coverage to understand that you want to exclude these
> > lines from the checking would be fine, as would accepting that a
> > coverage of slightly less than 100% is OK. Removing functionality that
> > people use (whether or not they have other ways of getting the same
> > results) needs a stronger justification, IMO.
>
> It's an interesting point; I personally don't see much value in coverage
> of less than 100%, if you're going to look at coverage: no-one is going
> to focus on or potentially even notice whether coverage moved from 99%
> to 99% (no typo), even though a bunch of new uncovered code may have
> been introduced.

That's a fair point.

> If people are actually using these blocks, then so be it, but it feels
> like the people who want them to stick around are saying they're using
> them just on the off chance they might use them, which feels like a poor
> reason to keep a bunch of dead code around.

If your argument was "this is dead code, and should be removed to help
future maintenance", I'd have no problem with that. My point was
simply that I think that adjusting the code to make the coverage stats
hit 100% feels like going at things the wrong way round.

Is it really that difficult to simply tell coverage to ignore them? I
thought someone had already pointed to a coveragerc file that let you
do this.

Personally, I don't use those blocks at all, so it doesn't matter to
me whether they stay or go in any practical sense.
Paul

From chris at withers.org  Wed May  1 09:30:01 2019
From: chris at withers.org (Chris Withers)
Date: Wed, 1 May 2019 14:30:01 +0100
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
In-Reply-To: <CACac1F90cVoU7DeSD2QkYTeSD+TLT80EkNoStx0pZZoY0iV4kQ@mail.gmail.com>
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
 <20190501124831.7faadb2b@fsol>
 <CACac1F9OJdkc_v0dQJwBMn_nEMecxkLMXKr9f8efQgF4EN4UjA@mail.gmail.com>
 <d5689034-bce2-9f8c-b53b-01a020565798@withers.org>
 <CACac1F90cVoU7DeSD2QkYTeSD+TLT80EkNoStx0pZZoY0iV4kQ@mail.gmail.com>
Message-ID: <05ef1790-dc90-f5a6-a25c-9ba5abc66a3a@withers.org>

On 01/05/2019 14:22, Paul Moore wrote:
>> If people are actually using these blocks, then so be it, but it feels
>> like the people who want them to stick around are saying they're using
>> them just on the off chance they might use them, which feels like a poor
>> reason to keep a bunch of dead code around.
> 
> If your argument was "this is dead code, and should be removed to help
> future maintenance", I'd have no problem with that. 

Yep, that's exactly my point :-)
The dev guide shows how to run individual tests without these and 
doesn't mention them at all. As someone coming back to core dev late 
last year, I was left wondering whether I *should* be using them and 
that created confusion for me; having only one way to do things seems 
like a good thing here.

> My point was
> simply that I think that adjusting the code to make the coverage stats
> hit 100% feels like going at things the wrong way round.

Agreed, but my focus here is to get to 100% for mock so that it's clear 
that all the code is there for a reason; mock is very complicated by 
necessity, and having examples of why code needs to be there is what I'm 
aiming for most of all.

> Is it really that difficult to simply tell coverage to ignore them? I
> thought someone had already pointed to a coveragerc file that let you
> do this.

It would be if the cpython repo had a coveragerc, but it does not.
People maintaining their own ad-hoc coverage configs seems like a pretty 
bad idea.

> Personally, I don't use those blocks at all, so it doesn't matter to
> me whether they stay or go in any practical sense.

Right, that's by gut feeling here: I don't want people encountering this 
mock codebase to have to wonder whether they should be running the tests 
using these blocks versus the way described in the dev guide, and 
stressing about what the differences might be, when there aren't any...

Chris

From tir.karthi at gmail.com  Wed May  1 09:52:23 2019
From: tir.karthi at gmail.com (Karthikeyan)
Date: Wed, 1 May 2019 19:22:23 +0530
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
In-Reply-To: <qac41d$623f$1@blaine.gmane.org>
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
 <qabfcq$4dkk$1@blaine.gmane.org>
 <10a06aab-7190-c41e-d5f7-64e1b64005ad@withers.org>
 <qac41d$623f$1@blaine.gmane.org>
Message-ID: <CAAjsFLSBWQ+0t6_M4B1YqdO4fUHoC41d-5tD43aaTGt-4_P_0A@mail.gmail.com>

On Wed, May 1, 2019 at 6:13 PM Serhiy Storchaka <storchaka at gmail.com> wrote:

> 01.05.19 10:09, Chris Withers ????:
> > Right, but that's not the documented way of running individual suites in
> > the devguide.
> >
> > I'm happy to remove these on the basis that there should be one and only
> > one way of doing things like this.
>
> This principle is not applicable here because the Python testsuite is
> not a public API. It is not for use of Python users.
>
> We try to support several different ways of running tests. This allows
> to catch some environment depended flaws in tests and serves as a kind
> of the test of unittest itself. Not all test files are made discoverable
> yet, but we move in this direction.
>

Agreed. This also has helped in the past to find issues like
https://bugs.python.org/issue29512#msg299045.


>
> I do not see what is wrong here and suggest to not break working code.
>
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/tir.karthi%40gmail.com
>


-- 
Regards,
Karthikeyan S
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190501/913dbe5b/attachment.html>

From chris at withers.org  Wed May  1 10:20:48 2019
From: chris at withers.org (Chris Withers)
Date: Wed, 1 May 2019 15:20:48 +0100
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
In-Reply-To: <CAAjsFLSBWQ+0t6_M4B1YqdO4fUHoC41d-5tD43aaTGt-4_P_0A@mail.gmail.com>
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
 <qabfcq$4dkk$1@blaine.gmane.org>
 <10a06aab-7190-c41e-d5f7-64e1b64005ad@withers.org>
 <qac41d$623f$1@blaine.gmane.org>
 <CAAjsFLSBWQ+0t6_M4B1YqdO4fUHoC41d-5tD43aaTGt-4_P_0A@mail.gmail.com>
Message-ID: <f0ba14d7-faa1-3b3d-5660-6620ebe7464a@withers.org>

On 01/05/2019 14:52, Karthikeyan wrote:
> 
> 
>     We try to support several different ways of running tests. This allows
>     to catch some environment depended flaws in tests and serves as a kind
>     of the test of unittest itself. Not all test files are made
>     discoverable
>     yet, but we move in this direction.
> 
> Agreed. This also has helped in the past to find issues like 
> https://bugs.python.org/issue29512#msg299045.

My read of that issue is that issue is that the only problem that was 
found is that an ambiguous way of running tests, which isn't included in 
the devguide, and maybe for good reason, caused a problem which sucked 
up a bunch of Victor's time.

The reason Lib/test/ was on sys.path was because the tests were run with 
./python Lib/test/test_bisect.py, when it shouldn't be.

Had it been run with:

./ python -m test.test_bisect

...it would not have been, and bisect.py would not have needed renaming 
to bisect_cmd.py.

Chris

From jerrywiltse at gmail.com  Wed May  1 11:09:19 2019
From: jerrywiltse at gmail.com (Gerald Wiltse)
Date: Wed, 1 May 2019 11:09:19 -0400
Subject: [Python-Dev] Location of CI for Windows Embeddable Distro
Message-ID: <CAML1RCC0vw2V_bitZ0rJFc-VzLgZNShe0wNCb4oZSK0gZYVgfA@mail.gmail.com>

I looked through all the windows builders here and could not find any
which generate this package, can anyone tell me where the work happens?  I
also tried searching looking for scripts and CI files which create the
package in all the relevant repos and could not find those either.

Is this information not public?
Is it a manual build?

Gerald R. Wiltse
jerrywiltse at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190501/af16da11/attachment.html>

From turnbull.stephen.fw at u.tsukuba.ac.jp  Wed May  1 12:09:13 2019
From: turnbull.stephen.fw at u.tsukuba.ac.jp (Stephen J. Turnbull)
Date: Thu, 2 May 2019 01:09:13 +0900
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
In-Reply-To: <d5689034-bce2-9f8c-b53b-01a020565798@withers.org>
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
 <20190501124831.7faadb2b@fsol>
 <CACac1F9OJdkc_v0dQJwBMn_nEMecxkLMXKr9f8efQgF4EN4UjA@mail.gmail.com>
 <d5689034-bce2-9f8c-b53b-01a020565798@withers.org>
Message-ID: <23753.50345.124026.479885@turnbull.sk.tsukuba.ac.jp>

Executive summary:

"There should be a tool" (sorry, I'm not volunteering any time soon)
that could be added to $VCS diff (say, "git coverage-diff" or "git
diff --coverage").

Chris Withers writes:

 > It's an interesting point; I personally don't see much value in coverage 
 > of less than 100%, if you're going to look at coverage: no-one is going 
 > to focus on or potentially even notice whether coverage moved from 99% 
 > to 99% (no typo), even though a bunch of new uncovered code may have 
 > been introduced.

I agree with the point you're making (that the difference between 100%
and 99% is a very significant indicator that "something needs to be
done here, it's obvious what, and [depending on project process] it's
obvious who, too"), but it's also true that 99% is 
better than 98% and definitely better than 90% or less.

Your point that it matters *which* 1% is more important, I think (see
"Executive summary").

 > If people are actually using these blocks, then so be it, but it feels 
 > like the people who want them to stick around are saying they're using 
 > them just on the off chance they might use them, which feels like a poor 
 > reason to keep a bunch of dead code around.

At least one person says he uses it, although I don't know how that
fits with Robert's statement that "it was never needed".

Steve

From steve.dower at python.org  Wed May  1 12:22:55 2019
From: steve.dower at python.org (Steve Dower)
Date: Wed, 1 May 2019 12:22:55 -0400
Subject: [Python-Dev] Location of CI for Windows Embeddable Distro
In-Reply-To: <CAML1RCC0vw2V_bitZ0rJFc-VzLgZNShe0wNCb4oZSK0gZYVgfA@mail.gmail.com>
References: <CAML1RCC0vw2V_bitZ0rJFc-VzLgZNShe0wNCb4oZSK0gZYVgfA@mail.gmail.com>
Message-ID: <b4196920-94d4-f2de-c444-31d236752a64@python.org>

On 01May2019 1109, Gerald Wiltse wrote:
> I looked through all the windows builders here and could not find any 
> which?generate this package, can anyone tell me where the work happens?  
> I also tried searching looking for scripts and CI files which create the 
> package in all the relevant repos and could not find those either.
> 
> Is this information not public?

It's just not obviously documented (yet). We use the "PC/layout" script 
(run as "python PC/layout -h" to get arguments). You'll want at least 
--preset-embed and either --copy or --zip to specify where the layout is 
created.

> Is it a manual build?

It's semi-automated, but it's only triggered for releases and so it's 
not part of the normal CI configuration.

Hope that helps,
Steve

From solipsis at pitrou.net  Wed May  1 12:36:07 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Wed, 1 May 2019 18:36:07 +0200
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
 <20190501124831.7faadb2b@fsol>
 <CACac1F9OJdkc_v0dQJwBMn_nEMecxkLMXKr9f8efQgF4EN4UjA@mail.gmail.com>
 <d5689034-bce2-9f8c-b53b-01a020565798@withers.org>
 <CACac1F90cVoU7DeSD2QkYTeSD+TLT80EkNoStx0pZZoY0iV4kQ@mail.gmail.com>
 <05ef1790-dc90-f5a6-a25c-9ba5abc66a3a@withers.org>
Message-ID: <20190501183607.12fcdbe9@fsol>

On Wed, 1 May 2019 14:30:01 +0100
Chris Withers <chris at withers.org> wrote:
> 
> > Is it really that difficult to simply tell coverage to ignore them? I
> > thought someone had already pointed to a coveragerc file that let you
> > do this.  
> 
> It would be if the cpython repo had a coveragerc, but it does not.

Well, perhaps that could be added ;-)

Regards

Antoine.



From jerrywiltse at gmail.com  Wed May  1 13:05:36 2019
From: jerrywiltse at gmail.com (Gerald Wiltse)
Date: Wed, 1 May 2019 13:05:36 -0400
Subject: [Python-Dev] Location of CI for Windows Embeddable Distro
In-Reply-To: <b4196920-94d4-f2de-c444-31d236752a64@python.org>
References: <CAML1RCC0vw2V_bitZ0rJFc-VzLgZNShe0wNCb4oZSK0gZYVgfA@mail.gmail.com>
 <b4196920-94d4-f2de-c444-31d236752a64@python.org>
Message-ID: <CAML1RCBGVu-pnzcJ1Czxv_aFAgs+DgfPB9rjtXHsjdnRp=4eOw@mail.gmail.com>

That does help, thanks so much for the fast response!  I now see how it's
executed on Azure pipelines also, so that should be enough for me to
reverse engineer the rest.

Followup questions if you have time:
1. It seems that directory doesn't exist in the 3.6 branches/tags, so it
must have been done a different way back then.  Do you think it's
back-portable to 3.6?
2. One of our objectives is to effectively create a nearly identical
embeddable package for linux. Do you think the layout code is generic
enough to be modified to create a linux equivalent?

Obviously, there are many alternative methods and documents for creating
"embeddable" pythons on linux, but the windows package has all the
characteristics we want, and of course we'd like our Windows and Linux
process build and packaging processes to be as similar as possible, so it
seems attractive to try to port this layout script to linux.


Gerald R. Wiltse
jerrywiltse at gmail.com



On Wed, May 1, 2019 at 12:22 PM Steve Dower <steve.dower at python.org> wrote:

> On 01May2019 1109, Gerald Wiltse wrote:
> > I looked through all the windows builders here and could not find any
> > which generate this package, can anyone tell me where the work happens?
> > I also tried searching looking for scripts and CI files which create the
> > package in all the relevant repos and could not find those either.
> >
> > Is this information not public?
>
> It's just not obviously documented (yet). We use the "PC/layout" script
> (run as "python PC/layout -h" to get arguments). You'll want at least
> --preset-embed and either --copy or --zip to specify where the layout is
> created.
>
> > Is it a manual build?
>
> It's semi-automated, but it's only triggered for releases and so it's
> not part of the normal CI configuration.
>
> Hope that helps,
> Steve
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190501/c831ff35/attachment.html>

From steve.dower at python.org  Wed May  1 13:57:34 2019
From: steve.dower at python.org (Steve Dower)
Date: Wed, 1 May 2019 13:57:34 -0400
Subject: [Python-Dev] Location of CI for Windows Embeddable Distro
In-Reply-To: <CAML1RCBGVu-pnzcJ1Czxv_aFAgs+DgfPB9rjtXHsjdnRp=4eOw@mail.gmail.com>
References: <CAML1RCC0vw2V_bitZ0rJFc-VzLgZNShe0wNCb4oZSK0gZYVgfA@mail.gmail.com>
 <b4196920-94d4-f2de-c444-31d236752a64@python.org>
 <CAML1RCBGVu-pnzcJ1Czxv_aFAgs+DgfPB9rjtXHsjdnRp=4eOw@mail.gmail.com>
Message-ID: <a94aff02-6bdd-9147-8c15-c04c4e244825@python.org>

On 01May2019 1305, Gerald Wiltse wrote:
> That does help, thanks so much for the fast response!? I now see how 
> it's executed on Azure pipelines also, so that should be enough for me 
> to reverse engineer the rest.
> 
> Followup questions if you have time:
> 1. It seems that directory doesn't exist in the 3.6 branches/tags, so it 
> must have been done a different way back then.? Do you think it's 
> back-portable to 3.6?

Yep, it should work with 3.6. There were scripts under Tools/msi back 
then that did the same thing, but with the Store app I rewrote it to be 
more flexible.

> 2. One of our objectives is to effectively create a nearly identical 
> embeddable package for linux. Do you think the layout code is generic 
> enough to be modified to create a linux equivalent?

Probably not, it's under the "PC" directory because it is entirely 
CPython specific.

I'd love to be able to have a similar embeddable distro for Linux (and 
macOS), and I'll be investing some of my time in working towards this, 
but it's far more complicated than simply laying out the right files. If 
you're interested in helping with this, then we're in the right place to 
discuss it, but we'll likely have to move to the issue tracker at some 
point once we figure out who else wants/needs to be involved.

> Obviously, there are many alternative methods and documents for creating 
> "embeddable" pythons on linux, but the windows package has all the 
> characteristics we want, and of course we'd like our Windows and Linux 
> process build and packaging processes to be as similar as possible, so 
> it seems attractive to try to port this layout script to linux.

"make install" already does the same thing, but the install location 
matters at build time, so it's a little more complex to make it work as 
an embedded runtime. I'm sure there are people who know how to make it 
work though.

Cheers,
Steve

From chris at withers.org  Wed May  1 14:13:51 2019
From: chris at withers.org (Chris Withers)
Date: Wed, 1 May 2019 19:13:51 +0100
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
In-Reply-To: <23753.50345.124026.479885@turnbull.sk.tsukuba.ac.jp>
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
 <20190501124831.7faadb2b@fsol>
 <CACac1F9OJdkc_v0dQJwBMn_nEMecxkLMXKr9f8efQgF4EN4UjA@mail.gmail.com>
 <d5689034-bce2-9f8c-b53b-01a020565798@withers.org>
 <23753.50345.124026.479885@turnbull.sk.tsukuba.ac.jp>
Message-ID: <d57265cb-55f0-34df-dbe9-01e593ff250c@withers.org>

On 01/05/2019 17:09, Stephen J. Turnbull wrote:
> Executive summary:
> 
> "There should be a tool" (sorry, I'm not volunteering any time soon)
> that could be added to $VCS diff (say, "git coverage-diff" or "git
> diff --coverage").

That sounds like a very hard problem to solve...

>   > If people are actually using these blocks, then so be it, but it feels
>   > like the people who want them to stick around are saying they're using
>   > them just on the off chance they might use them, which feels like a poor
>   > reason to keep a bunch of dead code around.
> 
> At least one person says he uses it, although I don't know how that
> fits with Robert's statement that "it was never needed".

Right, but the more we discuss this, the stronger my feeling that these 
should be removed everywhere, rather than just the few in 
unittest.test.test_mock that I intend to remove.

Running:

./python some/package/test_whatever.py

...sets up a fundamentally hostile sys.path. As Karthikeyan highlighted, 
in https://bugs.python.org/issue29512 this resulted in a year's mucking 
around on a new tool that was added, and resulted in that tool getting a 
slightly more clumsy name.

Running:

./python -m unittest some.package.test_whatever

...uses exactly the same runner, just without the unfortunate sys.path 
addition.

I thought https://www.python.org/dev/peps/pep-0582/ had something about 
no longer add '.' to sys.path, but looks like I was mistaken.

Chris

From tir.karthi at gmail.com  Wed May  1 15:00:13 2019
From: tir.karthi at gmail.com (Karthikeyan)
Date: Thu, 2 May 2019 00:30:13 +0530
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
In-Reply-To: <d57265cb-55f0-34df-dbe9-01e593ff250c@withers.org>
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
 <20190501124831.7faadb2b@fsol>
 <CACac1F9OJdkc_v0dQJwBMn_nEMecxkLMXKr9f8efQgF4EN4UjA@mail.gmail.com>
 <d5689034-bce2-9f8c-b53b-01a020565798@withers.org>
 <23753.50345.124026.479885@turnbull.sk.tsukuba.ac.jp>
 <d57265cb-55f0-34df-dbe9-01e593ff250c@withers.org>
Message-ID: <CAAjsFLQaUAfonbm=Ds5FrE_eoj5JbJJbVRJ6amwfdhruUKUAkA@mail.gmail.com>

> I thought https://www.python.org/dev/peps/pep-0582/ had something about
> no longer add '.' to sys.path, but looks like I was mistaken.
>

It was discussed [0] in the past with respect to security since Perl did a
similar change and PEP 432 is also mentioned in the thread. [1]

[0] https://mail.python.org/pipermail/python-ideas/2017-June/045842.html
[1] https://mail.python.org/pipermail/python-ideas/2017-June/045849.html

-- 
Regards,
Karthikeyan S
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190502/b9b9d08a/attachment.html>

From jerrywiltse at gmail.com  Wed May  1 14:47:23 2019
From: jerrywiltse at gmail.com (Gerald Wiltse)
Date: Wed, 1 May 2019 14:47:23 -0400
Subject: [Python-Dev] Location of CI for Windows Embeddable Distro
In-Reply-To: <a94aff02-6bdd-9147-8c15-c04c4e244825@python.org>
References: <CAML1RCC0vw2V_bitZ0rJFc-VzLgZNShe0wNCb4oZSK0gZYVgfA@mail.gmail.com>
 <b4196920-94d4-f2de-c444-31d236752a64@python.org>
 <CAML1RCBGVu-pnzcJ1Czxv_aFAgs+DgfPB9rjtXHsjdnRp=4eOw@mail.gmail.com>
 <a94aff02-6bdd-9147-8c15-c04c4e244825@python.org>
Message-ID: <CAML1RCDn8r_gLgAg7ZiVLn_mNvcpp4=NoyGc102dY3_HByE6aw@mail.gmail.com>

Yes, I'll help with this, and I try to get signed up with an account for
the issue tracker ASAP.

I've just started trying to build create the embeddable package for windows
locally (all from source).  Once I have that automated, I'll take a naive
stab at the Linux layout.  I'm sure i'll soon hit the additional
complications you're talking about and come back to you with questions.

Gerald R. Wiltse
jerrywiltse at gmail.com



On Wed, May 1, 2019 at 1:57 PM Steve Dower <steve.dower at python.org> wrote:

> On 01May2019 1305, Gerald Wiltse wrote:
> > That does help, thanks so much for the fast response!  I now see how
> > it's executed on Azure pipelines also, so that should be enough for me
> > to reverse engineer the rest.
> >
> > Followup questions if you have time:
> > 1. It seems that directory doesn't exist in the 3.6 branches/tags, so it
> > must have been done a different way back then.  Do you think it's
> > back-portable to 3.6?
>
> Yep, it should work with 3.6. There were scripts under Tools/msi back
> then that did the same thing, but with the Store app I rewrote it to be
> more flexible.
>
> > 2. One of our objectives is to effectively create a nearly identical
> > embeddable package for linux. Do you think the layout code is generic
> > enough to be modified to create a linux equivalent?
>
> Probably not, it's under the "PC" directory because it is entirely
> CPython specific.
>
> I'd love to be able to have a similar embeddable distro for Linux (and
> macOS), and I'll be investing some of my time in working towards this,
> but it's far more complicated than simply laying out the right files. If
> you're interested in helping with this, then we're in the right place to
> discuss it, but we'll likely have to move to the issue tracker at some
> point once we figure out who else wants/needs to be involved.
>
> > Obviously, there are many alternative methods and documents for creating
> > "embeddable" pythons on linux, but the windows package has all the
> > characteristics we want, and of course we'd like our Windows and Linux
> > process build and packaging processes to be as similar as possible, so
> > it seems attractive to try to port this layout script to linux.
>
> "make install" already does the same thing, but the install location
> matters at build time, so it's a little more complex to make it work as
> an embedded runtime. I'm sure there are people who know how to make it
> work though.
>
> Cheers,
> Steve
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190501/20e55a46/attachment.html>

From ncoghlan at gmail.com  Wed May  1 15:49:24 2019
From: ncoghlan at gmail.com (Nick Coghlan)
Date: Wed, 1 May 2019 12:49:24 -0700
Subject: [Python-Dev] PEP 574 ready for review
In-Reply-To: <20190430101428.204457e6@fsol>
References: <20190430101428.204457e6@fsol>
Message-ID: <CADiSq7c-eWwtkZ3RYW0eVAvzWMBpMKWY4bioXaXkVy+1nJwfVQ@mail.gmail.com>

Thanks Antoine.

As BDFL-Delegate I'm happy with this version of the PEP, so it's my
pleasure to accept it for inclusion in Python 3.8.

Regards,
Nick.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190501/459f8393/attachment-0001.html>

From turnbull.stephen.fw at u.tsukuba.ac.jp  Wed May  1 16:21:56 2019
From: turnbull.stephen.fw at u.tsukuba.ac.jp (Stephen J. Turnbull)
Date: Thu, 2 May 2019 05:21:56 +0900
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
In-Reply-To: <d57265cb-55f0-34df-dbe9-01e593ff250c@withers.org>
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
 <20190501124831.7faadb2b@fsol>
 <CACac1F9OJdkc_v0dQJwBMn_nEMecxkLMXKr9f8efQgF4EN4UjA@mail.gmail.com>
 <d5689034-bce2-9f8c-b53b-01a020565798@withers.org>
 <23753.50345.124026.479885@turnbull.sk.tsukuba.ac.jp>
 <d57265cb-55f0-34df-dbe9-01e593ff250c@withers.org>
Message-ID: <23753.65508.650064.941497@turnbull.sk.tsukuba.ac.jp>

Chris Withers writes:
 > On 01/05/2019 17:09, Stephen J. Turnbull wrote:
 > > Executive summary:
 > > 
 > > "There should be a tool" (sorry, I'm not volunteering any time soon)
 > > that could be added to $VCS diff (say, "git coverage-diff" or "git
 > > diff --coverage").
 > 
 > That sounds like a very hard problem to solve...

I would say "compute-intensive" and "refactor-discouraging".
Presumably a detailed coverage report would identify missing coverage
by unit (line, function, branch), and if there was a canonical
ordering on units those reports could be text diffed.  Of course most
refactorings will break that -- maybe that would be useless, but most
refactorings will break any diff and we still manage to find them
useful.  I don't know enough to guess: such considerations are why I'm
explicitly refusing to volunteer....

 > Right, but the more we discuss this, the stronger my feeling that
 > these should be removed everywhere, rather than just the few in
 > unittest.test.test_mock that I intend to remove.

I personally don't have a problem with that proposal or "Chris's
feeling as sufficient condition" in practice, as I don't run tests
that way (they frequently don't have an appropriate script interface,
so I never developed the habit).  My point was more that different
people have different feelings about this, and there's some "talking
past" going on because the concrete basis for those increasingly
strong feelings on both sides seems to mostly be "I haven't heard any
concrete reasons to change my mind (and likely more important, my way
of doing things) so my original reasons carry the issue".

Steve


From tjreedy at udel.edu  Wed May  1 17:12:42 2019
From: tjreedy at udel.edu (Terry Reedy)
Date: Wed, 1 May 2019 17:12:42 -0400
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
In-Reply-To: <05ef1790-dc90-f5a6-a25c-9ba5abc66a3a@withers.org>
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
 <20190501124831.7faadb2b@fsol>
 <CACac1F9OJdkc_v0dQJwBMn_nEMecxkLMXKr9f8efQgF4EN4UjA@mail.gmail.com>
 <d5689034-bce2-9f8c-b53b-01a020565798@withers.org>
 <CACac1F90cVoU7DeSD2QkYTeSD+TLT80EkNoStx0pZZoY0iV4kQ@mail.gmail.com>
 <05ef1790-dc90-f5a6-a25c-9ba5abc66a3a@withers.org>
Message-ID: <qad24b$3mhr$1@blaine.gmane.org>

On 5/1/2019 9:30 AM, Chris Withers wrote:

> Agreed, but my focus here is to get to 100% for mock so that it's clear 
> that all the code is there for a reason; mock is very complicated by 
> necessity, and having examples of why code needs to be there is what I'm 
> aiming for most of all.

I agree that complete 100.000% test coverage is a nice ideal, but 
sometimes the last percent can take hours to accomplish, if it is indeed 
sensibly possible.  (If mock has no OS dependencies, then it may be for 
mock.)  It is up to the individual developer to decide what is the 
priority to spend development time on.

>> Is it really that difficult to simply tell coverage to ignore them? I
>> thought someone had already pointed to a coveragerc file that let you
>> do this.
> 
> It would be if the cpython repo had a coveragerc, but it does not.

I have asked more that once what .coveragerc file is being used by CI 
and whether we can somehow properly customize it for CPython.  I have 
not gotten an answer.

The devguide chapter (5) on coverage is deficient in not even mentioning 
customization.

> People maintaining their own ad-hoc coverage configs seems like a pretty 
> bad idea.

I would prefer not having to do that.  But it is better than always 
getting bogus numbers.  At least *I* can determine the real single-file 
test coverage for idlelib files (on Windows), even if the public 
coverage reports are misleading.  Unless I forget, I record it on the 
first line of text_xxx files.

> Right, that's by gut feeling here: I don't want people encountering this 
> mock codebase to have to wonder whether they should be running the tests 
> using these blocks versus the way described in the dev guide,

The devguide describes the dependable but clumsy way to run tests from a 
command line.  In my opinion, it is the worst way when one is editing a 
particular file. It is *much* easier to hit one key (F5 in IDLE) in an 
editor than to switch to a terminal window and type something like

   > python -m unittest idlelib.idle_test.test_configdialog

It is much better to have a SyntaxError marked in the editor than 
displayed in a terminal or shell.  Live tracebacks in an IDE, that can 
jump to exception locations in an editor are better than a dead 
traceback in a terminal window.

With IDLE there is also the issue that automated unittests cannot 
completely replace human action and judgment.  However, displaying 
isolated dialogs for human interaction can be automated.  The 'if main' 
blocks for dialog modules do so.  For example, for configdialog:

if __name__ == '__main__':
     from unittest import main
     main('idlelib.idle_test.test_configdialog', verbosity=2, exit=False)

     from idlelib.idle_test.htest import run
     run(ConfigDialog)

One can either close the box or check the visual appearance and live 
behavior of the dialog.  In this case, running the class is sufficient. 
For other modules, additional setup code is needed, which should be 
excluded from coverage.

> and stressing about what the differences might be, when there aren't any...

Unittest users should know that it has both code and command line APIs.
The devguide should mention running tests from code with main or refer 
to the appropriate section of the unittest doc.  It should at least 
document the use of

if __name__ == '__main__':
     unittest.main(verbosity=2)

in test_xxx modules.


-- 
Terry Jan Reedy


From jerrywiltse at gmail.com  Thu May  2 11:24:37 2019
From: jerrywiltse at gmail.com (Gerald Wiltse)
Date: Thu, 2 May 2019 11:24:37 -0400
Subject: [Python-Dev] Location of CI for Windows Embeddable Distro
In-Reply-To: <CAML1RCDn8r_gLgAg7ZiVLn_mNvcpp4=NoyGc102dY3_HByE6aw@mail.gmail.com>
References: <CAML1RCC0vw2V_bitZ0rJFc-VzLgZNShe0wNCb4oZSK0gZYVgfA@mail.gmail.com>
 <b4196920-94d4-f2de-c444-31d236752a64@python.org>
 <CAML1RCBGVu-pnzcJ1Czxv_aFAgs+DgfPB9rjtXHsjdnRp=4eOw@mail.gmail.com>
 <a94aff02-6bdd-9147-8c15-c04c4e244825@python.org>
 <CAML1RCDn8r_gLgAg7ZiVLn_mNvcpp4=NoyGc102dY3_HByE6aw@mail.gmail.com>
Message-ID: <CAML1RCDM4hM1TxTB5CMhCh4Kzd-mv9jNLfL2a1yUbH07j7-euA@mail.gmail.com>

I've successfully automated the build of the embedded zip on Windows for
3.6 on my internal CI using tools/msi script.

Moving onto linux, can you please summarize the primary
challenges/differences for creating the embeddable zip for linux?

Gerald R. Wiltse
jerrywiltse at gmail.com



On Wed, May 1, 2019 at 2:47 PM Gerald Wiltse <jerrywiltse at gmail.com> wrote:

> Yes, I'll help with this, and I try to get signed up with an account for
> the issue tracker ASAP.
>
> I've just started trying to build create the embeddable package for
> windows locally (all from source).  Once I have that automated, I'll take a
> naive stab at the Linux layout.  I'm sure i'll soon hit the additional
> complications you're talking about and come back to you with questions.
>
> Gerald R. Wiltse
> jerrywiltse at gmail.com
>
>
>
> On Wed, May 1, 2019 at 1:57 PM Steve Dower <steve.dower at python.org> wrote:
>
>> On 01May2019 1305, Gerald Wiltse wrote:
>> > That does help, thanks so much for the fast response!  I now see how
>> > it's executed on Azure pipelines also, so that should be enough for me
>> > to reverse engineer the rest.
>> >
>> > Followup questions if you have time:
>> > 1. It seems that directory doesn't exist in the 3.6 branches/tags, so
>> it
>> > must have been done a different way back then.  Do you think it's
>> > back-portable to 3.6?
>>
>> Yep, it should work with 3.6. There were scripts under Tools/msi back
>> then that did the same thing, but with the Store app I rewrote it to be
>> more flexible.
>>
>> > 2. One of our objectives is to effectively create a nearly identical
>> > embeddable package for linux. Do you think the layout code is generic
>> > enough to be modified to create a linux equivalent?
>>
>> Probably not, it's under the "PC" directory because it is entirely
>> CPython specific.
>>
>> I'd love to be able to have a similar embeddable distro for Linux (and
>> macOS), and I'll be investing some of my time in working towards this,
>> but it's far more complicated than simply laying out the right files. If
>> you're interested in helping with this, then we're in the right place to
>> discuss it, but we'll likely have to move to the issue tracker at some
>> point once we figure out who else wants/needs to be involved.
>>
>> > Obviously, there are many alternative methods and documents for
>> creating
>> > "embeddable" pythons on linux, but the windows package has all the
>> > characteristics we want, and of course we'd like our Windows and Linux
>> > process build and packaging processes to be as similar as possible, so
>> > it seems attractive to try to port this layout script to linux.
>>
>> "make install" already does the same thing, but the install location
>> matters at build time, so it's a little more complex to make it work as
>> an embedded runtime. I'm sure there are people who know how to make it
>> work though.
>>
>> Cheers,
>> Steve
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190502/00974dc5/attachment.html>

From mcepl at cepl.eu  Thu May  2 12:24:28 2019
From: mcepl at cepl.eu (=?UTF-8?Q?Mat=C4=9Bj?= Cepl)
Date: Thu, 02 May 2019 18:24:28 +0200
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
 <qabfcq$4dkk$1@blaine.gmane.org>
Message-ID: <slrnqcm6ds.846.mcepl@milic.suse.cz>

On 2019-05-01, 06:46 GMT, Serhiy Storchaka wrote:
> These lines were added for purpose. They are needed for 
> running tests in separate file as a script.
>
> $ ./python Lib/unittest/test/testmock/testcallable.py -v
> test_attributes (__main__.TestCallable) ... ok

Isn't the standard way how to run one module just?

    $ ./python -mtest -v testmock.testcallable

Best,

Mat?j
-- 
https://matej.ceplovi.cz/blog/, Jabber: mcepl at ceplovi.cz
GPG Finger: 3C76 A027 CA45 AD70 98B5  BC1D 7920 5802 880B C9D8
 
As long as we are thinking of natural values we must say that the
sun looks down on nothing half so good as a household laughing
together over a meal, or two friends talking over a pint of beer,
or a man alone reading a book that interests him; and that all
economies, politics, laws, armies, and institutions, save insofar
as they prolong and multiply such scenes, are a mere ploughing
the sand and sowing the ocean, a meaningless vanity and vexation
of the spirit. Collective activities are, of course, necessary,
but this is the end to which they are necessary.
  -- C.S. Lewis, ?Membership? in ?The Weight of Glory?


From jerrywiltse at gmail.com  Thu May  2 14:56:19 2019
From: jerrywiltse at gmail.com (Gerald Wiltse)
Date: Thu, 2 May 2019 14:56:19 -0400
Subject: [Python-Dev] Location of CI for Windows Embeddable Distro
In-Reply-To: <CAML1RCDM4hM1TxTB5CMhCh4Kzd-mv9jNLfL2a1yUbH07j7-euA@mail.gmail.com>
References: <CAML1RCC0vw2V_bitZ0rJFc-VzLgZNShe0wNCb4oZSK0gZYVgfA@mail.gmail.com>
 <b4196920-94d4-f2de-c444-31d236752a64@python.org>
 <CAML1RCBGVu-pnzcJ1Czxv_aFAgs+DgfPB9rjtXHsjdnRp=4eOw@mail.gmail.com>
 <a94aff02-6bdd-9147-8c15-c04c4e244825@python.org>
 <CAML1RCDn8r_gLgAg7ZiVLn_mNvcpp4=NoyGc102dY3_HByE6aw@mail.gmail.com>
 <CAML1RCDM4hM1TxTB5CMhCh4Kzd-mv9jNLfL2a1yUbH07j7-euA@mail.gmail.com>
Message-ID: <CAML1RCB-LC9xUJu5pJjeRFSgDBSGDrrHWD3u+cT48=dHaqS6eQ@mail.gmail.com>

With minimal patching of tools/msi/make_zip.py, I was able to create an
equivalent zip package on Linux.  It doesn't work out of the box of
course.  I had to do two commands

My biggest concern is that even if the layout is "correct" on linux, the
python runtime might not actually support being run like this on Linux.
Perhaps the code for using python36.zip as a landmark and source of modules
is only implemented on Windows.  Do you know if that is the case?

    tmp$ export LD_LIBRARY_PATH=$(pwd)
    tmp$ export PYTHONHOME=$(pwd)
    tmp$ export PYTHONPATH=$(pwd)
    tmp$ ./python
    Fatal Python error: Py_Initialize: Unable to get the locale encoding
    ModuleNotFoundError: No module named 'encodings'

    Current thread 0x00007fdde9eb1680 (most recent call first):
    Aborted (core dumped)

Here's the full directory structure, error, and patch I created. Any
additional feedback would be great.

https://gist.github.com/solvingj/87305e0f70e14d738d6989ba2f41352f

Gerald R. Wiltse
jerrywiltse at gmail.com



On Thu, May 2, 2019 at 11:24 AM Gerald Wiltse <jerrywiltse at gmail.com> wrote:

> I've successfully automated the build of the embedded zip on Windows for
> 3.6 on my internal CI using tools/msi script.
>
> Moving onto linux, can you please summarize the primary
> challenges/differences for creating the embeddable zip for linux?
>
> Gerald R. Wiltse
> jerrywiltse at gmail.com
>
>
>
> On Wed, May 1, 2019 at 2:47 PM Gerald Wiltse <jerrywiltse at gmail.com>
> wrote:
>
>> Yes, I'll help with this, and I try to get signed up with an account for
>> the issue tracker ASAP.
>>
>> I've just started trying to build create the embeddable package for
>> windows locally (all from source).  Once I have that automated, I'll take a
>> naive stab at the Linux layout.  I'm sure i'll soon hit the additional
>> complications you're talking about and come back to you with questions.
>>
>> Gerald R. Wiltse
>> jerrywiltse at gmail.com
>>
>>
>>
>> On Wed, May 1, 2019 at 1:57 PM Steve Dower <steve.dower at python.org>
>> wrote:
>>
>>> On 01May2019 1305, Gerald Wiltse wrote:
>>> > That does help, thanks so much for the fast response!  I now see how
>>> > it's executed on Azure pipelines also, so that should be enough for me
>>> > to reverse engineer the rest.
>>> >
>>> > Followup questions if you have time:
>>> > 1. It seems that directory doesn't exist in the 3.6 branches/tags, so
>>> it
>>> > must have been done a different way back then.  Do you think it's
>>> > back-portable to 3.6?
>>>
>>> Yep, it should work with 3.6. There were scripts under Tools/msi back
>>> then that did the same thing, but with the Store app I rewrote it to be
>>> more flexible.
>>>
>>> > 2. One of our objectives is to effectively create a nearly identical
>>> > embeddable package for linux. Do you think the layout code is generic
>>> > enough to be modified to create a linux equivalent?
>>>
>>> Probably not, it's under the "PC" directory because it is entirely
>>> CPython specific.
>>>
>>> I'd love to be able to have a similar embeddable distro for Linux (and
>>> macOS), and I'll be investing some of my time in working towards this,
>>> but it's far more complicated than simply laying out the right files. If
>>> you're interested in helping with this, then we're in the right place to
>>> discuss it, but we'll likely have to move to the issue tracker at some
>>> point once we figure out who else wants/needs to be involved.
>>>
>>> > Obviously, there are many alternative methods and documents for
>>> creating
>>> > "embeddable" pythons on linux, but the windows package has all the
>>> > characteristics we want, and of course we'd like our Windows and Linux
>>> > process build and packaging processes to be as similar as possible, so
>>> > it seems attractive to try to port this layout script to linux.
>>>
>>> "make install" already does the same thing, but the install location
>>> matters at build time, so it's a little more complex to make it work as
>>> an embedded runtime. I'm sure there are people who know how to make it
>>> work though.
>>>
>>> Cheers,
>>> Steve
>>>
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190502/3f755990/attachment.html>

From vstinner at redhat.com  Thu May  2 15:59:02 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Thu, 2 May 2019 15:59:02 -0400
Subject: [Python-Dev] RFC: PEP 587 "Python Initialization Configuration":
 2nd version
Message-ID: <CA+3bQGF7XbUT1WfO3KB+9Xa-si30ozQY6h0J2bBqpi6rj-XG9g@mail.gmail.com>

Hi,

Thanks to Steve Dower's feedback, I enhanced and completed my PEP 587.
Main changes:

* It is now possible to read the configuration and then modify the
read configuration. For example, new directories can be added to
PyConfig.module_search_paths (see the example below and the example in
the PEP)
* PyConfig is now "dynamic" by default: strings are duplicated and
PyConfig_Clear() must be called to release memory
* PyConfig now only uses wchar_t* for strings (unicode): char* (bytes)
is no longer used. I had to hack CPython internals for that :-)
* I added a "_config_version" private field to PyPreConfig and
PyConfig to prepare the backward compatibility for future changes.
* I removed the Open Question section: all known issues have been fixed.

During the Language Summit, Brett Cannon said that Steve Dower
declined the offer to be the BDFL-delegate for this PEP. Thomas
Wouters proposed himself to be the new BDFL-delegate.

Example to read the configuration, append a directory to sys.path
(module_search_paths) and then initialize Python with this
configuration:

    void init_python(void)
    {
        PyInitError err;
        PyConfig config = PyConfig_INIT;

        err = PyConfig_Read(&config);
        if (_Py_INIT_FAILED(err)) {
            goto fail;
        }

        err = PyWideStringList_Append(&config.module_search_paths,
                                      L"/path/to/more/modules");
        if (_Py_INIT_FAILED(err)) {
            goto fail;
        }

        err = Py_InitializeFromConfig(&config);
        if (_Py_INIT_FAILED(err)) {
            goto fail;
        }

        PyConfig_Clear(&config);
        return;

    fail:
        PyConfig_Clear(&config);
        Py_ExitInitError(err);
    }

The HTML version will be online shortly:
https://www.python.org/dev/peps/pep-0587/

Full text below.

Victor


PEP: 587
Title: Python Initialization Configuration
Author: Nick Coghlan <ncoghlan at gmail.com>, Victor Stinner <vstinner at redhat.com>
Discussions-To: python-dev at python.org
Status: Draft
Type: Standards Track
Content-Type: text/x-rst
Created: 27-Mar-2019
Python-Version: 3.8

Abstract
========

Add a new C API to configure the Python Initialization providing finer
control on the whole configuration and better error reporting.


Rationale
=========

Python is highly configurable but its configuration evolved organically:
configuration parameters is scattered all around the code using
different ways to set them (mostly global configuration variables and
functions).  A straightforward and reliable way to configure Python is
needed. Some configuration parameters are not accessible from the C API,
or not easily.

The C API of Python 3.7 Initialization takes ``wchar_t*`` strings as
input whereas the Python filesystem encoding is set during the
initialization.

This PEP is a partial implementation of PEP 432 which is the overall
design.  New fields can be added later to ``PyConfig`` structure to
finish the implementation of the PEP 432 (add a new partial
initialization which allows to configure Python using Python objects to
finish the full initialization).


Python Initialization C API
===========================

This PEP proposes to add the following new structures, functions and
macros.

New structures (4):

* ``PyConfig``
* ``PyInitError``
* ``PyPreConfig``
* ``PyWideStringList``

New functions (16):

* ``Py_PreInitialize(config)``
* ``Py_PreInitializeFromArgs(config, argc, argv)``
* ``Py_PreInitializeFromWideArgs(config, argc, argv)``
* ``PyWideStringList_Append(list, item)``
* ``PyConfig_DecodeLocale(config_str, str)``
* ``PyConfig_SetString(config_str, str)``
* ``PyConfig_Read(config)``
* ``PyConfig_SetArgv(config, argc, argv)``
* ``PyConfig_SetWideArgv(config, argc, argv)``
* ``PyConfig_Clear(config)``
* ``Py_InitializeFromConfig(config)``
* ``Py_InitializeFromArgs(config, argc, argv)``
* ``Py_InitializeFromWideArgs(config, argc, argv)``
* ``Py_UnixMain(argc, argv)``
* ``Py_ExitInitError(err)``
* ``Py_RunMain()``

New macros (9):

* ``PyPreConfig_INIT``
* ``PyConfig_INIT``
* ``Py_INIT_OK()``
* ``Py_INIT_ERR(MSG)``
* ``Py_INIT_NO_MEMORY()``
* ``Py_INIT_EXIT(EXITCODE)``
* ``Py_INIT_IS_ERROR(err)``
* ``Py_INIT_IS_EXIT(err)``
* ``Py_INIT_FAILED(err)``

This PEP also adds ``_PyRuntimeState.preconfig`` (``PyPreConfig`` type)
and ``PyInterpreterState.config`` (``PyConfig`` type) fields to these
internal structures. ``PyInterpreterState.config`` becomes the new
reference configuration, replacing global configuration variables and
other private variables.


PyWideStringList
----------------

``PyWideStringList`` is a list of ``wchar_t*`` strings.

Example to initialize a string from C static array::

    static wchar_t* argv[2] = {
        L"-c",
        L"pass",
    };
    PyWideStringList config_argv = PyWideStringList_INIT;
    config_argv.length = Py_ARRAY_LENGTH(argv);
    config_argv.items = argv;

``PyWideStringList`` structure fields:

* ``length`` (``Py_ssize_t``)
* ``items`` (``wchar_t**``)

Methods:

* ``PyInitError PyWideStringList_Append(PyWideStringList *list, const
wchar_t *item)``:
  Append *item* to *list*.

If *length* is non-zero, *items* must be non-NULL and all strings must
be non-NULL.

PyInitError
-----------

``PyInitError`` is a structure to store an error message or an exit code
for the Python Initialization. For an error, it stores the C function
name which created the error.

Example::

    PyInitError alloc(void **ptr, size_t size)
    {
        *ptr = PyMem_RawMalloc(size);
        if (*ptr == NULL) {
            return Py_INIT_NO_MEMORY();
        }
        return Py_INIT_OK();
    }

    int main(int argc, char **argv)
    {
        void *ptr;
        PyInitError err = alloc(&ptr, 16);
        if (Py_INIT_FAILED(err)) {
            Py_ExitInitError(err);
        }
        PyMem_Free(ptr);
        return 0;
    }

``PyInitError`` fields:

* ``exitcode`` (``int``):
  argument passed to ``exit()`` on Unix and to ``ExitProcess()`` on
  Windows. Only set by ``Py_INIT_EXIT()``.
* ``err_msg`` (``const char*``): error message
* private ``_func`` field: used by ``Py_INIT_ERR()`` to store the C
  function name which created the error.
* private ``_type`` field: for internal usage only.

Macro to create an error:

* ``Py_INIT_OK()``: success
* ``Py_INIT_ERR(err_msg)``: initialization error with a message
* ``Py_INIT_NO_MEMORY()``: memory allocation failure (out of memory)
* ``Py_INIT_EXIT(exitcode)``: exit Python with the specified exit code

Other macros and functions:

* ``Py_INIT_IS_ERROR(err)``: Is the result an error?
* ``Py_INIT_IS_EXIT(err)``: Is the result an exit?
* ``Py_INIT_FAILED(err)``: Is the result an error or an exit? Similar
  to ``Py_INIT_IS_ERROR(err) || Py_INIT_IS_EXIT(err)``.
* ``Py_ExitInitError(err)``: Call ``exit(exitcode)`` on Unix or
  ``ExitProcess(exitcode)`` if the result is an exit, call
  ``Py_FatalError(err_msg)`` if the result is an error. Must not be
  called if the result is a success.

Pre-Initialization with PyPreConfig
-----------------------------------

``PyPreConfig`` structure is used to pre-initialize Python:

* Set the memory allocator
* Configure the LC_CTYPE locale
* Set the UTF-8 mode

Example using the pre-initialization to enable the UTF-8 Mode::

    PyPreConfig preconfig = PyPreConfig_INIT;
    preconfig.utf8_mode = 1;

    PyInitError err = Py_PreInitialize(&preconfig);
    if (Py_INIT_FAILED(err)) {
        Py_ExitInitError(err);
    }

    /* at this point, Python will speak UTF-8 */

    Py_Initialize();
    /* ... use Python API here ... */
    Py_Finalize();

Functions to pre-initialize Python:

* ``PyInitError Py_PreInitialize(const PyPreConfig *config)``
* ``PyInitError Py_PreInitializeFromArgs(const PyPreConfig *config,
int argc, char **argv)``
* ``PyInitError Py_PreInitializeFromWideArgs(const PyPreConfig
*config, int argc, wchar_t **argv)``

If Python should be pre-initialized explicitly first and then
initialized with command line arguments, it is possible to pass these
command line arguments to the pre-initialization since they impact the
encodings. For example, ``-X utf8`` enables the UTF-8 Mode.

These functions can be called with *config* set to ``NULL``. The caller
is responsible to handle error using ``Py_INIT_FAILED()`` and
``Py_ExitInitError()``.

``PyPreConfig`` fields:

* ``allocator`` (``char*``): name of the memory allocator (ex: ``"malloc"``)
* ``coerce_c_locale_warn`` (``int``): if non-zero, emit a warning if
the C locale
  is coerced.
* ``coerce_c_locale`` (``int``): if equals to 2, coerce the C locale;
if equals to
  1, read the LC_CTYPE to decide if it should be coerced.
* ``dev_mode`` (``int``): see ``PyConfig.dev_mode``
* ``isolated`` (``int``): see ``PyConfig.isolated``
* ``legacy_windows_fs_encoding`` (``int``, Windows only): if non-zero, set the
  Python filesystem encoding to ``"mbcs"``.
* ``use_environment`` (``int``): see ``PyConfig.use_environment``
* ``utf8_mode`` (``int``): if non-zero, enable the UTF-8 mode

There is also a private field which is for internal-usage only:

* ``_config_version`` (``int``): Configuration version, used for ABI
  compatibility

The C locale coercion (PEP 538) and the UTF-8 Mode (PEP 540) are
disabled by default in ``PyPreConfig``. Set ``coerce_c_locale``,
``coerce_c_locale_warn`` and ``utf8_mode`` to ``-1`` to let Python
enable them depending on the user configuration.

Initialization with PyConfig
----------------------------

The ``PyConfig`` structure contains all parameters to configure Python.

Example::

    PyInitError err;
    PyConfig config = PyConfig_INIT;

    err = PyConfig_SetString(&config.program_name, L"my_program");
    if (_Py_INIT_FAILED(err)) {
        Py_ExitInitError(err);
    }

    err = Py_InitializeFromConfig(&config);
    PyConfig_Clear(&config);

    if (Py_INIT_FAILED(err)) {
        Py_ExitInitError(err);
    }

``PyConfig`` methods:

* ``PyInitError PyConfig_SetString(wchar_t **config_str, const wchar_t *str)``:
  Set a config wide string field from *str* (copy the string)
* ``PyInitError PyConfig_DecodeLocale(wchar_t **config_str, const char *str)``:
  Decode *str* using ``Py_DecodeLocale()`` and set the result into
  ``*config_str``. Pre-initialize Python if needed to ensure that
  encodings are properly configured.
* ``PyInitError PyConfig_SetArgv(PyConfig *config, int argc, char **argv)``:
  Set command line arguments (decode bytes). Pre-initialize Python if
  needed to ensure that encodings are properly configured.
* ``PyInitError PyConfig_SetWideArgv(PyConfig *config, int argc,
wchar_t **argv)``:
  Set command line arguments (wide characters).
* ``PyInitError PyConfig_Read(PyConfig *config)``:
  Read all Python configuration
* ``void PyConfig_Clear(PyConfig *config)``:
  Release memory

Functions to initialize Python:

* ``PyInitError Py_InitializeFromConfig(const PyConfig *config)``

These functions can be called with *config* set to ``NULL``. The caller
is responsible to handler error using ``Py_INIT_FAILED()`` and
``Py_ExitInitError()``.

PyConfig fields:

* ``argv`` (``PyWideStringList``): ``sys.argv``
* ``base_exec_prefix`` (``wchar_t*``): ``sys.base_exec_prefix``
* ``base_prefix`` (``wchar_t*``): ``sys.base_prefix``
* ``buffered_stdio`` (``int``): if equals to 0, enable unbuffered mode,
  make stdout and stderr streams to be unbuffered.
* ``bytes_warning`` (``int``): if equals to 1, issue a warning when
  comparing ``bytes`` or ``bytearray`` with ``str``, or comparing
  ``bytes`` with ``int``. If equal or greater to 2, raise a
  ``BytesWarning`` exception.
* ``check_hash_pycs_mode`` (``wchar_t*``): ``--check-hash-based-pycs``
  command line option value (see PEP 552)
* ``dev_mode`` (``int``): Development mode
* ``dll_path`` (``wchar_t*``, Windows only): Windows DLL path
* ``dump_refs`` (``int``): if non-zero, display all objects still alive
  at exit
* ``exec_prefix`` (``wchar_t*``): ``sys.exec_prefix``
* ``executable`` (``wchar_t*``): ``sys.executable``
* ``faulthandler`` (``int``): if non-zero, call
  ``faulthandler.enable()``
* ``filesystem_encoding`` (``wchar_t*``): Filesystem encoding,
  ``sys.getfilesystemencoding()``
* ``filesystem_errors`` (``wchar_t*``): Filesystem encoding errors,
  ``sys.getfilesystemencodeerrors()``
* ``use_hash_seed`` (``int``), ``hash_seed`` (``unsigned long``):
  randomized hash function seed
* ``home`` (``wchar_t*``): Python home
* ``import_time`` (``int``): if non-zero, profile import time
* ``inspect`` (``int``): enter interactive mode after executing a script or a
  command
* ``install_signal_handlers`` (``int``): install signal handlers?
* ``interactive`` (``int``): interactive mode
* ``legacy_windows_stdio`` (``int``, Windows only): if non-zero, use
  ``io.FileIO`` instead of ``WindowsConsoleIO`` for ``sys.stdin``,
  ``sys.stdout`` and ``sys.stderr``.
* ``malloc_stats`` (``int``): if non-zero, dump memory allocation
  statistics at exit
* ``module_search_path_env`` (``wchar_t*``): ``PYTHONPATH``
environment variale value
* ``use_module_search_paths`` (``int``), ``module_search_paths``
  (``PyWideStringList``): ``sys.path``
* ``optimization_level`` (``int``): compilation optimization level
* ``parser_debug`` (``int``): if non-zero, turn on parser debugging output (for
  expert only, depending on compilation options).
* ``prefix`` (``wchar_t*``): ``sys.prefix``
* ``program_name`` (``wchar_t*``): Program name
* ``program`` (``wchar_t*``): ``argv[0]`` or an empty string
* ``pycache_prefix`` (``wchar_t*``): ``.pyc`` cache prefix
* ``quiet`` (``int``): quiet mode (ex: don't display the copyright and version
  messages even in interactive mode)
* ``run_command`` (``wchar_t*``): ``-c COMMAND`` argument
* ``run_filename`` (``wchar_t*``): ``python3 SCRIPT`` argument
* ``run_module`` (``wchar_t*``): ``python3 -m MODULE`` argument
* ``show_alloc_count`` (``int``): show allocation counts at exit?
* ``show_ref_count`` (``int``): show total reference count at exit?
* ``site_import`` (``int``): import the ``site`` module at startup?
* ``skip_source_first_line`` (``int``): skip the first line of the source
* ``stdio_encoding`` (``wchar_t*``), ``stdio_errors`` (``wchar_t*``):
encoding and encoding errors of
  ``sys.stdin``, ``sys.stdout`` and ``sys.stderr``
* ``tracemalloc`` (``int``): if non-zero, call
  ``tracemalloc.start(value)``
* ``user_site_directory`` (``int``): if non-zero, add user site directory to
  ``sys.path``
* ``verbose`` (``int``): if non-zero, enable verbose mode
* ``warnoptions`` (``PyWideStringList``): options of the ``warnings``
module to build filters
* ``write_bytecode`` (``int``): if non-zero, write ``.pyc`` files
* ``xoptions`` (``PyWideStringList``): ``sys._xoptions``

There are also private fields which are for internal-usage only:

* ``_config_version`` (``int``): Configuration version, used for ABI
  compatibility
* ``_frozen`` (``int``): Emit warning when computing the path
  configuration?
* ``_install_importlib`` (``int``): Install importlib?

More complete commented example modifying the configuration before
calling ``PyConfig_Read()`` and then modify the read configuration::

    PyInitError init_python(const char *program_name)
    {
        PyInitError err;
        PyConfig config = PyConfig_INIT;

        /* Set the program name before reading the configuraton
           (decode byte string from the locale encoding) */
        err = PyConfig_DecodeLocale(&config.program_name,
                                    program_name);
        if (_Py_INIT_FAILED(err)) {
            goto fail;
        }

        /* Read all configuration at once */
        err = PyConfig_Read(&config);
        if (_Py_INIT_FAILED(err)) {
            goto fail;
        }

        /* Append our custom search path to sys.path */
        err = PyWideStringList_Append(&config.module_search_paths,
                                      L"/path/to/more/modules");
        if (_Py_INIT_FAILED(err)) {
            goto fail;
        }

        /* Override executable computed by PyConfig_Read() */
        err = PyConfig_SetString(&config.executable, L"my_executable");
        if (_Py_INIT_FAILED(err)) {
            goto fail;
        }

        err = Py_InitializeFromConfig(&config);

        /* Py_InitializeFromConfig() copied config which must now be
           cleared to release memory */
        PyConfig_Clear(&config);

        return err;

    fail:
        PyConfig_Clear(&config);
        Py_ExitInitError(err);
    }

.. note::
   ``PyConfig`` does not have any field for extra inittab functions:
   ``PyImport_AppendInittab()`` and ``PyImport_ExtendInittab()``
   functions are still relevant.


Initialization with static PyConfig
-----------------------------------

When no ``PyConfig`` method is used but only
``Py_InitializeFromConfig()``, the caller is responsible for managing
``PyConfig`` memory which means that static strings and static string
lists can be used rather than using dynamically allocated memory.  It
can be used for most simple configurations.

Example of Python initialization enabling the isolated mode::

    PyConfig config = PyConfig_INIT;
    config.isolated = 1;

    PyInitError err = Py_InitializeFromConfig(&config);
    if (Py_INIT_FAILED(err)) {
        Py_ExitInitError(err);
    }
    /* ... use Python API here ... */
    Py_Finalize();

In this example, ``PyConfig_Clear()`` is not needed since ``config``
does not contain any dynamically allocated string:
``Py_InitializeFromConfig`` is responsible for filling other fields
and manage the memory.

For convenience, two other functions are provided:

* ``PyInitError Py_InitializeFromArgs(const PyConfig *config, int
argc, char **argv)``
* ``PyInitError Py_InitializeFromWideArgs(const PyConfig *config, int
argc, wchar_t **argv)``

These functions can be used with static ``PyConfig``.

Pseudo-code of ``Py_InitializeFromArgs()``::

    PyInitError init_with_args(const PyConfig *src_config, int argc,
char **argv)
    {
        PyInitError err;
        PyConfig config = PyConfig_INIT;

        /* Copy strings and string lists
         * (memory dynamically allocated on the heap) */
        err = _PyConfig_Copy(&config, src_config);
        if (Py_INIT_FAILED(err)) {
            goto exit;
        }

        /* Set config.argv: decode argv bytes. Pre-initialize Python
           if needed to ensure that the encodings are properly
           configured. */
        err = PyConfig_SetArgv(&config, argc, argv);
        if (Py_INIT_FAILED(err)) {
            goto exit;
        }

        err = Py_InitializeFromConfig(&config);

    exit:
        PyConfig_Clear(&config);
        return err;
    }

where ``_PyConfig_Copy()`` is an internal function. The actual
implementation of ``Py_InitializeFromArgs()`` is more complex.


Py_UnixMain()
-------------

Python 3.7 provides a high-level ``Py_Main()`` function which requires
to pass command line arguments as ``wchar_t*`` strings. It is
non-trivial to use the correct encoding to decode bytes. Python has its
own set of issues with C locale coercion and UTF-8 Mode.

This PEP adds a new ``Py_UnixMain()`` function which takes command line
arguments as bytes::

    int Py_UnixMain(int argc, char **argv)

Py_RunMain()
------------

The new ``Py_RunMain()`` function executes the command
(``PyConfig.run_command``), the script (``PyConfig.run_filename``) or
the module (``PyConfig.run_module``) specified on the command line or in
the configuration, and then finalizes Python. It returns an exit status
that can be passed to the ``exit()`` function.

Example of custom Python executable always running in isolated mode::

    #include <Python.h>

    int main(int argc, char *argv[])
    {
        PyConfig config = PyConfig_INIT;
        config.isolated = 1;

        PyInitError err = Py_InitializeFromArgs(&config, argc, argv);
        if (Py_INIT_FAILED(err)) {
            Py_ExitInitError(err);
        }

        /* put more configuration code here if needed */

        return Py_RunMain();
    }

The example is a basic implementation of the "System Python Executable"
discussed in PEP 432.


Memory allocations and Py_DecodeLocale()
----------------------------------------

Python memory allocation functions like ``PyMem_RawMalloc()`` must not
be used before Python pre-initialization.  Calling directly ``malloc()``
and ``free()`` is always safe.

For ``PyPreConfig`` and static ``PyConfig``, the caller is responsible
to manage dynamically allocated strings, but static strings and static
string lists are fine.

Dynamic ``PyConfig`` requires to call ``PyConfig_Clear()`` to release
memory.

``Py_DecodeLocale()`` must not be called before the pre-initialization.

When using dynanic configuration, ``PyConfig_DecodeLocale()`` must be
used instead of ``Py_DecodeLocale()``.


Backwards Compatibility
=======================

This PEP only adds a new API: it leaves the existing API unchanged and
has no impact on the backwards compatibility.


Annex: Python Configuration
===========================

Priority and Rules
------------------

Priority of configuration parameters, highest to lowest:

* ``PyConfig``
* ``PyPreConfig``
* Configuration files
* Command line options
* Environment variables
* Global configuration variables

Priority of warning options, highest to lowest:

* ``PyConfig.warnoptions``
* ``PyConfig.dev_mode`` (add ``"default"``)
* ``PYTHONWARNINGS`` environment variables
* ``-W WARNOPTION`` command line argument
* ``PyConfig.bytes_warning`` (add ``"error::BytesWarning"`` if greater
  than 1, or add ``"default::BytesWarning``)

Rules on ``PyConfig`` and ``PyPreConfig`` parameters:

* If ``isolated`` is non-zero, ``use_environment`` and
  ``user_site_directory`` are set to 0
* If ``legacy_windows_fs_encoding`` is non-zero, ``utf8_mode`` is set to
  0
* If ``dev_mode`` is non-zero, ``allocator`` is set to ``"debug"``,
  ``faulthandler`` is set to 1, and ``"default"`` filter is added to
  ``warnoptions``. But ``PYTHONMALLOC`` has the priority over
  ``dev_mode`` to set the memory allocator.

Configuration Files
-------------------

Python configuration files:

* ``pyvenv.cfg``
* ``python._pth`` (Windows only)
* ``pybuilddir.txt`` (Unix only)

Global Configuration Variables
------------------------------

Global configuration variables mapped to ``PyPreConfig`` fields:

========================================  ================================
Variable                                  Field
========================================  ================================
``Py_LegacyWindowsFSEncodingFlag``        ``legacy_windows_fs_encoding``
``Py_LegacyWindowsFSEncodingFlag``        ``legacy_windows_fs_encoding``
``Py_UTF8Mode``                           ``utf8_mode``
``Py_UTF8Mode``                           ``utf8_mode``
========================================  ================================

Global configuration variables mapped to ``PyConfig`` fields:

========================================  ================================
Variable                                  Field
========================================  ================================
``Py_BytesWarningFlag``                   ``bytes_warning``
``Py_DebugFlag``                          ``parser_debug``
``Py_DontWriteBytecodeFlag``              ``write_bytecode``
``Py_FileSystemDefaultEncodeErrors``      ``filesystem_errors``
``Py_FileSystemDefaultEncoding``          ``filesystem_encoding``
``Py_FrozenFlag``                         ``_frozen``
``Py_HasFileSystemDefaultEncoding``       ``filesystem_encoding``
``Py_HashRandomizationFlag``              ``use_hash_seed``, ``hash_seed``
``Py_IgnoreEnvironmentFlag``              ``use_environment``
``Py_InspectFlag``                        ``inspect``
``Py_InteractiveFlag``                    ``interactive``
``Py_IsolatedFlag``                       ``isolated``
``Py_LegacyWindowsStdioFlag``             ``legacy_windows_stdio``
``Py_NoSiteFlag``                         ``site_import``
``Py_NoUserSiteDirectory``                ``user_site_directory``
``Py_OptimizeFlag``                       ``optimization_level``
``Py_QuietFlag``                          ``quiet``
``Py_UnbufferedStdioFlag``                ``buffered_stdio``
``Py_VerboseFlag``                        ``verbose``
``_Py_HasFileSystemDefaultEncodeErrors``  ``filesystem_errors``
``Py_BytesWarningFlag``                   ``bytes_warning``
``Py_DebugFlag``                          ``parser_debug``
``Py_DontWriteBytecodeFlag``              ``write_bytecode``
``Py_FileSystemDefaultEncodeErrors``      ``filesystem_errors``
``Py_FileSystemDefaultEncoding``          ``filesystem_encoding``
``Py_FrozenFlag``                         ``_frozen``
``Py_HasFileSystemDefaultEncoding``       ``filesystem_encoding``
``Py_HashRandomizationFlag``              ``use_hash_seed``, ``hash_seed``
``Py_IgnoreEnvironmentFlag``              ``use_environment``
``Py_InspectFlag``                        ``inspect``
``Py_InteractiveFlag``                    ``interactive``
``Py_IsolatedFlag``                       ``isolated``
``Py_LegacyWindowsStdioFlag``             ``legacy_windows_stdio``
``Py_NoSiteFlag``                         ``site_import``
``Py_NoUserSiteDirectory``                ``user_site_directory``
``Py_OptimizeFlag``                       ``optimization_level``
``Py_QuietFlag``                          ``quiet``
``Py_UnbufferedStdioFlag``                ``buffered_stdio``
``Py_VerboseFlag``                        ``verbose``
``_Py_HasFileSystemDefaultEncodeErrors``  ``filesystem_errors``
========================================  ================================


``Py_LegacyWindowsFSEncodingFlag`` and ``Py_LegacyWindowsStdioFlag`` are
only available on Windows.

Command Line Arguments
----------------------

Usage::

    python3 [options]
    python3 [options] -c COMMAND
    python3 [options] -m MODULE
    python3 [options] SCRIPT


Command line options mapped to pseudo-action on ``PyConfig`` fields:

================================  ================================
Option                            ``PyPreConfig`` field
================================  ================================
``-X dev``                        ``dev_mode = 1``
``-X utf8=N``                     ``utf8_mode = N``
================================  ================================

Command line options mapped to pseudo-action on ``PyConfig`` fields:

================================  ================================
Option                            ``PyConfig`` field
================================  ================================
``-b``                            ``bytes_warning++``
``-B``                            ``write_bytecode = 0``
``-c COMMAND``                    ``run_module = COMMAND``
``--check-hash-based-pycs=MODE``  ``_check_hash_pycs_mode = MODE``
``-d``                            ``parser_debug++``
``-E``                            ``use_environment = 0``
``-i``                            ``inspect++`` and ``interactive++``
``-I``                            ``isolated = 1``
``-m MODULE``                     ``run_module = MODULE``
``-O``                            ``optimization_level++``
``-q``                            ``quiet++``
``-R``                            ``use_hash_seed = 0``
``-s``                            ``user_site_directory = 0``
``-S``                            ``site_import``
``-t``                            ignored (kept for backwards compatibility)
``-u``                            ``buffered_stdio = 0``
``-v``                            ``verbose++``
``-W WARNING``                    add ``WARNING`` to ``warnoptions``
``-x``                            ``skip_source_first_line = 1``
``-X XOPTION``                    add ``XOPTION`` to ``xoptions``
``-X dev``                        ``dev_mode = 1``
``-X faulthandler``               ``faulthandler = 1``
``-X importtime``                 ``import_time = 1``
``-X pycache_prefix=PREFIX``      ``pycache_prefix = PREFIX``
``-X show_alloc_count``           ``show_alloc_count = 1``
``-X show_ref_count``             ``show_ref_count = 1``
``-X tracemalloc=N``              ``tracemalloc = N``
================================  ================================

``-h``, ``-?`` and ``-V`` options are handled outside ``PyConfig``.

Environment Variables
---------------------

Environment variables mapped to ``PyPreConfig`` fields:

=================================  =============================================
Variable                           ``PyPreConfig`` field
=================================  =============================================
``PYTHONCOERCECLOCALE``            ``coerce_c_locale``, ``coerce_c_locale_warn``
``PYTHONDEVMODE``                  ``dev_mode``
``PYTHONLEGACYWINDOWSFSENCODING``  ``legacy_windows_fs_encoding``
``PYTHONMALLOC``                   ``allocator``
``PYTHONUTF8``                     ``utf8_mode``
=================================  =============================================

Environment variables mapped to ``PyConfig`` fields:

=================================  ====================================
Variable                           ``PyConfig`` field
=================================  ====================================
``PYTHONDEBUG``                    ``parser_debug``
``PYTHONDEVMODE``                  ``dev_mode``
``PYTHONDONTWRITEBYTECODE``        ``write_bytecode``
``PYTHONDUMPREFS``                 ``dump_refs``
``PYTHONEXECUTABLE``               ``program_name``
``PYTHONFAULTHANDLER``             ``faulthandler``
``PYTHONHASHSEED``                 ``use_hash_seed``, ``hash_seed``
``PYTHONHOME``                     ``home``
``PYTHONINSPECT``                  ``inspect``
``PYTHONIOENCODING``               ``stdio_encoding``, ``stdio_errors``
``PYTHONLEGACYWINDOWSSTDIO``       ``legacy_windows_stdio``
``PYTHONMALLOCSTATS``              ``malloc_stats``
``PYTHONNOUSERSITE``               ``user_site_directory``
``PYTHONOPTIMIZE``                 ``optimization_level``
``PYTHONPATH``                     ``module_search_path_env``
``PYTHONPROFILEIMPORTTIME``        ``import_time``
``PYTHONPYCACHEPREFIX,``           ``pycache_prefix``
``PYTHONTRACEMALLOC``              ``tracemalloc``
``PYTHONUNBUFFERED``               ``buffered_stdio``
``PYTHONVERBOSE``                  ``verbose``
``PYTHONWARNINGS``                 ``warnoptions``
=================================  ====================================

``PYTHONLEGACYWINDOWSFSENCODING`` and ``PYTHONLEGACYWINDOWSSTDIO`` are
specific to Windows.

``PYTHONDEVMODE`` is mapped to ``PyPreConfig.dev_mode`` and
``PyConfig.dev_mode``.


Annex: Python 3.7 API
=====================

Python 3.7 has 4 functions in its C API to initialize and finalize
Python:

* ``Py_Initialize()``, ``Py_InitializeEx()``: initialize Python
* ``Py_Finalize()``, ``Py_FinalizeEx()``: finalize Python

Python can be configured using scattered global configuration variables
(like ``Py_IgnoreEnvironmentFlag``) and using the following functions:

* ``PyImport_AppendInittab()``
* ``PyImport_ExtendInittab()``
* ``PyMem_SetAllocator()``
* ``PyMem_SetupDebugHooks()``
* ``PyObject_SetArenaAllocator()``
* ``Py_SetPath()``
* ``Py_SetProgramName()``
* ``Py_SetPythonHome()``
* ``Py_SetStandardStreamEncoding()``
* ``PySys_AddWarnOption()``
* ``PySys_AddXOption()``
* ``PySys_ResetWarnOptions()``

There is also a high-level ``Py_Main()`` function.


Copyright
=========

This document has been placed in the public domain.

From edwin at 211mainstreet.net  Thu May  2 16:20:10 2019
From: edwin at 211mainstreet.net (Edwin Zimmerman)
Date: Thu, 2 May 2019 16:20:10 -0400
Subject: [Python-Dev] RFC: PEP 587 "Python Initialization
 Configuration": 2nd version
In-Reply-To: <CA+3bQGF7XbUT1WfO3KB+9Xa-si30ozQY6h0J2bBqpi6rj-XG9g@mail.gmail.com>
References: <CA+3bQGF7XbUT1WfO3KB+9Xa-si30ozQY6h0J2bBqpi6rj-XG9g@mail.gmail.com>
Message-ID: <000001d50124$71ef0d40$55cd27c0$@211mainstreet.net>

On Thursday, May 02, 2019 Victor Stinner <vstinner at redhat.com> wrote:
>

According to this

> * ``run_command`` (``wchar_t*``): ``-c COMMAND`` argument
> * ``run_filename`` (``wchar_t*``): ``python3 SCRIPT`` argument
> * ``run_module`` (``wchar_t*``): ``python3 -m MODULE`` argument


this
> ``-c COMMAND``                    ``run_module = COMMAND``
should read "run_command = COMMAND".  Typo, not?



From jerrywiltse at gmail.com  Thu May  2 16:29:36 2019
From: jerrywiltse at gmail.com (Gerald Wiltse)
Date: Thu, 2 May 2019 16:29:36 -0400
Subject: [Python-Dev] Location of CI for Windows Embeddable Distro
In-Reply-To: <CAML1RCB-LC9xUJu5pJjeRFSgDBSGDrrHWD3u+cT48=dHaqS6eQ@mail.gmail.com>
References: <CAML1RCC0vw2V_bitZ0rJFc-VzLgZNShe0wNCb4oZSK0gZYVgfA@mail.gmail.com>
 <b4196920-94d4-f2de-c444-31d236752a64@python.org>
 <CAML1RCBGVu-pnzcJ1Czxv_aFAgs+DgfPB9rjtXHsjdnRp=4eOw@mail.gmail.com>
 <a94aff02-6bdd-9147-8c15-c04c4e244825@python.org>
 <CAML1RCDn8r_gLgAg7ZiVLn_mNvcpp4=NoyGc102dY3_HByE6aw@mail.gmail.com>
 <CAML1RCDM4hM1TxTB5CMhCh4Kzd-mv9jNLfL2a1yUbH07j7-euA@mail.gmail.com>
 <CAML1RCB-LC9xUJu5pJjeRFSgDBSGDrrHWD3u+cT48=dHaqS6eQ@mail.gmail.com>
Message-ID: <CAML1RCBKW2U+7cUL=aJXZ0Me5XPc0kNXweKG22RYbBSgK0vebg@mail.gmail.com>

Just an update based on testing.  If I zip the modules up into python36.zip
(whether in .py or .pyc form) the linux binary does not find them.  If I
copy them into the embedded root, alongside the python executable, it finds
them as expected.

This just makes it seem more like an issue where Linux binary does not
respect .zip file as a source of modules.

Gerald R. Wiltse
jerrywiltse at gmail.com



On Thu, May 2, 2019 at 2:56 PM Gerald Wiltse <jerrywiltse at gmail.com> wrote:

> With minimal patching of tools/msi/make_zip.py, I was able to create an
> equivalent zip package on Linux.  It doesn't work out of the box of
> course.  I had to do two commands
>
> My biggest concern is that even if the layout is "correct" on linux, the
> python runtime might not actually support being run like this on Linux.
> Perhaps the code for using python36.zip as a landmark and source of modules
> is only implemented on Windows.  Do you know if that is the case?
>
>     tmp$ export LD_LIBRARY_PATH=$(pwd)
>     tmp$ export PYTHONHOME=$(pwd)
>     tmp$ export PYTHONPATH=$(pwd)
>     tmp$ ./python
>     Fatal Python error: Py_Initialize: Unable to get the locale encoding
>     ModuleNotFoundError: No module named 'encodings'
>
>     Current thread 0x00007fdde9eb1680 (most recent call first):
>     Aborted (core dumped)
>
> Here's the full directory structure, error, and patch I created. Any
> additional feedback would be great.
>
> https://gist.github.com/solvingj/87305e0f70e14d738d6989ba2f41352f
>
> Gerald R. Wiltse
> jerrywiltse at gmail.com
>
>
>
> On Thu, May 2, 2019 at 11:24 AM Gerald Wiltse <jerrywiltse at gmail.com>
> wrote:
>
>> I've successfully automated the build of the embedded zip on Windows for
>> 3.6 on my internal CI using tools/msi script.
>>
>> Moving onto linux, can you please summarize the primary
>> challenges/differences for creating the embeddable zip for linux?
>>
>> Gerald R. Wiltse
>> jerrywiltse at gmail.com
>>
>>
>>
>> On Wed, May 1, 2019 at 2:47 PM Gerald Wiltse <jerrywiltse at gmail.com>
>> wrote:
>>
>>> Yes, I'll help with this, and I try to get signed up with an account for
>>> the issue tracker ASAP.
>>>
>>> I've just started trying to build create the embeddable package for
>>> windows locally (all from source).  Once I have that automated, I'll take a
>>> naive stab at the Linux layout.  I'm sure i'll soon hit the additional
>>> complications you're talking about and come back to you with questions.
>>>
>>> Gerald R. Wiltse
>>> jerrywiltse at gmail.com
>>>
>>>
>>>
>>> On Wed, May 1, 2019 at 1:57 PM Steve Dower <steve.dower at python.org>
>>> wrote:
>>>
>>>> On 01May2019 1305, Gerald Wiltse wrote:
>>>> > That does help, thanks so much for the fast response!  I now see how
>>>> > it's executed on Azure pipelines also, so that should be enough for
>>>> me
>>>> > to reverse engineer the rest.
>>>> >
>>>> > Followup questions if you have time:
>>>> > 1. It seems that directory doesn't exist in the 3.6 branches/tags, so
>>>> it
>>>> > must have been done a different way back then.  Do you think it's
>>>> > back-portable to 3.6?
>>>>
>>>> Yep, it should work with 3.6. There were scripts under Tools/msi back
>>>> then that did the same thing, but with the Store app I rewrote it to be
>>>> more flexible.
>>>>
>>>> > 2. One of our objectives is to effectively create a nearly identical
>>>> > embeddable package for linux. Do you think the layout code is generic
>>>> > enough to be modified to create a linux equivalent?
>>>>
>>>> Probably not, it's under the "PC" directory because it is entirely
>>>> CPython specific.
>>>>
>>>> I'd love to be able to have a similar embeddable distro for Linux (and
>>>> macOS), and I'll be investing some of my time in working towards this,
>>>> but it's far more complicated than simply laying out the right files.
>>>> If
>>>> you're interested in helping with this, then we're in the right place
>>>> to
>>>> discuss it, but we'll likely have to move to the issue tracker at some
>>>> point once we figure out who else wants/needs to be involved.
>>>>
>>>> > Obviously, there are many alternative methods and documents for
>>>> creating
>>>> > "embeddable" pythons on linux, but the windows package has all the
>>>> > characteristics we want, and of course we'd like our Windows and
>>>> Linux
>>>> > process build and packaging processes to be as similar as possible,
>>>> so
>>>> > it seems attractive to try to port this layout script to linux.
>>>>
>>>> "make install" already does the same thing, but the install location
>>>> matters at build time, so it's a little more complex to make it work as
>>>> an embedded runtime. I'm sure there are people who know how to make it
>>>> work though.
>>>>
>>>> Cheers,
>>>> Steve
>>>>
>>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190502/0d72e883/attachment.html>

From vstinner at redhat.com  Thu May  2 16:47:09 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Thu, 2 May 2019 16:47:09 -0400
Subject: [Python-Dev] RFC: PEP 587 "Python Initialization
 Configuration": 2nd version
In-Reply-To: <000001d50124$71ef0d40$55cd27c0$@211mainstreet.net>
References: <CA+3bQGF7XbUT1WfO3KB+9Xa-si30ozQY6h0J2bBqpi6rj-XG9g@mail.gmail.com>
 <000001d50124$71ef0d40$55cd27c0$@211mainstreet.net>
Message-ID: <CA+3bQGHdZAq2jFk5RsTTAn4dAif+-Z-1He95LntzA5aChBK-mA@mail.gmail.com>

Le jeu. 2 mai 2019 ? 16:20, Edwin Zimmerman <edwin at 211mainstreet.net> a ?crit :
> > ``-c COMMAND``                    ``run_module = COMMAND``
> should read "run_command = COMMAND".  Typo, not?

Oops, you're right: it's a typo. Now fixed:

``-c COMMAND``                    ``run_command = COMMAND``

Victor
-- 
Night gathers, and now my watch begins. It shall not end until my death.

From thatiparthysreenivas at gmail.com  Fri May  3 04:46:35 2019
From: thatiparthysreenivas at gmail.com (Srinivas Reddy Thatiparthy)
Date: Fri, 3 May 2019 14:16:35 +0530
Subject: [Python-Dev] Please merge : bpo-34848
Message-ID: <CAEaN0UYdbVxQGidEWibG+mS=AjosZ22oruRDfz2vu9w=7qT+CQ@mail.gmail.com>

Hi,
   The PR - https://github.com/python/cpython/pull/9877  has been approved
by Raymond long ago.  Please merge or comment if not mergeable.

Best Regards,
Srinivas Reddy Thatipathy
7768044110.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190503/58f4fe51/attachment.html>

From steve at holdenweb.com  Fri May  3 07:21:50 2019
From: steve at holdenweb.com (Steve Holden)
Date: Fri, 3 May 2019 12:21:50 +0100
Subject: [Python-Dev] Please merge : bpo-34848
In-Reply-To: <CAEaN0UYdbVxQGidEWibG+mS=AjosZ22oruRDfz2vu9w=7qT+CQ@mail.gmail.com>
References: <CAEaN0UYdbVxQGidEWibG+mS=AjosZ22oruRDfz2vu9w=7qT+CQ@mail.gmail.com>
Message-ID: <CAMofdRDpz56u_CODd+5pT+dMNMnGgAGWdhWPR7ycWrZhYaNYsw@mail.gmail.com>

Looks like the failure is due to absence of a News entry. Maybe add a "skip
news" label if this doesn't need to be documented?

Kind regards.
Steve Holden


On Fri, May 3, 2019 at 9:48 AM Srinivas Reddy Thatiparthy <
thatiparthysreenivas at gmail.com> wrote:

> Hi,
>    The PR - https://github.com/python/cpython/pull/9877  has been
> approved by Raymond long ago.  Please merge or comment if not mergeable.
>
> Best Regards,
> Srinivas Reddy Thatipathy
> 7768044110.
>
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/steve%40holdenweb.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190503/15e9e116/attachment.html>

From thatiparthysreenivas at gmail.com  Fri May  3 08:14:50 2019
From: thatiparthysreenivas at gmail.com (Srinivas Reddy Thatiparthy)
Date: Fri, 3 May 2019 17:44:50 +0530
Subject: [Python-Dev] Please merge : bpo-34848
In-Reply-To: <CAMofdRDpz56u_CODd+5pT+dMNMnGgAGWdhWPR7ycWrZhYaNYsw@mail.gmail.com>
References: <CAEaN0UYdbVxQGidEWibG+mS=AjosZ22oruRDfz2vu9w=7qT+CQ@mail.gmail.com>
 <CAMofdRDpz56u_CODd+5pT+dMNMnGgAGWdhWPR7ycWrZhYaNYsw@mail.gmail.com>
Message-ID: <CAEaN0UbFQNooJwH_Rk9YyyUXDzUqpHLA6eN90JUwL5o0VTc8gg@mail.gmail.com>

Yes, I agree. Please do as I do not have permission.


Best Regards,
Srinivas Reddy Thatipathy




On Fri, 3 May 2019 at 16:52, Steve Holden <steve at holdenweb.com> wrote:

> Looks like the failure is due to absence of a News entry. Maybe add a
> "skip news" label if this doesn't need to be documented?
>
> Kind regards.
> Steve Holden
>
>
> On Fri, May 3, 2019 at 9:48 AM Srinivas Reddy Thatiparthy <
> thatiparthysreenivas at gmail.com> wrote:
>
>> Hi,
>>    The PR - https://github.com/python/cpython/pull/9877  has been
>> approved by Raymond long ago.  Please merge or comment if not mergeable.
>>
>> Best Regards,
>> Srinivas Reddy Thatipathy
>> 7768044110.
>>
>> _______________________________________________
>> Python-Dev mailing list
>> Python-Dev at python.org
>> https://mail.python.org/mailman/listinfo/python-dev
>> Unsubscribe:
>> https://mail.python.org/mailman/options/python-dev/steve%40holdenweb.com
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190503/806e29ad/attachment.html>

From vstinner at redhat.com  Fri May  3 08:24:15 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Fri, 3 May 2019 08:24:15 -0400
Subject: [Python-Dev] Please merge : bpo-34848
In-Reply-To: <CAEaN0UYdbVxQGidEWibG+mS=AjosZ22oruRDfz2vu9w=7qT+CQ@mail.gmail.com>
References: <CAEaN0UYdbVxQGidEWibG+mS=AjosZ22oruRDfz2vu9w=7qT+CQ@mail.gmail.com>
Message-ID: <CA+3bQGE4_3N2pC=X2raov1ZoJ2KRkAj6aUeea4RhvSSHLzKC=g@mail.gmail.com>

Hi Srinivas,

I merged your obvious doc fix, thanks.

Does someone know how I can list pull requests which has been approved but
not merged yet?

Victor

Le vendredi 3 mai 2019, Srinivas Reddy Thatiparthy <
thatiparthysreenivas at gmail.com> a ?crit :
> Hi,
>    The PR - https://github.com/python/cpython/pull/9877  has been
approved by Raymond long ago.  Please merge or comment if not mergeable.
> Best Regards,
> Srinivas Reddy Thatipathy
> 7768044110.
>
>

-- 
Night gathers, and now my watch begins. It shall not end until my death.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190503/c207b5e8/attachment.html>

From mhroncok at redhat.com  Fri May  3 08:41:17 2019
From: mhroncok at redhat.com (=?UTF-8?Q?Miro_Hron=c4=8dok?=)
Date: Fri, 3 May 2019 14:41:17 +0200
Subject: [Python-Dev] Please merge : bpo-34848
In-Reply-To: <CA+3bQGE4_3N2pC=X2raov1ZoJ2KRkAj6aUeea4RhvSSHLzKC=g@mail.gmail.com>
References: <CAEaN0UYdbVxQGidEWibG+mS=AjosZ22oruRDfz2vu9w=7qT+CQ@mail.gmail.com>
 <CA+3bQGE4_3N2pC=X2raov1ZoJ2KRkAj6aUeea4RhvSSHLzKC=g@mail.gmail.com>
Message-ID: <10403b62-6025-30ae-74f5-ca096e275b27@redhat.com>

On 03. 05. 19 14:24, Victor Stinner wrote:
> Does someone know how I can list pull requests which has been approved but not 
> merged yet?

Add review:approved to the search filed.

https://github.com/python/cpython/pulls?q=is%3Apr+is%3Aopen+review%3Aapproved

Or click on **Reviews** in the top bar and select what you like.

-- 
Miro Hron?ok
--
Phone: +420777974800
IRC: mhroncok

From bcannon at gmail.com  Fri May  3 11:01:49 2019
From: bcannon at gmail.com (Brett Cannon)
Date: Fri, 3 May 2019 11:01:49 -0400
Subject: [Python-Dev] Please merge : bpo-34848
In-Reply-To: <10403b62-6025-30ae-74f5-ca096e275b27@redhat.com>
References: <CAEaN0UYdbVxQGidEWibG+mS=AjosZ22oruRDfz2vu9w=7qT+CQ@mail.gmail.com>
 <CA+3bQGE4_3N2pC=X2raov1ZoJ2KRkAj6aUeea4RhvSSHLzKC=g@mail.gmail.com>
 <10403b62-6025-30ae-74f5-ca096e275b27@redhat.com>
Message-ID: <CAP1=2W6Q4yeAmkOrtkX3ZS7QkpJDa5UhSH_HF3N0j55vJFgtTA@mail.gmail.com>

The "awaiting merge" was originally created to help with this.

On Fri., May 3, 2019, 08:51 Miro Hron?ok, <mhroncok at redhat.com> wrote:

> On 03. 05. 19 14:24, Victor Stinner wrote:
> > Does someone know how I can list pull requests which has been approved
> but not
> > merged yet?
>
> Add review:approved to the search filed.
>
>
> https://github.com/python/cpython/pulls?q=is%3Apr+is%3Aopen+review%3Aapproved
>
> Or click on **Reviews** in the top bar and select what you like.
>
> --
> Miro Hron?ok
> --
> Phone: +420777974800
> IRC: mhroncok
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/brett%40python.org
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190503/6d7d5383/attachment-0001.html>

From J.Demeyer at UGent.be  Fri May  3 11:38:56 2019
From: J.Demeyer at UGent.be (Jeroen Demeyer)
Date: Fri, 3 May 2019 17:38:56 +0200
Subject: [Python-Dev] PEP 580/590 proposals summary
Message-ID: <5CCC6090.6010202@UGent.be>

Hello all,

If we want to have a chance of implementing PEP 580/590 in Python 3.8, 
we shouldn't wait too long to make a decision on which proposal to accept.

As a summary, below I'll write the four proposals together with a star 
"score" for 3 criteria (there is no obvious best proposal, all have 
advantages and disadvantages):

- complexity: more stars is a protocol which is simpler to document and 
understand.
- implementation: more stars is a simpler implementation of CPython (not 
just of the protocol itself, but also the code using the protocol).
- performance: more stars is better performance for *existing* code. I'm 
using a minimum of 3 stars here, since the difference is not that big 
between the proposals.

Criteria that I am NOT considering:

- The performance for *new* code or the performance of wrappers 
generated by Argument Clinic: all proposals score excellent here.
- Complexity of implementations of external classes: this is hard to 
judge, since that depends a lot on what those external classes (outside 
of CPython) want to do.
- The work to implement the proposal in CPython: this is a one-time only 
thing that I'm volunteering to do anyway.
- Extensibility of the protocol: first of all, it's hard to define what 
this means exactly. Second, using Petr's idea of putting the flags 
inside the instance, every proposal becomes extensible at little cost.

Proposals:

(A) PEP 580
complexity:     *
implementation: *****
performance:    *****

(B) compromise: PEP 580 with a single calling convention
complexity:     ***
implementation: ****
performance:    ****

(C) PEP 590 with a single bound method class
complexity:     *****
implementation: ***
performance:    ***

(D) PEP 590
complexity:     *****
implementation: *
performance:    ****

I consider Petr's proposal (a more extensible variant of PEP 590 with 
flags inside the instance) a minor variation of PEP 590 for this purpose 
and no need to score it differently than "plain" PEP 590.

I tried to do this as unbiased as possible, even though I must admit 
that this is not really possible.

I'm considering not just the PEP and the existing implementation as 
written, but also ideas that haven't been implemented yet such as:
- proposals (A)-(C): rationalization of classes, in particular having a 
single class for bound methods (just like in PyPy).
- proposals (B)-(D): Mark Shannon's idea of having a dedicated 
vectorcall wrapper for each calling convention (one for METH_O, one for 
METH_VARARGS|METH_KEYWORDS, ...).
- using the protocol also for slot wrappers like object.__eq__

I'm NOT considering Petr's proposal of removing support for other 
calling conventions like METH_VARARGS because that won't happen any time 
soon.


Cheers,
Jeroen

From J.Demeyer at UGent.be  Fri May  3 11:40:55 2019
From: J.Demeyer at UGent.be (Jeroen Demeyer)
Date: Fri, 3 May 2019 17:40:55 +0200
Subject: [Python-Dev] Please merge : bpo-34848
In-Reply-To: <CA+3bQGE4_3N2pC=X2raov1ZoJ2KRkAj6aUeea4RhvSSHLzKC=g@mail.gmail.com>
References: <CAEaN0UYdbVxQGidEWibG+mS=AjosZ22oruRDfz2vu9w=7qT+CQ@mail.gmail.com>
 <CA+3bQGE4_3N2pC=X2raov1ZoJ2KRkAj6aUeea4RhvSSHLzKC=g@mail.gmail.com>
Message-ID: <5CCC6107.10900@UGent.be>

On 2019-05-03 14:24, Victor Stinner wrote:
> Hi Srinivas,
>
> I merged your obvious doc fix, thanks.

Can you please do the same for

https://github.com/python/cpython/pull/12784

From jerrywiltse at gmail.com  Fri May  3 11:55:12 2019
From: jerrywiltse at gmail.com (Gerald Wiltse)
Date: Fri, 3 May 2019 11:55:12 -0400
Subject: [Python-Dev] Location of CI for Windows Embeddable Distro
In-Reply-To: <CAML1RCBKW2U+7cUL=aJXZ0Me5XPc0kNXweKG22RYbBSgK0vebg@mail.gmail.com>
References: <CAML1RCC0vw2V_bitZ0rJFc-VzLgZNShe0wNCb4oZSK0gZYVgfA@mail.gmail.com>
 <b4196920-94d4-f2de-c444-31d236752a64@python.org>
 <CAML1RCBGVu-pnzcJ1Czxv_aFAgs+DgfPB9rjtXHsjdnRp=4eOw@mail.gmail.com>
 <a94aff02-6bdd-9147-8c15-c04c4e244825@python.org>
 <CAML1RCDn8r_gLgAg7ZiVLn_mNvcpp4=NoyGc102dY3_HByE6aw@mail.gmail.com>
 <CAML1RCDM4hM1TxTB5CMhCh4Kzd-mv9jNLfL2a1yUbH07j7-euA@mail.gmail.com>
 <CAML1RCB-LC9xUJu5pJjeRFSgDBSGDrrHWD3u+cT48=dHaqS6eQ@mail.gmail.com>
 <CAML1RCBKW2U+7cUL=aJXZ0Me5XPc0kNXweKG22RYbBSgK0vebg@mail.gmail.com>
Message-ID: <CAML1RCAYfX-GPF+Xpve_TAFS8r8uG9D+B6DThhBz_rqDaA9VUQ@mail.gmail.com>

Ok, disregard previous message.  I fixed the PYTHONPATH in my command
and the .pyc files and .  I also saw that python36._pth is specifically
only supported by windows.

Now i'm moved on to the following error:

zipimport.ZipImportError: can't decompress data; zlib not available

I'm on Ubuntu.  I've definitely got zlib1g-dev package installed, and I've
recompiled a number of times trying to get it to work.  I've tried Ubuntu
16 and 18.

Is this just a limitation on linux?

Gerald R. Wiltse
jerrywiltse at gmail.com



On Thu, May 2, 2019 at 4:29 PM Gerald Wiltse <jerrywiltse at gmail.com> wrote:

> Just an update based on testing.  If I zip the modules up into
> python36.zip (whether in .py or .pyc form) the linux binary does not find
> them.  If I copy them into the embedded root, alongside the python
> executable, it finds them as expected.
>
> This just makes it seem more like an issue where Linux binary does not
> respect .zip file as a source of modules.
>
> Gerald R. Wiltse
> jerrywiltse at gmail.com
>
>
>
> On Thu, May 2, 2019 at 2:56 PM Gerald Wiltse <jerrywiltse at gmail.com>
> wrote:
>
>> With minimal patching of tools/msi/make_zip.py, I was able to create an
>> equivalent zip package on Linux.  It doesn't work out of the box of
>> course.  I had to do two commands
>>
>> My biggest concern is that even if the layout is "correct" on linux, the
>> python runtime might not actually support being run like this on Linux.
>> Perhaps the code for using python36.zip as a landmark and source of modules
>> is only implemented on Windows.  Do you know if that is the case?
>>
>>     tmp$ export LD_LIBRARY_PATH=$(pwd)
>>     tmp$ export PYTHONHOME=$(pwd)
>>     tmp$ export PYTHONPATH=$(pwd)
>>     tmp$ ./python
>>     Fatal Python error: Py_Initialize: Unable to get the locale encoding
>>     ModuleNotFoundError: No module named 'encodings'
>>
>>     Current thread 0x00007fdde9eb1680 (most recent call first):
>>     Aborted (core dumped)
>>
>> Here's the full directory structure, error, and patch I created. Any
>> additional feedback would be great.
>>
>> https://gist.github.com/solvingj/87305e0f70e14d738d6989ba2f41352f
>>
>> Gerald R. Wiltse
>> jerrywiltse at gmail.com
>>
>>
>>
>> On Thu, May 2, 2019 at 11:24 AM Gerald Wiltse <jerrywiltse at gmail.com>
>> wrote:
>>
>>> I've successfully automated the build of the embedded zip on Windows for
>>> 3.6 on my internal CI using tools/msi script.
>>>
>>> Moving onto linux, can you please summarize the primary
>>> challenges/differences for creating the embeddable zip for linux?
>>>
>>> Gerald R. Wiltse
>>> jerrywiltse at gmail.com
>>>
>>>
>>>
>>> On Wed, May 1, 2019 at 2:47 PM Gerald Wiltse <jerrywiltse at gmail.com>
>>> wrote:
>>>
>>>> Yes, I'll help with this, and I try to get signed up with an account
>>>> for the issue tracker ASAP.
>>>>
>>>> I've just started trying to build create the embeddable package for
>>>> windows locally (all from source).  Once I have that automated, I'll take a
>>>> naive stab at the Linux layout.  I'm sure i'll soon hit the additional
>>>> complications you're talking about and come back to you with questions.
>>>>
>>>> Gerald R. Wiltse
>>>> jerrywiltse at gmail.com
>>>>
>>>>
>>>>
>>>> On Wed, May 1, 2019 at 1:57 PM Steve Dower <steve.dower at python.org>
>>>> wrote:
>>>>
>>>>> On 01May2019 1305, Gerald Wiltse wrote:
>>>>> > That does help, thanks so much for the fast response!  I now see how
>>>>> > it's executed on Azure pipelines also, so that should be enough for
>>>>> me
>>>>> > to reverse engineer the rest.
>>>>> >
>>>>> > Followup questions if you have time:
>>>>> > 1. It seems that directory doesn't exist in the 3.6 branches/tags,
>>>>> so it
>>>>> > must have been done a different way back then.  Do you think it's
>>>>> > back-portable to 3.6?
>>>>>
>>>>> Yep, it should work with 3.6. There were scripts under Tools/msi back
>>>>> then that did the same thing, but with the Store app I rewrote it to
>>>>> be
>>>>> more flexible.
>>>>>
>>>>> > 2. One of our objectives is to effectively create a nearly identical
>>>>> > embeddable package for linux. Do you think the layout code is
>>>>> generic
>>>>> > enough to be modified to create a linux equivalent?
>>>>>
>>>>> Probably not, it's under the "PC" directory because it is entirely
>>>>> CPython specific.
>>>>>
>>>>> I'd love to be able to have a similar embeddable distro for Linux (and
>>>>> macOS), and I'll be investing some of my time in working towards this,
>>>>> but it's far more complicated than simply laying out the right files.
>>>>> If
>>>>> you're interested in helping with this, then we're in the right place
>>>>> to
>>>>> discuss it, but we'll likely have to move to the issue tracker at some
>>>>> point once we figure out who else wants/needs to be involved.
>>>>>
>>>>> > Obviously, there are many alternative methods and documents for
>>>>> creating
>>>>> > "embeddable" pythons on linux, but the windows package has all the
>>>>> > characteristics we want, and of course we'd like our Windows and
>>>>> Linux
>>>>> > process build and packaging processes to be as similar as possible,
>>>>> so
>>>>> > it seems attractive to try to port this layout script to linux.
>>>>>
>>>>> "make install" already does the same thing, but the install location
>>>>> matters at build time, so it's a little more complex to make it work
>>>>> as
>>>>> an embedded runtime. I'm sure there are people who know how to make it
>>>>> work though.
>>>>>
>>>>> Cheers,
>>>>> Steve
>>>>>
>>>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190503/6388fb37/attachment.html>

From jerrywiltse at gmail.com  Fri May  3 13:02:51 2019
From: jerrywiltse at gmail.com (Gerald Wiltse)
Date: Fri, 3 May 2019 13:02:51 -0400
Subject: [Python-Dev] Location of CI for Windows Embeddable Distro
In-Reply-To: <CAML1RCAYfX-GPF+Xpve_TAFS8r8uG9D+B6DThhBz_rqDaA9VUQ@mail.gmail.com>
References: <CAML1RCC0vw2V_bitZ0rJFc-VzLgZNShe0wNCb4oZSK0gZYVgfA@mail.gmail.com>
 <b4196920-94d4-f2de-c444-31d236752a64@python.org>
 <CAML1RCBGVu-pnzcJ1Czxv_aFAgs+DgfPB9rjtXHsjdnRp=4eOw@mail.gmail.com>
 <a94aff02-6bdd-9147-8c15-c04c4e244825@python.org>
 <CAML1RCDn8r_gLgAg7ZiVLn_mNvcpp4=NoyGc102dY3_HByE6aw@mail.gmail.com>
 <CAML1RCDM4hM1TxTB5CMhCh4Kzd-mv9jNLfL2a1yUbH07j7-euA@mail.gmail.com>
 <CAML1RCB-LC9xUJu5pJjeRFSgDBSGDrrHWD3u+cT48=dHaqS6eQ@mail.gmail.com>
 <CAML1RCBKW2U+7cUL=aJXZ0Me5XPc0kNXweKG22RYbBSgK0vebg@mail.gmail.com>
 <CAML1RCAYfX-GPF+Xpve_TAFS8r8uG9D+B6DThhBz_rqDaA9VUQ@mail.gmail.com>
Message-ID: <CAML1RCADosCn4NyMnLVatUfDh=StysccbGcO=XhV8RuHebr89g@mail.gmail.com>

I have it working on linux now.  Is now a good time to open a ticket on
Issue Tracker?

Gerald R. Wiltse
jerrywiltse at gmail.com



On Fri, May 3, 2019 at 11:55 AM Gerald Wiltse <jerrywiltse at gmail.com> wrote:

> Ok, disregard previous message.  I fixed the PYTHONPATH in my command
> and the .pyc files and .  I also saw that python36._pth is specifically
> only supported by windows.
>
> Now i'm moved on to the following error:
>
> zipimport.ZipImportError: can't decompress data; zlib not available
>
> I'm on Ubuntu.  I've definitely got zlib1g-dev package installed, and I've
> recompiled a number of times trying to get it to work.  I've tried Ubuntu
> 16 and 18.
>
> Is this just a limitation on linux?
>
> Gerald R. Wiltse
> jerrywiltse at gmail.com
>
>
>
> On Thu, May 2, 2019 at 4:29 PM Gerald Wiltse <jerrywiltse at gmail.com>
> wrote:
>
>> Just an update based on testing.  If I zip the modules up into
>> python36.zip (whether in .py or .pyc form) the linux binary does not find
>> them.  If I copy them into the embedded root, alongside the python
>> executable, it finds them as expected.
>>
>> This just makes it seem more like an issue where Linux binary does not
>> respect .zip file as a source of modules.
>>
>> Gerald R. Wiltse
>> jerrywiltse at gmail.com
>>
>>
>>
>> On Thu, May 2, 2019 at 2:56 PM Gerald Wiltse <jerrywiltse at gmail.com>
>> wrote:
>>
>>> With minimal patching of tools/msi/make_zip.py, I was able to create an
>>> equivalent zip package on Linux.  It doesn't work out of the box of
>>> course.  I had to do two commands
>>>
>>> My biggest concern is that even if the layout is "correct" on linux, the
>>> python runtime might not actually support being run like this on Linux.
>>> Perhaps the code for using python36.zip as a landmark and source of modules
>>> is only implemented on Windows.  Do you know if that is the case?
>>>
>>>     tmp$ export LD_LIBRARY_PATH=$(pwd)
>>>     tmp$ export PYTHONHOME=$(pwd)
>>>     tmp$ export PYTHONPATH=$(pwd)
>>>     tmp$ ./python
>>>     Fatal Python error: Py_Initialize: Unable to get the locale encoding
>>>     ModuleNotFoundError: No module named 'encodings'
>>>
>>>     Current thread 0x00007fdde9eb1680 (most recent call first):
>>>     Aborted (core dumped)
>>>
>>> Here's the full directory structure, error, and patch I created. Any
>>> additional feedback would be great.
>>>
>>> https://gist.github.com/solvingj/87305e0f70e14d738d6989ba2f41352f
>>>
>>> Gerald R. Wiltse
>>> jerrywiltse at gmail.com
>>>
>>>
>>>
>>> On Thu, May 2, 2019 at 11:24 AM Gerald Wiltse <jerrywiltse at gmail.com>
>>> wrote:
>>>
>>>> I've successfully automated the build of the embedded zip on Windows
>>>> for 3.6 on my internal CI using tools/msi script.
>>>>
>>>> Moving onto linux, can you please summarize the primary
>>>> challenges/differences for creating the embeddable zip for linux?
>>>>
>>>> Gerald R. Wiltse
>>>> jerrywiltse at gmail.com
>>>>
>>>>
>>>>
>>>> On Wed, May 1, 2019 at 2:47 PM Gerald Wiltse <jerrywiltse at gmail.com>
>>>> wrote:
>>>>
>>>>> Yes, I'll help with this, and I try to get signed up with an account
>>>>> for the issue tracker ASAP.
>>>>>
>>>>> I've just started trying to build create the embeddable package for
>>>>> windows locally (all from source).  Once I have that automated, I'll take a
>>>>> naive stab at the Linux layout.  I'm sure i'll soon hit the additional
>>>>> complications you're talking about and come back to you with questions.
>>>>>
>>>>> Gerald R. Wiltse
>>>>> jerrywiltse at gmail.com
>>>>>
>>>>>
>>>>>
>>>>> On Wed, May 1, 2019 at 1:57 PM Steve Dower <steve.dower at python.org>
>>>>> wrote:
>>>>>
>>>>>> On 01May2019 1305, Gerald Wiltse wrote:
>>>>>> > That does help, thanks so much for the fast response!  I now see
>>>>>> how
>>>>>> > it's executed on Azure pipelines also, so that should be enough for
>>>>>> me
>>>>>> > to reverse engineer the rest.
>>>>>> >
>>>>>> > Followup questions if you have time:
>>>>>> > 1. It seems that directory doesn't exist in the 3.6 branches/tags,
>>>>>> so it
>>>>>> > must have been done a different way back then.  Do you think it's
>>>>>> > back-portable to 3.6?
>>>>>>
>>>>>> Yep, it should work with 3.6. There were scripts under Tools/msi back
>>>>>> then that did the same thing, but with the Store app I rewrote it to
>>>>>> be
>>>>>> more flexible.
>>>>>>
>>>>>> > 2. One of our objectives is to effectively create a nearly
>>>>>> identical
>>>>>> > embeddable package for linux. Do you think the layout code is
>>>>>> generic
>>>>>> > enough to be modified to create a linux equivalent?
>>>>>>
>>>>>> Probably not, it's under the "PC" directory because it is entirely
>>>>>> CPython specific.
>>>>>>
>>>>>> I'd love to be able to have a similar embeddable distro for Linux
>>>>>> (and
>>>>>> macOS), and I'll be investing some of my time in working towards
>>>>>> this,
>>>>>> but it's far more complicated than simply laying out the right files.
>>>>>> If
>>>>>> you're interested in helping with this, then we're in the right place
>>>>>> to
>>>>>> discuss it, but we'll likely have to move to the issue tracker at
>>>>>> some
>>>>>> point once we figure out who else wants/needs to be involved.
>>>>>>
>>>>>> > Obviously, there are many alternative methods and documents for
>>>>>> creating
>>>>>> > "embeddable" pythons on linux, but the windows package has all the
>>>>>> > characteristics we want, and of course we'd like our Windows and
>>>>>> Linux
>>>>>> > process build and packaging processes to be as similar as possible,
>>>>>> so
>>>>>> > it seems attractive to try to port this layout script to linux.
>>>>>>
>>>>>> "make install" already does the same thing, but the install location
>>>>>> matters at build time, so it's a little more complex to make it work
>>>>>> as
>>>>>> an embedded runtime. I'm sure there are people who know how to make
>>>>>> it
>>>>>> work though.
>>>>>>
>>>>>> Cheers,
>>>>>> Steve
>>>>>>
>>>>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190503/419e5e8c/attachment.html>

From jerrywiltse at gmail.com  Fri May  3 13:53:00 2019
From: jerrywiltse at gmail.com (Gerald Wiltse)
Date: Fri, 3 May 2019 13:53:00 -0400
Subject: [Python-Dev] Location of CI for Windows Embeddable Distro
In-Reply-To: <CAML1RCADosCn4NyMnLVatUfDh=StysccbGcO=XhV8RuHebr89g@mail.gmail.com>
References: <CAML1RCC0vw2V_bitZ0rJFc-VzLgZNShe0wNCb4oZSK0gZYVgfA@mail.gmail.com>
 <b4196920-94d4-f2de-c444-31d236752a64@python.org>
 <CAML1RCBGVu-pnzcJ1Czxv_aFAgs+DgfPB9rjtXHsjdnRp=4eOw@mail.gmail.com>
 <a94aff02-6bdd-9147-8c15-c04c4e244825@python.org>
 <CAML1RCDn8r_gLgAg7ZiVLn_mNvcpp4=NoyGc102dY3_HByE6aw@mail.gmail.com>
 <CAML1RCDM4hM1TxTB5CMhCh4Kzd-mv9jNLfL2a1yUbH07j7-euA@mail.gmail.com>
 <CAML1RCB-LC9xUJu5pJjeRFSgDBSGDrrHWD3u+cT48=dHaqS6eQ@mail.gmail.com>
 <CAML1RCBKW2U+7cUL=aJXZ0Me5XPc0kNXweKG22RYbBSgK0vebg@mail.gmail.com>
 <CAML1RCAYfX-GPF+Xpve_TAFS8r8uG9D+B6DThhBz_rqDaA9VUQ@mail.gmail.com>
 <CAML1RCADosCn4NyMnLVatUfDh=StysccbGcO=XhV8RuHebr89g@mail.gmail.com>
Message-ID: <CAML1RCBrtDMNDOH2sH5+P1sOG5jjRouGUxzej96mnxBGEyjyJg@mail.gmail.com>

Now that I have it working, I recall that the runtime challenge for a
portable/embeddable distro on Linux is in the system configuration
handling.  This has always been a complicated fundamental behavior which
has prevented or complicated many "portability" cases in the past.

There are many projects which have managed to ship portable/relocatable
python installations in the past.  Maybe looking at them will be helpful in
deciding how to deal with the situation here.

Gerald R. Wiltse
jerrywiltse at gmail.com



On Fri, May 3, 2019 at 1:02 PM Gerald Wiltse <jerrywiltse at gmail.com> wrote:

> I have it working on linux now.  Is now a good time to open a ticket on
> Issue Tracker?
>
> Gerald R. Wiltse
> jerrywiltse at gmail.com
>
>
>
> On Fri, May 3, 2019 at 11:55 AM Gerald Wiltse <jerrywiltse at gmail.com>
> wrote:
>
>> Ok, disregard previous message.  I fixed the PYTHONPATH in my command
>> and the .pyc files and .  I also saw that python36._pth is specifically
>> only supported by windows.
>>
>> Now i'm moved on to the following error:
>>
>> zipimport.ZipImportError: can't decompress data; zlib not available
>>
>> I'm on Ubuntu.  I've definitely got zlib1g-dev package installed, and
>> I've recompiled a number of times trying to get it to work.  I've tried
>> Ubuntu 16 and 18.
>>
>> Is this just a limitation on linux?
>>
>> Gerald R. Wiltse
>> jerrywiltse at gmail.com
>>
>>
>>
>> On Thu, May 2, 2019 at 4:29 PM Gerald Wiltse <jerrywiltse at gmail.com>
>> wrote:
>>
>>> Just an update based on testing.  If I zip the modules up into
>>> python36.zip (whether in .py or .pyc form) the linux binary does not find
>>> them.  If I copy them into the embedded root, alongside the python
>>> executable, it finds them as expected.
>>>
>>> This just makes it seem more like an issue where Linux binary does not
>>> respect .zip file as a source of modules.
>>>
>>> Gerald R. Wiltse
>>> jerrywiltse at gmail.com
>>>
>>>
>>>
>>> On Thu, May 2, 2019 at 2:56 PM Gerald Wiltse <jerrywiltse at gmail.com>
>>> wrote:
>>>
>>>> With minimal patching of tools/msi/make_zip.py, I was able to create an
>>>> equivalent zip package on Linux.  It doesn't work out of the box of
>>>> course.  I had to do two commands
>>>>
>>>> My biggest concern is that even if the layout is "correct" on linux,
>>>> the python runtime might not actually support being run like this on
>>>> Linux.  Perhaps the code for using python36.zip as a landmark and source of
>>>> modules is only implemented on Windows.  Do you know if that is the case?
>>>>
>>>>     tmp$ export LD_LIBRARY_PATH=$(pwd)
>>>>     tmp$ export PYTHONHOME=$(pwd)
>>>>     tmp$ export PYTHONPATH=$(pwd)
>>>>     tmp$ ./python
>>>>     Fatal Python error: Py_Initialize: Unable to get the locale encoding
>>>>     ModuleNotFoundError: No module named 'encodings'
>>>>
>>>>     Current thread 0x00007fdde9eb1680 (most recent call first):
>>>>     Aborted (core dumped)
>>>>
>>>> Here's the full directory structure, error, and patch I created. Any
>>>> additional feedback would be great.
>>>>
>>>> https://gist.github.com/solvingj/87305e0f70e14d738d6989ba2f41352f
>>>>
>>>> Gerald R. Wiltse
>>>> jerrywiltse at gmail.com
>>>>
>>>>
>>>>
>>>> On Thu, May 2, 2019 at 11:24 AM Gerald Wiltse <jerrywiltse at gmail.com>
>>>> wrote:
>>>>
>>>>> I've successfully automated the build of the embedded zip on Windows
>>>>> for 3.6 on my internal CI using tools/msi script.
>>>>>
>>>>> Moving onto linux, can you please summarize the primary
>>>>> challenges/differences for creating the embeddable zip for linux?
>>>>>
>>>>> Gerald R. Wiltse
>>>>> jerrywiltse at gmail.com
>>>>>
>>>>>
>>>>>
>>>>> On Wed, May 1, 2019 at 2:47 PM Gerald Wiltse <jerrywiltse at gmail.com>
>>>>> wrote:
>>>>>
>>>>>> Yes, I'll help with this, and I try to get signed up with an account
>>>>>> for the issue tracker ASAP.
>>>>>>
>>>>>> I've just started trying to build create the embeddable package for
>>>>>> windows locally (all from source).  Once I have that automated, I'll take a
>>>>>> naive stab at the Linux layout.  I'm sure i'll soon hit the additional
>>>>>> complications you're talking about and come back to you with questions.
>>>>>>
>>>>>> Gerald R. Wiltse
>>>>>> jerrywiltse at gmail.com
>>>>>>
>>>>>>
>>>>>>
>>>>>> On Wed, May 1, 2019 at 1:57 PM Steve Dower <steve.dower at python.org>
>>>>>> wrote:
>>>>>>
>>>>>>> On 01May2019 1305, Gerald Wiltse wrote:
>>>>>>> > That does help, thanks so much for the fast response!  I now see
>>>>>>> how
>>>>>>> > it's executed on Azure pipelines also, so that should be enough
>>>>>>> for me
>>>>>>> > to reverse engineer the rest.
>>>>>>> >
>>>>>>> > Followup questions if you have time:
>>>>>>> > 1. It seems that directory doesn't exist in the 3.6 branches/tags,
>>>>>>> so it
>>>>>>> > must have been done a different way back then.  Do you think it's
>>>>>>> > back-portable to 3.6?
>>>>>>>
>>>>>>> Yep, it should work with 3.6. There were scripts under Tools/msi
>>>>>>> back
>>>>>>> then that did the same thing, but with the Store app I rewrote it to
>>>>>>> be
>>>>>>> more flexible.
>>>>>>>
>>>>>>> > 2. One of our objectives is to effectively create a nearly
>>>>>>> identical
>>>>>>> > embeddable package for linux. Do you think the layout code is
>>>>>>> generic
>>>>>>> > enough to be modified to create a linux equivalent?
>>>>>>>
>>>>>>> Probably not, it's under the "PC" directory because it is entirely
>>>>>>> CPython specific.
>>>>>>>
>>>>>>> I'd love to be able to have a similar embeddable distro for Linux
>>>>>>> (and
>>>>>>> macOS), and I'll be investing some of my time in working towards
>>>>>>> this,
>>>>>>> but it's far more complicated than simply laying out the right
>>>>>>> files. If
>>>>>>> you're interested in helping with this, then we're in the right
>>>>>>> place to
>>>>>>> discuss it, but we'll likely have to move to the issue tracker at
>>>>>>> some
>>>>>>> point once we figure out who else wants/needs to be involved.
>>>>>>>
>>>>>>> > Obviously, there are many alternative methods and documents for
>>>>>>> creating
>>>>>>> > "embeddable" pythons on linux, but the windows package has all the
>>>>>>> > characteristics we want, and of course we'd like our Windows and
>>>>>>> Linux
>>>>>>> > process build and packaging processes to be as similar as
>>>>>>> possible, so
>>>>>>> > it seems attractive to try to port this layout script to linux.
>>>>>>>
>>>>>>> "make install" already does the same thing, but the install location
>>>>>>> matters at build time, so it's a little more complex to make it work
>>>>>>> as
>>>>>>> an embedded runtime. I'm sure there are people who know how to make
>>>>>>> it
>>>>>>> work though.
>>>>>>>
>>>>>>> Cheers,
>>>>>>> Steve
>>>>>>>
>>>>>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190503/5693a790/attachment-0001.html>

From status at bugs.python.org  Fri May  3 14:07:47 2019
From: status at bugs.python.org (Python tracker)
Date: Fri,  3 May 2019 18:07:47 +0000 (UTC)
Subject: [Python-Dev] Summary of Python tracker Issues
Message-ID: <20190503180747.44D9052B035@bugs.ams1.psf.io>


ACTIVITY SUMMARY (2019-04-26 - 2019-05-03)
Python tracker at https://bugs.python.org/

To view or respond to any of the issues listed below, click on the issue.
Do NOT respond to this message.

Issues counts and deltas:
  open    7081 ( -2)
  closed 41454 (+52)
  total  48535 (+50)

Open issues with patches: 2820 


Issues opened (41)
==================

#36356: Failure to build with address sanitizer
https://bugs.python.org/issue36356  reopened by vstinner

#36707: The "m" ABI flag of SOABI for pymalloc is no longer needed
https://bugs.python.org/issue36707  reopened by ned.deily

#36737: Warnings operate out of global runtime state.
https://bugs.python.org/issue36737  opened by eric.snow

#36738: Add 'array_hook' for json module
https://bugs.python.org/issue36738  opened by matomatical

#36739: "4.6. Defining Functions" should mention nonlocal
https://bugs.python.org/issue36739  opened by pbhd0815

#36743: Docs: Descript __get__ signature defined differently across th
https://bugs.python.org/issue36743  opened by jdufresne

#36744: functools.singledispatch: Shouldn't require a positional argum
https://bugs.python.org/issue36744  opened by KevinG

#36746: Create test for fcntl.lockf()
https://bugs.python.org/issue36746  opened by nanjekyejoannah

#36748: Optimize textio write buffering
https://bugs.python.org/issue36748  opened by inada.naoki

#36749: PPC64 AIX 3.x: compilation issue, linker fails to locate symbo
https://bugs.python.org/issue36749  opened by vstinner

#36750: test_socket leaks file descriptors on macOS
https://bugs.python.org/issue36750  opened by xtreak

#36751: Changes in the inspect module for PEP 570
https://bugs.python.org/issue36751  opened by pablogsal

#36752: test multiprocessing: test_rapid_restart() crash on AIX
https://bugs.python.org/issue36752  opened by vstinner

#36753: Python modules not linking to libpython causes issues for RTLD
https://bugs.python.org/issue36753  opened by reimar

#36754: Remove smart quotes in pydoc text
https://bugs.python.org/issue36754  opened by steve.dower

#36755: [2.7] test_httplib leaked [8, 8, 8] references with OpenSSL 1.
https://bugs.python.org/issue36755  opened by vstinner

#36756: tkinter tk.createcommand memory leak
https://bugs.python.org/issue36756  opened by WKraus

#36757: uuid constructor accept invalid strings (extra dash)
https://bugs.python.org/issue36757  opened by C??dric Cabessa

#36758: configured libdir not correctly passed to Python executable
https://bugs.python.org/issue36758  opened by michael-o

#36759: datetime: astimezone() results in OSError: [Errno 22] Invalid 
https://bugs.python.org/issue36759  opened by Snidhi

#36760: subprocess.run fails with capture_output=True and stderr=STDOU
https://bugs.python.org/issue36760  opened by Joe.Borg

#36761: Extended slice assignment + iterable unpacking
https://bugs.python.org/issue36761  opened by wim.glenn

#36762: Teach "import *" to warn when overwriting globals or builtins
https://bugs.python.org/issue36762  opened by rhettinger

#36763: PEP 587: Rework initialization API to prepare second version o
https://bugs.python.org/issue36763  opened by vstinner

#36766: Typos in docs and code comments
https://bugs.python.org/issue36766  opened by xtreak

#36767: Segmentation fault when running c extension on macOS
https://bugs.python.org/issue36767  opened by Senhui Guo

#36768: distutils.util.convert_path mangles windows paths with forward
https://bugs.python.org/issue36768  opened by LordAro

#36769: doc Document that fnmatch.filter supports any kind of iterable
https://bugs.python.org/issue36769  opened by adelfino

#36770: stdlib - shutil.make_archive - add support for different ZIP c
https://bugs.python.org/issue36770  opened by owenchia

#36771: Feature Request: An option to os.walk() to return os.DirEntry 
https://bugs.python.org/issue36771  opened by apocalyptech

#36772: Let lru_cache be used as a decorator with no arguments
https://bugs.python.org/issue36772  opened by rhettinger

#36773: Race condition during pickle.load()
https://bugs.python.org/issue36773  opened by papad

#36774: f-strings: Add a !d conversion for ease of debugging
https://bugs.python.org/issue36774  opened by eric.smith

#36777: unittest discover throws TypeError on empty packages
https://bugs.python.org/issue36777  opened by xtreak

#36778: test_site.StartupImportTests.test_startup_imports fails if def
https://bugs.python.org/issue36778  opened by Paul Monson

#36779: time.tzname returns empty string on Windows if default codepag
https://bugs.python.org/issue36779  opened by Paul Monson

#36780: Interpreter exit blocks waiting for futures of shut-down Threa
https://bugs.python.org/issue36780  opened by hniksic

#36781: Optimize sum() for bools
https://bugs.python.org/issue36781  opened by serhiy.storchaka

#36782: Add tests for the datetime C API
https://bugs.python.org/issue36782  opened by p-ganssle

#36783: No documentation for _FromXandFold C API functions
https://bugs.python.org/issue36783  opened by p-ganssle

#36784: __import__ with empty folder after importlib.invalidate_caches
https://bugs.python.org/issue36784  opened by xtreak



Most recent 15 issues with no replies (15)
==========================================

#36784: __import__ with empty folder after importlib.invalidate_caches
https://bugs.python.org/issue36784

#36781: Optimize sum() for bools
https://bugs.python.org/issue36781

#36780: Interpreter exit blocks waiting for futures of shut-down Threa
https://bugs.python.org/issue36780

#36779: time.tzname returns empty string on Windows if default codepag
https://bugs.python.org/issue36779

#36770: stdlib - shutil.make_archive - add support for different ZIP c
https://bugs.python.org/issue36770

#36769: doc Document that fnmatch.filter supports any kind of iterable
https://bugs.python.org/issue36769

#36768: distutils.util.convert_path mangles windows paths with forward
https://bugs.python.org/issue36768

#36766: Typos in docs and code comments
https://bugs.python.org/issue36766

#36758: configured libdir not correctly passed to Python executable
https://bugs.python.org/issue36758

#36755: [2.7] test_httplib leaked [8, 8, 8] references with OpenSSL 1.
https://bugs.python.org/issue36755

#36752: test multiprocessing: test_rapid_restart() crash on AIX
https://bugs.python.org/issue36752

#36748: Optimize textio write buffering
https://bugs.python.org/issue36748

#36738: Add 'array_hook' for json module
https://bugs.python.org/issue36738

#36732: test_asyncio: test_huge_content_recvinto() fails randomly
https://bugs.python.org/issue36732

#36728: Remove PyEval_ReInitThreads() from the public C API
https://bugs.python.org/issue36728



Most recent 15 issues waiting for review (15)
=============================================

#36778: test_site.StartupImportTests.test_startup_imports fails if def
https://bugs.python.org/issue36778

#36774: f-strings: Add a !d conversion for ease of debugging
https://bugs.python.org/issue36774

#36772: Let lru_cache be used as a decorator with no arguments
https://bugs.python.org/issue36772

#36771: Feature Request: An option to os.walk() to return os.DirEntry 
https://bugs.python.org/issue36771

#36770: stdlib - shutil.make_archive - add support for different ZIP c
https://bugs.python.org/issue36770

#36769: doc Document that fnmatch.filter supports any kind of iterable
https://bugs.python.org/issue36769

#36763: PEP 587: Rework initialization API to prepare second version o
https://bugs.python.org/issue36763

#36751: Changes in the inspect module for PEP 570
https://bugs.python.org/issue36751

#36749: PPC64 AIX 3.x: compilation issue, linker fails to locate symbo
https://bugs.python.org/issue36749

#36748: Optimize textio write buffering
https://bugs.python.org/issue36748

#36746: Create test for fcntl.lockf()
https://bugs.python.org/issue36746

#36743: Docs: Descript __get__ signature defined differently across th
https://bugs.python.org/issue36743

#36739: "4.6. Defining Functions" should mention nonlocal
https://bugs.python.org/issue36739

#36738: Add 'array_hook' for json module
https://bugs.python.org/issue36738

#36725: Reference leak regression with Python3.8a3
https://bugs.python.org/issue36725



Top 10 most discussed issues (10)
=================================

#36774: f-strings: Add a !d conversion for ease of debugging
https://bugs.python.org/issue36774  14 msgs

#36751: Changes in the inspect module for PEP 570
https://bugs.python.org/issue36751  12 msgs

#30458: [security][CVE-2019-9740][CVE-2019-9947] HTTP Header Injection
https://bugs.python.org/issue30458   9 msgs

#36763: PEP 587: Rework initialization API to prepare second version o
https://bugs.python.org/issue36763   9 msgs

#26493: Bad formatting in WinError 193 when using subprocess.check_cal
https://bugs.python.org/issue26493   8 msgs

#36710: Pass _PyRuntimeState as an argument rather than using the _PyR
https://bugs.python.org/issue36710   8 msgs

#34616: implement "Async exec"
https://bugs.python.org/issue34616   7 msgs

#35184: Makefile is not correctly generated when compiling pyextat wit
https://bugs.python.org/issue35184   5 msgs

#36356: Failure to build with address sanitizer
https://bugs.python.org/issue36356   5 msgs

#36540: PEP 570: Python Positional-Only Parameters
https://bugs.python.org/issue36540   5 msgs



Issues closed (51)
==================

#5166: ElementTree and minidom don't prevent creation of not well-for
https://bugs.python.org/issue5166  closed by scoder

#8583: Hardcoded namespace_separator in the cElementTree.XMLParser
https://bugs.python.org/issue8583  closed by scoder

#10328: re.sub[n] doesn't seem to handle /Z replacements correctly in 
https://bugs.python.org/issue10328  closed by serhiy.storchaka

#13611: Integrate ElementC14N module into xml.etree package
https://bugs.python.org/issue13611  closed by scoder

#14546: lll.py can't handle multiple parameters correctly
https://bugs.python.org/issue14546  closed by vstinner

#15388: SAX parse (ExpatParser) leaks file handle when given filename 
https://bugs.python.org/issue15388  closed by berker.peksag

#16425: minidom replaceChild(new_child, old_child) removes new_child e
https://bugs.python.org/issue16425  closed by scoder

#18675: Daemon Threads can seg fault
https://bugs.python.org/issue18675  closed by asvetlov

#19895: Cryptic error when subclassing multiprocessing classes
https://bugs.python.org/issue19895  closed by SilentGhost

#21403: cElementTree's Element creation handles attrib argument differ
https://bugs.python.org/issue21403  closed by scoder

#24638: asyncio "loop argument must agree with future" error message c
https://bugs.python.org/issue24638  closed by asvetlov

#27682: wsgiref BaseHandler / SimpleHandler can raise additional error
https://bugs.python.org/issue27682  closed by berker.peksag

#28460: Minidom, order of attributes, datachars
https://bugs.python.org/issue28460  closed by scoder

#28608: Support creating hardlink using `pathlib`
https://bugs.python.org/issue28608  closed by xtreak

#32235: test_xml_etree test_xml_etree_c failures with 2.7 and 3.6 bran
https://bugs.python.org/issue32235  closed by scoder

#34442: zlib module not built on windows
https://bugs.python.org/issue34442  closed by zach.ware

#34602: python3 resource.setrlimit strange behaviour under macOS
https://bugs.python.org/issue34602  closed by ned.deily

#35329: Documentation - capitalization issue
https://bugs.python.org/issue35329  closed by benjamin.peterson

#35502: Memory leak in xml.etree.ElementTree.iterparse
https://bugs.python.org/issue35502  closed by scoder

#35726: QueueHandler formatting affects other handlers
https://bugs.python.org/issue35726  closed by ned.deily

#35947: Update libffi_msvc to current version of libffi
https://bugs.python.org/issue35947  closed by Paul Monson

#35952: test.pythoninfo prints a stack trace and exits with 1 when the
https://bugs.python.org/issue35952  closed by vstinner

#36004: Add datetime.fromisocalendar
https://bugs.python.org/issue36004  closed by vstinner

#36025: Breaking change in PyDate_FromTimeStamp API
https://bugs.python.org/issue36025  closed by berker.peksag

#36341: bind() on AF_UNIX socket may fail in tests run as non-root
https://bugs.python.org/issue36341  closed by asvetlov

#36432: Running python test suite fails on macOS 10.14.4 with resource
https://bugs.python.org/issue36432  closed by ned.deily

#36475: PyEval_AcquireLock() and PyEval_AcquireThread() do not handle 
https://bugs.python.org/issue36475  closed by vstinner

#36509: Add iot layout for windows iot containers
https://bugs.python.org/issue36509  closed by Paul Monson

#36613: asyncio._wait() don't remove callback in case of exception
https://bugs.python.org/issue36613  closed by asvetlov

#36673: Comment/PI parsing support for ElementTree
https://bugs.python.org/issue36673  closed by scoder

#36676: Make ET.XMLParser target aware of namespace prefixes
https://bugs.python.org/issue36676  closed by scoder

#36699: building for riscv multilib (patch attached)
https://bugs.python.org/issue36699  closed by Andreas K. H??ttel

#36715: Dictionary initialization
https://bugs.python.org/issue36715  closed by rhettinger

#36716: Embedded Python fails to import module files with version_plat
https://bugs.python.org/issue36716  closed by ecosatto

#36719: regrtest --findleaks should fail if an uncollectable object is
https://bugs.python.org/issue36719  closed by vstinner

#36729: Delete unused text variable on tests
https://bugs.python.org/issue36729  closed by serhiy.storchaka

#36730: Change outdated references to macOS
https://bugs.python.org/issue36730  closed by berker.peksag

#36734: Modules/faulthandler.c does not compile on HP-UX due to bpo-35
https://bugs.python.org/issue36734  closed by vstinner

#36735: minimize disk size of cross-compiled python3.6
https://bugs.python.org/issue36735  closed by michalgr

#36736: Python crashes when calling win32file.LockFileEx
https://bugs.python.org/issue36736  closed by eryksun

#36740: zipimporter misses namespace packages for implicit dirs
https://bugs.python.org/issue36740  closed by jaraco

#36741: Variable about function and list
https://bugs.python.org/issue36741  closed by xtreak

#36742: urlsplit doesn't accept a NFKD hostname with a port number
https://bugs.python.org/issue36742  closed by steve.dower

#36745: A possible reference leak in PyObject_SetAttr()
https://bugs.python.org/issue36745  closed by asvetlov

#36747: Tools/scripts/setup.py is missing
https://bugs.python.org/issue36747  closed by vstinner

#36764: Types module doesn't have a type for _abc_data
https://bugs.python.org/issue36764  closed by serhiy.storchaka

#36765: Invalid grammar for f_expression
https://bugs.python.org/issue36765  closed by eric.smith

#36775: Rework filesystem codec implementation
https://bugs.python.org/issue36775  closed by vstinner

#36776: test_tools: test_lll_multiple_dirs() failed on  AMD64 Windows7
https://bugs.python.org/issue36776  closed by vstinner

#1613500: Write mode option for fileinput module.
https://bugs.python.org/issue1613500  closed by berker.peksag

#1191964: add non-blocking read and write methods to subprocess.Popen
https://bugs.python.org/issue1191964  closed by josiahcarlson

From solipsis at pitrou.net  Fri May  3 17:40:00 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Fri, 3 May 2019 23:40:00 +0200
Subject: [Python-Dev] PEP 574 ready for review
In-Reply-To: <CADiSq7c-eWwtkZ3RYW0eVAvzWMBpMKWY4bioXaXkVy+1nJwfVQ@mail.gmail.com>
References: <20190430101428.204457e6@fsol>
 <CADiSq7c-eWwtkZ3RYW0eVAvzWMBpMKWY4bioXaXkVy+1nJwfVQ@mail.gmail.com>
Message-ID: <20190503234000.267faa69@fsol>


On Wed, 1 May 2019 12:49:24 -0700
Nick Coghlan <ncoghlan at gmail.com> wrote:
> Thanks Antoine.
> 
> As BDFL-Delegate I'm happy with this version of the PEP, so it's my
> pleasure to accept it for inclusion in Python 3.8.

Thank you Nick!

The implementation has been posted for review at
https://github.com/python/cpython/pull/7076

Regards

Antoine.

From eric at trueblade.com  Fri May  3 22:46:03 2019
From: eric at trueblade.com (Eric V. Smith)
Date: Fri, 3 May 2019 22:46:03 -0400
Subject: [Python-Dev] Unicode identifiers in test files?
Message-ID: <b3ba2821-44cd-b0d4-143e-561d28da3737@trueblade.com>

Is there a policy against using Unicode identifiers in test files?

As part of adding !d to f-strings, there's a code path that's only 
executed if the text of the expression is non-ascii. The easiest way to 
exercise it, and the way I found a bug, is by using an identifier with 
Unicode chars. I know we have a policy against this in Lib/, but what 
about Lib/test/?

I could work around this with exec-ing some strings, but that seems like 
added confusion that I'd avoid with a real Unicode identifier.

Eric


From greg at krypto.org  Fri May  3 23:27:00 2019
From: greg at krypto.org (Gregory P. Smith)
Date: Fri, 3 May 2019 23:27:00 -0400
Subject: [Python-Dev] Unicode identifiers in test files?
In-Reply-To: <b3ba2821-44cd-b0d4-143e-561d28da3737@trueblade.com>
References: <b3ba2821-44cd-b0d4-143e-561d28da3737@trueblade.com>
Message-ID: <CAGE7PN+OW-rD7Ss2JUnHzxJAdQdsbnQik5me2y5zrFHVj7TVNA@mail.gmail.com>

On Fri, May 3, 2019 at 10:46 PM Eric V. Smith <eric at trueblade.com> wrote:

> Is there a policy against using Unicode identifiers in test files?
>
> As part of adding !d to f-strings, there's a code path that's only
> executed if the text of the expression is non-ascii. The easiest way to
> exercise it, and the way I found a bug, is by using an identifier with
> Unicode chars. I know we have a policy against this in Lib/, but what
> about Lib/test/?
>
> I could work around this with exec-ing some strings, but that seems like
> added confusion that I'd avoid with a real Unicode identifier.
>

At this point I'd just do it, make sure the file has an explicit coding
utf-8 comment up top just so it is clear it is intentional but everything
should be happy with it.

-gps


>
> Eric
>
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/greg%40krypto.org
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190503/fc6ace4b/attachment.html>

From steve at pearwood.info  Fri May  3 23:50:35 2019
From: steve at pearwood.info (Steven D'Aprano)
Date: Sat, 4 May 2019 13:50:35 +1000
Subject: [Python-Dev] Unicode identifiers in test files?
In-Reply-To: <b3ba2821-44cd-b0d4-143e-561d28da3737@trueblade.com>
References: <b3ba2821-44cd-b0d4-143e-561d28da3737@trueblade.com>
Message-ID: <20190504035034.GE5010@ando.pearwood.info>

On Fri, May 03, 2019 at 10:46:03PM -0400, Eric V. Smith wrote:
> Is there a policy against using Unicode identifiers in test files?
[...]
> I could work around this with exec-ing some strings, but that seems like 
> added confusion that I'd avoid with a real Unicode identifier.

"Look, that's why there's rules, understand? So that you *think* before 
you break 'em." -- Terry Pratchett, "The Thief Of Time"



-- 
Steven

From storchaka at gmail.com  Sat May  4 02:48:04 2019
From: storchaka at gmail.com (Serhiy Storchaka)
Date: Sat, 4 May 2019 09:48:04 +0300
Subject: [Python-Dev] Unicode identifiers in test files?
In-Reply-To: <b3ba2821-44cd-b0d4-143e-561d28da3737@trueblade.com>
References: <b3ba2821-44cd-b0d4-143e-561d28da3737@trueblade.com>
Message-ID: <qajcis$4c5$1@blaine.gmane.org>

04.05.19 05:46, Eric V. Smith ????:
> Is there a policy against using Unicode identifiers in test files?
> 
> As part of adding !d to f-strings, there's a code path that's only 
> executed if the text of the expression is non-ascii. The easiest way to 
> exercise it, and the way I found a bug, is by using an identifier with 
> Unicode chars. I know we have a policy against this in Lib/, but what 
> about Lib/test/?
> 
> I could work around this with exec-ing some strings, but that seems like 
> added confusion that I'd avoid with a real Unicode identifier.

Could you use string literals with non-ascii characters? They are more 
used in tests.


From eric at trueblade.com  Sat May  4 03:54:04 2019
From: eric at trueblade.com (Eric V. Smith)
Date: Sat, 4 May 2019 03:54:04 -0400
Subject: [Python-Dev] Unicode identifiers in test files?
In-Reply-To: <qajcis$4c5$1@blaine.gmane.org>
References: <b3ba2821-44cd-b0d4-143e-561d28da3737@trueblade.com>
 <qajcis$4c5$1@blaine.gmane.org>
Message-ID: <cdad4334-b454-ac3c-1f7b-6791bc8f3a5a@trueblade.com>

On 5/4/19 2:48 AM, Serhiy Storchaka wrote:
> 04.05.19 05:46, Eric V. Smith ????:
>> Is there a policy against using Unicode identifiers in test files?
>>
>> As part of adding !d to f-strings, there's a code path that's only
>> executed if the text of the expression is non-ascii. The easiest way
>> to exercise it, and the way I found a bug, is by using an identifier
>> with Unicode chars. I know we have a policy against this in Lib/, but
>> what about Lib/test/?
>>
>> I could work around this with exec-ing some strings, but that seems
>> like added confusion that I'd avoid with a real Unicode identifier.
>
> Could you use string literals with non-ascii characters? They are more
> used in tests.

Hi, Serhiy.

I could and will, yes: thanks for the suggestion. But for this specific 
feature, I also want to test with simple variable-only expressions. I'm 
either going to use a unicode identifier in the code, or eval one in a 
string. Doing the eval dance just seems like extra work for some sort of 
purity that I don't think is important in a test, unless someone can 
think of a good reason for it.

Eric

From eric at trueblade.com  Sat May  4 04:10:32 2019
From: eric at trueblade.com (Eric V. Smith)
Date: Sat, 4 May 2019 04:10:32 -0400
Subject: [Python-Dev] Unicode identifiers in test files?
In-Reply-To: <cdad4334-b454-ac3c-1f7b-6791bc8f3a5a@trueblade.com>
References: <b3ba2821-44cd-b0d4-143e-561d28da3737@trueblade.com>
 <qajcis$4c5$1@blaine.gmane.org>
 <cdad4334-b454-ac3c-1f7b-6791bc8f3a5a@trueblade.com>
Message-ID: <64330e01-d4c0-c048-a2fb-74810cf8d930@trueblade.com>

On 5/4/19 3:54 AM, Eric V. Smith wrote:
> On 5/4/19 2:48 AM, Serhiy Storchaka wrote:
>> 04.05.19 05:46, Eric V. Smith ????:
>>> Is there a policy against using Unicode identifiers in test files?
>>>
>>> As part of adding !d to f-strings, there's a code path that's only
>>> executed if the text of the expression is non-ascii. The easiest way
>>> to exercise it, and the way I found a bug, is by using an identifier
>>> with Unicode chars. I know we have a policy against this in Lib/, but
>>> what about Lib/test/?
>>>
>>> I could work around this with exec-ing some strings, but that seems
>>> like added confusion that I'd avoid with a real Unicode identifier.
>>
>> Could you use string literals with non-ascii characters? They are more
>> used in tests.
>
> Hi, Serhiy.
>
> I could and will, yes: thanks for the suggestion. But for this specific
> feature, I also want to test with simple variable-only expressions. I'm
> either going to use a unicode identifier in the code, or eval one in a
> string. Doing the eval dance just seems like extra work for some sort of
> purity that I don't think is important in a test, unless someone can
> think of a good reason for it.

And I just noticed that PEP 3131 has an exception for tests in its 
section that says the stdlib can't contain unicode identifiers:

https://www.python.org/dev/peps/pep-3131/#policy-specification

So, since it's the most direct and probably safest thing to do for a 
test, I'm going to use a unicode identier.

Thanks, all, for your ideas. Especially Greg for reminding me to add the 
coding comment.

Eric

From songofacandy at gmail.com  Sat May  4 04:45:38 2019
From: songofacandy at gmail.com (Inada Naoki)
Date: Sat, 4 May 2019 17:45:38 +0900
Subject: [Python-Dev] RFC: PEP 587 "Python Initialization
 Configuration": 2nd version
In-Reply-To: <CA+3bQGF7XbUT1WfO3KB+9Xa-si30ozQY6h0J2bBqpi6rj-XG9g@mail.gmail.com>
References: <CA+3bQGF7XbUT1WfO3KB+9Xa-si30ozQY6h0J2bBqpi6rj-XG9g@mail.gmail.com>
Message-ID: <CAEfz+TzBooCP+tZhd4QGGDz=fQi71EWdJrj=Aea6U34DuqD+uw@mail.gmail.com>

2019?5?3?(?) 4:59 Victor Stinner <vstinner at redhat.com>:
>
> * PyConfig now only uses wchar_t* for strings (unicode): char* (bytes)
> is no longer used. I had to hack CPython internals for that :-)

I prefer char* to wchar_t* on Unix.  Since UTF-8 dominated Unix world
in these decades, wchar_t* is less usable on Unix nowadays.

Is it impossible to use just char* on Unix and wchar_t* on Windows?

-- 
Inada Naoki  <songofacandy at gmail.com>

From vstinner at redhat.com  Sat May  4 11:45:49 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Sat, 4 May 2019 11:45:49 -0400
Subject: [Python-Dev] RFC: PEP 587 "Python Initialization
 Configuration": 2nd version
In-Reply-To: <CAEfz+TzBooCP+tZhd4QGGDz=fQi71EWdJrj=Aea6U34DuqD+uw@mail.gmail.com>
References: <CA+3bQGF7XbUT1WfO3KB+9Xa-si30ozQY6h0J2bBqpi6rj-XG9g@mail.gmail.com>
 <CAEfz+TzBooCP+tZhd4QGGDz=fQi71EWdJrj=Aea6U34DuqD+uw@mail.gmail.com>
Message-ID: <CA+3bQGEnPT2c_WmAOfbQHgutP1ShKv3N8dwFh7D2HHPxv7obQg@mail.gmail.com>

Hi INADA-san,

This PEP is the result of 2 years of refactoring to *simplify* the
*implementation*. I agree that bytes string is the native type on Unix.
But. On Windows, Unicode is the native type. On Python 3, Unicode is the
native type. One key of the simplified implementation is the unique
PyConfig structure. It means that all platforms have to use the same types.

I love the idea of using only wchar_t* for PyConfig because it makes Python
initialization more reliable. The question of the encoding used to decode
byte strings and any possible decoding error (very unlikely thanks to
surrogateescape) is better defined: it occurs when you set the parameter,
not "later during init".

The PEP adds Py_UnixMain() for most trivial use cases, and
PyConfig_DecodeLocale() and PyConfig_SetArgs() for more advanced cases.

Victor

Le samedi 4 mai 2019, Inada Naoki <songofacandy at gmail.com> a ?crit :
> 2019?5?3?(?) 4:59 Victor Stinner <vstinner at redhat.com>:
>>
>> * PyConfig now only uses wchar_t* for strings (unicode): char* (bytes)
>> is no longer used. I had to hack CPython internals for that :-)
>
> I prefer char* to wchar_t* on Unix.  Since UTF-8 dominated Unix world
> in these decades, wchar_t* is less usable on Unix nowadays.
>
> Is it impossible to use just char* on Unix and wchar_t* on Windows?
>
> --
> Inada Naoki  <songofacandy at gmail.com>
>

-- 
Night gathers, and now my watch begins. It shall not end until my death.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190504/f9a22929/attachment-0001.html>

From turnbull.stephen.fw at u.tsukuba.ac.jp  Sat May  4 17:02:47 2019
From: turnbull.stephen.fw at u.tsukuba.ac.jp (Stephen J. Turnbull)
Date: Sun, 5 May 2019 06:02:47 +0900
Subject: [Python-Dev] "if __name__ == '__main__'" at the bottom of
 python unittest files
In-Reply-To: <qad24b$3mhr$1@blaine.gmane.org>
References: <01ebef8d-d370-22c5-cb7a-194704a3906c@withers.org>
 <20190501124831.7faadb2b@fsol>
 <CACac1F9OJdkc_v0dQJwBMn_nEMecxkLMXKr9f8efQgF4EN4UjA@mail.gmail.com>
 <d5689034-bce2-9f8c-b53b-01a020565798@withers.org>
 <CACac1F90cVoU7DeSD2QkYTeSD+TLT80EkNoStx0pZZoY0iV4kQ@mail.gmail.com>
 <05ef1790-dc90-f5a6-a25c-9ba5abc66a3a@withers.org>
 <qad24b$3mhr$1@blaine.gmane.org>
Message-ID: <23757.65015.549415.193161@turnbull.sk.tsukuba.ac.jp>

Terry Reedy writes:

 > I agree that complete 100.000% test coverage is a nice ideal, but
 > sometimes the last percent can take hours to accomplish, if it is
 > indeed sensibly possible.

100% test coverage is an ideal.  Reports *claiming* 100% coverage,
however, are of practical benefit.  The point is to identify a
regression.

It's best to have 100% coverage, because it's possible that
improvements in the environment allow a test that wasn't reliable (==
deterministic) or maybe not even feasible before to become feasible
and reliable, and a coveragerc that says "oh, that line is OK" will
obscure that possibility.

But a *claim* (albeit somewhat undermined by a non-trivial coveragerc)
of 100% coverage means it's *easy to identify regressions in
coverage*.  I think that's a bigger deal, at least at this time.

 > I have asked more that once what .coveragerc file is being used by
 > CI and whether we can somehow properly customize it for CPython.

Seconded.  Thank you for pushing this, and for all the other efforts
you're making here.

Steve


From ericsnowcurrently at gmail.com  Sun May  5 09:47:07 2019
From: ericsnowcurrently at gmail.com (Eric Snow)
Date: Sun, 5 May 2019 09:47:07 -0400
Subject: [Python-Dev] PEP 574 ready for review
In-Reply-To: <CADiSq7c-eWwtkZ3RYW0eVAvzWMBpMKWY4bioXaXkVy+1nJwfVQ@mail.gmail.com>
References: <20190430101428.204457e6@fsol>
 <CADiSq7c-eWwtkZ3RYW0eVAvzWMBpMKWY4bioXaXkVy+1nJwfVQ@mail.gmail.com>
Message-ID: <CALFfu7A_BZgY7L-x2sPEoDpa65i8Sj1PW_wX+RRb4ADW5xQJag@mail.gmail.com>

On Wed, May 1, 2019, 15:49 Nick Coghlan <ncoghlan at gmail.com> wrote:

> As BDFL-Delegate I'm happy with this version of the PEP, so it's my
> pleasure to accept it for inclusion in Python 3.8.
>

Congratulations, Antoine!  This is a big deal and a lot of folks won't
realize it at first. :)

-eric

>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190505/91747d7a/attachment.html>

From encukou at gmail.com  Sun May  5 18:04:06 2019
From: encukou at gmail.com (Petr Viktorin)
Date: Sun, 5 May 2019 18:04:06 -0400
Subject: [Python-Dev] PEP 580/590 discussion
In-Reply-To: <1309c111-359e-1af6-2655-a16ffaad2994@redhat.com>
References: <CADiSq7f7GRJjZmoLAxpN5hovMT5=M73aJUi14HHFDNG=hssV7w@mail.gmail.com>
 <6c8356e3-f9b2-c39e-63c4-17f146d326b7@hotpy.org>
 <CA+=+wqBsUKWHRqjhRFShmY77vaxDPTFaafWtOB8dnyXQSthiZw@mail.gmail.com>
 <15b8a3d7-00ed-a5eb-475c-a3adee671b5f@hotpy.org> <5C9FEF82.50207@UGent.be>
 <d28319ff-a8aa-f218-b8ed-1d489ff9e324@redhat.com>
 <421f8182-4bc8-b8cf-82d6-ca4a4fbd2013@hotpy.org>
 <50d675b4-839c-6502-ad1a-a33ea9330000@redhat.com>
 <d1acd3b6-9cc9-abcc-6ccd-5cfeb5b2b7d2@hotpy.org>
 <b0197d1b-afa5-9681-0783-ed932c8b0a58@redhat.com> <5CC1C765.1020608@UGent.be>
 <1309c111-359e-1af6-2655-a16ffaad2994@redhat.com>
Message-ID: <CA+=+wqDmj99J-n6BKw0MB3ZCKJZ2edoXSsvjq7Ag8LTJjhJMNQ@mail.gmail.com>

Hello!
Sorry for the delay; PyCon is keeping me busy. On the other hand, I
did get to talk to a lot of smart people here!

I'm leaning toward accepting PEP 590 (with some changes still). Let's
start focusing on it.
As for the changes, I have these 4 points:

I feel that the API needs some contact with real users before it's set
in stone. That was the motivation behind my proposal for PEP 590 with
additional flags.
At PyCon, Nick Coghlan suggested another option make the API
"provisional":  make it formally private.
Py_TPFLAGS_HAVE_VECTORCALL would be underscore-prefixed, and the docs
would say that it can change. in Python 3.9, the semantics will be
finalized and the underscore removed.
This would allow high-maintenance projects (like Cython) to start
using it and give their feedback, and we'd have a chance to respond to
the feedback.

tp_vectorcall_offset should be what's replacing tp_print in the
struct. The current implementation has tp_vectorcall there. This way,
Cython can create vectorcall callables for older Pythons. (See PEP
580: https://www.python.org/dev/peps/pep-0580/#replacing-tp-print).

Subclassing should not be forbidden. Jeroen, do you want write a
section for how subclassing should work?

Given Jeroen's research and ideas that went into the PEP (and
hopefully, we'll incorporate some PEP 580 text as well), it seems fair
to list him as co-author of the accepted PEP, instead of just listing
PEP 580 in the acknowledgement section.


On some other points:

- Single bound method class for all kinds of function classes: This
would be a cleaner design, yes, but I don't see a pressing need. As
PEP 579 says, "this is a compounding issue", not a goal. As I recall,
that is the only major reason for CCALL_DEFARG.
PEP 590 says that x64 Windows passes 4 arguments in registers.
Admittedly, I haven't checked this, nor the performance implications
(so this would be a good point to argue!), but it seems like a good
reason to keep the argument count down. So, no CCALL_DEFARG.

- In reply to this Mark's note:
> PEP 590 is fully universal, it supports callables that can do anything with anything. There is no need for it to be extended because it already supports any possible behaviour.

I don't buy this point. The current tp_call also supports any possible
behavior. Here we want to support any behavior *efficiently*.
As a specific example: for calling PEP 590 callable with a kwarg dict,
there'll need to be an extra allocation. That's inefficient relative
to PEP 580 (or PEP 590 plus allowing a dict in "kwnames"). But I'm
willing to believe the inefficiency is acceptable.

From J.Demeyer at UGent.be  Mon May  6 03:43:46 2019
From: J.Demeyer at UGent.be (Jeroen Demeyer)
Date: Mon, 6 May 2019 09:43:46 +0200
Subject: [Python-Dev] PEP 580/590 discussion
In-Reply-To: <CA+=+wqDmj99J-n6BKw0MB3ZCKJZ2edoXSsvjq7Ag8LTJjhJMNQ@mail.gmail.com>
References: <CADiSq7f7GRJjZmoLAxpN5hovMT5=M73aJUi14HHFDNG=hssV7w@mail.gmail.com>
 <6c8356e3-f9b2-c39e-63c4-17f146d326b7@hotpy.org>
 <CA+=+wqBsUKWHRqjhRFShmY77vaxDPTFaafWtOB8dnyXQSthiZw@mail.gmail.com>
 <15b8a3d7-00ed-a5eb-475c-a3adee671b5f@hotpy.org> <5C9FEF82.50207@UGent.be>
 <d28319ff-a8aa-f218-b8ed-1d489ff9e324@redhat.com>
 <421f8182-4bc8-b8cf-82d6-ca4a4fbd2013@hotpy.org>
 <50d675b4-839c-6502-ad1a-a33ea9330000@redhat.com>
 <d1acd3b6-9cc9-abcc-6ccd-5cfeb5b2b7d2@hotpy.org>
 <b0197d1b-afa5-9681-0783-ed932c8b0a58@redhat.com> <5CC1C765.1020608@UGent.be>
 <1309c111-359e-1af6-2655-a16ffaad2994@redhat.com>
 <CA+=+wqDmj99J-n6BKw0MB3ZCKJZ2edoXSsvjq7Ag8LTJjhJMNQ@mail.gmail.com>
Message-ID: <5CCFE5B2.3020602@UGent.be>

On 2019-05-06 00:04, Petr Viktorin wrote:
> - Single bound method class for all kinds of function classes: This
> would be a cleaner design, yes, but I don't see a pressing need. As
> PEP 579 says, "this is a compounding issue", not a goal. As I recall,
> that is the only major reason for CCALL_DEFARG.

Just a minor correction here: I guess that you mean CCALL_SELFARG. The 
flag CCALL_DEFARG is for passing the PyCCallDef* in PEP 580, which is 
mostly equivalent to passing the callable object in PEP 590.

The signature of PEP 580 is

func(const PyCCallDef *def, PyObject *self, PyObject *const *args, 
Py_ssize_t nargs, PyObject *kwnames)

And with PEP 590 it is

func(PyObject *callable, PyObject *const *args, Py_ssize_t nargs, 
PyObject *kwnames)

with the additional special role for the PY_VECTORCALL_ARGUMENTS_OFFSET 
bit (which is meant to solve the problem of "self" in a different way).

From J.Demeyer at UGent.be  Mon May  6 04:24:44 2019
From: J.Demeyer at UGent.be (Jeroen Demeyer)
Date: Mon, 6 May 2019 10:24:44 +0200
Subject: [Python-Dev] PEP 580/590 discussion
In-Reply-To: <CA+=+wqDmj99J-n6BKw0MB3ZCKJZ2edoXSsvjq7Ag8LTJjhJMNQ@mail.gmail.com>
References: <CADiSq7f7GRJjZmoLAxpN5hovMT5=M73aJUi14HHFDNG=hssV7w@mail.gmail.com>
 <6c8356e3-f9b2-c39e-63c4-17f146d326b7@hotpy.org>
 <CA+=+wqBsUKWHRqjhRFShmY77vaxDPTFaafWtOB8dnyXQSthiZw@mail.gmail.com>
 <15b8a3d7-00ed-a5eb-475c-a3adee671b5f@hotpy.org> <5C9FEF82.50207@UGent.be>
 <d28319ff-a8aa-f218-b8ed-1d489ff9e324@redhat.com>
 <421f8182-4bc8-b8cf-82d6-ca4a4fbd2013@hotpy.org>
 <50d675b4-839c-6502-ad1a-a33ea9330000@redhat.com>
 <d1acd3b6-9cc9-abcc-6ccd-5cfeb5b2b7d2@hotpy.org>
 <b0197d1b-afa5-9681-0783-ed932c8b0a58@redhat.com> <5CC1C765.1020608@UGent.be>
 <1309c111-359e-1af6-2655-a16ffaad2994@redhat.com>
 <CA+=+wqDmj99J-n6BKw0MB3ZCKJZ2edoXSsvjq7Ag8LTJjhJMNQ@mail.gmail.com>
Message-ID: <5CCFEF4C.50404@UGent.be>

Hello Petr,

Thanks for your time. I suggest you (or somebody else) to officially 
reject PEP 580.

I start working on reformulating PEP 590, adding some elements from PEP 
580. At the same time, I work on the implementation of PEP 590. I want 
to implement Mark's idea of having a separate wrapper for each old-style 
calling convention.

In the mean time, we can continue the discussion about the details, for 
example whether to store the flags inside the instance (I don't have an 
answer for that right now, I'll need to think about it).

Petr, did you discuss with the Steering Council? It would be good to 
have some kind of pre-approval that PEP 590 and its implementation will 
be accepted. I want to work on PEP 590, but I'm not the right person to 
"defend" it (I know that it's worse in some ways than PEP 580).


Jeroen.

From J.Demeyer at UGent.be  Mon May  6 09:55:03 2019
From: J.Demeyer at UGent.be (Jeroen Demeyer)
Date: Mon, 6 May 2019 15:55:03 +0200
Subject: [Python-Dev] Stable ABI or not for PyTypeObject?
Message-ID: <5CD03CB7.1050106@UGent.be>

Hello,

I have a simple question for which there doesn't seem to be a good 
answer: is the layout of PyTypeObject considered to be part of the 
stable ABI?

Officially, the answer is certainly "no" (see PEP 384).

However, unofficially the answer might be "yes". At least, the last time 
that an incompatible change was made to PyTypeObject (adding tp_finalize 
in Python 3.4, PEP 442), care was taken not to break the ABI by using 
the Py_TPFLAGS_HAVE_FINALIZE flag.

There is some discussion about this on https://bugs.python.org/issue32388

The implementation of PEP 590 is going to make another ABI-breaking 
change. So should we add a new Py_TFLAGS_HAVE_... flag for that or not?


Jeroen.

From encukou at gmail.com  Mon May  6 10:47:06 2019
From: encukou at gmail.com (Petr Viktorin)
Date: Mon, 6 May 2019 10:47:06 -0400
Subject: [Python-Dev] PEP 580/590 discussion
In-Reply-To: <5CCFEF4C.50404@UGent.be>
References: <CADiSq7f7GRJjZmoLAxpN5hovMT5=M73aJUi14HHFDNG=hssV7w@mail.gmail.com>
 <6c8356e3-f9b2-c39e-63c4-17f146d326b7@hotpy.org>
 <CA+=+wqBsUKWHRqjhRFShmY77vaxDPTFaafWtOB8dnyXQSthiZw@mail.gmail.com>
 <15b8a3d7-00ed-a5eb-475c-a3adee671b5f@hotpy.org> <5C9FEF82.50207@UGent.be>
 <d28319ff-a8aa-f218-b8ed-1d489ff9e324@redhat.com>
 <421f8182-4bc8-b8cf-82d6-ca4a4fbd2013@hotpy.org>
 <50d675b4-839c-6502-ad1a-a33ea9330000@redhat.com>
 <d1acd3b6-9cc9-abcc-6ccd-5cfeb5b2b7d2@hotpy.org>
 <b0197d1b-afa5-9681-0783-ed932c8b0a58@redhat.com> <5CC1C765.1020608@UGent.be>
 <1309c111-359e-1af6-2655-a16ffaad2994@redhat.com>
 <CA+=+wqDmj99J-n6BKw0MB3ZCKJZ2edoXSsvjq7Ag8LTJjhJMNQ@mail.gmail.com>
 <5CCFEF4C.50404@UGent.be>
Message-ID: <39140e82-b1b1-e7ef-e77e-0b57fa2d022b@gmail.com>

On 5/6/19 4:24 AM, Jeroen Demeyer wrote:
> Hello Petr,
> 
> Thanks for your time. I suggest you (or somebody else) to officially 
> reject PEP 580.

I'll do that shortly.
I hope that you are not taking this personally. PEP 580 is a good 
design. PEP 590 even says that it's built on your ideas.

> I start working on reformulating PEP 590, adding some elements from PEP 
> 580. At the same time, I work on the implementation of PEP 590. I want 
> to implement Mark's idea of having a separate wrapper for each old-style 
> calling convention.
> 
> In the mean time, we can continue the discussion about the details, for 
> example whether to store the flags inside the instance (I don't have an 
> answer for that right now, I'll need to think about it).

I'm abandoning per-instance flag proposal. It's an unnecessary 
complication; per-type flags are fine.

> Petr, did you discuss with the Steering Council? It would be good to 
> have some kind of pre-approval that PEP 590 and its implementation will 
> be accepted. I want to work on PEP 590, but I'm not the right person to 
> "defend" it (I know that it's worse in some ways than PEP 580).

As BDFL-delegate, I'm "pre-approving" PEP 590.
I mentioned some details of PEP 590 that still need attention. If there 
are any more, now's the time to bring them up.

And yes, I know that in some ways it's worse than PEP 580. That's what 
makes it a hard decision.

From solipsis at pitrou.net  Mon May  6 11:34:22 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Mon, 6 May 2019 17:34:22 +0200
Subject: [Python-Dev] Stable ABI or not for PyTypeObject?
References: <5CD03CB7.1050106@UGent.be>
Message-ID: <20190506173422.445a0933@fsol>

On Mon, 6 May 2019 15:55:03 +0200
Jeroen Demeyer <J.Demeyer at UGent.be> wrote:
> Hello,
> 
> I have a simple question for which there doesn't seem to be a good 
> answer: is the layout of PyTypeObject considered to be part of the 
> stable ABI?
> 
> Officially, the answer is certainly "no" (see PEP 384).
> 
> However, unofficially the answer might be "yes". At least, the last time 
> that an incompatible change was made to PyTypeObject (adding tp_finalize 
> in Python 3.4, PEP 442), care was taken not to break the ABI by using 
> the Py_TPFLAGS_HAVE_FINALIZE flag.
> 
> There is some discussion about this on https://bugs.python.org/issue32388

The discussion there was more or less conclusive.  At the time it was
too late to go into 3.7 and then I (and others) forgot about it.

We should revive that PR in time for 3.8.

Regards

Antoine.



From vstinner at redhat.com  Mon May  6 12:12:51 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Mon, 6 May 2019 12:12:51 -0400
Subject: [Python-Dev] Stable ABI or not for PyTypeObject?
In-Reply-To: <5CD03CB7.1050106@UGent.be>
References: <5CD03CB7.1050106@UGent.be>
Message-ID: <CA+3bQGEeihNQ4z6Qk-KHqiB2CMAvxvqRrOwbXFcSEKoSb3MYOA@mail.gmail.com>

PyType_FromSpec() looks like a better approach for ABI compatibility.
My notes on types and ABI:
https://pythoncapi.readthedocs.io/type_object.html

Victor

Le lun. 6 mai 2019 ? 09:57, Jeroen Demeyer <J.Demeyer at ugent.be> a ?crit :
>
> Hello,
>
> I have a simple question for which there doesn't seem to be a good
> answer: is the layout of PyTypeObject considered to be part of the
> stable ABI?
>
> Officially, the answer is certainly "no" (see PEP 384).
>
> However, unofficially the answer might be "yes". At least, the last time
> that an incompatible change was made to PyTypeObject (adding tp_finalize
> in Python 3.4, PEP 442), care was taken not to break the ABI by using
> the Py_TPFLAGS_HAVE_FINALIZE flag.
>
> There is some discussion about this on https://bugs.python.org/issue32388
>
> The implementation of PEP 590 is going to make another ABI-breaking
> change. So should we add a new Py_TFLAGS_HAVE_... flag for that or not?
>
>
> Jeroen.
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe: https://mail.python.org/mailman/options/python-dev/vstinner%40redhat.com



-- 
Night gathers, and now my watch begins. It shall not end until my death.

From encukou at gmail.com  Mon May  6 12:25:34 2019
From: encukou at gmail.com (Petr Viktorin)
Date: Mon, 6 May 2019 12:25:34 -0400
Subject: [Python-Dev] PEP 580/590 discussion
In-Reply-To: <5CCFE5B2.3020602@UGent.be>
References: <CADiSq7f7GRJjZmoLAxpN5hovMT5=M73aJUi14HHFDNG=hssV7w@mail.gmail.com>
 <6c8356e3-f9b2-c39e-63c4-17f146d326b7@hotpy.org>
 <CA+=+wqBsUKWHRqjhRFShmY77vaxDPTFaafWtOB8dnyXQSthiZw@mail.gmail.com>
 <15b8a3d7-00ed-a5eb-475c-a3adee671b5f@hotpy.org> <5C9FEF82.50207@UGent.be>
 <d28319ff-a8aa-f218-b8ed-1d489ff9e324@redhat.com>
 <421f8182-4bc8-b8cf-82d6-ca4a4fbd2013@hotpy.org>
 <50d675b4-839c-6502-ad1a-a33ea9330000@redhat.com>
 <d1acd3b6-9cc9-abcc-6ccd-5cfeb5b2b7d2@hotpy.org>
 <b0197d1b-afa5-9681-0783-ed932c8b0a58@redhat.com> <5CC1C765.1020608@UGent.be>
 <1309c111-359e-1af6-2655-a16ffaad2994@redhat.com>
 <CA+=+wqDmj99J-n6BKw0MB3ZCKJZ2edoXSsvjq7Ag8LTJjhJMNQ@mail.gmail.com>
 <5CCFE5B2.3020602@UGent.be>
Message-ID: <1ffcaa84-1569-4212-00c4-fc4272ae4176@gmail.com>

On 5/6/19 3:43 AM, Jeroen Demeyer wrote:
> On 2019-05-06 00:04, Petr Viktorin wrote:
>> - Single bound method class for all kinds of function classes: This
>> would be a cleaner design, yes, but I don't see a pressing need. As
>> PEP 579 says, "this is a compounding issue", not a goal. As I recall,
>> that is the only major reason for CCALL_DEFARG.
> 
> Just a minor correction here: I guess that you mean CCALL_SELFARG. The 
> flag CCALL_DEFARG is for passing the PyCCallDef* in PEP 580, which is 
> mostly equivalent to passing the callable object in PEP 590.
> 
> The signature of PEP 580 is
> 
> func(const PyCCallDef *def, PyObject *self, PyObject *const *args, 
> Py_ssize_t nargs, PyObject *kwnames)
> 
> And with PEP 590 it is
> 
> func(PyObject *callable, PyObject *const *args, Py_ssize_t nargs, 
> PyObject *kwnames)
> 
> with the additional special role for the PY_VECTORCALL_ARGUMENTS_OFFSET 
> bit (which is meant to solve the problem of "self" in a different way).

I worded that badly, sorry.

 From PEP 590's `callable`, the called function can get any of these if 
it needs to (and if they're stored somewhere). But you can't write 
generic code would get them from any callable.

If we're not going for the "single bound method class" idea, that is OK; 
`def` & `self` can be implementation details of the callables that need 
them.

From eric at trueblade.com  Mon May  6 20:39:41 2019
From: eric at trueblade.com (Eric V. Smith)
Date: Mon, 6 May 2019 20:39:41 -0400
Subject: [Python-Dev] Easier debugging with f-strings
Message-ID: <133ec1d8-cee5-a287-b786-304a7ed0789f@trueblade.com>

Last fall Larry Hastings made a suggestion for adding a way to make 
so-called "print-based debugging" easier with f-strings. Basically the 
approach is that f-strings would be able to produce the text of the 
expression and the value of that expression, without repeating the 
expression in the f-sting. No more writing f'foo={foo}, bar={bar}'. foo 
and bar should each only be in there once each!

At PyCon US 2019 I did a lightning talk about this, suggesting the 
syntax of !d, so that if foo="Hello", then f"{foo!d}" would produce 
"foo='Hello'". That is, it's the text of the expression, followed by an 
equal sign, followed by the repr of the expression. I have implemented 
this and a PR exists. Arbitrary expressions are allowed. I heard from 
core devs and end users after this talk, and all were positive.

After that lightning talk, Larry and I talked about it some more, and 
for a number of reasons decided that it would make more sense if the 
syntax used an = sign. So we came up with f"{foo=}", which would also 
produce "foo='Hello'".

The reasons for the change are:
- Having '=' in the expression is a better mnemonic than !d.
- By not using a conversion starting with !, we can compose = with the 
existing ! conversions, !r, !s, and the rarely used !a.
- We can let the user have a little more control of the resulting string.

Another thing I like about this approach over !d is that the patch is 
simpler, because there are fewer special cases. And because there are 
fewer special cases in the code, I think the proposal is easier to 
explain than !d (in particular how it interacts (or doesn't!) with 
format specifiers).

There's a good rationale here, along with a PR: 
https://bugs.python.org/issue36817.

My plan is to commit this change before 3.8b1. If anyone would like to 
discuss it at PyCon, I'll be around until about 10:30 am on Tuesday. 
I'll be in the CPython sprint room, and I'll be watching bpo, too.

Eric

From v+python at g.nevcal.com  Mon May  6 21:29:44 2019
From: v+python at g.nevcal.com (Glenn Linderman)
Date: Mon, 6 May 2019 18:29:44 -0700
Subject: [Python-Dev] Easier debugging with f-strings
In-Reply-To: <133ec1d8-cee5-a287-b786-304a7ed0789f@trueblade.com>
References: <133ec1d8-cee5-a287-b786-304a7ed0789f@trueblade.com>
Message-ID: <15377535-338f-bd70-8221-52a6509c58a4@g.nevcal.com>

On 5/6/2019 5:39 PM, Eric V. Smith wrote:
> Last fall Larry Hastings made a suggestion for adding a way to make 
> so-called "print-based debugging" easier with f-strings. Basically the 
> approach is that f-strings would be able to produce the text of the 
> expression and the value of that expression, without repeating the 
> expression in the f-sting. No more writing f'foo={foo}, bar={bar}'. 
> foo and bar should each only be in there once each!

> My plan is to commit this change before 3.8b1. If anyone would like to 
> discuss it at PyCon, I'll be around until about 10:30 am on Tuesday. 
> I'll be in the CPython sprint room, and I'll be watching bpo, too.

Yes, I'd like this yesterday, please :)? Thanks!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190506/2491be3a/attachment.html>

From steve at holdenweb.com  Tue May  7 03:52:37 2019
From: steve at holdenweb.com (Steve Holden)
Date: Tue, 7 May 2019 08:52:37 +0100
Subject: [Python-Dev] Easier debugging with f-strings
In-Reply-To: <15377535-338f-bd70-8221-52a6509c58a4@g.nevcal.com>
References: <133ec1d8-cee5-a287-b786-304a7ed0789f@trueblade.com>
 <15377535-338f-bd70-8221-52a6509c58a4@g.nevcal.com>
Message-ID: <CAMofdRBUd6EN=WqCh_RVdUpq3BO6EhtS3kxueV7XggikvpbL_w@mail.gmail.com>

What's not to like?


On Tue, May 7, 2019 at 2:31 AM Glenn Linderman <v+python at g.nevcal.com>
wrote:

> On 5/6/2019 5:39 PM, Eric V. Smith wrote:
>
> Last fall Larry Hastings made a suggestion for adding a way to make
> so-called "print-based debugging" easier with f-strings. Basically the
> approach is that f-strings would be able to produce the text of the
> expression and the value of that expression, without repeating the
> expression in the f-sting. No more writing f'foo={foo}, bar={bar}'. foo and
> bar should each only be in there once each!
>
>
> My plan is to commit this change before 3.8b1. If anyone would like to
> discuss it at PyCon, I'll be around until about 10:30 am on Tuesday. I'll
> be in the CPython sprint room, and I'll be watching bpo, too.
>
>
> Yes, I'd like this yesterday, please :)  Thanks!
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/steve%40holdenweb.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190507/3cb46ad8/attachment.html>

From p.f.moore at gmail.com  Tue May  7 04:02:13 2019
From: p.f.moore at gmail.com (Paul Moore)
Date: Tue, 7 May 2019 09:02:13 +0100
Subject: [Python-Dev] Easier debugging with f-strings
In-Reply-To: <133ec1d8-cee5-a287-b786-304a7ed0789f@trueblade.com>
References: <133ec1d8-cee5-a287-b786-304a7ed0789f@trueblade.com>
Message-ID: <CACac1F9A3qTCto473snQfGa4jOEV2mWvLfQitvPJ6vSxG8qi3A@mail.gmail.com>

On Tue, 7 May 2019 at 01:43, Eric V. Smith <eric at trueblade.com> wrote:
> After that lightning talk, Larry and I talked about it some more, and
> for a number of reasons decided that it would make more sense if the
> syntax used an = sign. So we came up with f"{foo=}", which would also
> produce "foo='Hello'".

Works for me. Whatever the spelling, I expect I'll use this a lot - thanks :-)

Paul

From barry at python.org  Tue May  7 09:49:46 2019
From: barry at python.org (Barry Warsaw)
Date: Tue, 7 May 2019 09:49:46 -0400
Subject: [Python-Dev] Easier debugging with f-strings
In-Reply-To: <CAMofdRBUd6EN=WqCh_RVdUpq3BO6EhtS3kxueV7XggikvpbL_w@mail.gmail.com>
References: <133ec1d8-cee5-a287-b786-304a7ed0789f@trueblade.com>
 <15377535-338f-bd70-8221-52a6509c58a4@g.nevcal.com>
 <CAMofdRBUd6EN=WqCh_RVdUpq3BO6EhtS3kxueV7XggikvpbL_w@mail.gmail.com>
Message-ID: <556F2AB8-F595-4700-9663-FB9066489369@python.org>

On May 7, 2019, at 03:52, Steve Holden <steve at holdenweb.com> wrote:
> 
> What's not to like?

My only complaint is that you steadfastly refuse use Guido?s time machine keys to make this available in 3.7.

-Barry

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: Message signed with OpenPGP
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190507/a1ff2e0a/attachment.sig>

From larry at hastings.org  Tue May  7 10:21:51 2019
From: larry at hastings.org (Larry Hastings)
Date: Tue, 7 May 2019 10:21:51 -0400
Subject: [Python-Dev] Easier debugging with f-strings
In-Reply-To: <133ec1d8-cee5-a287-b786-304a7ed0789f@trueblade.com>
References: <133ec1d8-cee5-a287-b786-304a7ed0789f@trueblade.com>
Message-ID: <a5c759ac-f626-6587-e5d0-ea4b5d16f30b@hastings.org>


Guido just stopped by--we're all at the PyCon 2019 dev sprints--and we 
had a chat about it.? Guido likes it but wanted us to restore a little 
of the magical behavior we had in "!d": now, = in f-strings will default 
to repr (!r), /unless/ you specify a format spec. If you specify a 
format spec it will always default to format.? And naturally if you 
specify an explicit conversion function (!r !s !a) it will use that.

This makes !f irrelevant, so we're removing it.

Here's the thinking: 99% of the time the user will just use {foo=}, and 
for that you want repr.? After that, 0.99% of the time the user will 
want a format spec that applies directly the value. It's exceedingly 
unlikely that someone will want a format spec, but want it to apply to 
repr(value) and not value itself.? So that's /possible/ 
(f'{foo=!r:20}').? But the default behavior is the most common case at 
every step.


"So, is it checked in?" --GvR,


//arry/


On 5/6/19 8:39 PM, Eric V. Smith wrote:
> Last fall Larry Hastings made a suggestion for adding a way to make 
> so-called "print-based debugging" easier with f-strings. Basically the 
> approach is that f-strings would be able to produce the text of the 
> expression and the value of that expression, without repeating the 
> expression in the f-sting. No more writing f'foo={foo}, bar={bar}'. 
> foo and bar should each only be in there once each!
>
> At PyCon US 2019 I did a lightning talk about this, suggesting the 
> syntax of !d, so that if foo="Hello", then f"{foo!d}" would produce 
> "foo='Hello'". That is, it's the text of the expression, followed by 
> an equal sign, followed by the repr of the expression. I have 
> implemented this and a PR exists. Arbitrary expressions are allowed. I 
> heard from core devs and end users after this talk, and all were 
> positive.
>
> After that lightning talk, Larry and I talked about it some more, and 
> for a number of reasons decided that it would make more sense if the 
> syntax used an = sign. So we came up with f"{foo=}", which would also 
> produce "foo='Hello'".
>
> The reasons for the change are:
> - Having '=' in the expression is a better mnemonic than !d.
> - By not using a conversion starting with !, we can compose = with the 
> existing ! conversions, !r, !s, and the rarely used !a.
> - We can let the user have a little more control of the resulting string.
>
> Another thing I like about this approach over !d is that the patch is 
> simpler, because there are fewer special cases. And because there are 
> fewer special cases in the code, I think the proposal is easier to 
> explain than !d (in particular how it interacts (or doesn't!) with 
> format specifiers).
>
> There's a good rationale here, along with a PR: 
> https://bugs.python.org/issue36817.
>
> My plan is to commit this change before 3.8b1. If anyone would like to 
> discuss it at PyCon, I'll be around until about 10:30 am on Tuesday. 
> I'll be in the CPython sprint room, and I'll be watching bpo, too.
>
> Eric
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe: 
> https://mail.python.org/mailman/options/python-dev/larry%40hastings.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190507/320fcd01/attachment.html>

From lukasz at langa.pl  Tue May  7 10:58:27 2019
From: lukasz at langa.pl (=?utf-8?Q?=C5=81ukasz_Langa?=)
Date: Tue, 7 May 2019 10:58:27 -0400
Subject: [Python-Dev] [RELEASE] Python 3.8.0a4 is now available for testing
Message-ID: <27210321-6B27-4629-9643-2A64F62DA85D@langa.pl>

It's time for the LAST alpha of Python 3.8.0. Go get it here:
https://www.python.org/downloads/release/python-380a4/ <https://www.python.org/downloads/release/python-380a4/>

Python 3.8.0a4 is the fourth and final alpha release of Python 3.8,
the next feature release of Python.  During the alpha phase, Python 3.8
remains under heavy development: additional features will be added
and existing features may be modified or deleted.  Please keep in mind
that this is a preview release and its use is not recommended for
production environments.  The first beta release, 3.8.0b1, is planned
for 2019-05-31.

The release has slipped a week because of me being overwhelmed
with PyCon US this year.  There was also a release blocker and
a breaking change to ElementTree.  Anyway, sorry for the wait!
I moved the planned date of beta1 a few days to make up for it.

If you have a feature you're working on and you'd like to see it in
3.8.0, NOW IS THE TIME TO ACT. Please don't wait until May 30th,
get a proper review and land your change as soon as possible.

Q: Can I get my feature in after that date if I ask nicely?
A: Yes, of course. I will release it in Python 3.9.

- ?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190507/048f5414/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: Message signed with OpenPGP
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190507/048f5414/attachment-0001.sig>

From skip.montanaro at gmail.com  Tue May  7 11:01:39 2019
From: skip.montanaro at gmail.com (Skip Montanaro)
Date: Tue, 7 May 2019 10:01:39 -0500
Subject: [Python-Dev] Easier debugging with f-strings
In-Reply-To: <556F2AB8-F595-4700-9663-FB9066489369@python.org>
References: <133ec1d8-cee5-a287-b786-304a7ed0789f@trueblade.com>
 <15377535-338f-bd70-8221-52a6509c58a4@g.nevcal.com>
 <CAMofdRBUd6EN=WqCh_RVdUpq3BO6EhtS3kxueV7XggikvpbL_w@mail.gmail.com>
 <556F2AB8-F595-4700-9663-FB9066489369@python.org>
Message-ID: <CANc-5UzGu3o_PqrJ+-R3aO8uVfDQZEPjDj8oHrC97+hxkcbH=Q@mail.gmail.com>

> My only complaint is that you steadfastly refuse use Guido?s time machine keys to make this available in 3.7.

Wait a minute, Barry. You mean you don't already have an Emacs
function to do the rewriting as a pre-save-hook?

Skip

From eric at trueblade.com  Tue May  7 11:33:10 2019
From: eric at trueblade.com (Eric V. Smith)
Date: Tue, 7 May 2019 11:33:10 -0400
Subject: [Python-Dev] Easier debugging with f-strings
In-Reply-To: <556F2AB8-F595-4700-9663-FB9066489369@python.org>
References: <133ec1d8-cee5-a287-b786-304a7ed0789f@trueblade.com>
 <15377535-338f-bd70-8221-52a6509c58a4@g.nevcal.com>
 <CAMofdRBUd6EN=WqCh_RVdUpq3BO6EhtS3kxueV7XggikvpbL_w@mail.gmail.com>
 <556F2AB8-F595-4700-9663-FB9066489369@python.org>
Message-ID: <7e6a8718-d74e-9f24-b0ae-5405f9d2e49d@trueblade.com>

On 5/7/19 9:49 AM, Barry Warsaw wrote:
> On May 7, 2019, at 03:52, Steve Holden <steve at holdenweb.com> wrote:
>>
>> What's not to like?
>
> My only complaint is that you steadfastly refuse use Guido?s time machine keys to make this available in 3.7.

Open a feature request here: https://github.com/asottile/future-fstrings

!

Eric


From tim.peters at gmail.com  Tue May  7 12:50:54 2019
From: tim.peters at gmail.com (Tim Peters)
Date: Tue, 7 May 2019 11:50:54 -0500
Subject: [Python-Dev] Easier debugging with f-strings
In-Reply-To: <a5c759ac-f626-6587-e5d0-ea4b5d16f30b@hastings.org>
References: <133ec1d8-cee5-a287-b786-304a7ed0789f@trueblade.com>
 <a5c759ac-f626-6587-e5d0-ea4b5d16f30b@hastings.org>
Message-ID: <CAExdVNmHXbv7hSzL3Pat3+Df9+oyHc-OtswXUfqce18UgkU5ew@mail.gmail.com>

[Larry Hastings <larry at hastings.org>]
> Guido just stopped by--we're all at the PyCon 2019 dev sprints--and we had
> a chat about it.  Guido likes it but wanted us to restore a little of the magical
> behavior we had in "!d": now, = in f-strings will default to repr (!r), unless
> you specify a format spec. If you specify a format spec it will always default
> to format.  And naturally if you specify an explicit conversion function (!r !s !a)
> it will use that.
>
> This makes !f irrelevant, so we're removing it.
>
> Here's the thinking: 99% of the time the user will just use {foo=}, and for that
> you want repr.  After that, 0.99% of the time the user will want a format spec
> that applies directly the value.  It's exceedingly unlikely that someone will
> want a format spec, but want it to apply to repr(value) and not value itself.  So
> that's possible (f'{foo=!r:20}').  But the default behavior is the most common
> case at every step.

+1.  Perfect!  I'm one of the 0.99% who will frequently use this to
display floats, and really wants them to show as "0.99%" rather than
"0.9913499340289%".

BTW, that Guido person has made enough decent contributions by now
that I think he should be asked whether he wants to become a core dev!

From eric at trueblade.com  Tue May  7 12:59:52 2019
From: eric at trueblade.com (Eric V. Smith)
Date: Tue, 7 May 2019 12:59:52 -0400
Subject: [Python-Dev] Easier debugging with f-strings
In-Reply-To: <CAExdVNmHXbv7hSzL3Pat3+Df9+oyHc-OtswXUfqce18UgkU5ew@mail.gmail.com>
References: <133ec1d8-cee5-a287-b786-304a7ed0789f@trueblade.com>
 <a5c759ac-f626-6587-e5d0-ea4b5d16f30b@hastings.org>
 <CAExdVNmHXbv7hSzL3Pat3+Df9+oyHc-OtswXUfqce18UgkU5ew@mail.gmail.com>
Message-ID: <43D94CC8-4FEB-45E2-A141-C5C0DA9E8C65@trueblade.com>

Hi, Tim. 

Your name came up frequently as a target for this use case. I think we?ve come up with a pretty good solution. 

Now if I could only convince my clients to upgrade from 2.7! I?ve heard about these f-string things, and I think I would enjoy using them. 

Eric

> On May 7, 2019, at 12:50 PM, Tim Peters <tim.peters at gmail.com> wrote:
> 
> [Larry Hastings <larry at hastings.org>]
>> Guido just stopped by--we're all at the PyCon 2019 dev sprints--and we had
>> a chat about it.  Guido likes it but wanted us to restore a little of the magical
>> behavior we had in "!d": now, = in f-strings will default to repr (!r), unless
>> you specify a format spec. If you specify a format spec it will always default
>> to format.  And naturally if you specify an explicit conversion function (!r !s !a)
>> it will use that.
>> 
>> This makes !f irrelevant, so we're removing it.
>> 
>> Here's the thinking: 99% of the time the user will just use {foo=}, and for that
>> you want repr.  After that, 0.99% of the time the user will want a format spec
>> that applies directly the value.  It's exceedingly unlikely that someone will
>> want a format spec, but want it to apply to repr(value) and not value itself.  So
>> that's possible (f'{foo=!r:20}').  But the default behavior is the most common
>> case at every step.
> 
> +1.  Perfect!  I'm one of the 0.99% who will frequently use this to
> display floats, and really wants them to show as "0.99%" rather than
> "0.9913499340289%".
> 
> BTW, that Guido person has made enough decent contributions by now
> that I think he should be asked whether he wants to become a core dev!
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe: https://mail.python.org/mailman/options/python-dev/eric%2Ba-python-dev%40trueblade.com


From solipsis at pitrou.net  Tue May  7 14:09:15 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Tue, 7 May 2019 20:09:15 +0200
Subject: [Python-Dev] PEP 574 ready for review
In-Reply-To: <CADiSq7c-eWwtkZ3RYW0eVAvzWMBpMKWY4bioXaXkVy+1nJwfVQ@mail.gmail.com>
References: <20190430101428.204457e6@fsol>
 <CADiSq7c-eWwtkZ3RYW0eVAvzWMBpMKWY4bioXaXkVy+1nJwfVQ@mail.gmail.com>
Message-ID: <20190507200915.54a39451@fsol>


Should I submit a PR to change the PEP status or would you like to do
it?

Regards

Antoine.


On Wed, 1 May 2019 12:49:24 -0700
Nick Coghlan <ncoghlan at gmail.com> wrote:
> Thanks Antoine.
> 
> As BDFL-Delegate I'm happy with this version of the PEP, so it's my
> pleasure to accept it for inclusion in Python 3.8.
> 
> Regards,
> Nick.
> 


From paul at ganssle.io  Tue May  7 15:42:56 2019
From: paul at ganssle.io (Paul Ganssle)
Date: Tue, 7 May 2019 15:42:56 -0400
Subject: [Python-Dev] Adding a tzidx cache to datetime
Message-ID: <ab658c54-71e3-f2eb-e94e-24ea671b7755@ganssle.io>

Greetings all,

I have one last feature request that I'd like added to datetime for
Python 3.8, and this one I think could use some more discussion, the
addition of a "time zone index cache" to the /datetime/ object. The
rationale is laid out in detail in bpo-35723
<https://bugs.python.org/issue35723>. The general problem is that
currently, /every/ invocation of utcoffset, tzname and dst needs to do
full, independent calculations of the time zone offsets, even for time
zones where the mapping is guaranteed to be stable because datetimes are
immutable. I have a proof of concept implementation: PR #11529
<https://github.com/python/cpython/pull/11529/>.

I'm envisioning that the `datetime` class will add a private `_tzidx`
single-byte member (it seems that this does not increase the size of the
datetime object, because it's just using an unused alignment byte).
`datetime` will also add a `tzidx()` method, which will return `_tzidx`
if it's been set and otherwise it will call `self.tzinfo.tzidx()`.? If
`self.tzinfo.tzidx()` returns a number between 0 and 254 (inclusive), it
sets `_tzidx` to this value. tzidx() then returns whatever
self.tzinfo.tzidx() returned.

The value of this is that as far as I can tell, nearly all non-trivial
tzinfo implementations construct a list of possible offsets, and
implement utcoffset(), tzname() and dst() by calculating an index into
that list and returning it. There are almost always less than 255
distinct offsets. By adding this cache /on the datetime/, we're using a
small amount of currently-unused memory to prevent unnecessary
calculations about a given datetime. The feature is entirely opt-in, and
has no downsides if it goes unused, and it makes it possible to write
tzinfo implementations that are both lazy and as fast as the "eager
calculation" mode that pytz uses (and that causes many problems for
pytz's users).

I have explored the idea of using an lru cache of some sort on the
tzinfo object itself, but there are two problems with this:

1. Calculating the hash of a datetime calls .utcoffset(), which means
that it is necessary to, at minimum, do a `replace` on the datetime (and
constructing a new datetime is a pretty considerable speed hit)

2. It will be a much bigger memory cost, since my current proposal uses
approximately zero additional memory (not sure if the alignment stuff is
platform-dependent or something, but it doesn't use additional memory on
my linux computer).

I realize this proposal is somewhat difficult to wrap your head around,
so if anyone would like to chat with me about it in person, I'll be at
PyCon sprints until Thursday morning.

Best,
Paul

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190507/e54f2aad/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: OpenPGP digital signature
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190507/e54f2aad/attachment.sig>

From robb at datalogics.com  Tue May  7 16:09:34 2019
From: robb at datalogics.com (Rob Boehne)
Date: Tue, 7 May 2019 20:09:34 +0000
Subject: [Python-Dev] Can't build 3.7.3 on AIX
Message-ID: <F183544A-F397-4A07-8152-713896C0E625@datalogics.com>

Hello,

I?m attempting to get a recent version of Python3 running on my UNIX build machines, but having a problem under AIX.
This seems like it might be since 3.6.5, but I?ve not actually attempted anything else other than 3.6.8 which fails similarly.
I?m building with the native C compiler in 64-bit mode, using OBJECT_MODE=64 exported in the environment.  I have attached config.log.
Is this a known issue? TIA - Rob



  ../../Python-3.7.3/config.guess

powerpc-ibm-aix7.1.4.0



../../Python-3.7.3/Modules/makexp_aix Modules/python.exp . libpython3.7m.a;  xlc_r -L/raid/checkouts-raid/robb/zlib-dl/Release/rs6000aix_64/lib  -Wl,-blibpath:/opt/IBM/xlmass/8.1.3/lib/aix61:/opt/IBM/xlc/13.1.3/lib:/usr/lib:/lib:/opt/Python-3.7/lib -q64    -Wl,-bE:Modules/python.exp -lld -o python Programs/python.o libpython3.7m.so -lintl -ldl    -lm

LIBPATH=/raid/checkouts-raid/robb/nepal/build-py37 ./python -E -S -m sysconfig --generate-posix-vars ;\

if test $? -ne 0 ; then \

        echo "generate-posix-vars failed" ; \

        rm -f ./pybuilddir.txt ; \

        exit 1 ; \

fi

Fatal Python error: _Py_HashRandomization_Init: failed to get random numbers to initialize Python



generate-posix-vars failed

Makefile:603: recipe for target 'pybuilddir.txt' failed

gmake: *** [pybuilddir.txt] Error 1



[cid:image002.png at 01D3D0E3.DCFE6710]

Rob Boehne
Senior Software Architect | Datalogics, Inc.
+1.312.853.8351<tel:(312)%20853-8351> | robb at datalogics.com<mailto:robb at datalogics.com>
datalogics.com<http://www.datalogics.com/> | blogs.datalogics.com<http://blogs.datalogics.com/>

Connect with us: Facebook<https://www.facebook.com/DatalogicsInc> | Twitter<https://twitter.com/DatalogicsInc> | LinkedIn<https://www.linkedin.com/company/datalogics?actionToken=p=p%3Dbiz-company-login%26c%3D3217e65a-bdc2-4b38-8f9c-13c982e8c529%26m%3Dcompany_feed%26n%3D0&t=a%3DisFolloweeOfPoster%253Dfalse%2526distanceFromActor%253D-1%2526actorType%253D%2526likedByUser%253Dfalse%2526targetId%253D%2526recentCommentUrns%253D%2526targetType%253D%2526sponsoredFlag%253DORGANIC%2526verbType%253Dlinkedin%25253Ashare%2526objectType%253Dlinkedin%25253Aarticle%2526totalShares%253D0%2526activityId%253Durn%25253Ali%25253Aactivity%25253A6263731876121362433%2526recentLikerUrns%253D%2526actorId%253Durn%25253Ali%25253Acompany%25253A14000%2526totalComments%253D0%2526relevanceScore%253D0.0%2526recentCommenterUrns%253D%2526isPublic%253Dtrue%2526time%253D-1%2526totalLikes%253D0%2526objectId%253Durn%25253Ali%25253Aarticle%25253A7793179909183391510%2526distanceFromNestedActor%253D-1%26s%3DORG> | YouTube<https://www.youtube.com/user/Datalogics>


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190507/e69cca8a/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: image001.png
Type: image/png
Size: 124449 bytes
Desc: image001.png
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190507/e69cca8a/attachment-0001.png>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: config.log
Type: application/octet-stream
Size: 1065198 bytes
Desc: config.log
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190507/e69cca8a/attachment-0001.obj>

From bbk1524 at gmail.com  Tue May  7 15:47:52 2019
From: bbk1524 at gmail.com (Ben Kane)
Date: Tue, 7 May 2019 15:47:52 -0400
Subject: [Python-Dev] Hello
Message-ID: <CAC7z9xCT4WZpCU4rJLUL1XhJaTuEVHvL2rVCnWebWcxEfM8JDA@mail.gmail.com>

My name is Ben Kane. I'm joining this mailing list and introducing myself
as asked in the "welcome to python-dev" email. I've been using Python for
maybe 7 years now. I started to learn it in college to help with accounting
homework and I continue to use it now for personal projects ranging from
small scripts to larger applications and in my day job as a LinkedIn Site
Reliability Engineer.

I'd like to contribute back to the language that's helped me so much; and
talking with core devs at PyCon 2019 has really encouraged me. So I'll be
lurking and trying to pick things up as I see them.

Thanks!
-- 

Ben Kane
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190507/4a040e5b/attachment.html>

From christian at python.org  Tue May  7 16:26:17 2019
From: christian at python.org (Christian Heimes)
Date: Tue, 7 May 2019 16:26:17 -0400
Subject: [Python-Dev] PEP 578 accepted
Message-ID: <2f1e4bef-d845-c006-537f-d81abc4c980c@python.org>

Hi,

Steve and I worked on the final touch of the PEP during PyCon. PEP 578
[1] is now ready. As the BDFL delegate I'm honoured to accept Steve's PEP.

There is a very slim possibility that the PEP implementation might need
adjustment for Linux. I haven't got feedback from a Red Hat engineer
that works on Linux Kernel Auditing team. Everybody is busy with RHEL 8
release and the Red Hat Summit in Boston. I don't anticipate any changes
to the PEP itself. After some consideration I decided to accept PEP now
to give Steve enough time to push and test his implementation. There is
sufficient time to address issues until the first release candidate of
3.8.0.

Thanks Steve, it's been a privilege to work with you!

Christian

[1] https://www.python.org/dev/peps/pep-0578/

From vstinner at redhat.com  Tue May  7 16:42:20 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Tue, 7 May 2019 16:42:20 -0400
Subject: [Python-Dev] Can't build 3.7.3 on AIX
In-Reply-To: <F183544A-F397-4A07-8152-713896C0E625@datalogics.com>
References: <F183544A-F397-4A07-8152-713896C0E625@datalogics.com>
Message-ID: <CA+3bQGFGAyhn124=PUXrn1JmcTYpFc3CS12PgsEKJRqCjCfdRg@mail.gmail.com>

Please report the bug at https://bugs.python.org/ ;-)

I'm not sure how _PyOS_URandom() / pyurandom() is implemented on AIX. I
guess that it reads from /dev/urandom.

Please attach config.log to your bug report.

Victor

Le mar. 7 mai 2019 ? 16:30, Rob Boehne <robb at datalogics.com> a ?crit :

> Hello,
>
>
>
> I?m attempting to get a recent version of Python3 running on my UNIX build
> machines, but having a problem under AIX.
>
> This seems like it might be since 3.6.5, but I?ve not actually attempted
> anything else other than 3.6.8 which fails similarly.
>
> I?m building with the native C compiler in 64-bit mode, using
> OBJECT_MODE=64 exported in the environment.  I have attached config.log.
>
> Is this a known issue? TIA - Rob
>
>
>
>
>
>   ../../Python-3.7.3/config.guess
>
> powerpc-ibm-aix7.1.4.0
>
>
>
>
>
> ../../Python-3.7.3/Modules/makexp_aix Modules/python.exp . libpython3.7m.a;
> xlc_r -L/raid/checkouts-raid/robb/zlib-dl/Release/rs6000aix_64/lib  -Wl,-blibpath:/opt/IBM/xlmass/8.1.3/lib/aix61:/opt/IBM/xlc/13.1.3/lib:/usr/lib:/lib:/opt/Python-3.7/lib
> -q64    -Wl,-bE:Modules/python.exp -lld -o python Programs/python.o
> libpython3.7m.so -lintl -ldl    -lm
>
> LIBPATH=/raid/checkouts-raid/robb/nepal/build-py37 ./python -E -S -m
> sysconfig --generate-posix-vars ;\
>
> if test $? -ne 0 ; then \
>
>         echo "generate-posix-vars failed" ; \
>
>         rm -f ./pybuilddir.txt ; \
>
>         exit 1 ; \
>
> fi
>
> Fatal Python error: _Py_HashRandomization_Init: failed to get random
> numbers to initialize Python
>
>
>
> generate-posix-vars failed
>
> Makefile:603: recipe for target 'pybuilddir.txt' failed
>
> gmake: *** [pybuilddir.txt] Error 1
>
>
>
>
>
>
>
> [image: cid:image002.png at 01D3D0E3.DCFE6710]
>
> *Rob Boehne*
>
> Senior Software Architect | Datalogics, Inc.
>
> +1.312.853.8351 <(312)%20853-8351> | robb at datalogics.com
>
> datalogics.com <http://www.datalogics.com/> | blogs.datalogics.com
>
> Connect with us: Facebook <https://www.facebook.com/DatalogicsInc> |
> Twitter <https://twitter.com/DatalogicsInc> | LinkedIn
> <https://www.linkedin.com/company/datalogics?actionToken=p=p%3Dbiz-company-login%26c%3D3217e65a-bdc2-4b38-8f9c-13c982e8c529%26m%3Dcompany_feed%26n%3D0&t=a%3DisFolloweeOfPoster%253Dfalse%2526distanceFromActor%253D-1%2526actorType%253D%2526likedByUser%253Dfalse%2526targetId%253D%2526recentCommentUrns%253D%2526targetType%253D%2526sponsoredFlag%253DORGANIC%2526verbType%253Dlinkedin%25253Ashare%2526objectType%253Dlinkedin%25253Aarticle%2526totalShares%253D0%2526activityId%253Durn%25253Ali%25253Aactivity%25253A6263731876121362433%2526recentLikerUrns%253D%2526actorId%253Durn%25253Ali%25253Acompany%25253A14000%2526totalComments%253D0%2526relevanceScore%253D0.0%2526recentCommenterUrns%253D%2526isPublic%253Dtrue%2526time%253D-1%2526totalLikes%253D0%2526objectId%253Durn%25253Ali%25253Aarticle%25253A7793179909183391510%2526distanceFromNestedActor%253D-1%26s%3DORG>
>  | YouTube <https://www.youtube.com/user/Datalogics>
>
>
>
>
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/vstinner%40redhat.com
>


-- 
Night gathers, and now my watch begins. It shall not end until my death.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190507/72d21850/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: image001.png
Type: image/png
Size: 124449 bytes
Desc: not available
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190507/72d21850/attachment-0001.png>

From vstinner at redhat.com  Tue May  7 16:47:30 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Tue, 7 May 2019 16:47:30 -0400
Subject: [Python-Dev] Hello
In-Reply-To: <CAC7z9xCT4WZpCU4rJLUL1XhJaTuEVHvL2rVCnWebWcxEfM8JDA@mail.gmail.com>
References: <CAC7z9xCT4WZpCU4rJLUL1XhJaTuEVHvL2rVCnWebWcxEfM8JDA@mail.gmail.com>
Message-ID: <CA+3bQGH8kGhzi1On9ggGXc9wd6NCE0an9zgEwU-_K4r0Ud3sgw@mail.gmail.com>

Welcome Ben!

Le mar. 7 mai 2019 ? 16:28, Ben Kane <bbk1524 at gmail.com> a ?crit :
> My name is Ben Kane. I'm joining this mailing list and introducing myself as asked in the "welcome to python-dev" email. I've been using Python for maybe 7 years now. I started to learn it in college to help with accounting homework and I continue to use it now for personal projects ranging from small scripts to larger applications and in my day job as a LinkedIn Site Reliability Engineer.
>
> I'd like to contribute back to the language that's helped me so much; and talking with core devs at PyCon 2019 has really encouraged me. So I'll be lurking and trying to pick things up as I see them.

python-dev is not the proper mail to introduce yourself to contribute.
I suggest you to start reading http://devguide.python.org/ and please
send the same email to core-mentorship mailing list:
https://mail.python.org/mailman3/lists/core-mentorship.python.org/?x=22

It would help if you can elaborate on which parts of Python you would
be interested to contribute ;-)

Victor
-- 
Night gathers, and now my watch begins. It shall not end until my death.

From vstinner at redhat.com  Tue May  7 16:59:49 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Tue, 7 May 2019 16:59:49 -0400
Subject: [Python-Dev] PEP 574 ready for review
In-Reply-To: <20190507200915.54a39451@fsol>
References: <20190430101428.204457e6@fsol>
 <CADiSq7c-eWwtkZ3RYW0eVAvzWMBpMKWY4bioXaXkVy+1nJwfVQ@mail.gmail.com>
 <20190507200915.54a39451@fsol>
Message-ID: <CA+3bQGFdU2RViFv+tg0pmF77VeHMTHpa1SvbzRXnf8w2tmg98Q@mail.gmail.com>

You can do it. I like when the acceptance email is linked from the PEP ;-)

Victor

Le mar. 7 mai 2019 ? 14:12, Antoine Pitrou <solipsis at pitrou.net> a ?crit :
>
>
> Should I submit a PR to change the PEP status or would you like to do
> it?
>
> Regards
>
> Antoine.
>
>
> On Wed, 1 May 2019 12:49:24 -0700
> Nick Coghlan <ncoghlan at gmail.com> wrote:
> > Thanks Antoine.
> >
> > As BDFL-Delegate I'm happy with this version of the PEP, so it's my
> > pleasure to accept it for inclusion in Python 3.8.
> >
> > Regards,
> > Nick.
> >
>
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe: https://mail.python.org/mailman/options/python-dev/vstinner%40redhat.com



-- 
Night gathers, and now my watch begins. It shall not end until my death.

From robb at datalogics.com  Tue May  7 17:03:17 2019
From: robb at datalogics.com (Rob Boehne)
Date: Tue, 7 May 2019 21:03:17 +0000
Subject: [Python-Dev] Can't build 3.7.3 on AIX
In-Reply-To: <CA+3bQGFGAyhn124=PUXrn1JmcTYpFc3CS12PgsEKJRqCjCfdRg@mail.gmail.com>
References: <F183544A-F397-4A07-8152-713896C0E625@datalogics.com>
 <CA+3bQGFGAyhn124=PUXrn1JmcTYpFc3CS12PgsEKJRqCjCfdRg@mail.gmail.com>
Message-ID: <5038F465-FB30-4FA5-8B58-1A5CBE1B79B2@datalogics.com>

I?ve created the issue, but was unable to attach config.log ? 413 Request Entity Too Large
Kept coming up if I attempted to attach the log file.

https://bugs.python.org/issue36843


From: Victor Stinner <vstinner at redhat.com>
Date: Tuesday, May 7, 2019 at 3:42 PM
To: Rob Boehne <robb at datalogics.com>
Cc: "python-dev at python.org" <python-dev at python.org>
Subject: Re: [Python-Dev] Can't build 3.7.3 on AIX

Please report the bug at https://bugs.python.org/<https://nam05.safelinks.protection.outlook.com/?url=https%3A%2F%2Fbugs.python.org%2F&data=02%7C01%7Crobb%40datalogics.com%7C32d8d4229d5e488784c508d6d32c8815%7Cfc3d8cdfd6994f23ae232659c3da4749%7C0%7C0%7C636928585562575348&sdata=p3ikVuanjImoFGHPxnoZGeYinNHfZ43sf07K0Ttuc38%3D&reserved=0> ;-)

I'm not sure how _PyOS_URandom() / pyurandom() is implemented on AIX. I guess that it reads from /dev/urandom.

Please attach config.log to your bug report.

Victor

Le mar. 7 mai 2019 ? 16:30, Rob Boehne <robb at datalogics.com<mailto:robb at datalogics.com>> a ?crit :
Hello,

I?m attempting to get a recent version of Python3 running on my UNIX build machines, but having a problem under AIX.
This seems like it might be since 3.6.5, but I?ve not actually attempted anything else other than 3.6.8 which fails similarly.
I?m building with the native C compiler in 64-bit mode, using OBJECT_MODE=64 exported in the environment.  I have attached config.log.
Is this a known issue? TIA - Rob



  ../../Python-3.7.3/config.guess

powerpc-ibm-aix7.1.4.0



../../Python-3.7.3/Modules/makexp_aix Modules/python.exp . libpython3.7m.a;  xlc_r -L/raid/checkouts-raid/robb/zlib-dl/Release/rs6000aix_64/lib  -Wl,-blibpath:/opt/IBM/xlmass/8.1.3/lib/aix61:/opt/IBM/xlc/13.1.3/lib:/usr/lib:/lib:/opt/Python-3.7/lib -q64    -Wl,-bE:Modules/python.exp -lld -o python Programs/python.o libpython3.7m.so<https://nam05.safelinks.protection.outlook.com/?url=http%3A%2F%2Flibpython3.7m.so&data=02%7C01%7Crobb%40datalogics.com%7C32d8d4229d5e488784c508d6d32c8815%7Cfc3d8cdfd6994f23ae232659c3da4749%7C0%7C0%7C636928585562585670&sdata=M26jv6Tl2SkdwnMIjaZ57UVpClmHPy1efSbk8pH5ewg%3D&reserved=0> -lintl -ldl    -lm

LIBPATH=/raid/checkouts-raid/robb/nepal/build-py37 ./python -E -S -m sysconfig --generate-posix-vars ;\

if test $? -ne 0 ; then \

        echo "generate-posix-vars failed" ; \

        rm -f ./pybuilddir.txt ; \

        exit 1 ; \

fi

Fatal Python error: _Py_HashRandomization_Init: failed to get random numbers to initialize Python



generate-posix-vars failed

Makefile:603: recipe for target 'pybuilddir.txt' failed

gmake: *** [pybuilddir.txt] Error 1



[cid:image002.png at 01D3D0E3.DCFE6710]

Rob Boehne
Senior Software Architect | Datalogics, Inc.
+1.312.853.8351<tel:(312)%20853-8351> | robb at datalogics.com<mailto:robb at datalogics.com>
datalogics.com<https://nam05.safelinks.protection.outlook.com/?url=http%3A%2F%2Fwww.datalogics.com%2F&data=02%7C01%7Crobb%40datalogics.com%7C32d8d4229d5e488784c508d6d32c8815%7Cfc3d8cdfd6994f23ae232659c3da4749%7C0%7C0%7C636928585562595364&sdata=sKMZvmq69uokuGSvkYMfhYpdvkrD7ZoogBS7vtc7D%2FA%3D&reserved=0> | blogs.datalogics.com<https://nam05.safelinks.protection.outlook.com/?url=http%3A%2F%2Fblogs.datalogics.com%2F&data=02%7C01%7Crobb%40datalogics.com%7C32d8d4229d5e488784c508d6d32c8815%7Cfc3d8cdfd6994f23ae232659c3da4749%7C0%7C0%7C636928585562605371&sdata=W3EXpIZ8b3%2BeWO8u9MgXPuvLlcpQ3lxCMRiik1M2eLc%3D&reserved=0>

Connect with us: Facebook<https://nam05.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwww.facebook.com%2FDatalogicsInc&data=02%7C01%7Crobb%40datalogics.com%7C32d8d4229d5e488784c508d6d32c8815%7Cfc3d8cdfd6994f23ae232659c3da4749%7C0%7C0%7C636928585562615379&sdata=vy2mbRdcwjaFUXb9fH8qlUmLRBmSFyEFnQC2OprvdPs%3D&reserved=0> | Twitter<https://nam05.safelinks.protection.outlook.com/?url=https%3A%2F%2Ftwitter.com%2FDatalogicsInc&data=02%7C01%7Crobb%40datalogics.com%7C32d8d4229d5e488784c508d6d32c8815%7Cfc3d8cdfd6994f23ae232659c3da4749%7C0%7C0%7C636928585562615379&sdata=x7gJ3IOY1h2PAdgRGK5rVcbDeR6MN2cIvAZBGTMLqe0%3D&reserved=0> | LinkedIn<https://nam05.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwww.linkedin.com%2Fcompany%2Fdatalogics%3FactionToken%3Dp%3Dp%253Dbiz-company-login%2526c%253D3217e65a-bdc2-4b38-8f9c-13c982e8c529%2526m%253Dcompany_feed%2526n%253D0%26t%3Da%253DisFolloweeOfPoster%25253Dfalse%252526distanceFromActor%25253D-1%252526actorType%25253D%252526likedByUser%25253Dfalse%252526targetId%25253D%252526recentCommentUrns%25253D%252526targetType%25253D%252526sponsoredFlag%25253DORGANIC%252526verbType%25253Dlinkedin%2525253Ashare%252526objectType%25253Dlinkedin%2525253Aarticle%252526totalShares%25253D0%252526activityId%25253Durn%2525253Ali%2525253Aactivity%2525253A6263731876121362433%252526recentLikerUrns%25253D%252526actorId%25253Durn%2525253Ali%2525253Acompany%2525253A14000%252526totalComments%25253D0%252526relevanceScore%25253D0.0%252526recentCommenterUrns%25253D%252526isPublic%25253Dtrue%252526time%25253D-1%252526totalLikes%25253D0%252526objectId%25253Durn%2525253Ali%2525253Aarticle%2525253A7793179909183391510%252526distanceFromNestedActor%25253D-1%2526s%253DORG&data=02%7C01%7Crobb%40datalogics.com%7C32d8d4229d5e488784c508d6d32c8815%7Cfc3d8cdfd6994f23ae232659c3da4749%7C0%7C0%7C636928585562625387&sdata=91ZWa1RiT6PgsHm8sTFZW%2Fxv%2F2N%2BsazepzejkSFkBSQ%3D&reserved=0> | YouTube<https://nam05.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwww.youtube.com%2Fuser%2FDatalogics&data=02%7C01%7Crobb%40datalogics.com%7C32d8d4229d5e488784c508d6d32c8815%7Cfc3d8cdfd6994f23ae232659c3da4749%7C0%7C0%7C636928585562635394&sdata=Yhu7Hr%2B61IMg5uO1FOmMhSVePKt7cHBm9hz54q22EHA%3D&reserved=0>


_______________________________________________
Python-Dev mailing list
Python-Dev at python.org<mailto:Python-Dev at python.org>
https://mail.python.org/mailman/listinfo/python-dev<https://nam05.safelinks.protection.outlook.com/?url=https%3A%2F%2Fmail.python.org%2Fmailman%2Flistinfo%2Fpython-dev&data=02%7C01%7Crobb%40datalogics.com%7C32d8d4229d5e488784c508d6d32c8815%7Cfc3d8cdfd6994f23ae232659c3da4749%7C0%7C0%7C636928585562645396&sdata=ce5gctGreWIqecstTZghtEe%2FPBE4cZoCmqZymW%2Ff%2FAo%3D&reserved=0>
Unsubscribe: https://mail.python.org/mailman/options/python-dev/vstinner%40redhat.com<https://nam05.safelinks.protection.outlook.com/?url=https%3A%2F%2Fmail.python.org%2Fmailman%2Foptions%2Fpython-dev%2Fvstinner%2540redhat.com&data=02%7C01%7Crobb%40datalogics.com%7C32d8d4229d5e488784c508d6d32c8815%7Cfc3d8cdfd6994f23ae232659c3da4749%7C0%7C0%7C636928585562655404&sdata=yR7AlHO85H8OWwpiLk%2BIEJkBdQHHYcLfTNQWB78ZN%2BY%3D&reserved=0>


--
Night gathers, and now my watch begins. It shall not end until my death.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190507/ec869e41/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: image001.png
Type: image/png
Size: 124450 bytes
Desc: image001.png
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190507/ec869e41/attachment-0001.png>

From jordan.m.adler at gmail.com  Tue May  7 17:05:57 2019
From: jordan.m.adler at gmail.com (Jordan Adler)
Date: Tue, 7 May 2019 17:05:57 -0400
Subject: [Python-Dev] Definition of equality check behavior
Message-ID: <CAKbmdCt6woyt6EHCTHLK-_3LZW5rkXxepK_A0Kao7A0zoD8x5Q@mail.gmail.com>

Hey folks!

Through the course of work on the future polyfills
<https://github.com/PythonCharmers/python-future/issues/432> that mimic the
behavior of Py3 builtins across versions of Python, we've discovered that
the equality check behavior of at least some builtin types do not
match the documented
core data model
<https://docs.python.org/3/reference/datamodel.html#object.__eq__>.

Specifically, a comparison between a primitive (int, str, float were
tested) and an object of a different type always return False, instead of
raising a NotImplementedError.  Consider `1 == '1'` as a test case.

Should the data model be adjusted to declare that primitive types are
expected to fallback to False, or should the cpython primitive type's
__eq__ implementation fallback to raise NotImplementedError?

Reasonable people could disagree about the right approach, but my distaste
for silent failures leads me to recommend that the implementation be
adjusted to return NotImplementedError as a fallback, and to document that
the operands should not be coerced to the same type prior to comparison
(enforcing a stricter equality check). This will of course require a
deprecation protocol.

Alternatively some new equality operator could be used to specify the level
of coercion/type checking desired (currently Python has 'is' and '==').

Jordan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190507/92adb1b6/attachment.html>

From max.vogler at gmail.com  Tue May  7 18:05:07 2019
From: max.vogler at gmail.com (Max Vogler)
Date: Wed, 8 May 2019 00:05:07 +0200
Subject: [Python-Dev] Definition of equality check behavior
In-Reply-To: <CAKbmdCt6woyt6EHCTHLK-_3LZW5rkXxepK_A0Kao7A0zoD8x5Q@mail.gmail.com>
References: <CAKbmdCt6woyt6EHCTHLK-_3LZW5rkXxepK_A0Kao7A0zoD8x5Q@mail.gmail.com>
Message-ID: <CAFR_N7zAQBwMBhbox9b9O3JLSoc-To6sCAq63Ehmq54Jg78vgg@mail.gmail.com>

Thanks for starting this discussion and addressing my issue, Jordan.

I would like to clarify the intentions behind my original issue
<https://github.com/PythonCharmers/python-future/issues/432>: It does not
concern coercion in Python's __eq__. Instead, the issue concerns the return
of False instead of NotImplemented in future.types.newstr.__eq__. As a
result, in special cases this breaks the symmetry of equality.

Also, please be aware of the difference between NotImplemented (a singleton
that is used as indicator for an unimplemented equality operation) and
NotImplementedError
<https://docs.python.org/3/library/exceptions.html#NotImplementedError>, a
RuntimeError used for example in abstract classes. To quote from the docs:
> NotImplementedError and NotImplemented are not interchangeable, even
though they have similar names and purposes.

On Tue, May 7, 2019 at 11:06 PM Jordan Adler <jordan.m.adler at gmail.com>
wrote:

> Hey folks!
>
> Through the course of work on the future polyfills
> <https://github.com/PythonCharmers/python-future/issues/432> that mimic
> the behavior of Py3 builtins across versions of Python, we've discovered
> that the equality check behavior of at least some builtin types do not
> match the documented core data model
> <https://docs.python.org/3/reference/datamodel.html#object.__eq__>.
>
> Specifically, a comparison between a primitive (int, str, float were
> tested) and an object of a different type always return False, instead of
> raising a NotImplementedError.  Consider `1 == '1'` as a test case.
>
> Should the data model be adjusted to declare that primitive types are
> expected to fallback to False, or should the cpython primitive type's
> __eq__ implementation fallback to raise NotImplementedError?
>
> Reasonable people could disagree about the right approach, but my distaste
> for silent failures leads me to recommend that the implementation be
> adjusted to return NotImplementedError as a fallback, and to document that
> the operands should not be coerced to the same type prior to comparison
> (enforcing a stricter equality check). This will of course require a
> deprecation protocol.
>
> Alternatively some new equality operator could be used to specify the
> level of coercion/type checking desired (currently Python has 'is' and
> '==').
>
> Jordan
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190508/0cb7e137/attachment.html>

From steve at pearwood.info  Tue May  7 19:17:24 2019
From: steve at pearwood.info (Steven D'Aprano)
Date: Wed, 8 May 2019 09:17:24 +1000
Subject: [Python-Dev] Definition of equality check behavior
In-Reply-To: <CAKbmdCt6woyt6EHCTHLK-_3LZW5rkXxepK_A0Kao7A0zoD8x5Q@mail.gmail.com>
References: <CAKbmdCt6woyt6EHCTHLK-_3LZW5rkXxepK_A0Kao7A0zoD8x5Q@mail.gmail.com>
Message-ID: <20190507231724.GW5010@ando.pearwood.info>

On Tue, May 07, 2019 at 05:05:57PM -0400, Jordan Adler wrote:
[...]
> Specifically, a comparison between a primitive (int, str, float were
> tested) and an object of a different type always return False, instead of
> raising a NotImplementedError.  Consider `1 == '1'` as a test case.

I think you may be labouring under a few misapprehensions here.

1. Comparisons between builtins such as ints and objects of different 
types do not always return False:

py> class X:
...     def __eq__(self, other):
...             return True
...
py> 123 == X()
True

You don't need a custom class to demonstrate this fact, you just need 
values which actually are equal:

py> 123 == 1.23e2  # int compared to float
True


2. Comparisons are not supposed to raise NotImplementedError as part of 
the core data model, they are supposed to return (not raise) 
NotImplemented. Note that NotImplementedError is a completely different 
thing).

As the documentation you linked to says:

    A rich comparison method may return the singleton NotImplemented 
    if it does not implement the operation for a given pair of 
    arguments.



3. Equality does not suppress exceptions and lead to silent failure:

py> class Y:
...     def __eq__(self, other):
...             raise NotImplementedError
...
py> 123 == Y()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 3, in __eq__
NotImplementedError


Hope this helps.



-- 
Steven

From steve at pearwood.info  Tue May  7 19:30:09 2019
From: steve at pearwood.info (Steven D'Aprano)
Date: Wed, 8 May 2019 09:30:09 +1000
Subject: [Python-Dev] Definition of equality check behavior
In-Reply-To: <CAFR_N7zAQBwMBhbox9b9O3JLSoc-To6sCAq63Ehmq54Jg78vgg@mail.gmail.com>
References: <CAKbmdCt6woyt6EHCTHLK-_3LZW5rkXxepK_A0Kao7A0zoD8x5Q@mail.gmail.com>
 <CAFR_N7zAQBwMBhbox9b9O3JLSoc-To6sCAq63Ehmq54Jg78vgg@mail.gmail.com>
Message-ID: <20190507233009.GX5010@ando.pearwood.info>

On Wed, May 08, 2019 at 12:05:07AM +0200, Max Vogler wrote:
> Thanks for starting this discussion and addressing my issue, Jordan.
> 
> I would like to clarify the intentions behind my original issue
> <https://github.com/PythonCharmers/python-future/issues/432>: It does not
> concern coercion in Python's __eq__. Instead, the issue concerns the return
> of False instead of NotImplemented in future.types.newstr.__eq__. 

Unless there is something special about newstr that it should force an 
unequal result, it should return NotImplemented when comparing to types 
it knows nothing about.

I'm reluctant to outright declare a class I know nothing about in a 
library I don't understand is buggy, but on the face of it, if 
newstr.__eq__ doesn't return NotImplemented, it probably is buggy.

If so, newstr is in good company: failure to return NotImplemented is a 
very common bug in third-party code. I've written heaps of classes that 
wrongly force a False result. But I've learned better and don't do it 
any more :-)



-- 
Steven

From ethan at stoneleaf.us  Tue May  7 20:23:09 2019
From: ethan at stoneleaf.us (Ethan Furman)
Date: Tue, 7 May 2019 17:23:09 -0700
Subject: [Python-Dev] Definition of equality check behavior
In-Reply-To: <CAKbmdCt6woyt6EHCTHLK-_3LZW5rkXxepK_A0Kao7A0zoD8x5Q@mail.gmail.com>
References: <CAKbmdCt6woyt6EHCTHLK-_3LZW5rkXxepK_A0Kao7A0zoD8x5Q@mail.gmail.com>
Message-ID: <945db57c-3b27-0d2f-f8c5-c10e69fd3a0c@stoneleaf.us>

On 05/07/2019 02:05 PM, Jordan Adler wrote:

> Specifically, a comparison between a primitive (int, str, float were
>  tested) and an object of a different type always return False,
>  instead of raising a NotImplementedError.  Consider `1 == '1'` as a
>  test case.

If the object of a different type doesn't support comparing to an int, str, or float then False is the correct answer.  On the other hand, if the object of a different type wants to compare equal to, say, ints then it will have to supply its own __eq__ method to return False/True as appropriate.


> Should the data model be adjusted to declare that primitive types are
>  expected to fallback to False

No, because they aren't.

> or should the cpython primitive type's __eq__ implementation fallback
>  to raise NotImplementedError?

No, because raising an error is not appropriate.  Did you mean `return NotImplemented`?  Because empirical evidence suggests that they do:

-------
class MyCustomInt():
     def __init__(self, value):
         self.value = value
     def __eq__(self, other):
         if isinstance(other, int):
             return self.value == other
         else:
             return NotImplemented
     def __ne__(self, other):
         if isinstance(other, int):
             return self.value != other
         else:
             return NotImplemented

core_int = 7
my_int = MyCustomInt(7)

print(core_int == my_int)  # True
print(my_int == core_int)  # True
-------

If the core types were not returning NotImplemented then the above would be False on the `core_int == my_int` line.

Hopefully this is clearer now?

--
~Ethan~

From steve at pearwood.info  Tue May  7 20:39:37 2019
From: steve at pearwood.info (Steven D'Aprano)
Date: Wed, 8 May 2019 10:39:37 +1000
Subject: [Python-Dev] Easier debugging with f-strings
In-Reply-To: <133ec1d8-cee5-a287-b786-304a7ed0789f@trueblade.com>
References: <133ec1d8-cee5-a287-b786-304a7ed0789f@trueblade.com>
Message-ID: <20190508003937.GA5010@ando.pearwood.info>

Disclaimer: this topic seems to have been split over at least two issues 
on the bug tracker, a Python-Ideas thread from 2018, Discourse (I 
think...) and who knows what else. I haven't read it all, so excuse me 
if I'm raising something already discussed.

On Mon, May 06, 2019 at 08:39:41PM -0400, Eric V. Smith wrote:

> After that lightning talk, Larry and I talked about it some more, and 
> for a number of reasons decided that it would make more sense if the 
> syntax used an = sign. So we came up with f"{foo=}", which would also 
> produce "foo='Hello'".
> 
> The reasons for the change are:
> - Having '=' in the expression is a better mnemonic than !d.
> - By not using a conversion starting with !, we can compose = with the 
> existing ! conversions, !r, !s, and the rarely used !a.
> - We can let the user have a little more control of the resulting string.

You're going to hate me for bike-shedding, but I really don't like using 
= as a defacto unary postfix operator. To me, spam= is always going to 
look like it was meant to be spam==<something> and the second half got 
accidentally deleted.

I don't have a better suggestion, sorry.

In an earlier draft, back when this was spelled !d, you specifically 
talked about whitespace. Does this still apply?

    spam = 42
    f'{spam=}'  # returns 'spam=42'
    f'{spam =}'  # returns 'spam =42'
    f'{spam = }'  # returns 'spam = 42' I guess?
    f'{spam+1=}'  # returns 'spam+1=41' I guess?




-- 
Steven

From bbk1524 at gmail.com  Tue May  7 21:08:41 2019
From: bbk1524 at gmail.com (Ben Kane)
Date: Tue, 7 May 2019 21:08:41 -0400
Subject: [Python-Dev] Hello
In-Reply-To: <CA+3bQGH8kGhzi1On9ggGXc9wd6NCE0an9zgEwU-_K4r0Ud3sgw@mail.gmail.com>
References: <CAC7z9xCT4WZpCU4rJLUL1XhJaTuEVHvL2rVCnWebWcxEfM8JDA@mail.gmail.com>
 <CA+3bQGH8kGhzi1On9ggGXc9wd6NCE0an9zgEwU-_K4r0Ud3sgw@mail.gmail.com>
Message-ID: <CAC7z9xBThtzDEKvaGqdY8wks28dBQxefR9UCJv2HSCV1NR2b7g@mail.gmail.com>

Sorry Victor, I must have misinterpreted this snippet from the mailbot.
Maybe it would be a good idea to re-word it? I'll be happy to open an issue
for that in an appropriate mailing list if you think that would help.

> Welcome to the Python-Dev at python.org mailing list! If you are a new
subscriber, please take the time to introduce yourself briefly in your
first post. It is appreciated if you lurk around for a while before
posting! :-)

I talked to Barry Warsaw about https://bugs.python.org/issue36837 and he
said I should post to python-dev to get feedback. I'll work on that email
and post back here once I'm happy with it.

Thanks,
Ben


On Tue, May 7, 2019 at 4:47 PM Victor Stinner <vstinner at redhat.com> wrote:

> Welcome Ben!
>
> Le mar. 7 mai 2019 ? 16:28, Ben Kane <bbk1524 at gmail.com> a ?crit :
> > My name is Ben Kane. I'm joining this mailing list and introducing
> myself as asked in the "welcome to python-dev" email. I've been using
> Python for maybe 7 years now. I started to learn it in college to help with
> accounting homework and I continue to use it now for personal projects
> ranging from small scripts to larger applications and in my day job as a
> LinkedIn Site Reliability Engineer.
> >
> > I'd like to contribute back to the language that's helped me so much;
> and talking with core devs at PyCon 2019 has really encouraged me. So I'll
> be lurking and trying to pick things up as I see them.
>
> python-dev is not the proper mail to introduce yourself to contribute.
> I suggest you to start reading http://devguide.python.org/ and please
> send the same email to core-mentorship mailing list:
> https://mail.python.org/mailman3/lists/core-mentorship.python.org/?x=22
>
> It would help if you can elaborate on which parts of Python you would
> be interested to contribute ;-)
>
> Victor
> --
> Night gathers, and now my watch begins. It shall not end until my death.
>


-- 

Ben Kane
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190507/91b61c03/attachment.html>

From eric at trueblade.com  Tue May  7 21:23:35 2019
From: eric at trueblade.com (Eric V. Smith)
Date: Tue, 7 May 2019 21:23:35 -0400
Subject: [Python-Dev] Easier debugging with f-strings
In-Reply-To: <20190508003937.GA5010@ando.pearwood.info>
References: <133ec1d8-cee5-a287-b786-304a7ed0789f@trueblade.com>
 <20190508003937.GA5010@ando.pearwood.info>
Message-ID: <a307e077-4df3-ea37-57cc-63c551c308f4@trueblade.com>

On 5/7/19 8:39 PM, Steven D'Aprano wrote:
> Disclaimer: this topic seems to have been split over at least two issues
> on the bug tracker, a Python-Ideas thread from 2018, Discourse (I
> think...) and who knows what else. I haven't read it all, so excuse me
> if I'm raising something already discussed.

Yeah, it's all over the place. At this stage, I think discussing it here 
is best.

>
> On Mon, May 06, 2019 at 08:39:41PM -0400, Eric V. Smith wrote:
>
>> After that lightning talk, Larry and I talked about it some more, and
>> for a number of reasons decided that it would make more sense if the
>> syntax used an = sign. So we came up with f"{foo=}", which would also
>> produce "foo='Hello'".
>>
>> The reasons for the change are:
>> - Having '=' in the expression is a better mnemonic than !d.
>> - By not using a conversion starting with !, we can compose = with the
>> existing ! conversions, !r, !s, and the rarely used !a.
>> - We can let the user have a little more control of the resulting string.
>
> You're going to hate me for bike-shedding, but I really don't like using
> = as a defacto unary postfix operator. To me, spam= is always going to
> look like it was meant to be spam==<something> and the second half got
> accidentally deleted.
>
> I don't have a better suggestion, sorry.

I think = makes a great mnemonic for what's happening. I realize it 
looks a little funny at first, but just wait until you start confusing 
it with := (hah!). Everyone else I've discussed it with likes =.

> In an earlier draft, back when this was spelled !d, you specifically
> talked about whitespace. Does this still apply?

Yes, it does.

>     spam = 42
>     f'{spam=}'  # returns 'spam=42'
>     f'{spam =}'  # returns 'spam =42'
>     f'{spam = }'  # returns 'spam = 42' I guess?

All correct.

>     f'{spam+1=}'  # returns 'spam+1=41' I guess?

I'm not proposing to redefine addition by one, so this is actually 
'spam+1=43' :)

Eric


From tim.peters at gmail.com  Tue May  7 21:23:35 2019
From: tim.peters at gmail.com (Tim Peters)
Date: Tue, 7 May 2019 20:23:35 -0500
Subject: [Python-Dev] Definition of equality check behavior
In-Reply-To: <CAKbmdCt6woyt6EHCTHLK-_3LZW5rkXxepK_A0Kao7A0zoD8x5Q@mail.gmail.com>
References: <CAKbmdCt6woyt6EHCTHLK-_3LZW5rkXxepK_A0Kao7A0zoD8x5Q@mail.gmail.com>
Message-ID: <CAExdVNkTQjoG4C_khL4vm7wumxjWTeFhnZqas_yo1SVBW_jh-w@mail.gmail.com>

[Jordan Adler <jordan.m.adler at gmail.com>]
> Through the course of work on the future polyfills that mimic the behavior
> of Py3 builtins across versions of Python, we've discovered that the
> equality check behavior of at least some builtin types do not match the
> documented core data model.
>
> Specifically, a comparison between a primitive (int, str, float were tested)
> and an object of a different type always return False, instead of raising
> a NotImplementedError.  Consider `1 == '1'` as a test case.
>
> Should the data model be adjusted to declare that primitive types are
> expected to fallback to False, or should the cpython primitive type's
> __eq__ implementation fallback to raise NotImplementedError?

Nope ;-)  This isn't a "data model" issue.  Look instead at the
Standard Library manual's section on Built-In Types, under heading
Comparisons:

"""
Objects of different types, except different numeric types, never
compare equal. ...
The <, <=, > and >= operators will raise a TypeError exception when
comparing a complex number with another built-in numeric type, when
the objects are of different types that cannot be compared, or in
other cases where there is no defined ordering.
"""

It's not an object's responsibility to arrange for that.  It's done
for them by default, and objects only need to supply their own rich
comparison methods if they don't want the defaults.  For example, when
comparing an int with another type, all the int rich comparison
methods _do_ return NotImplemented:

>>> f = 4
>>> f.__eq__("abc")
NotImplemented

It's at a higher level that comparison logic says "OK, I gave both
comparands a chance, and they both returned NotImplemented.  So one
last chance (from object.c's do_richcompare())":

    /* If neither object implements it, provide a sensible default
       for == and !=, but raise an exception for ordering. */
    switch (op) {
    case Py_EQ:
        res = (v == w) ? Py_True : Py_False;
        break;
    case Py_NE:
        res = (v != w) ? Py_True : Py_False;
        break;
    default:
        PyErr_Format(PyExc_TypeError,
                     "'%s' not supported between instances of '%.100s'
and '%.100s'",
                     opstrings[op],
                     v->ob_type->tp_name,
                     w->ob_type->tp_name);
        return NULL;
    }

Then the Py_EQ case of that delivers:

>>> f == "abc"
False

and the Py_NE case:

>>> f != "abc"
True

despite that (or because of that ;-) ):

>>> f.__eq__("abc")
NotImplemented
>>> "abc".__eq__(f)
NotImplemented

Note that there's nothing special about builtin types here.  All types
are treated alike.

From mark at hotpy.org  Wed May  8 10:07:46 2019
From: mark at hotpy.org (Mark Shannon)
Date: Wed, 8 May 2019 10:07:46 -0400
Subject: [Python-Dev] Redoing failed PR checks
Message-ID: <cad84e3d-fc70-b550-0d3b-10d0797facaf@hotpy.org>

Hi,

How do I redo a failed PR check?
The appveyor failure for https://github.com/python/cpython/pull/13181 
appears to be spurious, but there is no obvious way to redo it.

BTW, this is not the first time I've seen a PR blocked by a spurious 
appveyor failure.

Cheers,
Mark.

From encukou at gmail.com  Wed May  8 10:13:58 2019
From: encukou at gmail.com (Petr Viktorin)
Date: Wed, 8 May 2019 10:13:58 -0400
Subject: [Python-Dev] Hello
In-Reply-To: <CAC7z9xBThtzDEKvaGqdY8wks28dBQxefR9UCJv2HSCV1NR2b7g@mail.gmail.com>
References: <CAC7z9xCT4WZpCU4rJLUL1XhJaTuEVHvL2rVCnWebWcxEfM8JDA@mail.gmail.com>
 <CA+3bQGH8kGhzi1On9ggGXc9wd6NCE0an9zgEwU-_K4r0Ud3sgw@mail.gmail.com>
 <CAC7z9xBThtzDEKvaGqdY8wks28dBQxefR9UCJv2HSCV1NR2b7g@mail.gmail.com>
Message-ID: <76bd3d71-ac71-727d-7748-46d5aa4c0cd1@gmail.com>

On 5/7/19 9:08 PM, Ben Kane wrote:
> Sorry Victor, I must have misinterpreted this snippet from the mailbot. 
> Maybe it would be a good idea to re-word it? I'll be happy to open an 
> issue for that in an appropriate mailing list if you think that would help.
> 
>  > Welcome to the Python-Dev at python.org <mailto:Python-Dev at python.org> 
> mailing list! If you are a new subscriber, please take the time to 
> introduce yourself briefly in your first post. It is appreciated if you 
> lurk around for a while before posting! :-)

Not sure what the original intent was, but I read that as: "Whenever you 
get to sending your first post, include an introduction in it. But, 
before you start actively participating, take your time to hang around 
and absorb the culture."

Perhaps we want to reverse the two sentences to put them in 
chronological order?

I'm not sure what the proper forum for this discussion would be.

> I talked to Barry Warsaw about https://bugs.python.org/issue36837 and he 
> said I should post to python-dev to get feedback. I'll work on that 
> email and post back here once I'm happy with it.
> 
> Thanks,
> Ben
> 
> 
> On Tue, May 7, 2019 at 4:47 PM Victor Stinner <vstinner at redhat.com 
> <mailto:vstinner at redhat.com>> wrote:
> 
>     Welcome Ben!
> 
>     Le mar. 7 mai 2019 ? 16:28, Ben Kane <bbk1524 at gmail.com
>     <mailto:bbk1524 at gmail.com>> a ?crit :
>      > My name is Ben Kane. I'm joining this mailing list and
>     introducing myself as asked in the "welcome to python-dev" email.
>     I've been using Python for maybe 7 years now. I started to learn it
>     in college to help with accounting homework and I continue to use it
>     now for personal projects ranging from small scripts to larger
>     applications and in my day job as a LinkedIn Site Reliability Engineer.
>      >
>      > I'd like to contribute back to the language that's helped me so
>     much; and talking with core devs at PyCon 2019 has really encouraged
>     me. So I'll be lurking and trying to pick things up as I see them.
> 
>     python-dev is not the proper mail to introduce yourself to contribute.
>     I suggest you to start reading http://devguide.python.org/ and please
>     send the same email to core-mentorship mailing list:
>     https://mail.python.org/mailman3/lists/core-mentorship.python.org/?x=22
> 
>     It would help if you can elaborate on which parts of Python you would
>     be interested to contribute ;-)
> 
>     Victor
>     -- 
>     Night gathers, and now my watch begins. It shall not end until my death.
> 
> 
> 
> -- 
> 
> Ben Kane
> 
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe: https://mail.python.org/mailman/options/python-dev/encukou%40gmail.com
> 

From eric at trueblade.com  Wed May  8 10:23:35 2019
From: eric at trueblade.com (Eric V. Smith)
Date: Wed, 8 May 2019 10:23:35 -0400
Subject: [Python-Dev] Redoing failed PR checks
In-Reply-To: <cad84e3d-fc70-b550-0d3b-10d0797facaf@hotpy.org>
References: <cad84e3d-fc70-b550-0d3b-10d0797facaf@hotpy.org>
Message-ID: <A45E903B-3479-4D05-96B3-EC2B40CF9614@trueblade.com>

I think you can close and reopen the PR. That?s what I?m trying on my blocked PR. 

--
Eric V. Smith
True Blade Systems, Inc
(301) 859-4544

> On May 8, 2019, at 10:07 AM, Mark Shannon <mark at hotpy.org> wrote:
> 
> Hi,
> 
> How do I redo a failed PR check?
> The appveyor failure for https://github.com/python/cpython/pull/13181 appears to be spurious, but there is no obvious way to redo it.
> 
> BTW, this is not the first time I've seen a PR blocked by a spurious appveyor failure.
> 
> Cheers,
> Mark.
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe: https://mail.python.org/mailman/options/python-dev/eric%2Ba-python-dev%40trueblade.com


From barry at python.org  Wed May  8 10:25:50 2019
From: barry at python.org (Barry Warsaw)
Date: Wed, 8 May 2019 10:25:50 -0400
Subject: [Python-Dev] Hello
In-Reply-To: <76bd3d71-ac71-727d-7748-46d5aa4c0cd1@gmail.com>
References: <CAC7z9xCT4WZpCU4rJLUL1XhJaTuEVHvL2rVCnWebWcxEfM8JDA@mail.gmail.com>
 <CA+3bQGH8kGhzi1On9ggGXc9wd6NCE0an9zgEwU-_K4r0Ud3sgw@mail.gmail.com>
 <CAC7z9xBThtzDEKvaGqdY8wks28dBQxefR9UCJv2HSCV1NR2b7g@mail.gmail.com>
 <76bd3d71-ac71-727d-7748-46d5aa4c0cd1@gmail.com>
Message-ID: <18245C2E-EC7B-48D0-8320-05C15E5C27D3@python.org>

On May 8, 2019, at 10:13, Petr Viktorin <encukou at gmail.com> wrote:
> 
> Not sure what the original intent was, but I read that as: "Whenever you get to sending your first post, include an introduction in it. But, before you start actively participating, take your time to hang around and absorb the culture."
> 
> Perhaps we want to reverse the two sentences to put them in chronological order?
> 
> I'm not sure what the proper forum for this discussion would be.

Here or -committers.  Then postmasters to list owner to change the welcome text.

-Barry

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: Message signed with OpenPGP
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190508/d18a7570/attachment.sig>

From levkivskyi at gmail.com  Wed May  8 10:39:02 2019
From: levkivskyi at gmail.com (Ivan Levkivskyi)
Date: Wed, 8 May 2019 15:39:02 +0100
Subject: [Python-Dev] Definition of equality check behavior
In-Reply-To: <CAKbmdCt6woyt6EHCTHLK-_3LZW5rkXxepK_A0Kao7A0zoD8x5Q@mail.gmail.com>
References: <CAKbmdCt6woyt6EHCTHLK-_3LZW5rkXxepK_A0Kao7A0zoD8x5Q@mail.gmail.com>
Message-ID: <CAOMjWkn1aD1CtD6t8H08HtdJCEaQohVvJDyfLHCLCC7z8q_2_w@mail.gmail.com>

On Tue, 7 May 2019 at 22:31, Jordan Adler <jordan.m.adler at gmail.com> wrote:

> Hey folks!
>
> Through the course of work on the future polyfills
> <https://github.com/PythonCharmers/python-future/issues/432> that mimic
> the behavior of Py3 builtins across versions of Python, we've discovered
> that the equality check behavior of at least some builtin types do not
> match the documented core data model
> <https://docs.python.org/3/reference/datamodel.html#object.__eq__>.
>
> Specifically, a comparison between a primitive (int, str, float were
> tested) and an object of a different type always return False, instead of
> raising a NotImplementedError.  Consider `1 == '1'` as a test case.
>
> Should the data model be adjusted to declare that primitive types are
> expected to fallback to False, or should the cpython primitive type's
> __eq__ implementation fallback to raise NotImplementedError?
>
> Reasonable people could disagree about the right approach, but my distaste
> for silent failures leads me to recommend that the implementation be
> adjusted to return NotImplementedError as a fallback, and to document that
> the operands should not be coerced to the same type prior to comparison
> (enforcing a stricter equality check). This will of course require a
> deprecation protocol.
>
> Alternatively some new equality operator could be used to specify the
> level of coercion/type checking desired (currently Python has 'is' and
> '==').
>

I don't think there is a chance this can be changed at runtime. OTOH, mypy
has a (pretty recent, so better use master) flag --strict-equality that
uses some heuristics to detect suspicious comparisons, identity checks, and
container checks (all of these may return False at runtime while some
people want them to be an error, e.g. b'abc' == 'abc', '1' in [1, 2, 3],
etc).

--
Ivan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190508/cd7df324/attachment.html>

From larry at hastings.org  Wed May  8 11:36:45 2019
From: larry at hastings.org (Larry Hastings)
Date: Wed, 8 May 2019 11:36:45 -0400
Subject: [Python-Dev] Farewell, Python 3.4
Message-ID: <f8034796-9f54-c779-7697-83a86e583a13@hastings.org>


It's with a note of sadness that I announce the final retirement of 
Python 3.4.? The final release was back in March, but I didn't get 
around to actually closing and deleting the 3.4 branch until this morning.

Python 3.4 introduced many features we all enjoy in modern Python--the 
asyncio, ensurepip, and enum packages, just to name three.? It's a 
release I hope we all remember fondly.

My eternal thanks to all the members of the release team that worked on 
Python 3.4:

    Georg Brandl

    Julien Palard

    Martin von L?wis

    Ned Deily

    Steve Dower

    Terry Reedy

    and all the engineers of the Python infrastructure team.

Special thanks to Benjamin Peterson and Ned Deily, who frequently 
scurried around behind the scenes cleaning up the messes I cluelessly 
left in my wake.

Having closed 3.4, I am now retired as Python 3.4 Release Manager.? I 
regret to inform all of you that you're still stuck with me as Python 
3.5 Release Manager until sometime next year.


My very best wishes,


//arry/

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190508/cc7e10bc/attachment.html>

From mal at egenix.com  Wed May  8 11:46:05 2019
From: mal at egenix.com (M.-A. Lemburg)
Date: Wed, 8 May 2019 17:46:05 +0200
Subject: [Python-Dev] Farewell, Python 3.4
In-Reply-To: <f8034796-9f54-c779-7697-83a86e583a13@hastings.org>
References: <f8034796-9f54-c779-7697-83a86e583a13@hastings.org>
Message-ID: <efb89d1b-47a2-8ca2-49b8-241be2231453@egenix.com>

Thank you for having been 3.4 release manager, Larry !

On 08.05.2019 17:36, Larry Hastings wrote:
> 
> It's with a note of sadness that I announce the final retirement of
> Python 3.4.? The final release was back in March, but I didn't get
> around to actually closing and deleting the 3.4 branch until this morning.
> 
> Python 3.4 introduced many features we all enjoy in modern Python--the
> asyncio, ensurepip, and enum packages, just to name three.? It's a
> release I hope we all remember fondly.
> 
> My eternal thanks to all the members of the release team that worked on
> Python 3.4:
> 
>     Georg Brandl
> 
>     Julien Palard
> 
>     Martin von L?wis
> 
>     Ned Deily
> 
>     Steve Dower
> 
>     Terry Reedy
> 
>     and all the engineers of the Python infrastructure team.
> 
> Special thanks to Benjamin Peterson and Ned Deily, who frequently
> scurried around behind the scenes cleaning up the messes I cluelessly
> left in my wake.
> 
> Having closed 3.4, I am now retired as Python 3.4 Release Manager.? I
> regret to inform all of you that you're still stuck with me as Python
> 3.5 Release Manager until sometime next year.
> 
> 
> My very best wishes,
> 
> 
> //arry/
> 
> 
> 
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe: https://mail.python.org/mailman/options/python-dev/mal%40egenix.com
> 

-- 
Marc-Andre Lemburg
eGenix.com

Professional Python Services directly from the Experts (#1, May 08 2019)
>>> Python Projects, Coaching and Consulting ...  http://www.egenix.com/
>>> Python Database Interfaces ...           http://products.egenix.com/
>>> Plone/Zope Database Interfaces ...           http://zope.egenix.com/
________________________________________________________________________

::: We implement business ideas - efficiently in both time and costs :::

   eGenix.com Software, Skills and Services GmbH  Pastor-Loeh-Str.48
    D-40764 Langenfeld, Germany. CEO Dipl.-Math. Marc-Andre Lemburg
           Registered at Amtsgericht Duesseldorf: HRB 46611
               http://www.egenix.com/company/contact/
                      http://www.malemburg.com/


From jordan.m.adler at gmail.com  Wed May  8 11:51:58 2019
From: jordan.m.adler at gmail.com (Jordan Adler)
Date: Wed, 8 May 2019 11:51:58 -0400
Subject: [Python-Dev] Definition of equality check behavior
In-Reply-To: <CAExdVNkTQjoG4C_khL4vm7wumxjWTeFhnZqas_yo1SVBW_jh-w@mail.gmail.com>
References: <CAKbmdCt6woyt6EHCTHLK-_3LZW5rkXxepK_A0Kao7A0zoD8x5Q@mail.gmail.com>
 <CAExdVNkTQjoG4C_khL4vm7wumxjWTeFhnZqas_yo1SVBW_jh-w@mail.gmail.com>
Message-ID: <CAKbmdCvEQeXrJq8KUdL_Z6qBGHdneVB9pLUscAybpXDbGAAYHg@mail.gmail.com>

Ahh, I didn't locate the documentation on the NotImplemented constant
<https://docs.python.org/3/library/constants.html#NotImplemented> as I was
checking 2.7's docs, so I wasn't aware of the layer of indirection and
fallback behavior for the operator.   Sorry about that!

Based on that, the right call here is to adjust newstr to return that
singleton where appropriate.

On Tue, May 7, 2019 at 9:23 PM Tim Peters <tim.peters at gmail.com> wrote:

> [Jordan Adler <jordan.m.adler at gmail.com>]
> > Through the course of work on the future polyfills that mimic the
> behavior
> > of Py3 builtins across versions of Python, we've discovered that the
> > equality check behavior of at least some builtin types do not match the
> > documented core data model.
> >
> > Specifically, a comparison between a primitive (int, str, float were
> tested)
> > and an object of a different type always return False, instead of raising
> > a NotImplementedError.  Consider `1 == '1'` as a test case.
> >
> > Should the data model be adjusted to declare that primitive types are
> > expected to fallback to False, or should the cpython primitive type's
> > __eq__ implementation fallback to raise NotImplementedError?
>
> Nope ;-)  This isn't a "data model" issue.  Look instead at the
> Standard Library manual's section on Built-In Types, under heading
> Comparisons:
>
> """
> Objects of different types, except different numeric types, never
> compare equal. ...
> The <, <=, > and >= operators will raise a TypeError exception when
> comparing a complex number with another built-in numeric type, when
> the objects are of different types that cannot be compared, or in
> other cases where there is no defined ordering.
> """
>
> It's not an object's responsibility to arrange for that.  It's done
> for them by default, and objects only need to supply their own rich
> comparison methods if they don't want the defaults.  For example, when
> comparing an int with another type, all the int rich comparison
> methods _do_ return NotImplemented:
>
> >>> f = 4
> >>> f.__eq__("abc")
> NotImplemented
>
> It's at a higher level that comparison logic says "OK, I gave both
> comparands a chance, and they both returned NotImplemented.  So one
> last chance (from object.c's do_richcompare())":
>
>     /* If neither object implements it, provide a sensible default
>        for == and !=, but raise an exception for ordering. */
>     switch (op) {
>     case Py_EQ:
>         res = (v == w) ? Py_True : Py_False;
>         break;
>     case Py_NE:
>         res = (v != w) ? Py_True : Py_False;
>         break;
>     default:
>         PyErr_Format(PyExc_TypeError,
>                      "'%s' not supported between instances of '%.100s'
> and '%.100s'",
>                      opstrings[op],
>                      v->ob_type->tp_name,
>                      w->ob_type->tp_name);
>         return NULL;
>     }
>
> Then the Py_EQ case of that delivers:
>
> >>> f == "abc"
> False
>
> and the Py_NE case:
>
> >>> f != "abc"
> True
>
> despite that (or because of that ;-) ):
>
> >>> f.__eq__("abc")
> NotImplemented
> >>> "abc".__eq__(f)
> NotImplemented
>
> Note that there's nothing special about builtin types here.  All types
> are treated alike.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190508/ac8b1267/attachment-0001.html>

From tjreedy at udel.edu  Wed May  8 15:47:18 2019
From: tjreedy at udel.edu (Terry Reedy)
Date: Wed, 8 May 2019 15:47:18 -0400
Subject: [Python-Dev] Redoing failed PR checks
In-Reply-To: <A45E903B-3479-4D05-96B3-EC2B40CF9614@trueblade.com>
References: <cad84e3d-fc70-b550-0d3b-10d0797facaf@hotpy.org>
 <A45E903B-3479-4D05-96B3-EC2B40CF9614@trueblade.com>
Message-ID: <qavbo9$4ssu$1@blaine.gmane.org>

On 5/8/2019 10:23 AM, Eric V. Smith wrote:
> I think you can close and reopen the PR. That?s what I?m trying on my blocked PR.

That works but reruns all the CI checks, including the ones already 
passed.  Some bots allow individual reruns, but it is not as clear as it 
should be.


-- 
Terry Jan Reedy



From vano at mail.mipt.ru  Wed May  8 16:15:02 2019
From: vano at mail.mipt.ru (Ivan Pozdeev)
Date: Wed, 8 May 2019 23:15:02 +0300
Subject: [Python-Dev] Redoing failed PR checks
In-Reply-To: <qavbo9$4ssu$1@blaine.gmane.org>
References: <cad84e3d-fc70-b550-0d3b-10d0797facaf@hotpy.org>
 <A45E903B-3479-4D05-96B3-EC2B40CF9614@trueblade.com>
 <qavbo9$4ssu$1@blaine.gmane.org>
Message-ID: <5fee6656-1d33-e478-1018-8ac23c4cc433@mail.mipt.ru>

On 08.05.2019 22:47, Terry Reedy wrote:
> On 5/8/2019 10:23 AM, Eric V. Smith wrote:
>> I think you can close and reopen the PR. That?s what I?m trying on my blocked PR.
>
> That works but reruns all the CI checks, including the ones already passed.? Some bots allow individual reruns, but it is not as clear as 
> it should be.
>
>
I think rerunning PR checks is intentionally blocked to prevent submitters from silently smuggling unreliable code in.

Whatever the case, you can make an empty commit with `git commit --allow-empty`
(credit goes to https://coderwall.com/p/vkdekq/git-commit-allow-empty).

This will rerun things, but all the failures will be visible in the PR.

-- 
Regards,
Ivan


From ericsnowcurrently at gmail.com  Wed May  8 18:19:05 2019
From: ericsnowcurrently at gmail.com (Eric Snow)
Date: Wed, 8 May 2019 18:19:05 -0400
Subject: [Python-Dev] My PyCon talk on the GIL, the C-API,
 and subinterpreters
Message-ID: <CALFfu7B+noSBucySnuWcP4Z=59Tzuf4Jy1MkONK4SL8s0JTXEg@mail.gmail.com>

I just wanted to share links to my talk about the above, which I gave a
week ago at PyCon.  Enjoy! :)

-eric

video:  https://youtu.be/7RlqbHCCVyc
slides:  https://bit.ly/2UMMJey
project:  https://github.com/ericsnowcurrently/multi-core-python
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190508/6860d733/attachment.html>

From benjamin at python.org  Wed May  8 22:23:17 2019
From: benjamin at python.org (Benjamin Peterson)
Date: Wed, 08 May 2019 22:23:17 -0400
Subject: [Python-Dev] Farewell, Python 3.4
In-Reply-To: <f8034796-9f54-c779-7697-83a86e583a13@hastings.org>
References: <f8034796-9f54-c779-7697-83a86e583a13@hastings.org>
Message-ID: <7bca5961-b8cd-42d8-8a00-1384e31de010@www.fastmail.com>

Thank you for your service!

On Wed, May 8, 2019, at 08:37, Larry Hastings wrote:
> 
> 
> It's with a note of sadness that I announce the final retirement of 
> Python 3.4. The final release was back in March, but I didn't get 
> around to actually closing and deleting the 3.4 branch until this 
> morning.
> 
> Python 3.4 introduced many features we all enjoy in modern Python--the 
> asyncio, ensurepip, and enum packages, just to name three. It's a 
> release I hope we all remember fondly.
> 
> My eternal thanks to all the members of the release team that worked on 
> Python 3.4:
> 
> > Georg Brandl
> 
> > Julien Palard
> 
> > Martin von L?wis
> 
> > Ned Deily
> 
> > Steve Dower
> 
> > Terry Reedy
> 
> > and all the engineers of the Python infrastructure team.
> 
> Special thanks to Benjamin Peterson and Ned Deily, who frequently 
> scurried around behind the scenes cleaning up the messes I cluelessly 
> left in my wake.
> 
> Having closed 3.4, I am now retired as Python 3.4 Release Manager. I 
> regret to inform all of you that you're still stuck with me as Python 
> 3.5 Release Manager until sometime next year.
> 
> 
> 
> My very best wishes,
> 
> 
> 
> */arry*
> 
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe: 
> https://mail.python.org/mailman/options/python-dev/benjamin%40python.org
>

From jake.tesler at gmail.com  Thu May  9 12:15:41 2019
From: jake.tesler at gmail.com (Jake Tesler)
Date: Thu, 9 May 2019 09:15:41 -0700
Subject: [Python-Dev] PR Review request
Message-ID: <CAK=F6gvdbz+NeHYkt4ZM4EuMJK7UYsmg6tJFJ1iCmowhbYgx-w@mail.gmail.com>

Hello Python Dev team!

I submitted a Bug+PR back in February and unfortunately, nobody has given
it a review yet. :/

I'm was hoping that someone could take a look and suggest changes (if
needed). I realize that there are a ton of PRs and things to review across
the board, but here's to hoping someone has a little time to take a look at
mine!

Links:
Bug: https://bugs.python.org/issue36084
PR: https://github.com/python/cpython/pull/11993

Thanks so much!
Cheers,
-Jake Tesler
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190509/e73056a8/attachment.html>

From encukou at gmail.com  Thu May  9 14:30:23 2019
From: encukou at gmail.com (Petr Viktorin)
Date: Thu, 9 May 2019 14:30:23 -0400
Subject: [Python-Dev] PEP 580/590 discussion
In-Reply-To: <CA+=+wqDmj99J-n6BKw0MB3ZCKJZ2edoXSsvjq7Ag8LTJjhJMNQ@mail.gmail.com>
References: <CADiSq7f7GRJjZmoLAxpN5hovMT5=M73aJUi14HHFDNG=hssV7w@mail.gmail.com>
 <6c8356e3-f9b2-c39e-63c4-17f146d326b7@hotpy.org>
 <CA+=+wqBsUKWHRqjhRFShmY77vaxDPTFaafWtOB8dnyXQSthiZw@mail.gmail.com>
 <15b8a3d7-00ed-a5eb-475c-a3adee671b5f@hotpy.org> <5C9FEF82.50207@UGent.be>
 <d28319ff-a8aa-f218-b8ed-1d489ff9e324@redhat.com>
 <421f8182-4bc8-b8cf-82d6-ca4a4fbd2013@hotpy.org>
 <50d675b4-839c-6502-ad1a-a33ea9330000@redhat.com>
 <d1acd3b6-9cc9-abcc-6ccd-5cfeb5b2b7d2@hotpy.org>
 <b0197d1b-afa5-9681-0783-ed932c8b0a58@redhat.com> <5CC1C765.1020608@UGent.be>
 <1309c111-359e-1af6-2655-a16ffaad2994@redhat.com>
 <CA+=+wqDmj99J-n6BKw0MB3ZCKJZ2edoXSsvjq7Ag8LTJjhJMNQ@mail.gmail.com>
Message-ID: <CA+=+wqDBmK22-uY4Br77Y-gHB4bZ140UZ=hz=32hkz1=W9j2MA@mail.gmail.com>

PEP 590 is on its way to be accepted, with some details still to be
discussed. I've rejected PEP 580 so we can focus on one place.

Here are things we discussed on GitHub but now seem to agree on:

* The vectorcall function's kwname argument can be NULL.
* Let's use `vectorcallfunc`, not `vectorcall`, and stop the bikeshedding.
* `tp_vectorcall_offset` can be `Py_ssize_t` (The discussions around
signedness and C standards and consistency are interesting, but
ultimately irrelevant here.)
* `PyCall_MakeTpCall` can be removed.
* `PyVectorcall_Function` (for getting the `vectorcallfunc` of an
object) can be an internal helper. External code should go through
`PyCall_Vectorcall` (whatever we name it).
* `PY_VECTORCALL_ARGUMENTS_OFFSET` is OK, bikeshedding over variants
like `PY_VECTORCALL_PREPEND` won't bring much benefit.

Anyone against, make your point now :)

The following have discussion PRs open:

* `PyCall_MakeVectorCall` name: https://github.com/python/peps/pull/1037
* Passing a dict to `PyObject_Vectorcall`:
https://github.com/python/peps/pull/1038
* Type of the kwnames argument (PyObject/PyTupleObject):
https://github.com/python/peps/pull/1039


The remaining points are:


### Making things private

For Python 3.8, the public API should be private, so the API can get
some contact with the real world. I'd especially like to be able to
learn from
Cython's experience using it.
That would mean:

* _PyObject_Vectorcall
* _PyCall_MakeVectorCall
* _PyVectorcall_NARGS
* _METH_VECTORCALL
* _Py_TPFLAGS_HAVE_VECTORCALL
* _Py_TPFLAGS_METHOD_DESCRIPTOR


### Can the kwnames tuple be empty?

Disallowing empty tuples means it's easier for the *callee* to detect
the case of no keyword arguments. Instead of:

    if (kwnames != NULL && PyTuple_GET_SIZE(kwnames))

you have:

    if (kwnames != NULL)

On the other hand, the *caller* would now be responsible for handling
the no-kwarg case specially.

Jeroen points out:
> The side of the caller (which should ensure not to send an empty tuple)
> is CPython and there the issue of people implementing the protocol wrongly
> doesn't arise.
> External C code is not expected to manually use tp_vectorcall_offset to make
> vectorcalls: it is expected to use an API like PyCall_Vectorcall() and that
> API will ensure to replace an empty tuple with NULL.
>
> I see it as an application of https://en.wikipedia.org/wiki/Robustness_principle
> (Be conservative in what you send, be liberal in what you accept):
> PyCall_Vectorcall should accept an empty tuple but it should not send an
> empty tuple to the vectorcall function.

But, if you apply the robustness principle to vectorcallfunc, it
should accept empty tuples.


### `METH_VECTORCALL` function type

Jeroen suggested changing this from:

    `PyObject *(*call) (PyObject *self, PyObject *const *args,
Py_ssize_t nargs, PyObject *kwname)`

to `vectorcallfunc`, i.e.:

    `PyObject *(*call) (PyObject *callable, Py_ssize_t n, PyObject
*const *args, PyObject *kwnames)`

Mark argues that this is a major change and prevents the interpreter
from sanity checking the return value of PyMethodDef defined
functions.
(Since the functions are defined by extension code, they need to be
sanity-checked, and this will be done by PyCFunction's vectorcall
adapter. Tools like Cython can bypass the check if needed.)

The underlying C function should not need to know how to extract
"self" from the function object, or how to handle the argument
offsetting.
Those should be implementation details.

I see the value in having METH_VECTORCALL equivalent to the existing
METH_FASTCALL|METH_KEYWORDS.
(Even though PEP 573 will need to add to the calling convention.)

From brett at python.org  Thu May  9 17:09:39 2019
From: brett at python.org (Brett Cannon)
Date: Thu, 9 May 2019 14:09:39 -0700
Subject: [Python-Dev] PEP 580/590 discussion
In-Reply-To: <CA+=+wqDBmK22-uY4Br77Y-gHB4bZ140UZ=hz=32hkz1=W9j2MA@mail.gmail.com>
References: <CADiSq7f7GRJjZmoLAxpN5hovMT5=M73aJUi14HHFDNG=hssV7w@mail.gmail.com>
 <6c8356e3-f9b2-c39e-63c4-17f146d326b7@hotpy.org>
 <CA+=+wqBsUKWHRqjhRFShmY77vaxDPTFaafWtOB8dnyXQSthiZw@mail.gmail.com>
 <15b8a3d7-00ed-a5eb-475c-a3adee671b5f@hotpy.org> <5C9FEF82.50207@UGent.be>
 <d28319ff-a8aa-f218-b8ed-1d489ff9e324@redhat.com>
 <421f8182-4bc8-b8cf-82d6-ca4a4fbd2013@hotpy.org>
 <50d675b4-839c-6502-ad1a-a33ea9330000@redhat.com>
 <d1acd3b6-9cc9-abcc-6ccd-5cfeb5b2b7d2@hotpy.org>
 <b0197d1b-afa5-9681-0783-ed932c8b0a58@redhat.com> <5CC1C765.1020608@UGent.be>
 <1309c111-359e-1af6-2655-a16ffaad2994@redhat.com>
 <CA+=+wqDmj99J-n6BKw0MB3ZCKJZ2edoXSsvjq7Ag8LTJjhJMNQ@mail.gmail.com>
 <CA+=+wqDBmK22-uY4Br77Y-gHB4bZ140UZ=hz=32hkz1=W9j2MA@mail.gmail.com>
Message-ID: <CAP1=2W6B32OpByRnsu8w+N2TGTY2xzyYaPZGfiT4iE+1gBxjYg@mail.gmail.com>

On Thu, May 9, 2019 at 11:31 AM Petr Viktorin <encukou at gmail.com> wrote:

> PEP 590 is on its way to be accepted, with some details still to be
> discussed. I've rejected PEP 580 so we can focus on one place.
>
> Here are things we discussed on GitHub but now seem to agree on:
>
> * The vectorcall function's kwname argument can be NULL.
> * Let's use `vectorcallfunc`, not `vectorcall`, and stop the bikeshedding.
> * `tp_vectorcall_offset` can be `Py_ssize_t` (The discussions around
> signedness and C standards and consistency are interesting, but
> ultimately irrelevant here.)
> * `PyCall_MakeTpCall` can be removed.
> * `PyVectorcall_Function` (for getting the `vectorcallfunc` of an
> object) can be an internal helper. External code should go through
> `PyCall_Vectorcall` (whatever we name it).
> * `PY_VECTORCALL_ARGUMENTS_OFFSET` is OK, bikeshedding over variants
> like `PY_VECTORCALL_PREPEND` won't bring much benefit.
>
> Anyone against, make your point now :)
>

Any reason the above are all "Vectorcall" and not "VectorCall"? You seem to
potentially have that capitalization for "PyCall_MakeVectorCall" as
mentioned below which seems to be asking for typos if there's going to be
two ways to do it. :)

-Brett


>
> The following have discussion PRs open:
>
> * `PyCall_MakeVectorCall` name: https://github.com/python/peps/pull/1037
> * Passing a dict to `PyObject_Vectorcall`:
> https://github.com/python/peps/pull/1038
> * Type of the kwnames argument (PyObject/PyTupleObject):
> https://github.com/python/peps/pull/1039
>
>
> The remaining points are:
>
>
> ### Making things private
>
> For Python 3.8, the public API should be private, so the API can get
> some contact with the real world. I'd especially like to be able to
> learn from
> Cython's experience using it.
> That would mean:
>
> * _PyObject_Vectorcall
> * _PyCall_MakeVectorCall
> * _PyVectorcall_NARGS
> * _METH_VECTORCALL
> * _Py_TPFLAGS_HAVE_VECTORCALL
> * _Py_TPFLAGS_METHOD_DESCRIPTOR
>
>
> ### Can the kwnames tuple be empty?
>
> Disallowing empty tuples means it's easier for the *callee* to detect
> the case of no keyword arguments. Instead of:
>
>     if (kwnames != NULL && PyTuple_GET_SIZE(kwnames))
>
> you have:
>
>     if (kwnames != NULL)
>
> On the other hand, the *caller* would now be responsible for handling
> the no-kwarg case specially.
>
> Jeroen points out:
> > The side of the caller (which should ensure not to send an empty tuple)
> > is CPython and there the issue of people implementing the protocol
> wrongly
> > doesn't arise.
> > External C code is not expected to manually use tp_vectorcall_offset to
> make
> > vectorcalls: it is expected to use an API like PyCall_Vectorcall() and
> that
> > API will ensure to replace an empty tuple with NULL.
> >
> > I see it as an application of
> https://en.wikipedia.org/wiki/Robustness_principle
> > (Be conservative in what you send, be liberal in what you accept):
> > PyCall_Vectorcall should accept an empty tuple but it should not send an
> > empty tuple to the vectorcall function.
>
> But, if you apply the robustness principle to vectorcallfunc, it
> should accept empty tuples.
>
>
> ### `METH_VECTORCALL` function type
>
> Jeroen suggested changing this from:
>
>     `PyObject *(*call) (PyObject *self, PyObject *const *args,
> Py_ssize_t nargs, PyObject *kwname)`
>
> to `vectorcallfunc`, i.e.:
>
>     `PyObject *(*call) (PyObject *callable, Py_ssize_t n, PyObject
> *const *args, PyObject *kwnames)`
>
> Mark argues that this is a major change and prevents the interpreter
> from sanity checking the return value of PyMethodDef defined
> functions.
> (Since the functions are defined by extension code, they need to be
> sanity-checked, and this will be done by PyCFunction's vectorcall
> adapter. Tools like Cython can bypass the check if needed.)
>
> The underlying C function should not need to know how to extract
> "self" from the function object, or how to handle the argument
> offsetting.
> Those should be implementation details.
>
> I see the value in having METH_VECTORCALL equivalent to the existing
> METH_FASTCALL|METH_KEYWORDS.
> (Even though PEP 573 will need to add to the calling convention.)
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/brett%40python.org
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190509/60b2e7ee/attachment.html>

From J.Demeyer at UGent.be  Thu May  9 17:14:02 2019
From: J.Demeyer at UGent.be (Jeroen Demeyer)
Date: Thu, 9 May 2019 23:14:02 +0200
Subject: [Python-Dev] PEP 580/590 discussion
In-Reply-To: <CA+=+wqDBmK22-uY4Br77Y-gHB4bZ140UZ=hz=32hkz1=W9j2MA@mail.gmail.com>
References: <CADiSq7f7GRJjZmoLAxpN5hovMT5=M73aJUi14HHFDNG=hssV7w@mail.gmail.com>
 <6c8356e3-f9b2-c39e-63c4-17f146d326b7@hotpy.org>
 <CA+=+wqBsUKWHRqjhRFShmY77vaxDPTFaafWtOB8dnyXQSthiZw@mail.gmail.com>
 <15b8a3d7-00ed-a5eb-475c-a3adee671b5f@hotpy.org> <5C9FEF82.50207@UGent.be>
 <d28319ff-a8aa-f218-b8ed-1d489ff9e324@redhat.com>
 <421f8182-4bc8-b8cf-82d6-ca4a4fbd2013@hotpy.org>
 <50d675b4-839c-6502-ad1a-a33ea9330000@redhat.com>
 <d1acd3b6-9cc9-abcc-6ccd-5cfeb5b2b7d2@hotpy.org>
 <b0197d1b-afa5-9681-0783-ed932c8b0a58@redhat.com> <5CC1C765.1020608@UGent.be>
 <1309c111-359e-1af6-2655-a16ffaad2994@redhat.com>
 <CA+=+wqDmj99J-n6BKw0MB3ZCKJZ2edoXSsvjq7Ag8LTJjhJMNQ@mail.gmail.com>
 <CA+=+wqDBmK22-uY4Br77Y-gHB4bZ140UZ=hz=32hkz1=W9j2MA@mail.gmail.com>
Message-ID: <5CD4981A.4010402@UGent.be>

On 2019-05-09 20:30, Petr Viktorin wrote:
> ### Making things private
>
> For Python 3.8, the public API should be private, so the API can get
> some contact with the real world. I'd especially like to be able to
> learn from
> Cython's experience using it.
> That would mean:
>
> * _PyObject_Vectorcall
> * _PyCall_MakeVectorCall
> * _PyVectorcall_NARGS
> * _METH_VECTORCALL
> * _Py_TPFLAGS_HAVE_VECTORCALL
> * _Py_TPFLAGS_METHOD_DESCRIPTOR

Do we really have to underscore the names? Would there be a way to mark 
this API as provisional and subject to change without changing the 
names? If it turns out that PEP 590 was perfect after all, then we're 
just breaking stuff in Python 3.9 (when removing the underscores) for no 
reason.

Alternatively, could we keep the underscored names as official API in 
Python 3.9?

From J.Demeyer at UGent.be  Thu May  9 17:17:06 2019
From: J.Demeyer at UGent.be (Jeroen Demeyer)
Date: Thu, 9 May 2019 23:17:06 +0200
Subject: [Python-Dev] PEP 580/590 discussion
In-Reply-To: <CAP1=2W6B32OpByRnsu8w+N2TGTY2xzyYaPZGfiT4iE+1gBxjYg@mail.gmail.com>
References: <CADiSq7f7GRJjZmoLAxpN5hovMT5=M73aJUi14HHFDNG=hssV7w@mail.gmail.com>
 <6c8356e3-f9b2-c39e-63c4-17f146d326b7@hotpy.org>
 <CA+=+wqBsUKWHRqjhRFShmY77vaxDPTFaafWtOB8dnyXQSthiZw@mail.gmail.com>
 <15b8a3d7-00ed-a5eb-475c-a3adee671b5f@hotpy.org> <5C9FEF82.50207@UGent.be>
 <d28319ff-a8aa-f218-b8ed-1d489ff9e324@redhat.com>
 <421f8182-4bc8-b8cf-82d6-ca4a4fbd2013@hotpy.org>
 <50d675b4-839c-6502-ad1a-a33ea9330000@redhat.com>
 <d1acd3b6-9cc9-abcc-6ccd-5cfeb5b2b7d2@hotpy.org>
 <b0197d1b-afa5-9681-0783-ed932c8b0a58@redhat.com> <5CC1C765.1020608@UGent.be>
 <1309c111-359e-1af6-2655-a16ffaad2994@redhat.com>
 <CA+=+wqDmj99J-n6BKw0MB3ZCKJZ2edoXSsvjq7Ag8LTJjhJMNQ@mail.gmail.com>
 <CA+=+wqDBmK22-uY4Br77Y-gHB4bZ140UZ=hz=32hkz1=W9j2MA@mail.gmail.com>
 <CAP1=2W6B32OpByRnsu8w+N2TGTY2xzyYaPZGfiT4iE+1gBxjYg@mail.gmail.com>
Message-ID: <5CD498D2.4030600@UGent.be>

On 2019-05-09 23:09, Brett Cannon wrote:
> Any reason the above are all "Vectorcall" and not "VectorCall"? You seem
> to potentially have that capitalization for "PyCall_MakeVectorCall" as
> mentioned below which seems to be asking for typos if there's going to
> be two ways to do it. :)

"PyCall_MakeVectorCall" is a typo for "PyVectorcall_Call" 
(https://github.com/python/peps/pull/1037)

Everything else uses "Vectorcall" or "VECTORCALL". In text, we use 
"vectorcall" without a space.

From J.Demeyer at UGent.be  Thu May  9 17:33:47 2019
From: J.Demeyer at UGent.be (Jeroen Demeyer)
Date: Thu, 9 May 2019 23:33:47 +0200
Subject: [Python-Dev] PEP 580/590 discussion
In-Reply-To: <CA+=+wqDBmK22-uY4Br77Y-gHB4bZ140UZ=hz=32hkz1=W9j2MA@mail.gmail.com>
References: <CADiSq7f7GRJjZmoLAxpN5hovMT5=M73aJUi14HHFDNG=hssV7w@mail.gmail.com>
 <6c8356e3-f9b2-c39e-63c4-17f146d326b7@hotpy.org>
 <CA+=+wqBsUKWHRqjhRFShmY77vaxDPTFaafWtOB8dnyXQSthiZw@mail.gmail.com>
 <15b8a3d7-00ed-a5eb-475c-a3adee671b5f@hotpy.org> <5C9FEF82.50207@UGent.be>
 <d28319ff-a8aa-f218-b8ed-1d489ff9e324@redhat.com>
 <421f8182-4bc8-b8cf-82d6-ca4a4fbd2013@hotpy.org>
 <50d675b4-839c-6502-ad1a-a33ea9330000@redhat.com>
 <d1acd3b6-9cc9-abcc-6ccd-5cfeb5b2b7d2@hotpy.org>
 <b0197d1b-afa5-9681-0783-ed932c8b0a58@redhat.com> <5CC1C765.1020608@UGent.be>
 <1309c111-359e-1af6-2655-a16ffaad2994@redhat.com>
 <CA+=+wqDmj99J-n6BKw0MB3ZCKJZ2edoXSsvjq7Ag8LTJjhJMNQ@mail.gmail.com>
 <CA+=+wqDBmK22-uY4Br77Y-gHB4bZ140UZ=hz=32hkz1=W9j2MA@mail.gmail.com>
Message-ID: <5CD49CBB.2040508@UGent.be>

On 2019-05-09 20:30, Petr Viktorin wrote:
> The underlying C function should not need to know how to extract
> "self" from the function object, or how to handle the argument
> offsetting.
> Those should be implementation details.

Maybe you misunderstood my proposal. I want to allow both for extra 
flexibility:

- METH_FASTCALL (possibly combined with METH_KEYWORDS) continues to work 
as before. If you don't want to care about the implementation details of 
vectorcall, this is the right thing to use.

- METH_VECTORCALL (using exactly the vectorcallfunc signature) is a new 
calling convention for applications that want the lowest possible 
overhead at the cost of being slightly harder to use.

Personally, I consider the discussion about who is supposed to check 
that a function returns NULL if and if an error occurred a tiny detail 
which shouldn't dictate the design. There are two solutions for this: 
either we move that check one level up and do it for all vectorcall 
functions. Or, we keep the existing checks in place but we don't do that 
check for METH_VECTORCALL (this is already more specialized anyway, so 
dropping that check doesn't hurt much). We could also decide to enable 
this check only for debug builds, especially if debug builds are going 
to be easier to use thank to Victor Stinner's work.

> I see the value in having METH_VECTORCALL equivalent to the existing
> METH_FASTCALL|METH_KEYWORDS.

But why invent a new name for that? METH_FASTCALL|METH_KEYWORDS already 
works. The alias METH_VECTORCALL could only make things more confusing 
(having two ways to specify exactly the same thing). Or am I missing 
something?


Jeroen.

From J.Demeyer at UGent.be  Thu May  9 17:54:14 2019
From: J.Demeyer at UGent.be (Jeroen Demeyer)
Date: Thu, 9 May 2019 23:54:14 +0200
Subject: [Python-Dev] PEP 580/590 discussion
In-Reply-To: <CA+=+wqDBmK22-uY4Br77Y-gHB4bZ140UZ=hz=32hkz1=W9j2MA@mail.gmail.com>
References: <CADiSq7f7GRJjZmoLAxpN5hovMT5=M73aJUi14HHFDNG=hssV7w@mail.gmail.com>
 <6c8356e3-f9b2-c39e-63c4-17f146d326b7@hotpy.org>
 <CA+=+wqBsUKWHRqjhRFShmY77vaxDPTFaafWtOB8dnyXQSthiZw@mail.gmail.com>
 <15b8a3d7-00ed-a5eb-475c-a3adee671b5f@hotpy.org> <5C9FEF82.50207@UGent.be>
 <d28319ff-a8aa-f218-b8ed-1d489ff9e324@redhat.com>
 <421f8182-4bc8-b8cf-82d6-ca4a4fbd2013@hotpy.org>
 <50d675b4-839c-6502-ad1a-a33ea9330000@redhat.com>
 <d1acd3b6-9cc9-abcc-6ccd-5cfeb5b2b7d2@hotpy.org>
 <b0197d1b-afa5-9681-0783-ed932c8b0a58@redhat.com> <5CC1C765.1020608@UGent.be>
 <1309c111-359e-1af6-2655-a16ffaad2994@redhat.com>
 <CA+=+wqDmj99J-n6BKw0MB3ZCKJZ2edoXSsvjq7Ag8LTJjhJMNQ@mail.gmail.com>
 <CA+=+wqDBmK22-uY4Br77Y-gHB4bZ140UZ=hz=32hkz1=W9j2MA@mail.gmail.com>
Message-ID: <5CD4A186.1010105@UGent.be>

On 2019-05-09 20:30, Petr Viktorin wrote:
> But, if you apply the robustness principle to vectorcallfunc, it
> should accept empty tuples.

Sure, if the callee wants to accept empty tuples anyway, it can do that. 
That's the robustness principle. But us *forcing* the callee to accept 
empty tuples is certainly not.

Basically my point is: with a little bit of effort in CPython we can 
make things simpler for all users of vectorcall. Why not do that? 
Seriously, what's the argument for *not* applying this change?


Jeroen.

From encukou at gmail.com  Thu May  9 18:07:06 2019
From: encukou at gmail.com (Petr Viktorin)
Date: Thu, 9 May 2019 18:07:06 -0400
Subject: [Python-Dev] PEP 580/590 discussion
In-Reply-To: <5CD49CBB.2040508@UGent.be>
References: <CADiSq7f7GRJjZmoLAxpN5hovMT5=M73aJUi14HHFDNG=hssV7w@mail.gmail.com>
 <6c8356e3-f9b2-c39e-63c4-17f146d326b7@hotpy.org>
 <CA+=+wqBsUKWHRqjhRFShmY77vaxDPTFaafWtOB8dnyXQSthiZw@mail.gmail.com>
 <15b8a3d7-00ed-a5eb-475c-a3adee671b5f@hotpy.org> <5C9FEF82.50207@UGent.be>
 <d28319ff-a8aa-f218-b8ed-1d489ff9e324@redhat.com>
 <421f8182-4bc8-b8cf-82d6-ca4a4fbd2013@hotpy.org>
 <50d675b4-839c-6502-ad1a-a33ea9330000@redhat.com>
 <d1acd3b6-9cc9-abcc-6ccd-5cfeb5b2b7d2@hotpy.org>
 <b0197d1b-afa5-9681-0783-ed932c8b0a58@redhat.com> <5CC1C765.1020608@UGent.be>
 <1309c111-359e-1af6-2655-a16ffaad2994@redhat.com>
 <CA+=+wqDmj99J-n6BKw0MB3ZCKJZ2edoXSsvjq7Ag8LTJjhJMNQ@mail.gmail.com>
 <CA+=+wqDBmK22-uY4Br77Y-gHB4bZ140UZ=hz=32hkz1=W9j2MA@mail.gmail.com>
 <5CD49CBB.2040508@UGent.be>
Message-ID: <cd6cce51-185e-f983-c209-f8028ecf8966@gmail.com>

On 5/9/19 5:33 PM, Jeroen Demeyer wrote:
> On 2019-05-09 20:30, Petr Viktorin wrote:
>> The underlying C function should not need to know how to extract
>> "self" from the function object, or how to handle the argument
>> offsetting.
>> Those should be implementation details.
> 
> Maybe you misunderstood my proposal. I want to allow both for extra 
> flexibility:
> 
> - METH_FASTCALL (possibly combined with METH_KEYWORDS) continues to work 
> as before. If you don't want to care about the implementation details of 
> vectorcall, this is the right thing to use.
> 
> - METH_VECTORCALL (using exactly the vectorcallfunc signature) is a new 
> calling convention for applications that want the lowest possible 
> overhead at the cost of being slightly harder to use.

Then we can, in the spirit of minimalism, not add METH_VECTORCALL at all.


> Personally, I consider the discussion about who is supposed to check 
> that a function returns NULL if and if an error occurred a tiny detail 
> which shouldn't dictate the design. There are two solutions for this: 
> either we move that check one level up and do it for all vectorcall 
> functions. Or, we keep the existing checks in place but we don't do that 
> check for METH_VECTORCALL (this is already more specialized anyway, so 
> dropping that check doesn't hurt much). We could also decide to enable 
> this check only for debug builds, especially if debug builds are going 
> to be easier to use thank to Victor Stinner's work.
> 
>> I see the value in having METH_VECTORCALL equivalent to the existing
>> METH_FASTCALL|METH_KEYWORDS.
> 
> But why invent a new name for that? METH_FASTCALL|METH_KEYWORDS already 
> works. The alias METH_VECTORCALL could only make things more confusing 
> (having two ways to specify exactly the same thing). Or am I missing 
> something?

METH_FASTCALL is currently not documented, and it should be renamed 
before it's documented. Names with "fast" or "new" generally don't age well.

From vstinner at redhat.com  Thu May  9 20:14:56 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Fri, 10 May 2019 02:14:56 +0200
Subject: [Python-Dev] Adding a tzidx cache to datetime
In-Reply-To: <ab658c54-71e3-f2eb-e94e-24ea671b7755@ganssle.io>
References: <ab658c54-71e3-f2eb-e94e-24ea671b7755@ganssle.io>
Message-ID: <CA+3bQGHTziD9zi3W6o_ZrO9BGtxpV6x8WEuDV_8EY-+Q9Lqvag@mail.gmail.com>

Hi Paul,

The change is basically an optimization. I'm uncomfortable to design
it "only" for dateutil. What if tomorrow someone has to store an
arbitrary Python object, rather than just an integer (in range [0;
254]), into a datetime for a different optimization?

Moreover, I dislike adding a *public* method for an *internal* cache.

Right now, it is not possible to create a weak reference to a
datetime. If we make it possible, it would be possible to have an
external cache implemented with weakref.WeakSet to clear old entries
when a datetime object is detroyed.

What do you think of adding a private "_cache" attribute which would
be an arbitrary Python object? (None by default)

Victor

Le mar. 7 mai 2019 ? 21:46, Paul Ganssle <paul at ganssle.io> a ?crit :
>
> Greetings all,
>
> I have one last feature request that I'd like added to datetime for Python 3.8, and this one I think could use some more discussion, the addition of a "time zone index cache" to the datetime object. The rationale is laid out in detail in bpo-35723. The general problem is that currently, every invocation of utcoffset, tzname and dst needs to do full, independent calculations of the time zone offsets, even for time zones where the mapping is guaranteed to be stable because datetimes are immutable. I have a proof of concept implementation: PR #11529.
>
> I'm envisioning that the `datetime` class will add a private `_tzidx` single-byte member (it seems that this does not increase the size of the datetime object, because it's just using an unused alignment byte). `datetime` will also add a `tzidx()` method, which will return `_tzidx` if it's been set and otherwise it will call `self.tzinfo.tzidx()`.  If `self.tzinfo.tzidx()` returns a number between 0 and 254 (inclusive), it sets `_tzidx` to this value. tzidx() then returns whatever self.tzinfo.tzidx() returned.
>
> The value of this is that as far as I can tell, nearly all non-trivial tzinfo implementations construct a list of possible offsets, and implement utcoffset(), tzname() and dst() by calculating an index into that list and returning it. There are almost always less than 255 distinct offsets. By adding this cache on the datetime, we're using a small amount of currently-unused memory to prevent unnecessary calculations about a given datetime. The feature is entirely opt-in, and has no downsides if it goes unused, and it makes it possible to write tzinfo implementations that are both lazy and as fast as the "eager calculation" mode that pytz uses (and that causes many problems for pytz's users).
>
> I have explored the idea of using an lru cache of some sort on the tzinfo object itself, but there are two problems with this:
>
> 1. Calculating the hash of a datetime calls .utcoffset(), which means that it is necessary to, at minimum, do a `replace` on the datetime (and constructing a new datetime is a pretty considerable speed hit)
>
> 2. It will be a much bigger memory cost, since my current proposal uses approximately zero additional memory (not sure if the alignment stuff is platform-dependent or something, but it doesn't use additional memory on my linux computer).
>
> I realize this proposal is somewhat difficult to wrap your head around, so if anyone would like to chat with me about it in person, I'll be at PyCon sprints until Thursday morning.
>
> Best,
> Paul
>
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe: https://mail.python.org/mailman/options/python-dev/vstinner%40redhat.com



-- 
Night gathers, and now my watch begins. It shall not end until my death.

From paul at ganssle.io  Thu May  9 20:58:58 2019
From: paul at ganssle.io (Paul Ganssle)
Date: Thu, 9 May 2019 20:58:58 -0400
Subject: [Python-Dev] Adding a tzidx cache to datetime
In-Reply-To: <CA+3bQGHTziD9zi3W6o_ZrO9BGtxpV6x8WEuDV_8EY-+Q9Lqvag@mail.gmail.com>
References: <ab658c54-71e3-f2eb-e94e-24ea671b7755@ganssle.io>
 <CA+3bQGHTziD9zi3W6o_ZrO9BGtxpV6x8WEuDV_8EY-+Q9Lqvag@mail.gmail.com>
Message-ID: <d8ad71a2-5322-8d28-8d4e-d9b5cb5a9439@ganssle.io>

This is only "only" for dateutil in the sense that no one other than
dateutil implements tzinfo with the interface provided. If dateutil were
/not/ already implemented with a list of offsets and their indexes, I
would still propose this, and just re-write dateutil to take advantage
of it. From a cursory glance at pendulum, it seems that they could take
advantage of it as well (though they use their own datetime subclass, so
they have always had the ability to add this).

> What do you think of adding a private "_cache" attribute which would
> be an arbitrary Python object? (None by default)

We cannot use a private attribute (other than to do the actual storage,
since the thing that gets stored is not directly accessible anyway and
is instead mediated by a layer that manages the cache) because this is a
feature explicitly being added for use by tzinfo, /not/ by datetime. If
it's private then it's not safe for implementations of tzinfo to
actually use it, which defeats the purpose.

Regarding the use of an arbitrary Python object: What I'm proposing is
that we offer a bit of the "free" storage space in the alignment bits to
tzinfo objects to use as a cache. In /most/ cases this will be very
useful to someone implementing a tzinfo, because there are really only
so many ways to accomplish this task, and most time zones are
expressible as a very short list of offset/name/dst combinations, plus
some rule for which applies when, which is why a small integer cache is
sufficient and more or less universal (i.e. not specific to dateutil's
implementation).

I will also note that in my design, it is still possible for `tzinfo` to
return something other than [0, 254], it's just that that information
will not be cached, so it won't get the benefit of any optimization, but
the same interface / implementation can be used.

In my test with gcc, adding an additional PyObject* to the end of the
PyDateTime_DateTime struct increased the size of the `datetime.datetime`
object from 64 to 72 bytes, whereas adding an `unsigned char` after the
`fold` leaves it unchanged. Given that the expansion to arbitrary Python
objects is speculative and doesn't have any particular use case, I would
prefer to leave the feature as is, and reconsider the possibility of
storing arbitrary Python objects on the datetime if there's some
compelling reason to do so (it would be a backwards-compatible change at
that point anyway).

On 5/9/19 8:14 PM, Victor Stinner wrote:
> Hi Paul,
>
> The change is basically an optimization. I'm uncomfortable to design
> it "only" for dateutil. What if tomorrow someone has to store an
> arbitrary Python object, rather than just an integer (in range [0;
> 254]), into a datetime for a different optimization?
>
> Moreover, I dislike adding a *public* method for an *internal* cache.
>
> Right now, it is not possible to create a weak reference to a
> datetime. If we make it possible, it would be possible to have an
> external cache implemented with weakref.WeakSet to clear old entries
> when a datetime object is detroyed.
>
> What do you think of adding a private "_cache" attribute which would
> be an arbitrary Python object? (None by default)
>
> Victor
>
> Le mar. 7 mai 2019 ? 21:46, Paul Ganssle <paul at ganssle.io> a ?crit :
>> Greetings all,
>>
>> I have one last feature request that I'd like added to datetime for Python 3.8, and this one I think could use some more discussion, the addition of a "time zone index cache" to the datetime object. The rationale is laid out in detail in bpo-35723. The general problem is that currently, every invocation of utcoffset, tzname and dst needs to do full, independent calculations of the time zone offsets, even for time zones where the mapping is guaranteed to be stable because datetimes are immutable. I have a proof of concept implementation: PR #11529.
>>
>> I'm envisioning that the `datetime` class will add a private `_tzidx` single-byte member (it seems that this does not increase the size of the datetime object, because it's just using an unused alignment byte). `datetime` will also add a `tzidx()` method, which will return `_tzidx` if it's been set and otherwise it will call `self.tzinfo.tzidx()`.  If `self.tzinfo.tzidx()` returns a number between 0 and 254 (inclusive), it sets `_tzidx` to this value. tzidx() then returns whatever self.tzinfo.tzidx() returned.
>>
>> The value of this is that as far as I can tell, nearly all non-trivial tzinfo implementations construct a list of possible offsets, and implement utcoffset(), tzname() and dst() by calculating an index into that list and returning it. There are almost always less than 255 distinct offsets. By adding this cache on the datetime, we're using a small amount of currently-unused memory to prevent unnecessary calculations about a given datetime. The feature is entirely opt-in, and has no downsides if it goes unused, and it makes it possible to write tzinfo implementations that are both lazy and as fast as the "eager calculation" mode that pytz uses (and that causes many problems for pytz's users).
>>
>> I have explored the idea of using an lru cache of some sort on the tzinfo object itself, but there are two problems with this:
>>
>> 1. Calculating the hash of a datetime calls .utcoffset(), which means that it is necessary to, at minimum, do a `replace` on the datetime (and constructing a new datetime is a pretty considerable speed hit)
>>
>> 2. It will be a much bigger memory cost, since my current proposal uses approximately zero additional memory (not sure if the alignment stuff is platform-dependent or something, but it doesn't use additional memory on my linux computer).
>>
>> I realize this proposal is somewhat difficult to wrap your head around, so if anyone would like to chat with me about it in person, I'll be at PyCon sprints until Thursday morning.
>>
>> Best,
>> Paul
>>
>> _______________________________________________
>> Python-Dev mailing list
>> Python-Dev at python.org
>> https://mail.python.org/mailman/listinfo/python-dev
>> Unsubscribe: https://mail.python.org/mailman/options/python-dev/vstinner%40redhat.com
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190509/fca75bb4/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: OpenPGP digital signature
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190509/fca75bb4/attachment.sig>

From vstinner at redhat.com  Thu May  9 21:01:41 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Fri, 10 May 2019 03:01:41 +0200
Subject: [Python-Dev] Redoing failed PR checks
In-Reply-To: <cad84e3d-fc70-b550-0d3b-10d0797facaf@hotpy.org>
References: <cad84e3d-fc70-b550-0d3b-10d0797facaf@hotpy.org>
Message-ID: <CA+3bQGFw4QOdcS-A5rGAr8FyRfBSJK8oBMSaO8W2f-zB5BTiYg@mail.gmail.com>

Hi,

Le mer. 8 mai 2019 ? 16:10, Mark Shannon <mark at hotpy.org> a ?crit :
> How do I redo a failed PR check?
> The appveyor failure for https://github.com/python/cpython/pull/13181
> appears to be spurious, but there is no obvious way to redo it.

First, please make sure that a test failure is known in the bug
tracker. Nobody here checked and no: it wasn't reported, whereas I
also saw this bug once last week! (but I was too busy to report it,
sorry!)

I reported the bug:
"test_asyncio: test_drain_raises() fails randomly on Windows"
https://bugs.python.org/issue36870

> BTW, this is not the first time I've seen a PR blocked by a spurious
> appveyor failure.

Please check if every single test failure is known in the bug tracker,
and if it's not the case: report it!

More info about Python CI:
https://pythondev.readthedocs.io/ci.html

I'm trying to fix all tests which fail randomly for 5 years now
(hopefully, with the help of other core devs like Pablo!). It's
getting better, but sometimes new flaky tests pop up.

Victor
-- 
Night gathers, and now my watch begins. It shall not end until my death.

From vstinner at redhat.com  Thu May  9 21:04:46 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Fri, 10 May 2019 03:04:46 +0200
Subject: [Python-Dev] Please merge : bpo-34848
In-Reply-To: <5CCC6107.10900@UGent.be>
References: <CAEaN0UYdbVxQGidEWibG+mS=AjosZ22oruRDfz2vu9w=7qT+CQ@mail.gmail.com>
 <CA+3bQGE4_3N2pC=X2raov1ZoJ2KRkAj6aUeea4RhvSSHLzKC=g@mail.gmail.com>
 <5CCC6107.10900@UGent.be>
Message-ID: <CA+3bQGFO3j9c_n7s12wCAo9hzz+MuGUwv2OvYSiHULp9Ni8tBw@mail.gmail.com>

Le ven. 3 mai 2019 ? 17:47, Jeroen Demeyer <J.Demeyer at ugent.be> a ?crit :
> On 2019-05-03 14:24, Victor Stinner wrote:
> > Hi Srinivas,
> >
> > I merged your obvious doc fix, thanks.
>
> Can you please do the same for
>
> https://github.com/python/cpython/pull/12784

This PR is modying critical change. I don't have the bandwidth right
now to review it.

Victor

From vstinner at redhat.com  Thu May  9 21:05:30 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Fri, 10 May 2019 03:05:30 +0200
Subject: [Python-Dev] Please merge : bpo-34848
In-Reply-To: <5CCC6107.10900@UGent.be>
References: <CAEaN0UYdbVxQGidEWibG+mS=AjosZ22oruRDfz2vu9w=7qT+CQ@mail.gmail.com>
 <CA+3bQGE4_3N2pC=X2raov1ZoJ2KRkAj6aUeea4RhvSSHLzKC=g@mail.gmail.com>
 <5CCC6107.10900@UGent.be>
Message-ID: <CA+3bQGEiapgTAu_d1NGk8M4k5-FbUsJ9v6Wjbvnmk3xDtu_2-w@mail.gmail.com>

Le ven. 3 mai 2019 ? 17:47, Jeroen Demeyer <J.Demeyer at ugent.be> a ?crit :
>
> On 2019-05-03 14:24, Victor Stinner wrote:
> > Hi Srinivas,
> >
> > I merged your obvious doc fix, thanks.
>
> Can you please do the same for
> https://github.com/python/cpython/pull/12784

This PR is modying critical code (signal). I don't have the bandwidth
right now to review it.

Victor
-- 
Night gathers, and now my watch begins. It shall not end until my death.

From mal at egenix.com  Fri May 10 03:18:43 2019
From: mal at egenix.com (M.-A. Lemburg)
Date: Fri, 10 May 2019 09:18:43 +0200
Subject: [Python-Dev] Adding a tzidx cache to datetime
In-Reply-To: <d8ad71a2-5322-8d28-8d4e-d9b5cb5a9439@ganssle.io>
References: <ab658c54-71e3-f2eb-e94e-24ea671b7755@ganssle.io>
 <CA+3bQGHTziD9zi3W6o_ZrO9BGtxpV6x8WEuDV_8EY-+Q9Lqvag@mail.gmail.com>
 <d8ad71a2-5322-8d28-8d4e-d9b5cb5a9439@ganssle.io>
Message-ID: <619825e1-be2e-b8e7-6eef-07921baebc7f@egenix.com>

On 10.05.2019 02:58, Paul Ganssle wrote:
> This is only "only" for dateutil in the sense that no one other than
> dateutil implements tzinfo with the interface provided. If dateutil were
> /not/ already implemented with a list of offsets and their indexes, I
> would still propose this, and just re-write dateutil to take advantage
> of it. From a cursory glance at pendulum, it seems that they could take
> advantage of it as well (though they use their own datetime subclass, so
> they have always had the ability to add this).
> 
>> What do you think of adding a private "_cache" attribute which would
>> be an arbitrary Python object? (None by default)
> 
> We cannot use a private attribute (other than to do the actual storage,
> since the thing that gets stored is not directly accessible anyway and
> is instead mediated by a layer that manages the cache) because this is a
> feature explicitly being added for use by tzinfo, /not/ by datetime. If
> it's private then it's not safe for implementations of tzinfo to
> actually use it, which defeats the purpose.
> 
> Regarding the use of an arbitrary Python object: What I'm proposing is
> that we offer a bit of the "free" storage space in the alignment bits to
> tzinfo objects to use as a cache. In /most/ cases this will be very
> useful to someone implementing a tzinfo, because there are really only
> so many ways to accomplish this task, and most time zones are
> expressible as a very short list of offset/name/dst combinations, plus
> some rule for which applies when, which is why a small integer cache is
> sufficient and more or less universal (i.e. not specific to dateutil's
> implementation).
> 
> I will also note that in my design, it is still possible for `tzinfo` to
> return something other than [0, 254], it's just that that information
> will not be cached, so it won't get the benefit of any optimization, but
> the same interface / implementation can be used.
> 
> In my test with gcc, adding an additional PyObject* to the end of the
> PyDateTime_DateTime struct increased the size of the `datetime.datetime`
> object from 64 to 72 bytes, whereas adding an `unsigned char` after the
> `fold` leaves it unchanged. Given that the expansion to arbitrary Python
> objects is speculative and doesn't have any particular use case, I would
> prefer to leave the feature as is, and reconsider the possibility of
> storing arbitrary Python objects on the datetime if there's some
> compelling reason to do so (it would be a backwards-compatible change at
> that point anyway).

Given that many datetime objects in practice don't use timezones
(e.g. in large data stores you typically use UTC and naive datetime
objects), I think that making the object itself larger to accommodate
for a cache, which will only be used a smaller percentage of the use
cases, isn't warranted. Going from 64 bytes to 72 bytes also sounds
like this could have negative effects on cache lines.

If you need a per object cache, you can either use weakref
objects or maintain a separate dictionary in dateutil or other
timezone helpers which indexes objects by id(obj).

That said, if you only add a byte field which doesn't make the object
larger in practice (you merely use space that alignments would
use anyway), this shouldn't be a problem. The use of that field
should be documented, though, so that other implementations can
use/provide it as well.

Thanks,
-- 
Marc-Andre Lemburg
eGenix.com

Professional Python Services directly from the Experts (#1, May 10 2019)
>>> Python Projects, Coaching and Consulting ...  http://www.egenix.com/
>>> Python Database Interfaces ...           http://products.egenix.com/
>>> Plone/Zope Database Interfaces ...           http://zope.egenix.com/
________________________________________________________________________

::: We implement business ideas - efficiently in both time and costs :::

   eGenix.com Software, Skills and Services GmbH  Pastor-Loeh-Str.48
    D-40764 Langenfeld, Germany. CEO Dipl.-Math. Marc-Andre Lemburg
           Registered at Amtsgericht Duesseldorf: HRB 46611
               http://www.egenix.com/company/contact/
                      http://www.malemburg.com/


> On 5/9/19 8:14 PM, Victor Stinner wrote:
>> Hi Paul,
>>
>> The change is basically an optimization. I'm uncomfortable to design
>> it "only" for dateutil. What if tomorrow someone has to store an
>> arbitrary Python object, rather than just an integer (in range [0;
>> 254]), into a datetime for a different optimization?
>>
>> Moreover, I dislike adding a *public* method for an *internal* cache.
>>
>> Right now, it is not possible to create a weak reference to a
>> datetime. If we make it possible, it would be possible to have an
>> external cache implemented with weakref.WeakSet to clear old entries
>> when a datetime object is detroyed.
>>
>> What do you think of adding a private "_cache" attribute which would
>> be an arbitrary Python object? (None by default)
>>
>> Victor
>>
>> Le mar. 7 mai 2019 ? 21:46, Paul Ganssle <paul at ganssle.io> a ?crit :
>>> Greetings all,
>>>
>>> I have one last feature request that I'd like added to datetime for Python 3.8, and this one I think could use some more discussion, the addition of a "time zone index cache" to the datetime object. The rationale is laid out in detail in bpo-35723. The general problem is that currently, every invocation of utcoffset, tzname and dst needs to do full, independent calculations of the time zone offsets, even for time zones where the mapping is guaranteed to be stable because datetimes are immutable. I have a proof of concept implementation: PR #11529.
>>>
>>> I'm envisioning that the `datetime` class will add a private `_tzidx` single-byte member (it seems that this does not increase the size of the datetime object, because it's just using an unused alignment byte). `datetime` will also add a `tzidx()` method, which will return `_tzidx` if it's been set and otherwise it will call `self.tzinfo.tzidx()`.  If `self.tzinfo.tzidx()` returns a number between 0 and 254 (inclusive), it sets `_tzidx` to this value. tzidx() then returns whatever self.tzinfo.tzidx() returned.
>>>
>>> The value of this is that as far as I can tell, nearly all non-trivial tzinfo implementations construct a list of possible offsets, and implement utcoffset(), tzname() and dst() by calculating an index into that list and returning it. There are almost always less than 255 distinct offsets. By adding this cache on the datetime, we're using a small amount of currently-unused memory to prevent unnecessary calculations about a given datetime. The feature is entirely opt-in, and has no downsides if it goes unused, and it makes it possible to write tzinfo implementations that are both lazy and as fast as the "eager calculation" mode that pytz uses (and that causes many problems for pytz's users).
>>>
>>> I have explored the idea of using an lru cache of some sort on the tzinfo object itself, but there are two problems with this:
>>>
>>> 1. Calculating the hash of a datetime calls .utcoffset(), which means that it is necessary to, at minimum, do a `replace` on the datetime (and constructing a new datetime is a pretty considerable speed hit)
>>>
>>> 2. It will be a much bigger memory cost, since my current proposal uses approximately zero additional memory (not sure if the alignment stuff is platform-dependent or something, but it doesn't use additional memory on my linux computer).
>>>
>>> I realize this proposal is somewhat difficult to wrap your head around, so if anyone would like to chat with me about it in person, I'll be at PyCon sprints until Thursday morning.
>>>
>>> Best,
>>> Paul
>>>
>>> _______________________________________________
>>> Python-Dev mailing list
>>> Python-Dev at python.org
>>> https://mail.python.org/mailman/listinfo/python-dev
>>> Unsubscribe: https://mail.python.org/mailman/options/python-dev/vstinner%40redhat.com
>>
> 
> 
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe: https://mail.python.org/mailman/options/python-dev/mal%40egenix.com
> 


From stefan_ml at behnel.de  Fri May 10 03:57:06 2019
From: stefan_ml at behnel.de (Stefan Behnel)
Date: Fri, 10 May 2019 09:57:06 +0200
Subject: [Python-Dev] PEP 580/590 discussion
In-Reply-To: <cd6cce51-185e-f983-c209-f8028ecf8966@gmail.com>
References: <CADiSq7f7GRJjZmoLAxpN5hovMT5=M73aJUi14HHFDNG=hssV7w@mail.gmail.com>
 <6c8356e3-f9b2-c39e-63c4-17f146d326b7@hotpy.org>
 <CA+=+wqBsUKWHRqjhRFShmY77vaxDPTFaafWtOB8dnyXQSthiZw@mail.gmail.com>
 <15b8a3d7-00ed-a5eb-475c-a3adee671b5f@hotpy.org> <5C9FEF82.50207@UGent.be>
 <d28319ff-a8aa-f218-b8ed-1d489ff9e324@redhat.com>
 <421f8182-4bc8-b8cf-82d6-ca4a4fbd2013@hotpy.org>
 <50d675b4-839c-6502-ad1a-a33ea9330000@redhat.com>
 <d1acd3b6-9cc9-abcc-6ccd-5cfeb5b2b7d2@hotpy.org>
 <b0197d1b-afa5-9681-0783-ed932c8b0a58@redhat.com> <5CC1C765.1020608@UGent.be>
 <1309c111-359e-1af6-2655-a16ffaad2994@redhat.com>
 <CA+=+wqDmj99J-n6BKw0MB3ZCKJZ2edoXSsvjq7Ag8LTJjhJMNQ@mail.gmail.com>
 <CA+=+wqDBmK22-uY4Br77Y-gHB4bZ140UZ=hz=32hkz1=W9j2MA@mail.gmail.com>
 <5CD49CBB.2040508@UGent.be> <cd6cce51-185e-f983-c209-f8028ecf8966@gmail.com>
Message-ID: <qb3asi$4qm2$1@blaine.gmane.org>

Petr Viktorin schrieb am 10.05.19 um 00:07:
> On 5/9/19 5:33 PM, Jeroen Demeyer wrote:
>> Maybe you misunderstood my proposal. I want to allow both for extra
>> flexibility:
>>
>> - METH_FASTCALL (possibly combined with METH_KEYWORDS) continues to work
>> as before. If you don't want to care about the implementation details of
>> vectorcall, this is the right thing to use.
>>
>> - METH_VECTORCALL (using exactly the vectorcallfunc signature) is a new
>> calling convention for applications that want the lowest possible
>> overhead at the cost of being slightly harder to use.
> 
> Then we can, in the spirit of minimalism, not add METH_VECTORCALL at all.
> [...]
> METH_FASTCALL is currently not documented, and it should be renamed before
> it's documented. Names with "fast" or "new" generally don't age well.

I personally don't see an advantage in having both, apart from helping code
that wants to be fast also on Py3.7, for example. It unnecessarily
complicates the CPython implementation and C-API.

I'd be ok with removing FASTCALL in favour of VECTORCALL. That's more code
to generate for Cython in order to adapt to Py<3.6, Py3.6, Py3.7 and then
Py>=3.[89], but well, seeing the heap of code that we *already* generate,
it's not going to hurt our users much.

It would, however, be (selfishly) helpful if FASTCALL could still go
through a deprecation period, because we'd like to keep the current Cython
0.29.x release series compatible with Python 3.8, and I'd like to avoid
adding support for VECTORCALL and compiling out FASTCALL in a point
release. Removing it in Py3.9 seems ok to me.

Stefan


From J.Demeyer at UGent.be  Fri May 10 04:20:20 2019
From: J.Demeyer at UGent.be (Jeroen Demeyer)
Date: Fri, 10 May 2019 10:20:20 +0200
Subject: [Python-Dev] PEP 580/590 discussion
In-Reply-To: <cd6cce51-185e-f983-c209-f8028ecf8966@gmail.com>
References: <CADiSq7f7GRJjZmoLAxpN5hovMT5=M73aJUi14HHFDNG=hssV7w@mail.gmail.com>
 <6c8356e3-f9b2-c39e-63c4-17f146d326b7@hotpy.org>
 <CA+=+wqBsUKWHRqjhRFShmY77vaxDPTFaafWtOB8dnyXQSthiZw@mail.gmail.com>
 <15b8a3d7-00ed-a5eb-475c-a3adee671b5f@hotpy.org> <5C9FEF82.50207@UGent.be>
 <d28319ff-a8aa-f218-b8ed-1d489ff9e324@redhat.com>
 <421f8182-4bc8-b8cf-82d6-ca4a4fbd2013@hotpy.org>
 <50d675b4-839c-6502-ad1a-a33ea9330000@redhat.com>
 <d1acd3b6-9cc9-abcc-6ccd-5cfeb5b2b7d2@hotpy.org>
 <b0197d1b-afa5-9681-0783-ed932c8b0a58@redhat.com> <5CC1C765.1020608@UGent.be>
 <1309c111-359e-1af6-2655-a16ffaad2994@redhat.com>
 <CA+=+wqDmj99J-n6BKw0MB3ZCKJZ2edoXSsvjq7Ag8LTJjhJMNQ@mail.gmail.com>
 <CA+=+wqDBmK22-uY4Br77Y-gHB4bZ140UZ=hz=32hkz1=W9j2MA@mail.gmail.com>
 <5CD49CBB.2040508@UGent.be> <cd6cce51-185e-f983-c209-f8028ecf8966@gmail.com>
Message-ID: <5CD53444.1050301@UGent.be>

On 2019-05-10 00:07, Petr Viktorin wrote:
> METH_FASTCALL is currently not documented, and it should be renamed
> before it's documented. Names with "fast" or "new" generally don't age
> well.

Just to make sure that we're understanding correctly, is your proposal 
to do the following:
- remove the name METH_FASTCALL
- remove the calling convention METH_FASTCALL without METH_KEYWORDS
- rename METH_FASTCALL|METH_KEYWORDS -> METH_VECTORCALL

From nad at python.org  Fri May 10 13:52:08 2019
From: nad at python.org (Ned Deily)
Date: Fri, 10 May 2019 13:52:08 -0400
Subject: [Python-Dev] Ignore spurious 3.4 checkin messages!
Message-ID: <B0B5EDA3-162A-4DE9-A81C-815CC28DF760@python.org>

Eek!  I was just doing a bit of branch cleanup in the cpython repo and managed to trigger a bunch (30-ish) of duplicate checkin messages to bugs.python.org for old commits.  I will remove them from b.p.o.  Please ignore any 3.4 spam email.  Sorry!

--
  Ned Deily
  nad at python.org -- []


From status at bugs.python.org  Fri May 10 14:08:20 2019
From: status at bugs.python.org (Python tracker)
Date: Fri, 10 May 2019 18:08:20 +0000 (UTC)
Subject: [Python-Dev] Summary of Python tracker Issues
Message-ID: <20190510180820.4C70E52B200@bugs.ams1.psf.io>


ACTIVITY SUMMARY (2019-05-03 - 2019-05-10)
Python tracker at https://bugs.python.org/

To view or respond to any of the issues listed below, click on the issue.
Do NOT respond to this message.

Issues counts and deltas:
  open    7084 ( +3)
  closed 41542 (+88)
  total  48626 (+91)

Open issues with patches: 2851 


Issues opened (65)
==================

#15987: Provide a way to compare AST nodes for equality recursively
https://bugs.python.org/issue15987  reopened by vstinner

#36785: Implement PEP 574
https://bugs.python.org/issue36785  opened by pitrou

#36786: "make install" should run compileall in parallel
https://bugs.python.org/issue36786  opened by pitrou

#36788: Add clamp() function to builtins
https://bugs.python.org/issue36788  opened by TheComet

#36789: Unicode HOWTO incorrectly states that UTF-8 contains no zero b
https://bugs.python.org/issue36789  opened by mbiggs

#36790: test_asyncio fails with application verifier!
https://bugs.python.org/issue36790  opened by Alexander Riccio

#36791: sum() relies on C signed overflow behaviour
https://bugs.python.org/issue36791  opened by serhiy.storchaka

#36792: [Windows] time: crash on formatting time with de_DE locale
https://bugs.python.org/issue36792  opened by CharlieClark

#36793: Do not define unneeded __str__ equal to __repr__
https://bugs.python.org/issue36793  opened by serhiy.storchaka

#36794: asyncio.Lock documentation in Py3.8 lacks parts presented in d
https://bugs.python.org/issue36794  opened by germn

#36795: "make venv" failed in Docs
https://bugs.python.org/issue36795  opened by pitrou

#36796: Error handling cleanup in _testcapimodule.c
https://bugs.python.org/issue36796  opened by ZackerySpytz

#36797: Cull more oudated distutils information
https://bugs.python.org/issue36797  opened by ncoghlan

#36799: Typo in ctypes documentation
https://bugs.python.org/issue36799  opened by rrt

#36803: Getting a lot of runtime misaligned address error while buildi
https://bugs.python.org/issue36803  opened by dibya ranjan mishra

#36804: Python for Windows installer Repair option does not repair PIP
https://bugs.python.org/issue36804  opened by Mark Green

#36805: Don't close subprocess stream if it's stdin is closed
https://bugs.python.org/issue36805  opened by asvetlov

#36807: IDLE doesn't call os.fsync()
https://bugs.python.org/issue36807  opened by gvanrossum

#36809: Crash for test test_importlib
https://bugs.python.org/issue36809  opened by furzoom

#36810: Recursive type annotations do not work in documentation tests
https://bugs.python.org/issue36810  opened by lovasoa

#36813: QueueListener not calling task_done upon termination
https://bugs.python.org/issue36813  opened by bar.harel

#36816: self-signed.pythontest.net TLS certificate key is too weak
https://bugs.python.org/issue36816  opened by gregory.p.smith

#36818: Add PyInterpreterState.runtime.
https://bugs.python.org/issue36818  opened by eric.snow

#36819: Crash during encoding using UTF-16/32 and custom error handler
https://bugs.python.org/issue36819  opened by atalaba

#36820: Captured exceptions are keeping user objects alive unnecessari
https://bugs.python.org/issue36820  opened by mariocj89

#36821: Termios module largely untested
https://bugs.python.org/issue36821  opened by anthonypjshaw

#36822: Minor grammatical fix in glossary.rst
https://bugs.python.org/issue36822  opened by CuriousLearner

#36823: shutil.copytree copies directories and files but fails with th
https://bugs.python.org/issue36823  opened by rbavery

#36824: Refactor str tests to reflect that str and unicode are merged 
https://bugs.python.org/issue36824  opened by dfortunov

#36825: Make TestCase aware of the command line arguments given to Tes
https://bugs.python.org/issue36825  opened by remi.lapeyre

#36826: ast_unparser.c doesn't handle := expressions
https://bugs.python.org/issue36826  opened by eric.smith

#36827: Overriding __new__ method with itself changes behaviour of the
https://bugs.python.org/issue36827  opened by alexey-muranov

#36829: CLI option to make PyErr_WriteUnraisable abort the current pro
https://bugs.python.org/issue36829  opened by graingert

#36833: Add tests for Datetime C API Macros
https://bugs.python.org/issue36833  opened by p-ganssle

#36834: mock.patch.object does not persist __module__ name for functio
https://bugs.python.org/issue36834  opened by spark

#36837: Make il8n tools available from `python -m`
https://bugs.python.org/issue36837  opened by bbkane

#36839: Support the buffer protocol in code objects
https://bugs.python.org/issue36839  opened by dino.viehland

#36840: Add stream.abort() async method
https://bugs.python.org/issue36840  opened by asvetlov

#36841: Supporting customization of float encoding in JSON
https://bugs.python.org/issue36841  opened by mitar

#36842: Implement PEP 578
https://bugs.python.org/issue36842  opened by steve.dower

#36843: AIX build fails with failure to get random numbers
https://bugs.python.org/issue36843  opened by Robert Boehne

#36845: ipaddres.IPv4Network and ipaddress.IPv6Network tuple construct
https://bugs.python.org/issue36845  opened by niconorsk

#36848: autospec fails with AttributeError when mocked class has __sig
https://bugs.python.org/issue36848  opened by xtreak

#36849: Native libcurses on HP-UX not properly detected
https://bugs.python.org/issue36849  opened by michael-o

#36850: shutil.copy2 fails with even with source network filesystem no
https://bugs.python.org/issue36850  opened by hans-meine

#36852: Python3.7.2 fails to cross-compile (yocto / openembedded) when
https://bugs.python.org/issue36852  opened by mschoepf

#36853: inconsistencies in docs builds (Sphinx 2)
https://bugs.python.org/issue36853  opened by jaraco

#36854: GC operates out of global runtime state.
https://bugs.python.org/issue36854  opened by eric.snow

#36855: update tests relying on a copy of a TLS certificate (pem) to s
https://bugs.python.org/issue36855  opened by gregory.p.smith

#36856: faulthandler._stack_overflow doesn't work on x86-linux with KP
https://bugs.python.org/issue36856  opened by xry111

#36858: f-string '=' debugging output needs to be documented
https://bugs.python.org/issue36858  opened by eric.smith

#36859: sqlite3 dml statement detection does not account for CTEs
https://bugs.python.org/issue36859  opened by coleifer

#36860: Inconsistent/Undocumented behavior with pathlib resolve and ab
https://bugs.python.org/issue36860  opened by alexjacobson95

#36862: Add Visual Studio 2019 support to PCBuild/env.bat
https://bugs.python.org/issue36862  opened by anthonypjshaw

#36863: argparse doesn't like options in the middle of arguments
https://bugs.python.org/issue36863  opened by rhubarbdog x

#36865: FileInput does not allow 'rt' mode, but all its existing deleg
https://bugs.python.org/issue36865  opened by natgaertner

#36866: Certificate verification errors in urllib.request become URLEr
https://bugs.python.org/issue36866  opened by sivel

#36867: Make semaphore_tracker track other system resources
https://bugs.python.org/issue36867  opened by pierreglaser

#36868: New behavior of OpenSSL hostname verification not exposed, inc
https://bugs.python.org/issue36868  opened by josh.r

#36869: Avoid warning of unused variables
https://bugs.python.org/issue36869  opened by eamanu

#36870: test_asyncio: test_drain_raises() fails randomly on Windows
https://bugs.python.org/issue36870  opened by vstinner

#36871: Misleading error from unittest.mock's assert_has_calls
https://bugs.python.org/issue36871  opened by gregory.p.smith

#36873: http.server: Document explicitly that symbolic links are follo
https://bugs.python.org/issue36873  opened by vstinner

#36874: Support CDATA by xml.etree.(c)ElementTree
https://bugs.python.org/issue36874  opened by Pierre van de Laar

#36875: argparse does not ship with translations
https://bugs.python.org/issue36875  opened by carmenbianca



Most recent 15 issues with no replies (15)
==========================================

#36873: http.server: Document explicitly that symbolic links are follo
https://bugs.python.org/issue36873

#36870: test_asyncio: test_drain_raises() fails randomly on Windows
https://bugs.python.org/issue36870

#36868: New behavior of OpenSSL hostname verification not exposed, inc
https://bugs.python.org/issue36868

#36867: Make semaphore_tracker track other system resources
https://bugs.python.org/issue36867

#36866: Certificate verification errors in urllib.request become URLEr
https://bugs.python.org/issue36866

#36865: FileInput does not allow 'rt' mode, but all its existing deleg
https://bugs.python.org/issue36865

#36862: Add Visual Studio 2019 support to PCBuild/env.bat
https://bugs.python.org/issue36862

#36855: update tests relying on a copy of a TLS certificate (pem) to s
https://bugs.python.org/issue36855

#36854: GC operates out of global runtime state.
https://bugs.python.org/issue36854

#36850: shutil.copy2 fails with even with source network filesystem no
https://bugs.python.org/issue36850

#36849: Native libcurses on HP-UX not properly detected
https://bugs.python.org/issue36849

#36842: Implement PEP 578
https://bugs.python.org/issue36842

#36839: Support the buffer protocol in code objects
https://bugs.python.org/issue36839

#36833: Add tests for Datetime C API Macros
https://bugs.python.org/issue36833

#36826: ast_unparser.c doesn't handle := expressions
https://bugs.python.org/issue36826



Most recent 15 issues waiting for review (15)
=============================================

#36867: Make semaphore_tracker track other system resources
https://bugs.python.org/issue36867

#36865: FileInput does not allow 'rt' mode, but all its existing deleg
https://bugs.python.org/issue36865

#36862: Add Visual Studio 2019 support to PCBuild/env.bat
https://bugs.python.org/issue36862

#36859: sqlite3 dml statement detection does not account for CTEs
https://bugs.python.org/issue36859

#36856: faulthandler._stack_overflow doesn't work on x86-linux with KP
https://bugs.python.org/issue36856

#36854: GC operates out of global runtime state.
https://bugs.python.org/issue36854

#36852: Python3.7.2 fails to cross-compile (yocto / openembedded) when
https://bugs.python.org/issue36852

#36850: shutil.copy2 fails with even with source network filesystem no
https://bugs.python.org/issue36850

#36849: Native libcurses on HP-UX not properly detected
https://bugs.python.org/issue36849

#36842: Implement PEP 578
https://bugs.python.org/issue36842

#36841: Supporting customization of float encoding in JSON
https://bugs.python.org/issue36841

#36839: Support the buffer protocol in code objects
https://bugs.python.org/issue36839

#36829: CLI option to make PyErr_WriteUnraisable abort the current pro
https://bugs.python.org/issue36829

#36825: Make TestCase aware of the command line arguments given to Tes
https://bugs.python.org/issue36825

#36824: Refactor str tests to reflect that str and unicode are merged 
https://bugs.python.org/issue36824



Top 10 most discussed issues (10)
=================================

#36792: [Windows] time: crash on formatting time with de_DE locale
https://bugs.python.org/issue36792  31 msgs

#27639: UserList.__getitem__ doesn't account for slices
https://bugs.python.org/issue27639  12 msgs

#36829: CLI option to make PyErr_WriteUnraisable abort the current pro
https://bugs.python.org/issue36829  11 msgs

#36843: AIX build fails with failure to get random numbers
https://bugs.python.org/issue36843  11 msgs

#36807: IDLE doesn't call os.fsync()
https://bugs.python.org/issue36807   9 msgs

#36816: self-signed.pythontest.net TLS certificate key is too weak
https://bugs.python.org/issue36816   8 msgs

#35925: test_httplib test_nntplib test_ssl fail on ARMv7 Debian buster
https://bugs.python.org/issue35925   7 msgs

#36395: Add deferred single-threaded/fake executor to concurrent.futur
https://bugs.python.org/issue36395   7 msgs

#36848: autospec fails with AttributeError when mocked class has __sig
https://bugs.python.org/issue36848   7 msgs

#25541: Wrong usage of sockaddr_un struct for abstract namespace unix 
https://bugs.python.org/issue25541   6 msgs



Issues closed (85)
==================

#1054: scriptsinstall target fails in alternate build dir
https://bugs.python.org/issue1054  closed by SilentGhost

#6911: Document changes in asynchat
https://bugs.python.org/issue6911  closed by CuriousLearner

#11001: Various obvious errors in cookies documentation
https://bugs.python.org/issue11001  closed by gregory.p.smith

#14440: Close background process if IDLE closes abnormally.
https://bugs.python.org/issue14440  closed by asvetlov

#16024: Doc cleanup regarding path=fd, dir_fd, follow_symlinks, etc
https://bugs.python.org/issue16024  closed by larry

#20185: Derby #17: Convert 49 sites to Argument Clinic across 13 files
https://bugs.python.org/issue20185  closed by mdk

#20709: os.utime(path_to_directory): wrong documentation for Windows.
https://bugs.python.org/issue20709  closed by mdk

#24339: iso6937 encoding missing
https://bugs.python.org/issue24339  closed by mdk

#24712: Docs page's sidebar vibrates on mouse wheel scroll on Chrome.
https://bugs.python.org/issue24712  closed by matrixise

#25251: Unknown MS Compiler version 1900
https://bugs.python.org/issue25251  closed by anthonypjshaw

#25436: argparse.ArgumentError missing error message in __repr__
https://bugs.python.org/issue25436  closed by dfortunov

#26374: concurrent_futures Executor.map semantics better specified in 
https://bugs.python.org/issue26374  closed by bquinlan

#26903: ProcessPoolExecutor(max_workers=64) crashes on Windows
https://bugs.python.org/issue26903  closed by bquinlan

#26978: Implement pathlib.Path.link (Using os.link)
https://bugs.python.org/issue26978  closed by pitrou

#27497: csv module: Add return value to DictWriter.writeheader
https://bugs.python.org/issue27497  closed by vstinner

#28238: In xml.etree.ElementTree findall() can't search all elements i
https://bugs.python.org/issue28238  closed by scoder

#28729: Exception from sqlite3 adapter masked by sqlite3.InterfaceErro
https://bugs.python.org/issue28729  closed by mdk

#28795: Misleading stating, that SIGINT handler is installed by defaul
https://bugs.python.org/issue28795  closed by mdk

#29075: Remove Windows Vista support
https://bugs.python.org/issue29075  closed by vstinner

#29164: make test always fail at 218/405 ( AssertionError: ',' not fou
https://bugs.python.org/issue29164  closed by cheryl.sabella

#30262: Don't expose sqlite3 Cache and Statement
https://bugs.python.org/issue30262  closed by berker.peksag

#30271: Make sqlite3 statement cache optional
https://bugs.python.org/issue30271  closed by palaviv

#30668: DOC: missing word in license.rst
https://bugs.python.org/issue30668  closed by matrixise

#30793: Parsing error on f-string-expressions containing strings with 
https://bugs.python.org/issue30793  closed by eric.smith

#31200: address sanitizer build fails
https://bugs.python.org/issue31200  closed by mdk

#31589: Links for French documentation PDF is broken: LaTeX issue with
https://bugs.python.org/issue31589  closed by mdk

#31813: python -m ensurepip hangs
https://bugs.python.org/issue31813  closed by anthonypjshaw

#31855: mock_open is not compatible with read(n) (and pickle.load)
https://bugs.python.org/issue31855  closed by xtreak

#31873: Inconsistent capitalization of proper noun - Unicode.
https://bugs.python.org/issue31873  closed by mdk

#32393: nav menu jitter in old documentation
https://bugs.python.org/issue32393  closed by mdk

#32971: Docs on unittest.TestCase.assertRaises() should clarify contex
https://bugs.python.org/issue32971  closed by anthonypjshaw

#33039: int() and math.trunc don't accept objects that only define __i
https://bugs.python.org/issue33039  closed by serhiy.storchaka

#33530: Implement Happy Eyeball in asyncio
https://bugs.python.org/issue33530  closed by asvetlov

#33948: doc truncated lines in PDF
https://bugs.python.org/issue33948  closed by mdk

#34214: Pylint recusion stack overflow abort
https://bugs.python.org/issue34214  closed by cheryl.sabella

#34600: python3 regression ElementTree.iterparse() unable to capture c
https://bugs.python.org/issue34600  closed by scoder

#34820: binascii.c:1578:1: error: the control flow of function ???bina
https://bugs.python.org/issue34820  closed by anthonypjshaw

#34848: range.index only takes one argument when it's documented as ta
https://bugs.python.org/issue34848  closed by vstinner

#35125: asyncio shield: remove inner callback on outer cancellation
https://bugs.python.org/issue35125  closed by asvetlov

#35354: Generator functions stack overflow
https://bugs.python.org/issue35354  closed by Mark.Shannon

#35393: Typo in documentation
https://bugs.python.org/issue35393  closed by cheryl.sabella

#35900: Add pickler hook for the user to customize the serialization o
https://bugs.python.org/issue35900  closed by pitrou

#36166: DOC: Fix markup on function parameter on datamodel.rst
https://bugs.python.org/issue36166  closed by cheryl.sabella

#36189: DOC: Correct word in tutorial introduction
https://bugs.python.org/issue36189  closed by cheryl.sabella

#36239: gettext: GNUTranslations doesn't parse properly comments in de
https://bugs.python.org/issue36239  closed by mdk

#36275: DOC: venv.create doesn't include prompt parameter
https://bugs.python.org/issue36275  closed by cheryl.sabella

#36533: logging regression with threading + fork are mixed in 3.7.1rc2
https://bugs.python.org/issue36533  closed by gregory.p.smith

#36545: Python 3.5 OOM during test_socket on make
https://bugs.python.org/issue36545  closed by dekken

#36551: Optimize list comprehensions with preallocate size and protect
https://bugs.python.org/issue36551  closed by anthonypjshaw

#36552: Replace OverflowError with ValueError when calculating length 
https://bugs.python.org/issue36552  closed by serhiy.storchaka

#36601: signals can be caught by any thread
https://bugs.python.org/issue36601  closed by gregory.p.smith

#36737: Warnings operate out of global runtime state.
https://bugs.python.org/issue36737  closed by eric.snow

#36766: Typos in docs and code comments
https://bugs.python.org/issue36766  closed by terry.reedy

#36774: f-strings: Add a !d conversion for ease of debugging
https://bugs.python.org/issue36774  closed by eric.smith

#36778: test_site.StartupImportTests.test_startup_imports fails if def
https://bugs.python.org/issue36778  closed by vstinner

#36783: No documentation for _FromXandFold C API functions
https://bugs.python.org/issue36783  closed by cheryl.sabella

#36784: __import__ with empty folder after importlib.invalidate_caches
https://bugs.python.org/issue36784  closed by mdk

#36787: Python3 regresison: String formatting of None object
https://bugs.python.org/issue36787  closed by eric.smith

#36798: f-strings do not support top-level :=
https://bugs.python.org/issue36798  closed by gvanrossum

#36800: Invalid coding error hidden on Windows
https://bugs.python.org/issue36800  closed by eryksun

#36801: Wait for connection_lost in StreamWriter.drain
https://bugs.python.org/issue36801  closed by asvetlov

#36802: Revert back StreamWriter awrite/aclose but provide await write
https://bugs.python.org/issue36802  closed by asvetlov

#36806: Forbid creating of stream objects outside of asyncio
https://bugs.python.org/issue36806  closed by asvetlov

#36808: Understanding "cannot import name" exception
https://bugs.python.org/issue36808  closed by eryksun

#36811: Warning when compiling _elementree.c
https://bugs.python.org/issue36811  closed by scoder

#36812: posix_spawnp returns error when used with file_actions
https://bugs.python.org/issue36812  closed by vstinner

#36814: posix_spawn explicit file_actions=None throws error
https://bugs.python.org/issue36814  closed by vstinner

#36815: Test Failure MacOS : test_socket test_host_resolution_bad_addr
https://bugs.python.org/issue36815  closed by SilentGhost

#36817: Add = to f-strings for easier debugging.
https://bugs.python.org/issue36817  closed by eric.smith

#36828: Cannot install et-xmlfile
https://bugs.python.org/issue36828  closed by xtreak

#36830: Typo in collections.deque
https://bugs.python.org/issue36830  closed by matrixise

#36831: ElementTree.find attribute matching with empty namespace
https://bugs.python.org/issue36831  closed by scoder

#36832: Port zipp to zipfile
https://bugs.python.org/issue36832  closed by barry

#36835: Move the warnings runtime state into per-interpreter state.
https://bugs.python.org/issue36835  closed by eric.snow

#36836: Test Suite not working on 3.4, 3.5 on MacOS Mojave
https://bugs.python.org/issue36836  closed by CuriousLearner

#36838: running 'make html' from the Doc tree emits an unwelcoming err
https://bugs.python.org/issue36838  closed by gregory.p.smith

#36844: abiflag `m` is no longer showing when compiled with --enable-s
https://bugs.python.org/issue36844  closed by Anthony Sottile

#36846: range_iterator does not use __index__
https://bugs.python.org/issue36846  closed by serhiy.storchaka

#36847: Segmentation fault (core dumped) Found when we import "schedul
https://bugs.python.org/issue36847  closed by jay.net.in

#36851: Frame stack is not cleaned after execution is finished with re
https://bugs.python.org/issue36851  closed by pablogsal

#36857: bisect should support descending order
https://bugs.python.org/issue36857  closed by rhettinger

#36861: Update to Unicode 12.1.0
https://bugs.python.org/issue36861  closed by benjamin.peterson

#36864: Double Spaces in the documentation
https://bugs.python.org/issue36864  closed by mdk

#36872: passing negative values through modules
https://bugs.python.org/issue36872  closed by SilentGhost

#1160328: urllib2 post error when using httpproxy
https://bugs.python.org/issue1160328  closed by martin.panter

From p.f.moore at gmail.com  Fri May 10 15:32:12 2019
From: p.f.moore at gmail.com (Paul Moore)
Date: Fri, 10 May 2019 20:32:12 +0100
Subject: [Python-Dev] Ignore spurious 3.4 checkin messages!
In-Reply-To: <B0B5EDA3-162A-4DE9-A81C-815CC28DF760@python.org>
References: <B0B5EDA3-162A-4DE9-A81C-815CC28DF760@python.org>
Message-ID: <CACac1F9ajv0gvEnGqj=BEWKd1u5pqHfayvj_Fjz038CbEA2Ctw@mail.gmail.com>

On Fri, 10 May 2019 at 18:54, Ned Deily <nad at python.org> wrote:
>
> Eek!  I was just doing a bit of branch cleanup in the cpython repo and managed to trigger a bunch (30-ish) of duplicate checkin messages to bugs.python.org for old commits.  I will remove them from b.p.o.  Please ignore any 3.4 spam email.  Sorry!

It's not dead! See, it just moved!

From vstinner at redhat.com  Fri May 10 21:32:26 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Sat, 11 May 2019 03:32:26 +0200
Subject: [Python-Dev] RFC: PEP 587 "Python Initialization
 Configuration": 2nd version
In-Reply-To: <CA+3bQGF7XbUT1WfO3KB+9Xa-si30ozQY6h0J2bBqpi6rj-XG9g@mail.gmail.com>
References: <CA+3bQGF7XbUT1WfO3KB+9Xa-si30ozQY6h0J2bBqpi6rj-XG9g@mail.gmail.com>
Message-ID: <CA+3bQGEgBVUL0VE04mJwSDKm46X3U=3cZejLV+9jiGFDwbowSQ@mail.gmail.com>

Hi,

First of all, I just found an old issue that we will solved by my PEP 587 :-)

Add Py_SetFatalErrorAbortFunc: Allow embedding program to handle fatal errors
https://bugs.python.org/issue30560

I studied code of applications embedding Python. Most of them has to
decode bytes strings to get wchar_t* to set home, argv, program name,
etc. I'm not sure that they use the "correct" encoding, especially
since Python 3.7 got UTF-8 Mode (PEP 540) and C locale coercion (PEP
538).

I tried to convert the source code of each project into pseudo-code
which looks like C code used in CPython.

I removed all error handling code: look at each reference, the
original code is usually way more complex.

Some project has to wrap each function of the Python C API manually,
which adds even more boilerplate code.

Some project set/unset environment varaibles. Others prefer global
configuration variables like Py_NoSiteFlag.

It seems like Py_FrozenFlag is commonly used. Maybe I should make the
flag public and try to find it a better name:

    /* If greater than 0, suppress _PyPathConfig_Calculate() warnings.

       If set to -1 (default), inherit Py_FrozenFlag value. */
    int _frozen;

About pyinstaller which changes C standard stream buffering:
Py_Initialize() now also does that when buffered_stdio=0. See
config_init_stdio() in Python/coreconfig.c. Moreover, this function
now *always* set standard streams to O_BINARY mode on Windows. I'm not
sure if it's correct or not.


Blender
-------

Pseudo-code of BPY_python_start::

    BLI_strncpy_wchar_from_utf8(program_path_wchar, BKE_appdir_program_path());
    Py_SetProgramName(program_path_wchar);
    PyImport_ExtendInittab(bpy_internal_modules);
    Py_SetPythonHome(py_path_bundle_wchar);
    Py_SetStandardStreamEncoding("utf-8", "surrogateescape");
    Py_NoSiteFlag = 1;
    Py_FrozenFlag = 1;
    Py_Initialize();

Ref: https://git.blender.org/gitweb/gitweb.cgi/blender.git/blob/HEAD:/source/blender/python/intern/bpy_interface.c

fontforge
---------

Pseudo-code of fontforge when Python is used to run a script::

    Py_Initialize()
    for init_file in init_files:
       PyRun_SimpleFileEx(init_file)
    exitcode = Py_Main(arg, argv)
    Py_Finalize()
    exit(exitcode)

Ref: https://bugs.python.org/issue36204#msg337256

py2app
------

Pseudo-code::

    unsetenv("PYTHONOPTIMIZE");
    unsetenv("PYTHONDEBUG");
    unsetenv("PYTHONDONTWRITEBYTECODE");
    unsetenv("PYTHONIOENCODING");
    unsetenv("PYTHONDUMPREFS");
    unsetenv("PYTHONMALLOCSTATS");
    setenv("PYTHONDONTWRITEBYTECODE", "1", 1);
    setenv("PYTHONUNBUFFERED", "1", 1);
    setenv("PYTHONPATH", build_python_path(), 1);

    setlocale(LC_ALL, "en_US.UTF-8");
    mbstowcs(w_program, c_program, PATH_MAX+1);
    Py_SetProgramName(w_program);

    Py_Initialize()

    argv_new[0] = _Py_DecodeUTF8_surrogateescape(script, strlen(script));
    ...
    PySys_SetArgv(argc, argv_new);

    PyRun_SimpleFile(fp, script);
    Py_Finalize();

Ref: https://bitbucket.org/ronaldoussoren/py2app/src/default/py2app/apptemplate/src/main.c

See also: https://bitbucket.org/ronaldoussoren/py2app/src/default/py2app/bundletemplate/src/main.m


OpenOffice
----------

Pseudo-code of ``PythonInit``::

    mbstowcs(wide, home, PATH_MAX + 1);
    Py_SetPythonHome(wide);
    setenv("PYTHONPATH", getenv("PYTHONPATH") + ":" + path_bootstrap);
    PyImport_AppendInittab("pyuno", PyInit_pyuno);
    Py_DontWriteBytecodeFlag = 1;
    Py_Initialize();

Ref: pyuno/source/loader/pyuno_loader.cxx, see:
https://docs.libreoffice.org/pyuno/html/pyuno__loader_8cxx_source.html

vim
---

Pseudo-code::

    mbstowcs(py_home_buf, p_py3home);
    Py_SetPythonHome(py_home_buf);
    PyImport_AppendInittab("vim", Py3Init_vim);
    Py_Initialize();

Ref: https://github.com/vim/vim/blob/master/src/if_python3.c

pyinstaller
-----------

Pseudo-code::

    pyi_locale_char2wchar(progname_w, status->archivename)
    SetProgramName(progname_w);

    pyi_locale_char2wchar(pyhome_w, status->mainpath)
    SetPythonHome(pyhome_w);

    pypath_w = build_path();
    Py_SetPath(pypath_w);

    Py_NoSiteFlag = 1;
    Py_FrozenFlag = 1;
    Py_DontWriteBytecodeFlag = 1;
    Py_NoUserSiteDirectory = 1;
    Py_IgnoreEnvironmentFlag = 1;
    Py_VerboseFlag = 0;
    Py_OptimizeFlag = 1;

    if (unbuffered) {
    #ifdef _WIN32
        _setmode(fileno(stdin), _O_BINARY);
        _setmode(fileno(stdout), _O_BINARY);
    #endif
        setbuf(stdin, (char *)NULL);
        setbuf(stdout, (char *)NULL);
        setbuf(stderr, (char *)NULL);
    }

    Py_Initialize();

    PySys_SetPath(pypath_w);

    PySys_SetArgvEx(argc, wargv, 0);

Ref: https://github.com/pyinstaller/pyinstaller/blob/1844d69f5aa1d64d3feca912ed1698664a3faf3e/bootloader/src/pyi_pythonlib.c

Victor

From tjreedy at udel.edu  Sat May 11 18:24:46 2019
From: tjreedy at udel.edu (Terry Reedy)
Date: Sat, 11 May 2019 18:24:46 -0400
Subject: [Python-Dev] Online Devguide mostly not working
Message-ID: <qb7i3f$741n$1@blaine.gmane.org>

https://devguide.python.org gives the intro page with TOC on sidebar and 
at end.  Clicking anything, such as Getting Started, which tries to 
display https://devguide.python.org/setup/, returns a Read the Docs page 
"Sorry This page does not exist yet."  'Down for everyone' site also 
cannot access.

-- 
Terry Jan Reedy


From jcgoble3 at gmail.com  Sat May 11 18:37:06 2019
From: jcgoble3 at gmail.com (Jonathan Goble)
Date: Sat, 11 May 2019 18:37:06 -0400
Subject: [Python-Dev] Online Devguide mostly not working
In-Reply-To: <qb7i3f$741n$1@blaine.gmane.org>
References: <qb7i3f$741n$1@blaine.gmane.org>
Message-ID: <CAK256p3rmZv0Vtik1U45WkS8LVy+Hvp8mi=qTXbnJ=V1d+H7RQ@mail.gmail.com>

Confirming that I also cannot access the Getting Started page. I'm in
Ohio, if it matters.

On Sat, May 11, 2019 at 6:26 PM Terry Reedy <tjreedy at udel.edu> wrote:
>
> https://devguide.python.org gives the intro page with TOC on sidebar and
> at end.  Clicking anything, such as Getting Started, which tries to
> display https://devguide.python.org/setup/, returns a Read the Docs page
> "Sorry This page does not exist yet."  'Down for everyone' site also
> cannot access.
>
> --
> Terry Jan Reedy
>
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe: https://mail.python.org/mailman/options/python-dev/jcgoble3%40gmail.com

From wes.turner at gmail.com  Sun May 12 03:10:57 2019
From: wes.turner at gmail.com (Wes Turner)
Date: Sun, 12 May 2019 03:10:57 -0400
Subject: [Python-Dev] Online Devguide mostly not working
In-Reply-To: <CAK256p3rmZv0Vtik1U45WkS8LVy+Hvp8mi=qTXbnJ=V1d+H7RQ@mail.gmail.com>
References: <qb7i3f$741n$1@blaine.gmane.org>
 <CAK256p3rmZv0Vtik1U45WkS8LVy+Hvp8mi=qTXbnJ=V1d+H7RQ@mail.gmail.com>
Message-ID: <CACfEFw8=W+MB-TWNVe-AKxd-eeoLWLtXC5UGaC8u_ya8RaeKJw@mail.gmail.com>

https://cpython-devguide.readthedocs.io/ seems to work but
https://devguide.python.org/* does not

https://readthedocs.org/projects/cpython-devguide/ lists maintainers, who
I've cc'd

AFAIU, there's no reason that the HTTP STS custom domain CNAME support
would've broken this:
https://github.com/rtfd/readthedocs.org/issues/4135

On Saturday, May 11, 2019, Jonathan Goble <jcgoble3 at gmail.com> wrote:

> Confirming that I also cannot access the Getting Started page. I'm in
> Ohio, if it matters.
>
> On Sat, May 11, 2019 at 6:26 PM Terry Reedy <tjreedy at udel.edu> wrote:
> >
> > https://devguide.python.org gives the intro page with TOC on sidebar and
> > at end.  Clicking anything, such as Getting Started, which tries to
> > display https://devguide.python.org/setup/, returns a Read the Docs page
> > "Sorry This page does not exist yet."  'Down for everyone' site also
> > cannot access.
> >
> > --
> > Terry Jan Reedy
> >
> > _______________________________________________
> > Python-Dev mailing list
> > Python-Dev at python.org
> > https://mail.python.org/mailman/listinfo/python-dev
> > Unsubscribe: https://mail.python.org/mailman/options/python-dev/
> jcgoble3%40gmail.com
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe: https://mail.python.org/mailman/options/python-dev/
> wes.turner%40gmail.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190512/0670849f/attachment.html>

From ja.py at farowl.co.uk  Sun May 12 09:17:59 2019
From: ja.py at farowl.co.uk (Jeff Allen)
Date: Sun, 12 May 2019 14:17:59 +0100
Subject: [Python-Dev] Online Devguide mostly not working
In-Reply-To: <CACfEFw8=W+MB-TWNVe-AKxd-eeoLWLtXC5UGaC8u_ya8RaeKJw@mail.gmail.com>
References: <qb7i3f$741n$1@blaine.gmane.org>
 <CAK256p3rmZv0Vtik1U45WkS8LVy+Hvp8mi=qTXbnJ=V1d+H7RQ@mail.gmail.com>
 <CACfEFw8=W+MB-TWNVe-AKxd-eeoLWLtXC5UGaC8u_ya8RaeKJw@mail.gmail.com>
Message-ID: <0dd06bd3-3a69-0f49-8f6b-93aa81045767@farowl.co.uk>

Is it suspicious that in the detailed log we see:

  'canonical_url': 'http://devguide.python.org/',

? I guess this comes from project admin configuration at RTD, additional 
to your conf.py.

https://docs.readthedocs.io/en/stable/canonical.html

(Just guessing really.)

Jeff Allen

On 12/05/2019 08:10, Wes Turner wrote:
> https://cpython-devguide.readthedocs.io/ seems to work but 
> https://devguide.python.org <https://devguide.python.org/>/* does not
>
> https://readthedocs.org/projects/cpython-devguide/ lists maintainers, 
> who I've cc'd
>
> AFAIU, there's no reason that the HTTP STS custom domain CNAME support 
> would've broken this:
> https://github.com/rtfd/readthedocs.org/issues/4135
>
> On Saturday, May 11, 2019, Jonathan Goble <jcgoble3 at gmail.com 
> <mailto:jcgoble3 at gmail.com>> wrote:
>
>     Confirming that I also cannot access the Getting Started page. I'm in
>     Ohio, if it matters.
>
>     On Sat, May 11, 2019 at 6:26 PM Terry Reedy <tjreedy at udel.edu
>     <mailto:tjreedy at udel.edu>> wrote:
>     >
>     > https://devguide.python.org gives the intro page with TOC on
>     sidebar and
>     > at end.? Clicking anything, such as Getting Started, which tries to
>     > display https://devguide.python.org/setup/
>     <https://devguide.python.org/setup/>, returns a Read the Docs page
>     > "Sorry This page does not exist yet."? 'Down for everyone' site also
>     > cannot access.
>     >
>     > --
>     > Terry Jan Reedy
>     >
>     > _______________________________________________
>     > Python-Dev mailing list
>     > Python-Dev at python.org <mailto:Python-Dev at python.org>
>     > https://mail.python.org/mailman/listinfo/python-dev
>     <https://mail.python.org/mailman/listinfo/python-dev>
>     > Unsubscribe:
>     https://mail.python.org/mailman/options/python-dev/jcgoble3%40gmail.com
>     <https://mail.python.org/mailman/options/python-dev/jcgoble3%40gmail.com>
>     _______________________________________________
>     Python-Dev mailing list
>     Python-Dev at python.org <mailto:Python-Dev at python.org>
>     https://mail.python.org/mailman/listinfo/python-dev
>     <https://mail.python.org/mailman/listinfo/python-dev>
>     Unsubscribe:
>     https://mail.python.org/mailman/options/python-dev/wes.turner%40gmail.com
>     <https://mail.python.org/mailman/options/python-dev/wes.turner%40gmail.com>
>
>
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe: https://mail.python.org/mailman/options/python-dev/ja.py%40farowl.co.uk
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190512/f7d24f20/attachment.html>

From willingc at willingconsulting.com  Sun May 12 12:51:16 2019
From: willingc at willingconsulting.com (Carol Willing)
Date: Sun, 12 May 2019 09:51:16 -0700
Subject: [Python-Dev] Online Devguide Status: Working Again
Message-ID: <f5cc8b84-60ae-ee19-03cc-31acdae9c7f8@willingconsulting.com>

Sorry for the inconvenience yesterday.

From steve.dower at python.org  Mon May 13 12:28:36 2019
From: steve.dower at python.org (Steve Dower)
Date: Mon, 13 May 2019 09:28:36 -0700
Subject: [Python-Dev] RFC: PEP 587 "Python Initialization
 Configuration": 2nd version
In-Reply-To: <CA+3bQGEgBVUL0VE04mJwSDKm46X3U=3cZejLV+9jiGFDwbowSQ@mail.gmail.com>
References: <CA+3bQGF7XbUT1WfO3KB+9Xa-si30ozQY6h0J2bBqpi6rj-XG9g@mail.gmail.com>
 <CA+3bQGEgBVUL0VE04mJwSDKm46X3U=3cZejLV+9jiGFDwbowSQ@mail.gmail.com>
Message-ID: <6246039b-2ae6-5637-2e95-13b166d8d693@python.org>

On 10May2019 1832, Victor Stinner wrote:
> Hi,
> 
> First of all, I just found an old issue that we will solved by my PEP 587 :-)
> 
> Add Py_SetFatalErrorAbortFunc: Allow embedding program to handle fatal errors
> https://bugs.python.org/issue30560

Yes, this should be a feature of any redesigned embedding API.

> I studied code of applications embedding Python. Most of them has to
> decode bytes strings to get wchar_t* to set home, argv, program name,
> etc. I'm not sure that they use the "correct" encoding, especially
> since Python 3.7 got UTF-8 Mode (PEP 540) and C locale coercion (PEP
> 538).

Unless you studied Windows-only applications embedding Python, _all_ of 
them will have had to decode strings into Unicode, since that's what our 
API expects.

All of the Windows-only applications I know of that embed Python are 
closed source, and none are owned by Red Hat. I'm going to assume you 
missed that entire segment of the ecosystem :)

But it also seems like perhaps we just need to expose a single API that 
does "decode this like CPython would" so that they can call it? We don't 
need a whole PEP or a widely publicised and discussed redesign of 
embedding to add this, and since it would solve a very real problem then 
we should just do it.

> I tried to convert the source code of each project into pseudo-code
> which looks like C code used in CPython.

Thanks, this is helpful!

My take:
* all the examples are trying to be isolated from the system Python 
install (except Vim?)
* all the examples want to import some of their own modules before 
running user code
* nobody understands how to configure embedded Python :)

Also from my own work with/on other projects:
* embedders need to integrate native thread management with Python threads
* embedders want to use their own files/libraries
* embedders want to totally override getpath, not augment/configure it

Cheers,
Steve

From vstinner at redhat.com  Mon May 13 17:52:04 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Mon, 13 May 2019 23:52:04 +0200
Subject: [Python-Dev] RFC: PEP 587 "Python Initialization
 Configuration": 2nd version
In-Reply-To: <6246039b-2ae6-5637-2e95-13b166d8d693@python.org>
References: <CA+3bQGF7XbUT1WfO3KB+9Xa-si30ozQY6h0J2bBqpi6rj-XG9g@mail.gmail.com>
 <CA+3bQGEgBVUL0VE04mJwSDKm46X3U=3cZejLV+9jiGFDwbowSQ@mail.gmail.com>
 <6246039b-2ae6-5637-2e95-13b166d8d693@python.org>
Message-ID: <CA+3bQGHnoUop=g-Ptw7jexA6Y5eWajXTfPSWtUVXFYmWSo0-pw@mail.gmail.com>

)Le lun. 13 mai 2019 ? 18:28, Steve Dower <steve.dower at python.org> a ?crit :
> My take:
> * all the examples are trying to be isolated from the system Python
> install (except Vim?)

"Isolation" means different things:

* ignore configuration files
* ignore environment variables
* custom path configuration (sys.path, sys.executable, etc.)

It seems like the most common need is to have a custom path configuration.

Py_IsolatedFlag isn't used. Only py2app manually ignores a few
environment variables.


> * all the examples want to import some of their own modules before
> running user code

Well, running code between Py_Initialize() and running the final
Python code is not new, and my PEP doesn't change anything here: it's
still possible, as it was previously. You can use PyRun_SimpleFile()
after Py_Initialize() for example.

Maybe I misunderstood your point.


> * nobody understands how to configure embedded Python :)

Well, that's the problem I'm trying to solve by designing an
homogeneous API, rather than scattered global configuration variables,
environment variables, function calls, etc.


> Also from my own work with/on other projects:
> * embedders need to integrate native thread management with Python threads

Sorry, I see the relationship with the initialization.


> * embedders want to use their own files/libraries

That's the path configuration, no?


> * embedders want to totally override getpath, not augment/configure it

On Python 3.7, Py_SetPath() is the closest thing to configure path
configuration. But I don't see how to override sys.executable
(Py_GetProgramFullPath), sys.prefix, sys.exec_prefix, nor (internal)
dll_path.

In the examples that I found, SetProgramName(), SetPythonHome() and
Py_SetPath() are called.

My PEP 587 allows to completely ignore getpath.c/getpath.c easily by
setting explicitly:

* use_module_search_path, module_search_paths
* executable
* prefix
* exec_prefix
* dll_path (Windows only)

If you set these fields, you fully control where Python looks for
modules. Extract of the C code:

    /* Do we need to calculate the path? */
    if (!config->use_module_search_paths
        || (config->executable == NULL)
        || (config->prefix == NULL)
#ifdef MS_WINDOWS
        || (config->dll_path == NULL)
#endif
        || (config->exec_prefix == NULL))
    {
        _PyInitError err = _PyCoreConfig_CalculatePathConfig(config);
        if (_Py_INIT_FAILED(err)) {
            return err;
        }
    }

OpenOffice doesn't bother with complex code, it just appends a path to
PYTHONPATH:

    setenv("PYTHONPATH", getenv("PYTHONPATH") + ":" + path_bootstrap);

It can use PyWideStringList_Append(&config.module_search_paths,
path_bootstrap), as shown in one example of my PEP.

Victor
--
Night gathers, and now my watch begins. It shall not end until my death.

From steve.dower at python.org  Mon May 13 18:52:10 2019
From: steve.dower at python.org (Steve Dower)
Date: Mon, 13 May 2019 15:52:10 -0700
Subject: [Python-Dev] RFC: PEP 587 "Python Initialization
 Configuration": 2nd version
In-Reply-To: <CA+3bQGHnoUop=g-Ptw7jexA6Y5eWajXTfPSWtUVXFYmWSo0-pw@mail.gmail.com>
References: <CA+3bQGF7XbUT1WfO3KB+9Xa-si30ozQY6h0J2bBqpi6rj-XG9g@mail.gmail.com>
 <CA+3bQGEgBVUL0VE04mJwSDKm46X3U=3cZejLV+9jiGFDwbowSQ@mail.gmail.com>
 <6246039b-2ae6-5637-2e95-13b166d8d693@python.org>
 <CA+3bQGHnoUop=g-Ptw7jexA6Y5eWajXTfPSWtUVXFYmWSo0-pw@mail.gmail.com>
Message-ID: <f654fe5c-a9b0-d758-98e9-dcf21226caa9@python.org>

In response to all of your responses:

No need to take offense, I was merely summarising the research you 
posted in a way that looks more like scenarios or requirements. It's a 
typical software engineering task. Being able to collect snippets and 
let people draw their own conclusions is one thing, but those of us 
(including yourself) who are actively working in this area are totally 
allowed to present our analysis as well.

Given the raw material, the summary, and the recommendations, anyone 
else can do the same analysis and join the discussion, and that's what 
we're doing. But you can't simply present raw material and assume that 
people will naturally end up at the same conclusion - that's how you end 
up with overly simplistic plans where everyone "agrees" because they 
projected their own opinions into it, then are surprised when it turns 
out that other people had different opinions.

Cheers,
Steve

On 13May2019 1452, Victor Stinner wrote:
> )Le lun. 13 mai 2019 ? 18:28, Steve Dower <steve.dower at python.org> a ?crit :
>> My take:
>> * all the examples are trying to be isolated from the system Python
>> install (except Vim?)
> 
> "Isolation" means different things:
> 
> * ignore configuration files
> * ignore environment variables
> * custom path configuration (sys.path, sys.executable, etc.)
> 
> It seems like the most common need is to have a custom path configuration.
> 
> Py_IsolatedFlag isn't used. Only py2app manually ignores a few
> environment variables.
> 
> 
>> * all the examples want to import some of their own modules before
>> running user code
> 
> Well, running code between Py_Initialize() and running the final
> Python code is not new, and my PEP doesn't change anything here: it's
> still possible, as it was previously. You can use PyRun_SimpleFile()
> after Py_Initialize() for example.
> 
> Maybe I misunderstood your point.
> 
> 
>> * nobody understands how to configure embedded Python :)
> 
> Well, that's the problem I'm trying to solve by designing an
> homogeneous API, rather than scattered global configuration variables,
> environment variables, function calls, etc.
> 
> 
>> Also from my own work with/on other projects:
>> * embedders need to integrate native thread management with Python threads
> 
> Sorry, I see the relationship with the initialization.
> 
> 
>> * embedders want to use their own files/libraries
> 
> That's the path configuration, no?
> 
> 
>> * embedders want to totally override getpath, not augment/configure it
> 
> On Python 3.7, Py_SetPath() is the closest thing to configure path
> configuration. But I don't see how to override sys.executable
> (Py_GetProgramFullPath), sys.prefix, sys.exec_prefix, nor (internal)
> dll_path.
> 
> In the examples that I found, SetProgramName(), SetPythonHome() and
> Py_SetPath() are called.
> 
> My PEP 587 allows to completely ignore getpath.c/getpath.c easily by
> setting explicitly:
> 
> * use_module_search_path, module_search_paths
> * executable
> * prefix
> * exec_prefix
> * dll_path (Windows only)
> 
> If you set these fields, you fully control where Python looks for
> modules. Extract of the C code:
> 
>      /* Do we need to calculate the path? */
>      if (!config->use_module_search_paths
>          || (config->executable == NULL)
>          || (config->prefix == NULL)
> #ifdef MS_WINDOWS
>          || (config->dll_path == NULL)
> #endif
>          || (config->exec_prefix == NULL))
>      {
>          _PyInitError err = _PyCoreConfig_CalculatePathConfig(config);
>          if (_Py_INIT_FAILED(err)) {
>              return err;
>          }
>      }
> 
> OpenOffice doesn't bother with complex code, it just appends a path to
> PYTHONPATH:
> 
>      setenv("PYTHONPATH", getenv("PYTHONPATH") + ":" + path_bootstrap);
> 
> It can use PyWideStringList_Append(&config.module_search_paths,
> path_bootstrap), as shown in one example of my PEP.
> 
> Victor
> --
> Night gathers, and now my watch begins. It shall not end until my death.
> 


From vstinner at redhat.com  Mon May 13 19:52:06 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Tue, 14 May 2019 01:52:06 +0200
Subject: [Python-Dev] Adding a tzidx cache to datetime
In-Reply-To: <619825e1-be2e-b8e7-6eef-07921baebc7f@egenix.com>
References: <ab658c54-71e3-f2eb-e94e-24ea671b7755@ganssle.io>
 <CA+3bQGHTziD9zi3W6o_ZrO9BGtxpV6x8WEuDV_8EY-+Q9Lqvag@mail.gmail.com>
 <d8ad71a2-5322-8d28-8d4e-d9b5cb5a9439@ganssle.io>
 <619825e1-be2e-b8e7-6eef-07921baebc7f@egenix.com>
Message-ID: <CA+3bQGHjCJ83TSP4c_H4S7-kPR=BrR2FPa3SJFjXOuUJFJ+Sog@mail.gmail.com>

Le ven. 10 mai 2019 ? 09:22, M.-A. Lemburg <mal at egenix.com> a ?crit :
> Given that many datetime objects in practice don't use timezones
> (e.g. in large data stores you typically use UTC and naive datetime
> objects), I think that making the object itself larger to accommodate
> for a cache, which will only be used a smaller percentage of the use
> cases, isn't warranted. Going from 64 bytes to 72 bytes also sounds
> like this could have negative effects on cache lines.
>
> If you need a per object cache, you can either use weakref
> objects or maintain a separate dictionary in dateutil or other
> timezone helpers which indexes objects by id(obj).
>
> That said, if you only add a byte field which doesn't make the object
> larger in practice (you merely use space that alignments would
> use anyway), this shouldn't be a problem. The use of that field
> should be documented, though, so that other implementations can
> use/provide it as well.

>From Marc-Andre Lemburg, I understand that Paul's PR is a good
compromise and that other datetime implementations which cannot use
tzidx() cache (because it's limited to an integer in [0; 254]) can
subclass datetime or use a cache outside datetime.

Note: right now, creating a weakref to a datetime fails.

Victor
-- 
Night gathers, and now my watch begins. It shall not end until my death.

From paul at ganssle.io  Mon May 13 20:01:39 2019
From: paul at ganssle.io (Paul Ganssle)
Date: Mon, 13 May 2019 20:01:39 -0400
Subject: [Python-Dev] Adding a tzidx cache to datetime
In-Reply-To: <CA+3bQGHjCJ83TSP4c_H4S7-kPR=BrR2FPa3SJFjXOuUJFJ+Sog@mail.gmail.com>
References: <ab658c54-71e3-f2eb-e94e-24ea671b7755@ganssle.io>
 <CA+3bQGHTziD9zi3W6o_ZrO9BGtxpV6x8WEuDV_8EY-+Q9Lqvag@mail.gmail.com>
 <d8ad71a2-5322-8d28-8d4e-d9b5cb5a9439@ganssle.io>
 <619825e1-be2e-b8e7-6eef-07921baebc7f@egenix.com>
 <CA+3bQGHjCJ83TSP4c_H4S7-kPR=BrR2FPa3SJFjXOuUJFJ+Sog@mail.gmail.com>
Message-ID: <89f632ac-de3e-a985-ed92-c314fd16a88f@ganssle.io>

> From Marc-Andre Lemburg, I understand that Paul's PR is a good
> compromise and that other datetime implementations which cannot use
> tzidx() cache (because it's limited to an integer in [0; 254]) can
> subclass datetime or use a cache outside datetime.

One idea that we can put out there (though I'm hesitant to suggest it,
because generally Python avoids this sort of language lawyering anyway),
is that I think it's actually fine to allow the situations under which
`tzidx()` will cache a value could be implementation-dependent, and to
document that in CPython it's only integers? in [0; 254].

The reason to mention this is that I suspect that PyPy, which has a
pure-python implementation of datetime, will likely either choose to
forgo the cache entirely and always fall through to the underlying
function call or cache /any/ Python object returned, since with a pure
Python implementation, they do not have the advantage of storing the
tzidx cache in an unused padding byte.

Other than the speed concerns, because of the fallback nature of
datetime.tzidx, whether or not the cache is hit will not be visible to
the end user, so I think it's fair to allow interpreter implementations
to choose when a value is or is not cached according to what works best
for their users.

On 5/13/19 7:52 PM, Victor Stinner wrote:
> Le ven. 10 mai 2019 ? 09:22, M.-A. Lemburg <mal at egenix.com> a ?crit :
>> Given that many datetime objects in practice don't use timezones
>> (e.g. in large data stores you typically use UTC and naive datetime
>> objects), I think that making the object itself larger to accommodate
>> for a cache, which will only be used a smaller percentage of the use
>> cases, isn't warranted. Going from 64 bytes to 72 bytes also sounds
>> like this could have negative effects on cache lines.
>>
>> If you need a per object cache, you can either use weakref
>> objects or maintain a separate dictionary in dateutil or other
>> timezone helpers which indexes objects by id(obj).
>>
>> That said, if you only add a byte field which doesn't make the object
>> larger in practice (you merely use space that alignments would
>> use anyway), this shouldn't be a problem. The use of that field
>> should be documented, though, so that other implementations can
>> use/provide it as well.
> From Marc-Andre Lemburg, I understand that Paul's PR is a good
> compromise and that other datetime implementations which cannot use
> tzidx() cache (because it's limited to an integer in [0; 254]) can
> subclass datetime or use a cache outside datetime.
>
> Note: right now, creating a weakref to a datetime fails.
>
> Victor
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190513/c4ea0d59/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: OpenPGP digital signature
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190513/c4ea0d59/attachment.sig>

From brett at python.org  Mon May 13 23:49:15 2019
From: brett at python.org (Brett Cannon)
Date: Mon, 13 May 2019 20:49:15 -0700
Subject: [Python-Dev] Online Devguide mostly not working
In-Reply-To: <0dd06bd3-3a69-0f49-8f6b-93aa81045767@farowl.co.uk>
References: <qb7i3f$741n$1@blaine.gmane.org>
 <CAK256p3rmZv0Vtik1U45WkS8LVy+Hvp8mi=qTXbnJ=V1d+H7RQ@mail.gmail.com>
 <CACfEFw8=W+MB-TWNVe-AKxd-eeoLWLtXC5UGaC8u_ya8RaeKJw@mail.gmail.com>
 <0dd06bd3-3a69-0f49-8f6b-93aa81045767@farowl.co.uk>
Message-ID: <CAP1=2W7MOPP_MDmNTDGLbdhZVM_PPeHogjiwnfjnUvGp51-0jw@mail.gmail.com>

It's working for me, so it was probably just a hiccup.

On Sun, May 12, 2019 at 6:19 AM Jeff Allen <ja.py at farowl.co.uk> wrote:

> Is it suspicious that in the detailed log we see:
>
>  'canonical_url': 'http://devguide.python.org/',
>
> ? I guess this comes from project admin configuration at RTD, additional
> to your conf.py.
>
> https://docs.readthedocs.io/en/stable/canonical.html
>
> (Just guessing really.)
>
> Jeff Allen
>
> On 12/05/2019 08:10, Wes Turner wrote:
>
> https://cpython-devguide.readthedocs.io/ seems to work but
> https://devguide.python.org/* does not
>
> https://readthedocs.org/projects/cpython-devguide/ lists maintainers, who
> I've cc'd
>
> AFAIU, there's no reason that the HTTP STS custom domain CNAME support
> would've broken this:
> https://github.com/rtfd/readthedocs.org/issues/4135
>
> On Saturday, May 11, 2019, Jonathan Goble <jcgoble3 at gmail.com> wrote:
>
>> Confirming that I also cannot access the Getting Started page. I'm in
>> Ohio, if it matters.
>>
>> On Sat, May 11, 2019 at 6:26 PM Terry Reedy <tjreedy at udel.edu> wrote:
>> >
>> > https://devguide.python.org gives the intro page with TOC on sidebar
>> and
>> > at end.  Clicking anything, such as Getting Started, which tries to
>> > display https://devguide.python.org/setup/, returns a Read the Docs
>> page
>> > "Sorry This page does not exist yet."  'Down for everyone' site also
>> > cannot access.
>> >
>> > --
>> > Terry Jan Reedy
>> >
>> > _______________________________________________
>> > Python-Dev mailing list
>> > Python-Dev at python.org
>> > https://mail.python.org/mailman/listinfo/python-dev
>> > Unsubscribe:
>> https://mail.python.org/mailman/options/python-dev/jcgoble3%40gmail.com
>> _______________________________________________
>> Python-Dev mailing list
>> Python-Dev at python.org
>> https://mail.python.org/mailman/listinfo/python-dev
>> Unsubscribe:
>> https://mail.python.org/mailman/options/python-dev/wes.turner%40gmail.com
>>
>
> _______________________________________________
> Python-Dev mailing listPython-Dev at python.orghttps://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe: https://mail.python.org/mailman/options/python-dev/ja.py%40farowl.co.uk
>
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/brett%40python.org
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190513/241378b4/attachment.html>

From ja.py at farowl.co.uk  Tue May 14 02:52:36 2019
From: ja.py at farowl.co.uk (Jeff Allen)
Date: Tue, 14 May 2019 07:52:36 +0100
Subject: [Python-Dev] Online Devguide mostly not working
In-Reply-To: <CAP1=2W7MOPP_MDmNTDGLbdhZVM_PPeHogjiwnfjnUvGp51-0jw@mail.gmail.com>
References: <qb7i3f$741n$1@blaine.gmane.org>
 <CAK256p3rmZv0Vtik1U45WkS8LVy+Hvp8mi=qTXbnJ=V1d+H7RQ@mail.gmail.com>
 <CACfEFw8=W+MB-TWNVe-AKxd-eeoLWLtXC5UGaC8u_ya8RaeKJw@mail.gmail.com>
 <0dd06bd3-3a69-0f49-8f6b-93aa81045767@farowl.co.uk>
 <CAP1=2W7MOPP_MDmNTDGLbdhZVM_PPeHogjiwnfjnUvGp51-0jw@mail.gmail.com>
Message-ID: <e517bd77-4ccb-08d9-3d74-622ce1525863@farowl.co.uk>

Hiccups cured thanks to Mariatta and Carol 
https://github.com/python/devguide/pull/484. (And my guess was wrong.)

Jeff Allen

On 14/05/2019 04:49, Brett Cannon wrote:
> It's working for me, so it was probably just a hiccup.
>
> On Sun, May 12, 2019 at 6:19 AM Jeff Allen <ja.py at farowl.co.uk 
> <mailto:ja.py at farowl.co.uk>> wrote:
>
>     Is it suspicious that in the detailed log we see:
>
>       'canonical_url': 'http://devguide.python.org/',
>
>     ? I guess this comes from project admin configuration at RTD,
>     additional to your conf.py.
>
>     https://docs.readthedocs.io/en/stable/canonical.html
>
>     (Just guessing really.)
>
>     Jeff Allen
>
>     On 12/05/2019 08:10, Wes Turner wrote:
>>     https://cpython-devguide.readthedocs.io/ seems to work but
>>     https://devguide.python.org <https://devguide.python.org/>/* does
>>     not
>>
>>     https://readthedocs.org/projects/cpython-devguide/ lists
>>     maintainers, who I've cc'd
>>
>>     AFAIU, there's no reason that the HTTP STS custom domain CNAME
>>     support would've broken this:
>>     https://github.com/rtfd/readthedocs.org/issues/4135
>>
>>     On Saturday, May 11, 2019, Jonathan Goble <jcgoble3 at gmail.com
>>     <mailto:jcgoble3 at gmail.com>> wrote:
>>
>>         Confirming that I also cannot access the Getting Started
>>         page. I'm in
>>         Ohio, if it matters.
>>
>>         On Sat, May 11, 2019 at 6:26 PM Terry Reedy <tjreedy at udel.edu
>>         <mailto:tjreedy at udel.edu>> wrote:
>>         >
>>         > https://devguide.python.org gives the intro page with TOC
>>         on sidebar and
>>         > at end.? Clicking anything, such as Getting Started, which
>>         tries to
>>         > display https://devguide.python.org/setup/, returns a Read
>>         the Docs page
>>         > "Sorry This page does not exist yet."? 'Down for everyone'
>>         site also
>>         > cannot access.
>>         >
>>         > --
>>         > Terry Jan Reedy
>>         >
>>         > _______________________________________________
>>         > Python-Dev mailing list
>>         > Python-Dev at python.org <mailto:Python-Dev at python.org>
>>         > https://mail.python.org/mailman/listinfo/python-dev
>>         > Unsubscribe:
>>         https://mail.python.org/mailman/options/python-dev/jcgoble3%40gmail.com
>>         _______________________________________________
>>         Python-Dev mailing list
>>         Python-Dev at python.org <mailto:Python-Dev at python.org>
>>         https://mail.python.org/mailman/listinfo/python-dev
>>         Unsubscribe:
>>         https://mail.python.org/mailman/options/python-dev/wes.turner%40gmail.com
>>
>>
>>     _______________________________________________
>>     Python-Dev mailing list
>>     Python-Dev at python.org  <mailto:Python-Dev at python.org>
>>     https://mail.python.org/mailman/listinfo/python-dev
>>     Unsubscribe:https://mail.python.org/mailman/options/python-dev/ja.py%40farowl.co.uk
>     _______________________________________________
>     Python-Dev mailing list
>     Python-Dev at python.org <mailto:Python-Dev at python.org>
>     https://mail.python.org/mailman/listinfo/python-dev
>     Unsubscribe:
>     https://mail.python.org/mailman/options/python-dev/brett%40python.org
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190514/202c3d57/attachment-0001.html>

From steve.dower at python.org  Tue May 14 13:52:15 2019
From: steve.dower at python.org (Steve Dower)
Date: Tue, 14 May 2019 10:52:15 -0700
Subject: [Python-Dev] RFC: PEP 587 "Python Initialization
 Configuration": 2nd version
In-Reply-To: <CA+3bQGEgBVUL0VE04mJwSDKm46X3U=3cZejLV+9jiGFDwbowSQ@mail.gmail.com>
References: <CA+3bQGF7XbUT1WfO3KB+9Xa-si30ozQY6h0J2bBqpi6rj-XG9g@mail.gmail.com>
 <CA+3bQGEgBVUL0VE04mJwSDKm46X3U=3cZejLV+9jiGFDwbowSQ@mail.gmail.com>
Message-ID: <46a53765-e3dc-ac8f-bc39-2cc9077b9205@python.org>

On 10May2019 1832, Victor Stinner wrote:
> I studied code of applications embedding Python. Most of them has to
> decode bytes strings to get wchar_t* to set home, argv, program name,
> etc. I'm not sure that they use the "correct" encoding, especially
> since Python 3.7 got UTF-8 Mode (PEP 540) and C locale coercion (PEP
> 538).

It looks like Py_DecodeLocale() is available very early on - why 
wouldn't we recommend using this function? It seems to be nearly a 
drop-in replacement for mbtowcs in the samples, and if memory allocation 
is a big deal perhaps we could just add a version that writes to a buffer?

That would provide a supported workaround for the encoding issues and 
unblock people hitting trouble right now, yes?

Cheers,
Steve

From barry at python.org  Tue May 14 21:11:14 2019
From: barry at python.org (Barry Warsaw)
Date: Tue, 14 May 2019 18:11:14 -0700
Subject: [Python-Dev] PEP 581 (Using GitHub issues for CPython) is accepted
Message-ID: <7407D51F-AC46-4423-AF4A-63940F80D629@python.org>

As the BDFL-Delegate for PEP 581, and with the unanimous backing of the rest of the Steering Council, I hereby Accept this PEP.

We would like to thank Mariatta for championing PEP 581, and to all the contributors to the discussion, both pro and con.  We appreciate your candor and respect for your fellow developers.  The SC believes that this migration is in the best interest of the Python community, and we look forward to the elaboration of the detailed migration plan (PEP 588).

We also extend our heartfelt thanks Berker, Ezio, and everyone who has helped develop and maintain Roundup and bugs.python.org over the years.  bpo has been a critical component for Python development for a very long time, and we all greatly appreciate the time, effort, and devotion you have put into this resource.

https://www.python.org/dev/peps/pep-0581/

Onward we go!  The migration will be a large effort, with much planning, development, and testing, and we welcome volunteers who wish to help make it a reality.  I look forward to your contributions on PEP 588 and the actual work of migrating issues to GitHub.

Cheers,
-Barry (BDFL-Delegate, and on behalf of the Python Steering Council)

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: Message signed with OpenPGP
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190514/fa2a45d6/attachment.sig>

From vstinner at redhat.com  Tue May 14 21:42:17 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Wed, 15 May 2019 03:42:17 +0200
Subject: [Python-Dev] PEP 581 (Using GitHub issues for CPython) is
 accepted
In-Reply-To: <7407D51F-AC46-4423-AF4A-63940F80D629@python.org>
References: <7407D51F-AC46-4423-AF4A-63940F80D629@python.org>
Message-ID: <CA+3bQGFnoWoGVg8pmB8K=bT9u6MCsQsFjY-yir0YSbo+hR7G2g@mail.gmail.com>

Congrats Mariatta :-)

Victor

Le mer. 15 mai 2019 ? 03:14, Barry Warsaw <barry at python.org> a ?crit :
>
> As the BDFL-Delegate for PEP 581, and with the unanimous backing of the rest of the Steering Council, I hereby Accept this PEP.
>
> We would like to thank Mariatta for championing PEP 581, and to all the contributors to the discussion, both pro and con.  We appreciate your candor and respect for your fellow developers.  The SC believes that this migration is in the best interest of the Python community, and we look forward to the elaboration of the detailed migration plan (PEP 588).
>
> We also extend our heartfelt thanks Berker, Ezio, and everyone who has helped develop and maintain Roundup and bugs.python.org over the years.  bpo has been a critical component for Python development for a very long time, and we all greatly appreciate the time, effort, and devotion you have put into this resource.
>
> https://www.python.org/dev/peps/pep-0581/
>
> Onward we go!  The migration will be a large effort, with much planning, development, and testing, and we welcome volunteers who wish to help make it a reality.  I look forward to your contributions on PEP 588 and the actual work of migrating issues to GitHub.
>
> Cheers,
> -Barry (BDFL-Delegate, and on behalf of the Python Steering Council)
>
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe: https://mail.python.org/mailman/options/python-dev/vstinner%40redhat.com



-- 
Night gathers, and now my watch begins. It shall not end until my death.

From steve at holdenweb.com  Wed May 15 03:40:58 2019
From: steve at holdenweb.com (Steve Holden)
Date: Wed, 15 May 2019 08:40:58 +0100
Subject: [Python-Dev] PEP 581 (Using GitHub issues for CPython) is
 accepted
In-Reply-To: <CA+3bQGFnoWoGVg8pmB8K=bT9u6MCsQsFjY-yir0YSbo+hR7G2g@mail.gmail.com>
References: <7407D51F-AC46-4423-AF4A-63940F80D629@python.org>
 <CA+3bQGFnoWoGVg8pmB8K=bT9u6MCsQsFjY-yir0YSbo+hR7G2g@mail.gmail.com>
Message-ID: <CAMofdRCh+zJNyGVshALk6OU1-AP0QmZCsA1X87BX7oaGR=jCwg@mail.gmail.com>

As a mere user I'd like to thank the developer team for biting this bullet.
Remembering the transition to Git I am sure that the further
democratisation (?) of the development process will similarly increase the
diversity and scope of the development effort.

It will indeed be a significant effort to effect this migration. While it's
inevitable this will involve significant dev time, perhaps there roles can
be identified specifically as to be filled by _other_ than core devs.


On Wed, May 15, 2019 at 2:43 AM Victor Stinner <vstinner at redhat.com> wrote:

> Congrats Mariatta :-)
>
> Victor
>
> Le mer. 15 mai 2019 ? 03:14, Barry Warsaw <barry at python.org> a ?crit :
> >
> > As the BDFL-Delegate for PEP 581, and with the unanimous backing of the
> rest of the Steering Council, I hereby Accept this PEP.
> >
> > We would like to thank Mariatta for championing PEP 581, and to all the
> contributors to the discussion, both pro and con.  We appreciate your
> candor and respect for your fellow developers.  The SC believes that this
> migration is in the best interest of the Python community, and we look
> forward to the elaboration of the detailed migration plan (PEP 588).
> >
> > We also extend our heartfelt thanks Berker, Ezio, and everyone who has
> helped develop and maintain Roundup and bugs.python.org over the years.
> bpo has been a critical component for Python development for a very long
> time, and we all greatly appreciate the time, effort, and devotion you have
> put into this resource.
> >
> > https://www.python.org/dev/peps/pep-0581/
> >
> > Onward we go!  The migration will be a large effort, with much planning,
> development, and testing, and we welcome volunteers who wish to help make
> it a reality.  I look forward to your contributions on PEP 588 and the
> actual work of migrating issues to GitHub.
> >
> > Cheers,
> > -Barry (BDFL-Delegate, and on behalf of the Python Steering Council)
> >
> > _______________________________________________
> > Python-Dev mailing list
> > Python-Dev at python.org
> > https://mail.python.org/mailman/listinfo/python-dev
> > Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/vstinner%40redhat.com
>
>
>
> --
> Night gathers, and now my watch begins. It shall not end until my death.
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/steve%40holdenweb.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190515/60ba68d3/attachment.html>

From solipsis at pitrou.net  Wed May 15 04:42:55 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Wed, 15 May 2019 10:42:55 +0200
Subject: [Python-Dev] PEP 581 (Using GitHub issues for CPython) is
 accepted
References: <7407D51F-AC46-4423-AF4A-63940F80D629@python.org>
 <CA+3bQGFnoWoGVg8pmB8K=bT9u6MCsQsFjY-yir0YSbo+hR7G2g@mail.gmail.com>
 <CAMofdRCh+zJNyGVshALk6OU1-AP0QmZCsA1X87BX7oaGR=jCwg@mail.gmail.com>
Message-ID: <20190515104255.27236e1a@fsol>

On Wed, 15 May 2019 08:40:58 +0100
Steve Holden <steve at holdenweb.com> wrote:
> As a mere user I'd like to thank the developer team for biting this bullet.
> Remembering the transition to Git I am sure that the further
> democratisation (?) of the development process will similarly increase the
> diversity and scope of the development effort.

"Similarly"?

We still lack some metrics on that point, IIRC.

Regards

Antoine.



From solipsis at pitrou.net  Wed May 15 04:48:30 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Wed, 15 May 2019 10:48:30 +0200
Subject: [Python-Dev] PEP 581 (Using GitHub issues for CPython) is
 accepted
References: <7407D51F-AC46-4423-AF4A-63940F80D629@python.org>
Message-ID: <20190515104830.5b307230@fsol>

On Tue, 14 May 2019 18:11:14 -0700
Barry Warsaw <barry at python.org> wrote:

> As the BDFL-Delegate for PEP 581, and with the unanimous backing of the rest of the Steering Council, I hereby Accept this PEP.

For future reference, is it possible to post the Steering Council's
reflection and rationale on the PEP?

Thank you

Regards

Antoine.



From vano at mail.mipt.ru  Wed May 15 04:55:23 2019
From: vano at mail.mipt.ru (Ivan Pozdeev)
Date: Wed, 15 May 2019 11:55:23 +0300
Subject: [Python-Dev] PEP 581 (Using GitHub issues for CPython) is
 accepted
In-Reply-To: <20190515104830.5b307230@fsol>
References: <7407D51F-AC46-4423-AF4A-63940F80D629@python.org>
 <20190515104830.5b307230@fsol>
Message-ID: <fc355df6-46b7-0b0c-f77d-fc2bf81786f9@mail.mipt.ru>

On 15.05.2019 11:48, Antoine Pitrou wrote:
> On Tue, 14 May 2019 18:11:14 -0700
> Barry Warsaw <barry at python.org> wrote:
>
>> As the BDFL-Delegate for PEP 581, and with the unanimous backing of the rest of the Steering Council, I hereby Accept this PEP.
> For future reference, is it possible to post the Steering Council's
> reflection and rationale on the PEP?
+1. Specifically, I'd like to know if the risks and the potential for GitHub missing any needed features were estimated. The PEP says 
nothing about this.
> Thank you
>
> Regards
>
> Antoine.
>
>
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe: https://mail.python.org/mailman/options/python-dev/vano%40mail.mipt.ru

-- 
Regards,
Ivan


From venthur at debian.org  Wed May 15 04:44:35 2019
From: venthur at debian.org (Bastian Venthur)
Date: Wed, 15 May 2019 10:44:35 +0200
Subject: [Python-Dev] Adding a toml module to the standard lib?
Message-ID: <qbgjhk$52bt$1@blaine.gmane.org>

Hi,

I'd like to discuss the idea to add a module to parse TOML [toml-lang] 
to Python's standard library.

PEP-0518 -- Specifying Minimum Build System Requirements for Python 
Projects [pep] suggests to store build system dependencies in 
`pyproject.toml`, yet Python itself does not support this format. 
Various packaging related projects like pip and pipenv already support 
PEP-0518 and vendored one of the existing TOML libraries in order to 
read `pyproject.toml` files.

Besides that, TOML seems a better alternative to .cfg/.ini, .json -- 
both of which are already supported by Python's standard lib and 
parsing/dumping TOML properly is tricky enough to solve it properly 
[requirements].

There are a couple of TOML implementations out there [toml, pytoml, 
tomlkit] and one would have to find out which one to prefer and migrate 
into the stdlib.

If the result of this discussion is leaning towards adding TOML, I'd 
volunteer to do it. This includes: coordinating with the maintainer of 
the chosen library, writing the PEP (hopefully with some help) and 
maintain the module for at least two years.


Cheers,

Bastian


[toml-lang]: https://github.com/toml-lang/toml
[pep]: https://www.python.org/dev/peps/pep-0518
[pip]: https://github.com/pypa/pip
[pipenv]: https://github.com/pypa/pipenv
[toml]: https://github.com/uiri/toml
[pytoml]: https://github.com/avakar/pytoml
[tomlkit]: https://github.com/sdispater/tomlkit
[requirements]: https://devguide.python.org/stdlibchanges/#requirements


-- 
Dr. Bastian Venthur                                  http://venthur.de
Debian Developer                                 venthur at debian org


From christian at python.org  Wed May 15 05:28:21 2019
From: christian at python.org (Christian Heimes)
Date: Wed, 15 May 2019 11:28:21 +0200
Subject: [Python-Dev] PEP 581 (Using GitHub issues for CPython) is
 accepted
In-Reply-To: <fc355df6-46b7-0b0c-f77d-fc2bf81786f9@mail.mipt.ru>
References: <7407D51F-AC46-4423-AF4A-63940F80D629@python.org>
 <20190515104830.5b307230@fsol>
 <fc355df6-46b7-0b0c-f77d-fc2bf81786f9@mail.mipt.ru>
Message-ID: <4838c6f5-27cc-3823-4ba5-c20a6d0867d9@python.org>

On 15/05/2019 10.55, Ivan Pozdeev via Python-Dev wrote:
> On 15.05.2019 11:48, Antoine Pitrou wrote:
>> On Tue, 14 May 2019 18:11:14 -0700
>> Barry Warsaw <barry at python.org> wrote:
>>
>>> As the BDFL-Delegate for PEP 581, and with the unanimous backing of
>>> the rest of the Steering Council, I hereby Accept this PEP.
>> For future reference, is it possible to post the Steering Council's
>> reflection and rationale on the PEP?
> +1. Specifically, I'd like to know if the risks and the potential for
> GitHub missing any needed features were estimated. The PEP says nothing
> about this.

I'm not happy with the fact, that the PEP does not mention any arguments
or concerns that were raised against the current feature set of Github's
issue tracker. In the past, PEPs also listed risks and arguments against
a change, then weighted the arguments.

What are the next step? Will there be another PEP that explores how we
are going to deal with migration, workflow changes, and how we plan to
map current BPO features to Github?

Christian

From solipsis at pitrou.net  Wed May 15 05:33:41 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Wed, 15 May 2019 11:33:41 +0200
Subject: [Python-Dev] Adding a toml module to the standard lib?
References: <qbgjhk$52bt$1@blaine.gmane.org>
Message-ID: <20190515113341.19187011@fsol>

On Wed, 15 May 2019 10:44:35 +0200
Bastian Venthur <venthur at debian.org> wrote:
> Hi,
> 
> I'd like to discuss the idea to add a module to parse TOML [toml-lang] 
> to Python's standard library.

How stable is the TOML format?  Is it bound to change significantly in
the coming years?

If the format is stable enough, then I think it's a good idea.

Regards

Antoine.



From p.f.moore at gmail.com  Wed May 15 05:40:07 2019
From: p.f.moore at gmail.com (Paul Moore)
Date: Wed, 15 May 2019 10:40:07 +0100
Subject: [Python-Dev] PEP 581 (Using GitHub issues for CPython) is
 accepted
In-Reply-To: <20190515104830.5b307230@fsol>
References: <7407D51F-AC46-4423-AF4A-63940F80D629@python.org>
 <20190515104830.5b307230@fsol>
Message-ID: <CACac1F9h-uvqUNcjFMh2FCPD4+=mbPb5Eo7=a5aZnhJF0KZFNg@mail.gmail.com>

On Wed, 15 May 2019 at 09:51, Antoine Pitrou <solipsis at pitrou.net> wrote:
>
> On Tue, 14 May 2019 18:11:14 -0700
> Barry Warsaw <barry at python.org> wrote:
>
> > As the BDFL-Delegate for PEP 581, and with the unanimous backing of the rest of the Steering Council, I hereby Accept this PEP.
>
> For future reference, is it possible to post the Steering Council's
> reflection and rationale on the PEP?

Also, is there an archive of the discussions anywhere? The PEP says
discussions happened on Zulip, but I don't follow that and I don't
know where I can find an archived copy of the discussions.

It's not as if I'm going to object to the PEP (I'd have participated
in the discussions if I had a strong opinion) but I am curious.

Paul

From venthur at debian.org  Wed May 15 06:47:08 2019
From: venthur at debian.org (Bastian Venthur)
Date: Wed, 15 May 2019 12:47:08 +0200
Subject: [Python-Dev] Adding a toml module to the standard lib?
In-Reply-To: <20190515113341.19187011@fsol>
References: <qbgjhk$52bt$1@blaine.gmane.org> <20190515113341.19187011@fsol>
Message-ID: <qbgqnd$54vn$1@blaine.gmane.org>

On 15.05.19 11:33, Antoine Pitrou wrote:
> How stable is the TOML format?  Is it bound to change significantly in
> the coming years?
> 
> If the format is stable enough, then I think it's a good idea.


The last update to the spec [1] was 10 months ago and added a few 
features. The version before that was stable for more than 3 years. It 
is also worth noting that he writes about the current version [2]:

"As of version 0.5.0, TOML should be considered extremely stable. The 
goal is for version 1.0.0 to be backwards compatible (as much as humanly 
possible) with version 0.5.0. All implementations are strongly 
encouraged to become 0.5.0 compatible so that the transition to 1.0.0 
will be simple when that happens."

That is of course no guarantee, but maybe the best we can hope for.


Cheers,

Bastian


[1]: https://github.com/toml-lang/toml/releases
[2]: https://github.com/toml-lang/toml


-- 
Dr. Bastian Venthur                                  http://venthur.de
Debian Developer                                 venthur at debian org


From p.f.moore at gmail.com  Wed May 15 07:00:09 2019
From: p.f.moore at gmail.com (Paul Moore)
Date: Wed, 15 May 2019 12:00:09 +0100
Subject: [Python-Dev] Adding a toml module to the standard lib?
In-Reply-To: <qbgqnd$54vn$1@blaine.gmane.org>
References: <qbgjhk$52bt$1@blaine.gmane.org> <20190515113341.19187011@fsol>
 <qbgqnd$54vn$1@blaine.gmane.org>
Message-ID: <CACac1F_x9DJVM0fBMSkjeq-E1-OE9V_BTLWus7r+pSC2cbpc5g@mail.gmail.com>

On Wed, 15 May 2019 at 11:49, Bastian Venthur <venthur at debian.org> wrote:
>
> On 15.05.19 11:33, Antoine Pitrou wrote:
> > How stable is the TOML format?  Is it bound to change significantly in
> > the coming years?
> >
> > If the format is stable enough, then I think it's a good idea.
>
>
> The last update to the spec [1] was 10 months ago and added a few
> features. The version before that was stable for more than 3 years. It
> is also worth noting that he writes about the current version [2]:

I think it's a good idea too - the analysis in PEP 518 concluded that
TOML was, while maybe not perfect, certainly a good general purpose
config file format, and I think that analysis is applicable in other
contexts as well. While "easy to install/vendor" was a point in the
analysis, I think having TOML support in the stdlib would be useful
for simple scripts/applications looking for a good "out of the box"
config solution.

Paul

From steve at pearwood.info  Wed May 15 07:35:16 2019
From: steve at pearwood.info (Steven D'Aprano)
Date: Wed, 15 May 2019 21:35:16 +1000
Subject: [Python-Dev] Adding a toml module to the standard lib?
In-Reply-To: <qbgjhk$52bt$1@blaine.gmane.org>
References: <qbgjhk$52bt$1@blaine.gmane.org>
Message-ID: <20190515113516.GP5010@ando.pearwood.info>

On Wed, May 15, 2019 at 10:44:35AM +0200, Bastian Venthur wrote:
> Hi,
> 
> I'd like to discuss the idea to add a module to parse TOML [toml-lang] 
> to Python's standard library.

You ought to read this thread here:

https://mail.python.org/pipermail/python-ideas/2018-October/054101.html

It isn't very long (only about a dozen or so quite short posts) but you 
probably ought to be at least familiar with it, and if possibly respond 
to any opposing comments.

Thanks,




-- 
Steven

From steve at pearwood.info  Wed May 15 08:14:48 2019
From: steve at pearwood.info (Steven D'Aprano)
Date: Wed, 15 May 2019 22:14:48 +1000
Subject: [Python-Dev] Adding a toml module to the standard lib?
In-Reply-To: <20190515113516.GP5010@ando.pearwood.info>
References: <qbgjhk$52bt$1@blaine.gmane.org>
 <20190515113516.GP5010@ando.pearwood.info>
Message-ID: <20190515121448.GR5010@ando.pearwood.info>

On Wed, May 15, 2019 at 09:35:16PM +1000, Steven D'Aprano wrote:
> It isn't very long (only about a dozen or so quite short posts) but you 
> probably ought to be at least familiar with it, and if possibly respond 
> to any opposing comments.

Sorry, to clarify, I don't mean respond on the Python-Ideas thread. I 
think it is sufficient to keep the current discussion here.


-- 
Steven

From vstinner at redhat.com  Wed May 15 08:37:57 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Wed, 15 May 2019 14:37:57 +0200
Subject: [Python-Dev] PEP 581 (Using GitHub issues for CPython) is
 accepted
In-Reply-To: <4838c6f5-27cc-3823-4ba5-c20a6d0867d9@python.org>
References: <7407D51F-AC46-4423-AF4A-63940F80D629@python.org>
 <20190515104830.5b307230@fsol>
 <fc355df6-46b7-0b0c-f77d-fc2bf81786f9@mail.mipt.ru>
 <4838c6f5-27cc-3823-4ba5-c20a6d0867d9@python.org>
Message-ID: <CA+3bQGGsRJQCCx+FGQCXtAAh=__CXTL2ruwQTkoGtQ8keRbBGw@mail.gmail.com>

Le mer. 15 mai 2019 ? 11:31, Christian Heimes <christian at python.org> a ?crit :
> What are the next step? Will there be another PEP that explores how we
> are going to deal with migration, workflow changes, and how we plan to
> map current BPO features to Github?

Yes, it's the:

PEP 588 -- GitHub Issues Migration Plan
https://www.python.org/dev/peps/pep-0588/

Victor
-- 
Night gathers, and now my watch begins. It shall not end until my death.

From vstinner at redhat.com  Wed May 15 08:39:49 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Wed, 15 May 2019 14:39:49 +0200
Subject: [Python-Dev] Adding a toml module to the standard lib?
In-Reply-To: <qbgqnd$54vn$1@blaine.gmane.org>
References: <qbgjhk$52bt$1@blaine.gmane.org> <20190515113341.19187011@fsol>
 <qbgqnd$54vn$1@blaine.gmane.org>
Message-ID: <CA+3bQGHKmZXWu6ypYotofTLQGZ8hyZR-wrtrKnO_MkCjw3hfAQ@mail.gmail.com>

H Bastian,

IMHO we should wait until the format reach version 1.0, since the
stdlib has a slow release cycle (one release every 18 months). Too
slow for a "fast moving" standard.

In the meanwhile, I'm sure setuptools and pip will manage to install a
toml parser/generator for their needs, as they already do :-)

Victor

Le mer. 15 mai 2019 ? 12:50, Bastian Venthur <venthur at debian.org> a ?crit :
>
> On 15.05.19 11:33, Antoine Pitrou wrote:
> > How stable is the TOML format?  Is it bound to change significantly in
> > the coming years?
> >
> > If the format is stable enough, then I think it's a good idea.
>
>
> The last update to the spec [1] was 10 months ago and added a few
> features. The version before that was stable for more than 3 years. It
> is also worth noting that he writes about the current version [2]:
>
> "As of version 0.5.0, TOML should be considered extremely stable. The
> goal is for version 1.0.0 to be backwards compatible (as much as humanly
> possible) with version 0.5.0. All implementations are strongly
> encouraged to become 0.5.0 compatible so that the transition to 1.0.0
> will be simple when that happens."
>
> That is of course no guarantee, but maybe the best we can hope for.
>
>
> Cheers,
>
> Bastian
>
>
> [1]: https://github.com/toml-lang/toml/releases
> [2]: https://github.com/toml-lang/toml
>
>
> --
> Dr. Bastian Venthur                                  http://venthur.de
> Debian Developer                                 venthur at debian org
>
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe: https://mail.python.org/mailman/options/python-dev/vstinner%40redhat.com



-- 
Night gathers, and now my watch begins. It shall not end until my death.

From paul at ganssle.io  Wed May 15 08:57:57 2019
From: paul at ganssle.io (Paul Ganssle)
Date: Wed, 15 May 2019 08:57:57 -0400
Subject: [Python-Dev] Adding a toml module to the standard lib?
In-Reply-To: <CA+3bQGHKmZXWu6ypYotofTLQGZ8hyZR-wrtrKnO_MkCjw3hfAQ@mail.gmail.com>
References: <qbgjhk$52bt$1@blaine.gmane.org> <20190515113341.19187011@fsol>
 <qbgqnd$54vn$1@blaine.gmane.org>
 <CA+3bQGHKmZXWu6ypYotofTLQGZ8hyZR-wrtrKnO_MkCjw3hfAQ@mail.gmail.com>
Message-ID: <b5aff49c-4fac-28c0-9f60-3eda8065f3ec@ganssle.io>

As someone involved in the packaging side of this, I think while we'd
eventually /appreciate/ a TOML parser in the standard library, I agree
with Victor that there's no rush, for two reasons:

1. setuptools and pip have a decent number of dependencies that we
vendor /anyway/, so vendoring one more is not a big deal.
2. We will be supporting older versions of Python for some time to come,
so we'd need to vendor a TOML-parser backport for several years before
we could actually use the one in the standard library.

I think /if/ a 1.0 version of the spec is going to be forthcoming (not
clear from the issue requesting it:
https://github.com/toml-lang/toml/issues/515 ), then it's worth waiting
at least a bit longer for it.

I also think it's probably worth asking the current maintainers of
TOML-parsing libraries if /they/ think it's time to adopt/adapt one of
their libraries for use in the standard library. They probably have a
better perspective on the stability and maturity of their codebases.

Best,
Paul


On 5/15/19 8:39 AM, Victor Stinner wrote:
> H Bastian,
>
> IMHO we should wait until the format reach version 1.0, since the
> stdlib has a slow release cycle (one release every 18 months). Too
> slow for a "fast moving" standard.
>
> In the meanwhile, I'm sure setuptools and pip will manage to install a
> toml parser/generator for their needs, as they already do :-)
>
> Victor
>
> Le mer. 15 mai 2019 ? 12:50, Bastian Venthur <venthur at debian.org> a ?crit :
>> On 15.05.19 11:33, Antoine Pitrou wrote:
>>> How stable is the TOML format?  Is it bound to change significantly in
>>> the coming years?
>>>
>>> If the format is stable enough, then I think it's a good idea.
>>
>> The last update to the spec [1] was 10 months ago and added a few
>> features. The version before that was stable for more than 3 years. It
>> is also worth noting that he writes about the current version [2]:
>>
>> "As of version 0.5.0, TOML should be considered extremely stable. The
>> goal is for version 1.0.0 to be backwards compatible (as much as humanly
>> possible) with version 0.5.0. All implementations are strongly
>> encouraged to become 0.5.0 compatible so that the transition to 1.0.0
>> will be simple when that happens."
>>
>> That is of course no guarantee, but maybe the best we can hope for.
>>
>>
>> Cheers,
>>
>> Bastian
>>
>>
>> [1]: https://github.com/toml-lang/toml/releases
>> [2]: https://github.com/toml-lang/toml
>>
>>
>> --
>> Dr. Bastian Venthur                                  http://venthur.de
>> Debian Developer                                 venthur at debian org
>>
>> _______________________________________________
>> Python-Dev mailing list
>> Python-Dev at python.org
>> https://mail.python.org/mailman/listinfo/python-dev
>> Unsubscribe: https://mail.python.org/mailman/options/python-dev/vstinner%40redhat.com
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190515/7050d70a/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: OpenPGP digital signature
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190515/7050d70a/attachment.sig>

From vstinner at redhat.com  Wed May 15 10:56:05 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Wed, 15 May 2019 16:56:05 +0200
Subject: [Python-Dev] [python-committers] PEP 581 (Using GitHub issues
 for CPython) is accepted
In-Reply-To: <CACac1F9h-uvqUNcjFMh2FCPD4+=mbPb5Eo7=a5aZnhJF0KZFNg@mail.gmail.com>
References: <7407D51F-AC46-4423-AF4A-63940F80D629@python.org>
 <20190515104830.5b307230@fsol>
 <CACac1F9h-uvqUNcjFMh2FCPD4+=mbPb5Eo7=a5aZnhJF0KZFNg@mail.gmail.com>
Message-ID: <CA+3bQGFh3y6YNz9sWnbFcmFBgsXeaoO92_hFsGr_d=Y4Ee34XA@mail.gmail.com>

Hi Paul,
Le mer. 15 mai 2019 ? 11:40, Paul Moore <p.f.moore at gmail.com> a ?crit :
> Also, is there an archive of the discussions anywhere? The PEP says
> discussions happened on Zulip, but I don't follow that and I don't
> know where I can find an archived copy of the discussions.

Well, the PEP has been discussed a lot at many places since May 2018.

The PEP 581 has been (first?) discussed at the Language Summit which
was part of Pycon US 2018 (May 2018).

Discussion on the PR:

https://github.com/python/peps/pull/681/

Multiple threads on Discourse:

https://discuss.python.org/t/move-pep-581-discussion/873
https://discuss.python.org/t/pep-581-using-github-issues/535
https://discuss.python.org/t/what-are-next-steps-for-pep-581/864
https://discuss.python.org/t/pep-process-after-pep-8016/558/4

Thread on python-dev:

https://mail.python.org/pipermail/python-dev/2019-March/156626.html

Threads on python-committers:

https://mail.python.org/pipermail/python-committers/2018-May/005428.html
https://mail.python.org/pipermail/python-committers/2018-June/005506.html
https://mail.python.org/pipermail/python-committers/2018-July/005657.html

Discussion on Zulip Chat:

https://python.zulipchat.com/#narrow/stream/130206-pep581

The Steering Council discussed it internally as well:

https://github.com/python/steering-council/blob/master/updates/2019-04-26_steering-council-update.md

The PEP 581 and 588 have been discussed at the Language Summit which
was part of Pycon US 2019 (2 weeks ago).

Victor
--
Night gathers, and now my watch begins. It shall not end until my death.

From sebastian.koslowski at gmail.com  Wed May 15 02:37:43 2019
From: sebastian.koslowski at gmail.com (Sebastian Koslowski)
Date: Wed, 15 May 2019 08:37:43 +0200
Subject: [Python-Dev] RFC: PEP 587 "Python Initialization
 Configuration": 2nd version
In-Reply-To: <46a53765-e3dc-ac8f-bc39-2cc9077b9205@python.org>
References: <CA+3bQGF7XbUT1WfO3KB+9Xa-si30ozQY6h0J2bBqpi6rj-XG9g@mail.gmail.com>
 <CA+3bQGEgBVUL0VE04mJwSDKm46X3U=3cZejLV+9jiGFDwbowSQ@mail.gmail.com>
 <46a53765-e3dc-ac8f-bc39-2cc9077b9205@python.org>
Message-ID: <CABsYi9ZDd04koP8D6PKg9jyuzP2qyCBur_ec_pHROGZiUTy2Og@mail.gmail.com>

On Tue, May 14, 2019, 19:52 Steve Dower <steve.dower at python.org> wrote:

> It looks like Py_DecodeLocale() is available very early on - why
> wouldn't we recommend using this function? It seems to be nearly a
> drop-in replacement for mbtowcs in the samples, and if memory allocation
> is a big deal perhaps we could just add a version that writes to a buffer?
>
>
Actually, it is recommended in the docs
https://docs.python.org/3/c-api/init.html#c.Py_SetPythonHome

Sebastian
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190515/b44cde04/attachment.html>

From p.f.moore at gmail.com  Wed May 15 11:18:15 2019
From: p.f.moore at gmail.com (Paul Moore)
Date: Wed, 15 May 2019 16:18:15 +0100
Subject: [Python-Dev] [python-committers] PEP 581 (Using GitHub issues
 for CPython) is accepted
In-Reply-To: <CA+3bQGFh3y6YNz9sWnbFcmFBgsXeaoO92_hFsGr_d=Y4Ee34XA@mail.gmail.com>
References: <7407D51F-AC46-4423-AF4A-63940F80D629@python.org>
 <20190515104830.5b307230@fsol>
 <CACac1F9h-uvqUNcjFMh2FCPD4+=mbPb5Eo7=a5aZnhJF0KZFNg@mail.gmail.com>
 <CA+3bQGFh3y6YNz9sWnbFcmFBgsXeaoO92_hFsGr_d=Y4Ee34XA@mail.gmail.com>
Message-ID: <CACac1F_9cb2ykL4s-5G+GPvkhu+-EFhR_4C1VKY=A0O=o7+jUg@mail.gmail.com>

On Wed, 15 May 2019 at 15:56, Victor Stinner <vstinner at redhat.com> wrote:
>
> Hi Paul,
> Le mer. 15 mai 2019 ? 11:40, Paul Moore <p.f.moore at gmail.com> a ?crit :
> > Also, is there an archive of the discussions anywhere? The PEP says
> > discussions happened on Zulip, but I don't follow that and I don't
> > know where I can find an archived copy of the discussions.
>
> Well, the PEP has been discussed a lot at many places since May 2018.

Thanks for all of these. I appreciate the time you took locating them
for me. But I do have to say that I still can't really follow any
useful "thread of discussion" - it all seems very fragmented, and it's
difficult to see the progress towards consensus. Maybe that's just
because I'm too used to mailing lists :-)

> The PEP 581 has been (first?) discussed at the Language Summit which
> was part of Pycon US 2018 (May 2018).

Was that written up, or is it all just from people's memories by now?

> https://github.com/python/peps/pull/681/

Ah - I don't really follow this sort of PR discussion, as the github
emails don't tend to have sufficient context on what's being said, so
I (mostly) gave up a long time ago. Also, I tend to assume that
discussions on PRs are mostly about details of wording, and
substantive changes will be dealt with in a wider forum. I wonder if I
should be following PRs on the PEPs repository more closely...?

> Multiple threads on Discourse:
>
> https://discuss.python.org/t/move-pep-581-discussion/873
> https://discuss.python.org/t/pep-581-using-github-issues/535
> https://discuss.python.org/t/what-are-next-steps-for-pep-581/864
> https://discuss.python.org/t/pep-process-after-pep-8016/558/4
>
> Thread on python-dev:
>
> https://mail.python.org/pipermail/python-dev/2019-March/156626.html
>
> Threads on python-committers:
>
> https://mail.python.org/pipermail/python-committers/2018-May/005428.html
> https://mail.python.org/pipermail/python-committers/2018-June/005506.html
> https://mail.python.org/pipermail/python-committers/2018-July/005657.html

I saw these, but didn't get much of a sense of progress towards
agreement. Again, maybe just because they were lots of fragmented
threads and locations.

> Discussion on Zulip Chat:
>
> https://python.zulipchat.com/#narrow/stream/130206-pep581

I can't see this without logging in :-(

> The Steering Council discussed it internally as well:
>
> https://github.com/python/steering-council/blob/master/updates/2019-04-26_steering-council-update.md

I did see that, I was more wondering what led to that decision
(whether it was a general consensus from the core devs that it was a
good move, or mainly the SC's own view that prevailed).

> The PEP 581 and 588 have been discussed at the Language Summit which
> was part of Pycon US 2019 (2 weeks ago).

Again, has there been any write up of that (yet)?

As I say, I don't object to the decision, I'm more just trying to
better understand the process of being involved under the new regime
of the SC, combined with multiple fragmented forums for discussion. It
feels a lot harder these days to keep track of all the
discussions/decisions going on. But maybe that's a good thing - only
people with a genuine interest get involved, and I can spend less of
my time reading mailing lists! :-)

Paul

From brett at python.org  Wed May 15 11:57:31 2019
From: brett at python.org (Brett Cannon)
Date: Wed, 15 May 2019 08:57:31 -0700
Subject: [Python-Dev] [python-committers] PEP 581 (Using GitHub issues
 for CPython) is accepted
In-Reply-To: <CACac1F_9cb2ykL4s-5G+GPvkhu+-EFhR_4C1VKY=A0O=o7+jUg@mail.gmail.com>
References: <7407D51F-AC46-4423-AF4A-63940F80D629@python.org>
 <20190515104830.5b307230@fsol>
 <CACac1F9h-uvqUNcjFMh2FCPD4+=mbPb5Eo7=a5aZnhJF0KZFNg@mail.gmail.com>
 <CA+3bQGFh3y6YNz9sWnbFcmFBgsXeaoO92_hFsGr_d=Y4Ee34XA@mail.gmail.com>
 <CACac1F_9cb2ykL4s-5G+GPvkhu+-EFhR_4C1VKY=A0O=o7+jUg@mail.gmail.com>
Message-ID: <CAP1=2W6L9hKdQsn8GY_1zgib0nOzr4soF3fQVE_c-dXsR2EytQ@mail.gmail.com>

On Wed, May 15, 2019 at 8:18 AM Paul Moore <p.f.moore at gmail.com> wrote:

> On Wed, 15 May 2019 at 15:56, Victor Stinner <vstinner at redhat.com> wrote:
> >
> > Hi Paul,
> > Le mer. 15 mai 2019 ? 11:40, Paul Moore <p.f.moore at gmail.com> a ?crit :
> > > Also, is there an archive of the discussions anywhere? The PEP says
> > > discussions happened on Zulip, but I don't follow that and I don't
> > > know where I can find an archived copy of the discussions.
> >
> > Well, the PEP has been discussed a lot at many places since May 2018.
>
> Thanks for all of these. I appreciate the time you took locating them
> for me. But I do have to say that I still can't really follow any
> useful "thread of discussion" - it all seems very fragmented, and it's
> difficult to see the progress towards consensus. Maybe that's just
> because I'm too used to mailing lists :-)
>
> > The PEP 581 has been (first?) discussed at the Language Summit which
> > was part of Pycon US 2018 (May 2018).
>
> Was that written up, or is it all just from people's memories by now?
>

There's at least https://lwn.net/Articles/754779/. Don't remember if other
people wrote up their own summary.

[SNIP]

> The PEP 581 and 588 have been discussed at the Language Summit which
> > was part of Pycon US 2019 (2 weeks ago).
>
> Again, has there been any write up of that (yet)?
>

Not yet, but A. Jesse Jiryu Davis attended so the PSF could blog about it.



>
> As I say, I don't object to the decision, I'm more just trying to
> better understand the process of being involved under the new regime
> of the SC,


I think everyone is. :)

In the case of this PEP the various members of the SC have been keeping up
with the PEP and its discussions over the year that the PEP has been
around, we discussed the pros and cons that people brought up, thought
through what will be required for us to do the migration if the PEP was
accepted, and in the end decided it was worth the effort.


> combined with multiple fragmented forums for discussion.


A PEP is being worked on to try and propose a way to straighten this all
out, but travel, life, etc. has been keeping that one from being finished.
I've added discussing the status of it to our next meeting's agenda.


> It
> feels a lot harder these days to keep track of all the
> discussions/decisions going on. But maybe that's a good thing - only
> people with a genuine interest get involved, and I can spend less of
> my time reading mailing lists! :-)
>

Obviously YMMV, but I actually find it easier. :)

-Brett


>
> Paul
> _______________________________________________
> python-committers mailing list
> python-committers at python.org
> https://mail.python.org/mailman/listinfo/python-committers
> Code of Conduct: https://www.python.org/psf/codeofconduct/
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190515/dc649e21/attachment.html>

From brett at python.org  Wed May 15 12:17:41 2019
From: brett at python.org (Brett Cannon)
Date: Wed, 15 May 2019 09:17:41 -0700
Subject: [Python-Dev] PEP 581 (Using GitHub issues for CPython) is
 accepted
In-Reply-To: <CA+3bQGGsRJQCCx+FGQCXtAAh=__CXTL2ruwQTkoGtQ8keRbBGw@mail.gmail.com>
References: <7407D51F-AC46-4423-AF4A-63940F80D629@python.org>
 <20190515104830.5b307230@fsol>
 <fc355df6-46b7-0b0c-f77d-fc2bf81786f9@mail.mipt.ru>
 <4838c6f5-27cc-3823-4ba5-c20a6d0867d9@python.org>
 <CA+3bQGGsRJQCCx+FGQCXtAAh=__CXTL2ruwQTkoGtQ8keRbBGw@mail.gmail.com>
Message-ID: <CAP1=2W6u3R_P6PHVe2KPivnzHCvqEKo5aFpOj2DYWYySz3H=Vw@mail.gmail.com>

On Wed, May 15, 2019 at 5:38 AM Victor Stinner <vstinner at redhat.com> wrote:

> Le mer. 15 mai 2019 ? 11:31, Christian Heimes <christian at python.org> a
> ?crit :
> > What are the next step? Will there be another PEP that explores how we
> > are going to deal with migration, workflow changes, and how we plan to
> > map current BPO features to Github?
>
> Yes, it's the:
>
> PEP 588 -- GitHub Issues Migration Plan
> https://www.python.org/dev/peps/pep-0588/
>

And to be very clear here, PEP 588 is *not* accepted yet, so it's open for
changes.

I personally would consider the accepting of PEP 581 as a signal that the
SC thinks it's worth putting the effort into migrating to GitHub for issues
and so now we can focus our efforts as a team in trying to make this result
in the workflow that we want.

And I suspect everyone knows this, but just in case, I want to personally
state that I hope everyone understands that there is no way everyone will
be happy with the outcome of this transition and that's okay. :) Workflow
is one of those things where people are very often opinionated (just look
at all of us and our preference in programming language ;) . Obviously we
can all do what we can to be accommodating and come up with a solution that
works for as many people as possible (including external folks like
triagers and issue reporters), but I hope everyone goes into this being as
understanding as possible so we can try to get the best outcome we can.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190515/7a20d64e/attachment.html>

From steve.dower at python.org  Wed May 15 12:51:47 2019
From: steve.dower at python.org (Steve Dower)
Date: Wed, 15 May 2019 09:51:47 -0700
Subject: [Python-Dev] PEP 581 (Using GitHub issues for CPython) is
 accepted
In-Reply-To: <CACac1F9h-uvqUNcjFMh2FCPD4+=mbPb5Eo7=a5aZnhJF0KZFNg@mail.gmail.com>
References: <7407D51F-AC46-4423-AF4A-63940F80D629@python.org>
 <20190515104830.5b307230@fsol>
 <CACac1F9h-uvqUNcjFMh2FCPD4+=mbPb5Eo7=a5aZnhJF0KZFNg@mail.gmail.com>
Message-ID: <ce2f7323-33ed-e80f-f583-6e0f9bb118ad@python.org>

On 15May2019 0240, Paul Moore wrote:
> On Wed, 15 May 2019 at 09:51, Antoine Pitrou <solipsis at pitrou.net> wrote:
>>
>> On Tue, 14 May 2019 18:11:14 -0700
>> Barry Warsaw <barry at python.org> wrote:
>>
>>> As the BDFL-Delegate for PEP 581, and with the unanimous backing of the rest of the Steering Council, I hereby Accept this PEP.
>>
>> For future reference, is it possible to post the Steering Council's
>> reflection and rationale on the PEP?
> 
> Also, is there an archive of the discussions anywhere? The PEP says
> discussions happened on Zulip, but I don't follow that and I don't
> know where I can find an archived copy of the discussions.

I think it would be ideal if the PEP itself summarised the major points 
of these discussions, or at least the links to the discussions (assuming 
we trust Zulip and Discourse to never lose them).

Right now I have a lot of fundamental problems with this PEP as written. 
But I'm assured that the Steering Council gave it thorough consideration 
and that the discussions covered all relevant aspects, so I'm not going 
to create too much of a fuss about it. If they want to move us 
completely to GitHub, so be it!

Cheers,
Steve

From ezio.melotti at gmail.com  Wed May 15 13:44:03 2019
From: ezio.melotti at gmail.com (Ezio Melotti)
Date: Wed, 15 May 2019 19:44:03 +0200
Subject: [Python-Dev] [python-committers] PEP 581 (Using GitHub issues
 for CPython) is accepted
In-Reply-To: <CACac1F_9cb2ykL4s-5G+GPvkhu+-EFhR_4C1VKY=A0O=o7+jUg@mail.gmail.com>
References: <7407D51F-AC46-4423-AF4A-63940F80D629@python.org>
 <20190515104830.5b307230@fsol>
 <CACac1F9h-uvqUNcjFMh2FCPD4+=mbPb5Eo7=a5aZnhJF0KZFNg@mail.gmail.com>
 <CA+3bQGFh3y6YNz9sWnbFcmFBgsXeaoO92_hFsGr_d=Y4Ee34XA@mail.gmail.com>
 <CACac1F_9cb2ykL4s-5G+GPvkhu+-EFhR_4C1VKY=A0O=o7+jUg@mail.gmail.com>
Message-ID: <CACBhJdG0Ocv+QwFLk4AJGt-uWUAazrCfQK2B+UF6sUgZNAXKAA@mail.gmail.com>

Hello,

On Wed, May 15, 2019 at 5:18 PM Paul Moore <p.f.moore at gmail.com> wrote:
>
> On Wed, 15 May 2019 at 15:56, Victor Stinner <vstinner at redhat.com> wrote:
> >
> > Hi Paul,
> > Le mer. 15 mai 2019 ? 11:40, Paul Moore <p.f.moore at gmail.com> a ?crit :
> > > Also, is there an archive of the discussions anywhere? The PEP says
> > > discussions happened on Zulip, but I don't follow that and I don't
> > > know where I can find an archived copy of the discussions.
> >
> > Well, the PEP has been discussed a lot at many places since May 2018.
>
> Thanks for all of these. I appreciate the time you took locating them
> for me. But I do have to say that I still can't really follow any
> useful "thread of discussion" - it all seems very fragmented, and it's
> difficult to see the progress towards consensus. Maybe that's just
> because I'm too used to mailing lists :-)
>

I share the same concerns:
1) the discussion was fragmented between
zulip/discuss/github/python-dev/python-committers/sprints/pycons and
very difficult to follow, even for interested people (Victor already
posted several links but missed a few others);
2) the progress toward consensus was not clear and the approval came
somewhat unexpectedly (it was mentioned a couple of weeks ago on
https://mail.python.org/pipermail/python-committers/2019-April/006705.html
and AFAICT no further discussion took place in public forums since
then);

In addition:
1) the PEP contains several factual errors.  I pointed this out during
the core-sprints last year and more recently Berker pointed out some
on GitHub: https://github.com/python/peps/pull/1013 ;
2) the "discussions-to" header of the PEP points to the zulip stream.
The stream has not been active for 6 months (it got a few new messages
today, the previous activity was in Dec 2018);
3) most of the discussions linked by Victor happened last year.
Unless I missed some, the only discussions happened this year are the
two on Discuss from February (with 3 messages each from a total of 5
authors), and the python-dev thread from March (with 12 messages from
7 authors).  One of the two Discuss threads was a inquiry about the
process (https://discuss.python.org/t/move-pep-581-discussion/873);
4) Berker is/was writing a competing PEP, in order to address the
problems of PEP 581 more effectively since his comments on GitHub
haven't been addressed;
5) next week a student is supposed to start working for the PSF on
b.p.o and Roundup as part of Google Summer of Code
(http://python-gsoc.org/psf_ideas.html);
6) PEP 8016 says "The council should look for ways to use these powers
as little as possible. Instead of voting, it's better to seek
consensus. Instead of ruling on individual PEPs, it's better to define
a standard process for PEP decision making.";

To summarize, I feel the approval of this PEP is premature and that
consensus was reached in a way that wasn't very transparent, without
considering some of the concerns.
(This might also be a symptom of a wider problem caused by the
fragmentation of the discussions between the old MLs, discuss, zulip,
IRC, GitHub PRs and issues, and IRL meetings, but this is a separate
topic.)

Best Regards,
Ezio Melotti




> > The PEP 581 has been (first?) discussed at the Language Summit which
> > was part of Pycon US 2018 (May 2018).
>
> Was that written up, or is it all just from people's memories by now?
>
> > https://github.com/python/peps/pull/681/
>
> Ah - I don't really follow this sort of PR discussion, as the github
> emails don't tend to have sufficient context on what's being said, so
> I (mostly) gave up a long time ago. Also, I tend to assume that
> discussions on PRs are mostly about details of wording, and
> substantive changes will be dealt with in a wider forum. I wonder if I
> should be following PRs on the PEPs repository more closely...?
>
> > Multiple threads on Discourse:
> >
> > https://discuss.python.org/t/move-pep-581-discussion/873
> > https://discuss.python.org/t/pep-581-using-github-issues/535
> > https://discuss.python.org/t/what-are-next-steps-for-pep-581/864
> > https://discuss.python.org/t/pep-process-after-pep-8016/558/4
> >
> > Thread on python-dev:
> >
> > https://mail.python.org/pipermail/python-dev/2019-March/156626.html
> >
> > Threads on python-committers:
> >
> > https://mail.python.org/pipermail/python-committers/2018-May/005428.html
> > https://mail.python.org/pipermail/python-committers/2018-June/005506.html
> > https://mail.python.org/pipermail/python-committers/2018-July/005657.html
>
> I saw these, but didn't get much of a sense of progress towards
> agreement. Again, maybe just because they were lots of fragmented
> threads and locations.
>
> > Discussion on Zulip Chat:
> >
> > https://python.zulipchat.com/#narrow/stream/130206-pep581
>
> I can't see this without logging in :-(
>
> > The Steering Council discussed it internally as well:
> >
> > https://github.com/python/steering-council/blob/master/updates/2019-04-26_steering-council-update.md
>
> I did see that, I was more wondering what led to that decision
> (whether it was a general consensus from the core devs that it was a
> good move, or mainly the SC's own view that prevailed).
>
> > The PEP 581 and 588 have been discussed at the Language Summit which
> > was part of Pycon US 2019 (2 weeks ago).
>
> Again, has there been any write up of that (yet)?
>
> As I say, I don't object to the decision, I'm more just trying to
> better understand the process of being involved under the new regime
> of the SC, combined with multiple fragmented forums for discussion. It
> feels a lot harder these days to keep track of all the
> discussions/decisions going on. But maybe that's a good thing - only
> people with a genuine interest get involved, and I can spend less of
> my time reading mailing lists! :-)
>
> Paul
> _______________________________________________
> python-committers mailing list
> python-committers at python.org
> https://mail.python.org/mailman/listinfo/python-committers
> Code of Conduct: https://www.python.org/psf/codeofconduct/

From brett at python.org  Wed May 15 13:45:25 2019
From: brett at python.org (Brett Cannon)
Date: Wed, 15 May 2019 10:45:25 -0700
Subject: [Python-Dev] PEP 581 (Using GitHub issues for CPython) is
 accepted
In-Reply-To: <ce2f7323-33ed-e80f-f583-6e0f9bb118ad@python.org>
References: <7407D51F-AC46-4423-AF4A-63940F80D629@python.org>
 <20190515104830.5b307230@fsol>
 <CACac1F9h-uvqUNcjFMh2FCPD4+=mbPb5Eo7=a5aZnhJF0KZFNg@mail.gmail.com>
 <ce2f7323-33ed-e80f-f583-6e0f9bb118ad@python.org>
Message-ID: <CAP1=2W7AVi06fH+YhTXUo5i3_9Trgfg+Q5Xhf7N8kd=ki-uYJQ@mail.gmail.com>

On Wed, May 15, 2019 at 9:53 AM Steve Dower <steve.dower at python.org> wrote:

> On 15May2019 0240, Paul Moore wrote:
> > On Wed, 15 May 2019 at 09:51, Antoine Pitrou <solipsis at pitrou.net>
> wrote:
> >>
> >> On Tue, 14 May 2019 18:11:14 -0700
> >> Barry Warsaw <barry at python.org> wrote:
> >>
> >>> As the BDFL-Delegate for PEP 581, and with the unanimous backing of
> the rest of the Steering Council, I hereby Accept this PEP.
> >>
> >> For future reference, is it possible to post the Steering Council's
> >> reflection and rationale on the PEP?
> >
> > Also, is there an archive of the discussions anywhere? The PEP says
> > discussions happened on Zulip, but I don't follow that and I don't
> > know where I can find an archived copy of the discussions.
>
> I think it would be ideal if the PEP itself summarised the major points
> of these discussions, or at least the links to the discussions (assuming
> we trust Zulip and Discourse to never lose them).
>
> Right now I have a lot of fundamental problems with this PEP as written.
> But I'm assured that the Steering Council gave it thorough consideration
>

Yes, sorry if that wasn't communicated better. This was in no way a
knee-jerk decision. Beyond all of us following this topic personally since
it was first brought up last year, we have also been discussing it nearly
every meeting in some form or another since we began discussing PEPs (which
would be probably since February).


> and that the discussions covered all relevant aspects, so I'm not going
> to create too much of a fuss about it. If they want to move us
> completely to GitHub, so be it!
>

I've added to our next meeting's agenda discussing potentially fleshing out
PEP 581 a bit more.

-Brett


>
> Cheers,
> Steve
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/brett%40python.org
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190515/5e7ef844/attachment.html>

From guido at python.org  Wed May 15 14:43:00 2019
From: guido at python.org (Guido van Rossum)
Date: Wed, 15 May 2019 11:43:00 -0700
Subject: [Python-Dev] PEP 581 (Using GitHub issues for CPython) is
 accepted
In-Reply-To: <CAP1=2W7AVi06fH+YhTXUo5i3_9Trgfg+Q5Xhf7N8kd=ki-uYJQ@mail.gmail.com>
References: <7407D51F-AC46-4423-AF4A-63940F80D629@python.org>
 <20190515104830.5b307230@fsol>
 <CACac1F9h-uvqUNcjFMh2FCPD4+=mbPb5Eo7=a5aZnhJF0KZFNg@mail.gmail.com>
 <ce2f7323-33ed-e80f-f583-6e0f9bb118ad@python.org>
 <CAP1=2W7AVi06fH+YhTXUo5i3_9Trgfg+Q5Xhf7N8kd=ki-uYJQ@mail.gmail.com>
Message-ID: <CAP7+vJK-4th5dcdP=4muL0XD8gcRamLsZ+UsP_FjBdXp3uaZKA@mail.gmail.com>

IMO the text of PEP 581 could use some improvements to capture more of the
debate. For example:

- If people want to submit PRs to the peps repo that correct *factual*
mistakes in PEP 581, they're welcome to (and I will personally see that
they will be merged). For example, IIRC you *can* reply to a bpo issue via
email, so that bullet should probably be struck.

- If someone wants to volunteer a PR to the peps repo that adds a list of
objections against the move, e.g. losing certain bpo capabilities, or
specific undesirable behaviors or properties of GitHub, that will also be
entertained (but be reasonable).

But trust me that the SC didn't take this decision lightly. It was
unanimous, and we have all thought about this a great deal (and listened to
long arguments pro and con). It's also impossible to satisfy everyone --
some people find GitHub unacceptable (I've heard about 1-2 people who
refused to create GitHub accounts), but others find bpo unusable (the need
to have a bpo account in order to accept the CLA has been brought up
repeatedly).

A successful migration will take a lot of work, and PEP 588 is where we
keep track of tasks to be accomplished. (There are more that haven't made
it to that PEP, e.g. the mechanics of the actual move.) We're also hoping
to get professional help managing the migration so that not everything
relies on volunteers.

(Speaking of relying on volunteers, if you haven't seen Russel
Keith-Magee's keynote at the most recent PyCon US, please watch it. It is
an amazing thing. https://www.youtube.com/watch?v=ftP5BQh1-YM -- start at
21:00 to skip the conference opening remarks.)

-- 
--Guido van Rossum (python.org/~guido)
*Pronouns: he/him/his **(why is my pronoun here?)*
<http://feministing.com/2015/02/03/how-using-they-as-a-singular-pronoun-can-change-the-world/>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190515/9839b22b/attachment.html>

From ethan at stoneleaf.us  Wed May 15 15:37:55 2019
From: ethan at stoneleaf.us (Ethan Furman)
Date: Wed, 15 May 2019 12:37:55 -0700
Subject: [Python-Dev] deprecation of abstractstaticmethod and
 abstractclassmethod
Message-ID: <51c99452-91d3-a479-2666-1af554c433e2@stoneleaf.us>

In issue 11610* abstractclassmethod and abstractstaticmethod were deprecated, apparently because they were redundant with the new technique of calling `classmethod` or `staticmethod` followed by a call to `abstractmethod`.  To put it in code:

# deprecated

class Foo(ABC):

     @abstractclassmethod
     def foo_happens(cls):
         # do some fooey stuff

# the new(er) way

class Foo(ABC):

     @classmethod
     @abstractmethod
     def foo_happens(cls):
         # do some fooey stuff


I would like to remove the deprecated status of `abstractclassmethod` and `abstractstaticmethod` mainly because:

- using the combined decorator is easy to get right
   (@abstractmethod followed by @classmethod doesn't work)

- getting the order wrong can be hard to spot and fix

Obviously, decorator order matters for many, if not most, decorators out there -- so why should these two be any different?  Because 'abstract', 'class', and 'static' are adjectives -- they're describing the method, rather than changing it**; to use an example, what is the difference between "hot, dry sand" and "dry, hot sand"?  The sand is just as dry and just as hot either way.  In a debugging session looking at:

    @abstractmethod
    @classmethod
    def some_func(self, this, that, the_other):
         # many
         # many
         ...
         ...
         ...
         # many
         # lines
         # of
         # code

Not noticing that the two decorators are in reverse order would be very easy to do.

Because order matters here, but cognitively should not, a helper function to make sure it is always done right is a prime candidate to be added to a module -- and, luckily for us, those helper functions already exist!  Unfortunately, they are also deprecated, discouraging their use, when we should be encouraging their use.

What are the reasons to /not/ remove the deprecation?

--
~Ethan~



* https://bugs.python.org/issue11610

** I realize that abstractmethod does actually change the function, but that's an implementation detail.

From njs at pobox.com  Wed May 15 15:48:15 2019
From: njs at pobox.com (Nathaniel Smith)
Date: Wed, 15 May 2019 12:48:15 -0700
Subject: [Python-Dev] deprecation of abstractstaticmethod and
 abstractclassmethod
In-Reply-To: <51c99452-91d3-a479-2666-1af554c433e2@stoneleaf.us>
References: <51c99452-91d3-a479-2666-1af554c433e2@stoneleaf.us>
Message-ID: <CAPJVwB=czHqzrfV33LmUd-zrqM8xpizzbKC8PEPos1zOQhmo8w@mail.gmail.com>

I don't care about the deprecation either way. But can we fix the
individual decorators so both orders work? Even if it requires a special
case in the code, it seems worthwhile to remove a subtle user-visible
footgun.

On Wed, May 15, 2019, 12:39 Ethan Furman <ethan at stoneleaf.us> wrote:

> In issue 11610* abstractclassmethod and abstractstaticmethod were
> deprecated, apparently because they were redundant with the new technique
> of calling `classmethod` or `staticmethod` followed by a call to
> `abstractmethod`.  To put it in code:
>
> # deprecated
>
> class Foo(ABC):
>
>      @abstractclassmethod
>      def foo_happens(cls):
>          # do some fooey stuff
>
> # the new(er) way
>
> class Foo(ABC):
>
>      @classmethod
>      @abstractmethod
>      def foo_happens(cls):
>          # do some fooey stuff
>
>
> I would like to remove the deprecated status of `abstractclassmethod` and
> `abstractstaticmethod` mainly because:
>
> - using the combined decorator is easy to get right
>    (@abstractmethod followed by @classmethod doesn't work)
>
> - getting the order wrong can be hard to spot and fix
>
> Obviously, decorator order matters for many, if not most, decorators out
> there -- so why should these two be any different?  Because 'abstract',
> 'class', and 'static' are adjectives -- they're describing the method,
> rather than changing it**; to use an example, what is the difference
> between "hot, dry sand" and "dry, hot sand"?  The sand is just as dry and
> just as hot either way.  In a debugging session looking at:
>
>     @abstractmethod
>     @classmethod
>     def some_func(self, this, that, the_other):
>          # many
>          # many
>          ...
>          ...
>          ...
>          # many
>          # lines
>          # of
>          # code
>
> Not noticing that the two decorators are in reverse order would be very
> easy to do.
>
> Because order matters here, but cognitively should not, a helper function
> to make sure it is always done right is a prime candidate to be added to a
> module -- and, luckily for us, those helper functions already exist!
> Unfortunately, they are also deprecated, discouraging their use, when we
> should be encouraging their use.
>
> What are the reasons to /not/ remove the deprecation?
>
> --
> ~Ethan~
>
>
>
> * https://bugs.python.org/issue11610
>
> ** I realize that abstractmethod does actually change the function, but
> that's an implementation detail.
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/njs%40pobox.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190515/8a048814/attachment-0001.html>

From steve.dower at python.org  Wed May 15 16:00:16 2019
From: steve.dower at python.org (Steve Dower)
Date: Wed, 15 May 2019 13:00:16 -0700
Subject: [Python-Dev] deprecation of abstractstaticmethod and
 abstractclassmethod
In-Reply-To: <CAPJVwB=czHqzrfV33LmUd-zrqM8xpizzbKC8PEPos1zOQhmo8w@mail.gmail.com>
References: <51c99452-91d3-a479-2666-1af554c433e2@stoneleaf.us>
 <CAPJVwB=czHqzrfV33LmUd-zrqM8xpizzbKC8PEPos1zOQhmo8w@mail.gmail.com>
Message-ID: <571659b9-d63e-4bf9-ba06-56e7555b9aa8@python.org>

On 15May2019 1248, Nathaniel Smith wrote:
> I don't care about the deprecation either way. But can we fix the 
> individual decorators so both orders work? Even if it requires a special 
> case in the code, it seems worthwhile to remove a subtle user-visible 
> footgun.

The classmethod and staticmethod objects already have a getter for 
__isabstractmethod__ that forwards to the underlying object, so they 
should just need a setter as well, right?

I also have no strong opinion about deprecation. But fixing this seems 
pretty straightforward and may be a good task for someone's first C 
contribution?

Cheers,
Steve



From turnbull.stephen.fw at u.tsukuba.ac.jp  Wed May 15 16:09:30 2019
From: turnbull.stephen.fw at u.tsukuba.ac.jp (Stephen J. Turnbull)
Date: Thu, 16 May 2019 05:09:30 +0900
Subject: [Python-Dev] Consolidating channel of record [was: 581 (Using
 GitHub issues for CPython) is accepted]
In-Reply-To: <CACac1F_9cb2ykL4s-5G+GPvkhu+-EFhR_4C1VKY=A0O=o7+jUg@mail.gmail.com>
References: <7407D51F-AC46-4423-AF4A-63940F80D629@python.org>
 <20190515104830.5b307230@fsol>
 <CACac1F9h-uvqUNcjFMh2FCPD4+=mbPb5Eo7=a5aZnhJF0KZFNg@mail.gmail.com>
 <CA+3bQGFh3y6YNz9sWnbFcmFBgsXeaoO92_hFsGr_d=Y4Ee34XA@mail.gmail.com>
 <CACac1F_9cb2ykL4s-5G+GPvkhu+-EFhR_4C1VKY=A0O=o7+jUg@mail.gmail.com>
Message-ID: <23772.29178.404867.929820@turnbull.sk.tsukuba.ac.jp>

Stripping the list of addressees, since I'm pretty sure all the
people who will *make* the decision read Python-Dev regularly, except
perhaps Carol.

Paul Moore writes:

 > Thanks for all of these. I appreciate the time you took locating them
 > for me. But I do have to say that I still can't really follow any
 > useful "thread of discussion" - it all seems very fragmented, and it's
 > difficult to see the progress towards consensus. Maybe that's just
 > because I'm too used to mailing lists :-)

Please, let's not start by privileging any particular type of channel
in this discussion.  I know what I like, but it's far more important
to have a single place to refer to past discussion IMO.  It's bad
enough with python-ideas and python-dev.

Maybe this fragmentation is OK in the long run, but at least while the
Steering Council is shaking down (say, until release of 3.9?), the
Council should consider anointing two archived "channels of record",
one for private deliberations of the Council itself (for the sake of
future members), and one for PEP discussions.

Of course if the SC chooses Discourse for the PEP channel, people
*will* discuss PEPs on Python-Dev and IRL.  The point is "no fair
pointing people to *other* channels for reference".  If you want to
make a public argument, make it in the proper place.  Everything else
is effectively private.  If you want to refer to that in the public
discussion, read it into the public record.

The stricture for the Council deliberation channel is different, since
I expect the archives would be private to Council members: if you came
into this discussion in the middle, what conversations would you want
to be able to review?

While I'm here, is there a place where general Pythonistas can bring
matters to the attention of the Council?

Steve

From chris.barker at noaa.gov  Wed May 15 16:32:05 2019
From: chris.barker at noaa.gov (Chris Barker - NOAA Federal)
Date: Wed, 15 May 2019 13:32:05 -0700
Subject: [Python-Dev] Consolidating channel of record [was: 581 (Using
 GitHub issues for CPython) is accepted]
In-Reply-To: <23772.29178.404867.929820@turnbull.sk.tsukuba.ac.jp>
References: <7407D51F-AC46-4423-AF4A-63940F80D629@python.org>
 <20190515104830.5b307230@fsol>
 <CACac1F9h-uvqUNcjFMh2FCPD4+=mbPb5Eo7=a5aZnhJF0KZFNg@mail.gmail.com>
 <CA+3bQGFh3y6YNz9sWnbFcmFBgsXeaoO92_hFsGr_d=Y4Ee34XA@mail.gmail.com>
 <CACac1F_9cb2ykL4s-5G+GPvkhu+-EFhR_4C1VKY=A0O=o7+jUg@mail.gmail.com>
 <23772.29178.404867.929820@turnbull.sk.tsukuba.ac.jp>
Message-ID: <CALGmxEL8xJUMM2jUMDUOL+3fg=UxPXvz-7ek-Rw3nd9vhqbrPg@mail.gmail.com>

Frankly, multiple long meandering threads in s single mailing list are
not s very good archive either.

Ideally, the PEP is updated with a summary of the issues discussed as
the discussion unfolds.

(And links to the main discussion threads?)

It founds like that didn?t happen in this case, but it?s not
necessarily too late.

As the community seems to be moving to a wider variety of fora, this
will become all the more critical.

- CHB

> On May 15, 2019, at 1:09 PM, Stephen J. Turnbull <turnbull.stephen.fw at u.tsukuba.ac.jp> wrote:
>
> Stripping the list of addressees, since I'm pretty sure all the
> people who will *make* the decision read Python-Dev regularly, except
> perhaps Carol.
>
> Paul Moore writes:
>
>> Thanks for all of these. I appreciate the time you took locating them
>> for me. But I do have to say that I still can't really follow any
>> useful "thread of discussion" - it all seems very fragmented, and it's
>> difficult to see the progress towards consensus. Maybe that's just
>> because I'm too used to mailing lists :-)
>
> Please, let's not start by privileging any particular type of channel
> in this discussion.  I know what I like, but it's far more important
> to have a single place to refer to past discussion IMO.  It's bad
> enough with python-ideas and python-dev.
>
> Maybe this fragmentation is OK in the long run, but at least while the
> Steering Council is shaking down (say, until release of 3.9?), the
> Council should consider anointing two archived "channels of record",
> one for private deliberations of the Council itself (for the sake of
> future members), and one for PEP discussions.
>
> Of course if the SC chooses Discourse for the PEP channel, people
> *will* discuss PEPs on Python-Dev and IRL.  The point is "no fair
> pointing people to *other* channels for reference".  If you want to
> make a public argument, make it in the proper place.  Everything else
> is effectively private.  If you want to refer to that in the public
> discussion, read it into the public record.
>
> The stricture for the Council deliberation channel is different, since
> I expect the archives would be private to Council members: if you came
> into this discussion in the middle, what conversations would you want
> to be able to review?
>
> While I'm here, is there a place where general Pythonistas can bring
> matters to the attention of the Council?
>
> Steve
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe: https://mail.python.org/mailman/options/python-dev/chris.barker%40noaa.gov

From vstinner at redhat.com  Wed May 15 16:41:32 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Wed, 15 May 2019 22:41:32 +0200
Subject: [Python-Dev] PEP 581 (Using GitHub issues for CPython) is
 accepted
In-Reply-To: <CAP7+vJK-4th5dcdP=4muL0XD8gcRamLsZ+UsP_FjBdXp3uaZKA@mail.gmail.com>
References: <7407D51F-AC46-4423-AF4A-63940F80D629@python.org>
 <20190515104830.5b307230@fsol>
 <CACac1F9h-uvqUNcjFMh2FCPD4+=mbPb5Eo7=a5aZnhJF0KZFNg@mail.gmail.com>
 <ce2f7323-33ed-e80f-f583-6e0f9bb118ad@python.org>
 <CAP1=2W7AVi06fH+YhTXUo5i3_9Trgfg+Q5Xhf7N8kd=ki-uYJQ@mail.gmail.com>
 <CAP7+vJK-4th5dcdP=4muL0XD8gcRamLsZ+UsP_FjBdXp3uaZKA@mail.gmail.com>
Message-ID: <CA+3bQGEc4ggtEpcVANjDjgXfkf7n74RazhieSHmCB0p-mwym0A@mail.gmail.com>

Le mer. 15 mai 2019 ? 20:46, Guido van Rossum <guido at python.org> a ?crit :
> But trust me that the SC didn't take this decision lightly. It was unanimous, and we have all thought about this a great deal (and listened to long arguments pro and con). It's also impossible to satisfy everyone -- some people find GitHub unacceptable (I've heard about 1-2 people who refused to create GitHub accounts), but others find bpo unusable (the need to have a bpo account in order to accept the CLA has been brought up repeatedly).

Around me, many people told me that they were awaiting for the PEP 581
to be accepted,. They are now *very kind* that Python issues are
moving to GitHub.

Honestly, I don't understand why people are excited by bug tracker,
for me it's not the most exciting part of development :-) But it seems
like many people were unhappy with Roundup.

At least, I can say that I'm not a big fan of it's UI (maybe too
complex, too many fields) compared to GitHub. I can also understand
that it's annoying for contributor to have to create 2 separated
accounts (bugs.python.org and GitHub) and link them *carefully*
(mistakes are common, you can see that when a contributor waits for
the "CLA signed" label). Sometimes, they are some glitches with
bugs.python.org <=> GitHub integration: some notifications take longer
30 sec or simply never happen.

I understand that GitHub is better to *report* bugs (and maybe to
comment an issue), but maybe worse for bug triage, and that we want to
make sure that it's easier to contribute to Python for "regular
contributors".

I also know that GitHub isn't perfect and that it will take time to
build a new efficient workflow on top of GitHub.


> A successful migration will take a lot of work, and PEP 588 is where we keep track of tasks to be accomplished. (There are more that haven't made it to that PEP, e.g. the mechanics of the actual move.) We're also hoping to get professional help managing the migration so that not everything relies on volunteers.

That would be great! The migration of the code took something like 2
years and it was a little bit painful for everybody at the beginning.
Having someone paid for that would make the migration shorter and
maybe also smoother.

Victor
-- 
Night gathers, and now my watch begins. It shall not end until my death.

From brett at python.org  Wed May 15 17:13:38 2019
From: brett at python.org (Brett Cannon)
Date: Wed, 15 May 2019 14:13:38 -0700
Subject: [Python-Dev] Consolidating channel of record [was: 581 (Using
 GitHub issues for CPython) is accepted]
In-Reply-To: <23772.29178.404867.929820@turnbull.sk.tsukuba.ac.jp>
References: <7407D51F-AC46-4423-AF4A-63940F80D629@python.org>
 <20190515104830.5b307230@fsol>
 <CACac1F9h-uvqUNcjFMh2FCPD4+=mbPb5Eo7=a5aZnhJF0KZFNg@mail.gmail.com>
 <CA+3bQGFh3y6YNz9sWnbFcmFBgsXeaoO92_hFsGr_d=Y4Ee34XA@mail.gmail.com>
 <CACac1F_9cb2ykL4s-5G+GPvkhu+-EFhR_4C1VKY=A0O=o7+jUg@mail.gmail.com>
 <23772.29178.404867.929820@turnbull.sk.tsukuba.ac.jp>
Message-ID: <CAP1=2W52NwYSeGEtSejMV-rt2QKXzdFoJQG_ruGtrMk5GygrmQ@mail.gmail.com>

On Wed, May 15, 2019 at 1:10 PM Stephen J. Turnbull <
turnbull.stephen.fw at u.tsukuba.ac.jp> wrote:

[SNIP]


>
> While I'm here, is there a place where general Pythonistas can bring
> matters to the attention of the Council?
>

https://github.com/python/steering-council is where we're asking people to
ask stuff so it's recorded in a central location that's publicly visible.

-Brett


>
> Steve
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/brett%40python.org
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190515/92e5ef07/attachment.html>

From mariatta at python.org  Wed May 15 18:06:54 2019
From: mariatta at python.org (Mariatta)
Date: Wed, 15 May 2019 15:06:54 -0700
Subject: [Python-Dev] Python Language Summit 2019 blog posts
Message-ID: <CAGbohnYQnuOc-k3tjdzgiLL4Tpq7YvhVCaXhcKLLdHDJTM7oxw@mail.gmail.com>

If you have FOMO (fear of missing out) of Python Language Summit 2019,
worry no more.

We invited A. Jesse Jiryu Davis to cover for the language summit, and the
blog posts are starting to appear in The PSF's official blog.

Starts here:
http://pyfound.blogspot.com/2019/05/the-2019-python-language-summit.html

More links will be added as they become available.

Currently available posts:

- Russell Keith-Magee: Python On Other Platforms
https://pyfound.blogspot.com/2019/05/russell-keith-magee-python-on-other.html

- Paul Ganssle: Time Zones In The Standard Library
https://pyfound.blogspot.com/2019/05/paul-ganssle-time-zones-in-standard.html

Thank you Jesse for writing up these posts, and thanks to all language
summit presenters and attendees.

?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190515/99635389/attachment.html>

From p.f.moore at gmail.com  Wed May 15 18:07:19 2019
From: p.f.moore at gmail.com (Paul Moore)
Date: Wed, 15 May 2019 23:07:19 +0100
Subject: [Python-Dev] Consolidating channel of record [was: 581 (Using
 GitHub issues for CPython) is accepted]
In-Reply-To: <CALGmxEL8xJUMM2jUMDUOL+3fg=UxPXvz-7ek-Rw3nd9vhqbrPg@mail.gmail.com>
References: <7407D51F-AC46-4423-AF4A-63940F80D629@python.org>
 <20190515104830.5b307230@fsol>
 <CACac1F9h-uvqUNcjFMh2FCPD4+=mbPb5Eo7=a5aZnhJF0KZFNg@mail.gmail.com>
 <CA+3bQGFh3y6YNz9sWnbFcmFBgsXeaoO92_hFsGr_d=Y4Ee34XA@mail.gmail.com>
 <CACac1F_9cb2ykL4s-5G+GPvkhu+-EFhR_4C1VKY=A0O=o7+jUg@mail.gmail.com>
 <23772.29178.404867.929820@turnbull.sk.tsukuba.ac.jp>
 <CALGmxEL8xJUMM2jUMDUOL+3fg=UxPXvz-7ek-Rw3nd9vhqbrPg@mail.gmail.com>
Message-ID: <CACac1F-F3BEsm=QE_b0Cmt6PBkhV06bWEFV_TtuX=s9=AA7zEA@mail.gmail.com>

On Wed, 15 May 2019 at 21:34, Chris Barker - NOAA Federal via
Python-Dev <python-dev at python.org> wrote:
>
> Frankly, multiple long meandering threads in s single mailing list are
> not s very good archive either.

They aren't, I agree. But in my view, they constitute the *source
material* that the summaries in the PEP should be based on. No-one
should need to read the archives if they just want to know the points
being made. But for someone who wonders how a particular conclusion
was reached, having a single archive of record (to use Stephen's
phrase) makes sense - certainly people *can* search multiple sources,
but we should be trying to be transparent, and not making it too hard
to research the background of a decision is part of that.

> Ideally, the PEP is updated with a summary of the issues discussed as
> the discussion unfolds.

I'm not sure that's just "ideally" - one of the key purposes of a PEP
should be to summarise the discussions.

> (And links to the main discussion threads?)

That's nice to have, yes.

> It founds like that didn?t happen in this case, but it?s not
> necessarily too late.

Definitely. In fact, I doubt there's much of any real interest that
needs to be referenced (workflow debates are not the most interesting
reading, in my experience :-))

> As the community seems to be moving to a wider variety of fora, this
> will become all the more critical.

I completely agree here.

> On May 15, 2019, at 1:09 PM, Stephen J. Turnbull <turnbull.stephen.fw at u.tsukuba.ac.jp> wrote:

> > Please, let's not start by privileging any particular type of channel
> > in this discussion.  I know what I like, but it's far more important
> > to have a single place to refer to past discussion IMO.  It's bad
> > enough with python-ideas and python-dev.

100% agree. This shouldn't be about whether any particular channel is
"better" or "worse" than any other. It's just about not having the
original content of the discussions that feed into an accepted PEP be
scattered too widely.

> > The stricture for the Council deliberation channel is different, since
> > I expect the archives would be private to Council members: if you came
> > into this discussion in the middle, what conversations would you want
> > to be able to review?

In theory, PEP 13 says that the council should look for consensus
rather than making decisions on their own. Ideally, the council's
private deliberations should be of little interest to anyone else,
because either (a) the consensus should be clearly visible from the
public record of the debate, or (b) the public record should show that
the discussion was getting nowhere, and the council had to make the
final decision (at which point, the community has effectively given up
the right to argue about why the council chose what they did).

The reason the decision on PEP 581 started me thinking about this was
precisely because I hadn't seen any signs of that consensus or of a
stalled discussion. Maybe I wasn't looking in the right places, but I
*thought* I was following the majority of PEP-related discussions (at
least skimming them). So I was somewhat startled to see a formal
decision come with what felt like no real warning.

Paul

From tjreedy at udel.edu  Wed May 15 18:32:39 2019
From: tjreedy at udel.edu (Terry Reedy)
Date: Wed, 15 May 2019 18:32:39 -0400
Subject: [Python-Dev] Python Language Summit 2019 blog posts
In-Reply-To: <CAGbohnYQnuOc-k3tjdzgiLL4Tpq7YvhVCaXhcKLLdHDJTM7oxw@mail.gmail.com>
References: <CAGbohnYQnuOc-k3tjdzgiLL4Tpq7YvhVCaXhcKLLdHDJTM7oxw@mail.gmail.com>
Message-ID: <qbi428$r0i$1@blaine.gmane.org>

On 5/15/2019 6:06 PM, Mariatta wrote:
> If you have FOMO (fear of missing out) of Python Language Summit 2019, 
> worry no more.
> 
> We invited A. Jesse Jiryu Davis to cover for the language summit, and 
> the blog posts are starting to appear in The PSF's official blog.
> 
> Starts here: 
> http://pyfound.blogspot.com/2019/05/the-2019-python-language-summit.html
> 
> More links will be added as they become available.
> 
> Currently available posts:
> 
> -?Russell Keith-Magee: Python On Other Platforms
> https://pyfound.blogspot.com/2019/05/russell-keith-magee-python-on-other.html
> 
> -?Paul Ganssle: Time Zones In The Standard Library
> https://pyfound.blogspot.com/2019/05/paul-ganssle-time-zones-in-standard.html
> 
> Thank you Jesse for writing up these posts, and thanks to all language 
> summit presenters and attendees.

These appear on the Python Planet list, mirrored at news.gmane.org as
gwene.org.python.planet



-- 
Terry Jan Reedy



From vstinner at redhat.com  Wed May 15 19:10:46 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Thu, 16 May 2019 01:10:46 +0200
Subject: [Python-Dev] RFC: PEP 587 "Python Initialization Configuration":
 3rd version
Message-ID: <CA+3bQGHTqcgayS7YqeO6as3M3_J=KSX_v-cEYOf9UQX=5y+wkw@mail.gmail.com>

Hi,

Thanks to the constructive discussions, I enhanced my PEP 587. I don't
plan any further change, the PEP is now ready to review (and maybe
even for pronouncement, hi Thomas! :-)).

The Rationale now better explains all challenges and the complexity of
the Python Initialization Configuration.

The "Isolate Python" section is a short guide explaining how configure
Python to embed it into an application.

The "Path Configuration" section elaborates the most interesting part
of the configuration: configure where Python looks for modules
(sys.path). I added PyWideStringList_Insert() to allow to prepend a
path in module_search_paths.

The "Python Issues" section give a long list of issues solved directly
or indirectly by this PEP.

I'm open for bikeshedding on PyConfig fields names and added functions
names ;-) I hesitate for "use_module_search_paths": maybe
"module_search_paths_set" is a better name, as in "is
module_search_paths set?". The purpose of this field is to allow to
have an empty sys.path (ask PyConfig_Read() to not override it). IMHO
an empty sys.path makes sense for some specific use cases, like
executing Pyhon code without any external module.

My PEP 587 proposes better names: Py_FrozenFlag becomes
PyConfig.pathconfig_warnings and Py_DebugFlag becomes
PyConfig.parser_debug. I also avoided double negation. For example,
Py_DontWriteBytecodeFlag becomes write_bytecode.

Changes between version 3 and version 2:

* PyConfig: Add configure_c_stdio and parse_argv; rename _frozen to
pathconfig_warnings.
* Rename functions using bytes strings and wide strings. For example,
Py_PreInitializeFromWideArgs() becomes Py_PreInitializeFromArgs(), and
PyConfig_SetArgv() becomes PyConfig_SetBytesArgv().
* Add PyWideStringList_Insert() function.
* New "Path configuration", "Isolate Python", "Python Issues" and
"Version History" sections.
* PyConfig_SetString() and PyConfig_SetBytesString() now requires the
configuration as the first argument.
* Rename Py_UnixMain() to Py_BytesMain()


HTML version:
https://www.python.org/dev/peps/pep-0587/

Full PEP text below.

I know that the PEP is long, but well, it's a complex topic, and I
chose to add many examples to make the API easier to understand.

Victor

---

PEP: 587
Title: Python Initialization Configuration
Author: Victor Stinner <vstinner at redhat.com>, Nick Coghlan <ncoghlan at gmail.com>
BDFL-Delegate: Thomas Wouters <thomas at python.org>
Discussions-To: python-dev at python.org
Status: Draft
Type: Standards Track
Content-Type: text/x-rst
Created: 27-Mar-2019
Python-Version: 3.8

Abstract
========

Add a new C API to configure the Python Initialization providing finer
control on the whole configuration and better error reporting.

It becomes possible to read the configuration and modify it before it is
applied. It also becomes possible to completely override how Python
computes the module search paths (``sys.path``).

Building a customized Python which behaves as regular Python becomes
easier using the new ``Py_RunMain()`` function. Moreover, command line
arguments passed to ``PyConfig.argv`` are now parsed as the regular
Python parses command line options, and ``PyConfig.xoptions`` are
handled as ``-X opt`` command line options.

This extracts a subset of the API design from the PEP 432 development and
refactoring work that is now considered sufficiently stable to make public
(allowing 3rd party embedding applications access to the same configuration
APIs that the native CPython CLI is now using).


Rationale
=========

Python is highly configurable but its configuration evolved organically.
The initialization configuration is scattered all around the code using
different ways to set them: global configuration variables (ex:
``Py_IsolatedFlag``), environment variables (ex: ``PYTHONPATH``),
command line arguments (ex: ``-b``), configuration files (ex:
``pyvenv.cfg``), function calls (ex: ``Py_SetProgramName()``). A
straightforward and reliable way to configure Python is needed.

Some configuration parameters are not accessible from the C API, or not
easily. For example, there is no API to override the default values of
``sys.executable``.

Some options like ``PYTHONPATH`` can only be set using an environment
variable which has a side effect on Python child processes.

Some options also depends on other options: see `Priority and Rules`_.
Python 3.7 API does not provide a consistent view of the overall
configuration.

The C API of Python 3.7 Initialization takes ``wchar_t*`` strings as
input whereas the Python filesystem encoding is set during the
initialization which can lead to mojibake.

Python 3.7 APIs like ``Py_Initialize()`` aborts the process on memory
allocation failure which is not convenient when Python is embedded.
Moreover, ``Py_Main()`` could exit directly the process rather than
returning an exit code. Proposed new API reports the error or exit code
to the caller which can decide how to handle it.

Implementing the PEP 540 (UTF-8 Mode) and the new ``-X dev`` correctly
was almost impossible in Python 3.6. The code base has been deeply
reworked in Python 3.7 and then in Python 3.8 to read the configuration
into a structure with no side effect. It becomes possible to clear the
configuration (release memory) and read again the configuration if the
encoding changed . It is required to implement properly the UTF-8 which
changes the encoding using ``-X utf8`` command line option. Internally,
bytes ``argv`` strings are decoded from the filesystem encoding. The
``-X dev`` changes the memory allocator (behaves as
``PYTHONMALLOC=debug``), whereas it was not possible to change the
memory allocation *while* parsing the command line arguments. The new
design of the internal implementation not only allowed to implement
properly ``-X utf8`` and ``-X dev``, it also allows to change the Python
behavior way more easily, especially for corner cases like that, and
ensure that the configuration remains consistent: see `Priority and
Rules`_.

This PEP is a partial implementation of PEP 432 which is the overall
design.  New fields can be added later to ``PyConfig`` structure to
finish the implementation of the PEP 432 (e.g. by adding a new partial
initialization API which allows to configure Python using Python objects to
finish the full initialization). However, those features are omitted from this
PEP as even the native CPython CLI doesn't work that way - the public API
proposal in this PEP is limited to features which have already been implemented
and adopted as private APIs for us in the native CPython CLI.


Python Initialization C API
===========================

This PEP proposes to add the following new structures, functions and
macros.

New structures (4):

* ``PyConfig``
* ``PyInitError``
* ``PyPreConfig``
* ``PyWideStringList``

New functions (17):

* ``Py_PreInitialize(config)``
* ``Py_PreInitializeFromBytesArgs(config, argc, argv)``
* ``Py_PreInitializeFromArgs(config, argc, argv)``
* ``PyWideStringList_Append(list, item)``
* ``PyWideStringList_Insert(list, index, item)``
* ``PyConfig_SetString(config,config_str, str)``
* ``PyConfig_SetBytesString(config, config_str, str)``
* ``PyConfig_SetBytesArgv(config, argc, argv)``
* ``PyConfig_SetArgv(config, argc, argv)``
* ``PyConfig_Read(config)``
* ``PyConfig_Clear(config)``
* ``Py_InitializeFromConfig(config)``
* ``Py_InitializeFromBytesArgs(config, argc, argv)``
* ``Py_InitializeFromArgs(config, argc, argv)``
* ``Py_BytesMain(argc, argv)``
* ``Py_RunMain()``
* ``Py_ExitInitError(err)``

New macros (9):

* ``PyPreConfig_INIT``
* ``PyConfig_INIT``
* ``Py_INIT_OK()``
* ``Py_INIT_ERR(MSG)``
* ``Py_INIT_NO_MEMORY()``
* ``Py_INIT_EXIT(EXITCODE)``
* ``Py_INIT_IS_ERROR(err)``
* ``Py_INIT_IS_EXIT(err)``
* ``Py_INIT_FAILED(err)``

This PEP also adds ``_PyRuntimeState.preconfig`` (``PyPreConfig`` type)
and ``PyInterpreterState.config`` (``PyConfig`` type) fields to these
internal structures. ``PyInterpreterState.config`` becomes the new
reference configuration, replacing global configuration variables and
other private variables.


PyWideStringList
----------------

``PyWideStringList`` is a list of ``wchar_t*`` strings.

Example to initialize a string from C static array::

    static wchar_t* argv[2] = {
        L"-c",
        L"pass",
    };
    PyWideStringList config_argv = PyWideStringList_INIT;
    config_argv.length = Py_ARRAY_LENGTH(argv);
    config_argv.items = argv;

``PyWideStringList`` structure fields:

* ``length`` (``Py_ssize_t``)
* ``items`` (``wchar_t**``)

Methods:

* ``PyInitError PyWideStringList_Append(PyWideStringList *list, const
wchar_t *item)``:
  Append *item* to *list*.
* ``PyInitError PyWideStringList_Insert(PyWideStringList *list,
Py_ssize_t index, const wchar_t *item)``:
  Insert *item* into *list* at *index*. If *index* is greater than
  *list* length, just append *item* to *list*.

If *length* is non-zero, *items* must be non-NULL and all strings must
be non-NULL.

PyInitError
-----------

``PyInitError`` is a structure to store an error message or an exit code
for the Python Initialization. For an error, it stores the C function
name which created the error.

Example::

    PyInitError alloc(void **ptr, size_t size)
    {
        *ptr = PyMem_RawMalloc(size);
        if (*ptr == NULL) {
            return Py_INIT_NO_MEMORY();
        }
        return Py_INIT_OK();
    }

    int main(int argc, char **argv)
    {
        void *ptr;
        PyInitError err = alloc(&ptr, 16);
        if (Py_INIT_FAILED(err)) {
            Py_ExitInitError(err);
        }
        PyMem_Free(ptr);
        return 0;
    }

``PyInitError`` fields:

* ``exitcode`` (``int``):
  argument passed to ``exit()``, only set by ``Py_INIT_EXIT()``.
* ``err_msg`` (``const char*``): error message
* private ``_func`` field: used by ``Py_INIT_ERR()`` to store the C
  function name which created the error.
* private ``_type`` field: for internal usage only.

Macro to create an error:

* ``Py_INIT_OK()``: Success.
* ``Py_INIT_ERR(err_msg)``: Initialization error with a message.
* ``Py_INIT_NO_MEMORY()``: Memory allocation failure (out of memory).
* ``Py_INIT_EXIT(exitcode)``: Exit Python with the specified exit code.

Other macros and functions:

* ``Py_INIT_IS_ERROR(err)``: Is the result an error?
* ``Py_INIT_IS_EXIT(err)``: Is the result an exit?
* ``Py_INIT_FAILED(err)``: Is the result an error or an exit? Similar
  to ``Py_INIT_IS_ERROR(err) || Py_INIT_IS_EXIT(err)``.
* ``Py_ExitInitError(err)``: Call ``exit(exitcode)`` on Unix or
  ``ExitProcess(exitcode)`` if the result is an exit, call
  ``Py_FatalError(err_msg)`` if the result is an error. Must not be
  called if the result is a success.

Pre-Initialization with PyPreConfig
-----------------------------------

``PyPreConfig`` structure is used to pre-initialize Python:

* Set the memory allocator
* Configure the LC_CTYPE locale
* Set the UTF-8 mode

Example using the pre-initialization to enable the UTF-8 Mode::

    PyPreConfig preconfig = PyPreConfig_INIT;
    preconfig.utf8_mode = 1;

    PyInitError err = Py_PreInitialize(&preconfig);
    if (Py_INIT_FAILED(err)) {
        Py_ExitInitError(err);
    }

    /* at this point, Python will speak UTF-8 */

    Py_Initialize();
    /* ... use Python API here ... */
    Py_Finalize();

Functions to pre-initialize Python:

* ``PyInitError Py_PreInitialize(const PyPreConfig *config)``
* ``PyInitError Py_PreInitializeFromBytesArgs(const PyPreConfig
*config, int argc, char **argv)``
* ``PyInitError Py_PreInitializeFromArgs(const PyPreConfig *config,
int argc, wchar_t **argv)``

These functions can be called with *config* set to ``NULL``.

If Python is initialized with command line arguments, the command line
arguments must also be passed to pre-initialize Python, since they have
an effect on the pre-configuration like encodings. For example, the
``-X utf8`` command line option enables the UTF-8 Mode.

These functions can be called with *config* set to ``NULL``. The caller
is responsible to handle error or exit using ``Py_INIT_FAILED()`` and
``Py_ExitInitError()``.

``PyPreConfig`` fields:

* ``allocator`` (``char*``, default: ``NULL``):
  Name of the memory allocator (ex: ``"malloc"``).
* ``coerce_c_locale`` (``int``, default: 0):
  If equals to 2, coerce the C locale; if equals to 1, read the LC_CTYPE
  locale to decide if it should be coerced.
* ``coerce_c_locale_warn`` (``int``, default: 0):
  If non-zero, emit a warning if the C locale is coerced.
* ``dev_mode`` (``int``, default: 0):
  See ``PyConfig.dev_mode``.
* ``isolated`` (``int``, default: 0):
  See ``PyConfig.isolated``.
* ``legacy_windows_fs_encoding`` (``int``, Windows only, default: 0):
  If non-zero, disable UTF-8 Mode, set the Python filesystem encoding to
  ``mbcs``, set the filesystem error handler to ``replace``.
* ``use_environment`` (``int``, default: 1):
  See ``PyConfig.use_environment``.
* ``utf8_mode`` (``int``, default: 0):
  If non-zero, enable the UTF-8 mode.

``PyPreConfig`` private field, for internal use only:

* ``_config_version`` (``int``, default: config version):
  Configuration version, used for ABI compatibility.

The C locale coercion (PEP 538) and the UTF-8 Mode (PEP 540) are
disabled by default in ``PyPreConfig``. Set ``coerce_c_locale``,
``coerce_c_locale_warn`` and ``utf8_mode`` to ``-1`` to let Python
enable them depending on the user configuration. In this case, it's
safer to explicitly pre-initialize Python to ensure that encodings are
configured before the Python initialization starts. Example to get the
same encoding than regular Python::

    PyPreConfig preconfig = PyPreConfig_INIT;
    preconfig.coerce_c_locale = -1;
    preconfig.coerce_c_locale_warn = -1;
    preconfig.utf8_mode = -1;

    PyInitError err = Py_PreInitialize(&preconfig);
    if (Py_INIT_FAILED(err)) {
        Py_ExitInitError(err);
    }


Initialization with PyConfig
----------------------------

The ``PyConfig`` structure contains all parameters to configure Python.

Example setting the program name::

    PyInitError err;
    PyConfig config = PyConfig_INIT;

    err = PyConfig_SetString(&config.program_name, L"my_program");
    if (_Py_INIT_FAILED(err)) {
        Py_ExitInitError(err);
    }

    err = Py_InitializeFromConfig(&config);
    PyConfig_Clear(&config);

    if (Py_INIT_FAILED(err)) {
        Py_ExitInitError(err);
    }

``PyConfig`` methods:

* ``PyInitError PyConfig_SetString(PyConfig *config, wchar_t
**config_str, const wchar_t *str)``:
  Copy the wide character string *str* into ``*config_str``.
* ``PyInitError PyConfig_SetBytesString(PyConfig *config, wchar_t
**config_str, const char *str)``:
  Decode *str* using ``Py_DecodeLocale()`` and set the result into
  ``*config_str``. Pre-initialize Python if needed to ensure that
  encodings are properly configured.
* ``PyInitError PyConfig_SetArgv(PyConfig *config, int argc, wchar_t **argv)``:
  Set command line arguments from wide character strings.
* ``PyInitError PyConfig_SetBytesArgv(PyConfig *config, int argc, char
**argv)``:
  Set command line arguments: decode bytes using ``Py_DecodeLocale()``.
  Pre-initialize Python if needed to ensure that encodings are properly
  configured.
* ``PyInitError PyConfig_Read(PyConfig *config)``:
  Read all Python configuration. Fields which are already set are left
  unchanged.
* ``void PyConfig_Clear(PyConfig *config)``:
  Release configuration memory.

Functions to initialize Python:

* ``PyInitError Py_InitializeFromConfig(const PyConfig *config)``:
  Initialize Python from *config* configuration. *config* can be
  ``NULL``.

The caller of these methods and functions is responsible to handle
failure or exit using ``Py_INIT_FAILED()`` and ``Py_ExitInitError()``.

``PyConfig`` fields:

* ``argv`` (``PyWideStringList``, default: empty):
  Command line arguments, ``sys.argv``.
  It is parsed and updated by default, set ``parse_argv`` to 0 to avoid
  that.
* ``base_exec_prefix`` (``wchar_t*``, default: ``NULL``):
  ``sys.base_exec_prefix``.
* ``base_prefix`` (``wchar_t*``, default: ``NULL``):
  ``sys.base_prefix``.
* ``buffered_stdio`` (``int``, default: 1):
  If equals to 0, enable unbuffered mode, make stdout and stderr streams
  to be unbuffered.
* ``bytes_warning`` (``int``, default: 0):
  If equals to 1, issue a warning when comparing ``bytes`` or
  ``bytearray`` with ``str``, or comparing ``bytes`` with ``int``. If
  equal or greater to 2, raise a ``BytesWarning`` exception.
* ``check_hash_pycs_mode`` (``wchar_t*``, default: ``"default"``):
  ``--check-hash-based-pycs`` command line option value (see PEP 552).
* ``configure_c_stdio`` (``int``, default: 1):
  If non-zero, configure C standard streams (``stdio``, ``stdout``,
  ``stdout``).  For example, set their mode to ``O_BINARY`` on Windows.
* ``dev_mode`` (``int``, default: 0):
  Development mode
* ``dll_path`` (``wchar_t*``, Windows only, default: ``NULL``):
  Windows DLL path.
* ``dump_refs`` (``int``, default: 0):
  If non-zero, dump all objects which are still alive at exit
* ``exec_prefix`` (``wchar_t*``, default: ``NULL``):
  ``sys.exec_prefix``.
* ``executable`` (``wchar_t*``, default: ``NULL``):
  ``sys.executable``.
* ``faulthandler`` (``int``, default: 0):
  If non-zero, call ``faulthandler.enable()``.
* ``filesystem_encoding`` (``wchar_t*``, default: ``NULL``):
  Filesystem encoding, ``sys.getfilesystemencoding()``.
* ``filesystem_errors`` (``wchar_t*``, default: ``NULL``):
  Filesystem encoding errors, ``sys.getfilesystemencodeerrors()``.
* ``use_hash_seed`` (``int``, default: 0),
  ``hash_seed`` (``unsigned long``, default: 0):
  Randomized hash function seed.
* ``home`` (``wchar_t*``, default: ``NULL``):
  Python home directory.
* ``import_time`` (``int``, default: 0):
  If non-zero, profile import time.
* ``inspect`` (``int``, default: 0):
  Enter interactive mode after executing a script or a command.
* ``install_signal_handlers`` (``int``, default: 1):
  Install signal handlers?
* ``interactive`` (``int``, default: 0):
  Interactive mode.
* ``legacy_windows_stdio`` (``int``, Windows only, default: 0):
  If non-zero, use ``io.FileIO`` instead of ``WindowsConsoleIO`` for
  ``sys.stdin``, ``sys.stdout`` and ``sys.stderr``.
* ``malloc_stats`` (``int``, default: 0):
  If non-zero, dump memory allocation statistics at exit.
* ``module_search_path_env`` (``wchar_t*``, default: ``NULL``):
  ``PYTHONPATH`` environment variale value.
* ``use_module_search_paths`` (``int``, default: 0),
  ``module_search_paths`` (``PyWideStringList``, default: empty):
  ``sys.path``.
* ``optimization_level`` (``int``, default: 0):
  Compilation optimization level.
* ``parse_argv`` (``int``, default: 1):
  If non-zero, parse ``argv`` command line arguments and update
  ``argv``.
* ``parser_debug`` (``int``, default: 0):
  If non-zero, turn on parser debugging output (for expert only,
  depending on compilation options).
* ``pathconfig_warnings`` (``int``, default: 1):
  If equal to 0, suppress warnings when computing the path
  configuration.
* ``prefix`` (``wchar_t*``, default: ``NULL``):
  ``sys.prefix``.
* ``program_name`` (``wchar_t*``, default: ``NULL``):
  Program name.
* ``program`` (``wchar_t*``, default: ``NULL``):
  ``argv[0]`` or an empty string.
* ``pycache_prefix`` (``wchar_t*``, default: ``NULL``):
  ``.pyc`` cache prefix.
* ``quiet`` (``int``, default: 0):
  Quiet mode. For example, don't display the copyright and version
  messages even in interactive mode.
* ``run_command`` (``wchar_t*``, default: ``NULL``):
  ``-c COMMAND`` argument.
* ``run_filename`` (``wchar_t*``), default: ``NULL``:
  ``python3 SCRIPT`` argument.
* ``run_module`` (``wchar_t*``, default: ``NULL``):
  ``python3 -m MODULE`` argument.
* ``show_alloc_count`` (``int``, default: 0):
  Show allocation counts at exit?
* ``show_ref_count`` (``int``, default: 0):
  Show total reference count at exit?
* ``site_import`` (``int``, default: 1):
  Import the ``site`` module at startup?
* ``skip_source_first_line`` (``int``, default: 0):
  Skip the first line of the source?
* ``stdio_encoding`` (``wchar_t*``, default: ``NULL``),
  ``stdio_errors`` (``wchar_t*``, default: ``NULL``):
  Encoding and encoding errors of ``sys.stdin``, ``sys.stdout``
  and ``sys.stderr``.
* ``tracemalloc`` (``int``, default: 0):
  If non-zero, call ``tracemalloc.start(value)``.
* ``user_site_directory`` (``int``, default: 1):
  If non-zero, add user site directory to ``sys.path``.
* ``verbose`` (``int``, default: 0):
  If non-zero, enable verbose mode.
* ``warnoptions`` (``PyWideStringList``, default: empty):
  Options of the ``warnings`` module to build warnings filters.
* ``write_bytecode`` (``int``, default: 1):
  If non-zero, write ``.pyc`` files.
* ``xoptions`` (``PyWideStringList``, default: empty):
  ``sys._xoptions``.

``PyConfig`` private fields, for internal use only:

* ``_config_version`` (``int``, default: config version):
  Configuration version, used for ABI compatibility.
* ``_install_importlib`` (``int``, default: 1):
  Install importlib?
* ``_init_main`` (``int``, default: 1):
  If equal to 0, stop Python initialization before the "main" phase
  (see PEP 432).

By default, the ``argv`` arguments are parsed as regular Python command
line arguments and ``argv`` is updated to strip parsed Python arguments:
see `Command Line Arguments`_. Set ``parse_argv`` to 0 to avoid parsing
and updating ``argv``. If ``argv`` is empty, an empty string is added to
ensure that ``sys.argv`` always exists and is never empty.

The ``xoptions`` options are parsed to set other options: see `-X
Options`_.

More complete example modifying the configuration before calling
``PyConfig_Read()``, and then modify the read configuration::

    PyInitError init_python(const char *program_name)
    {
        PyInitError err;
        PyConfig config = PyConfig_INIT;

        /* Set the program name before reading the configuraton
           (decode byte string from the locale encoding) */
        err = PyConfig_SetBytesString(&config.program_name,
                                      program_name);
        if (_Py_INIT_FAILED(err)) {
            goto fail;
        }

        /* Read all configuration at once */
        err = PyConfig_Read(&config);
        if (_Py_INIT_FAILED(err)) {
            goto fail;
        }

        /* Append our custom search path to sys.path */
        err = PyWideStringList_Append(&config.module_search_paths,
                                      L"/path/to/more/modules");
        if (_Py_INIT_FAILED(err)) {
            goto fail;
        }

        /* Override executable computed by PyConfig_Read() */
        err = PyConfig_SetString(&config, &config.executable, L"my_executable");
        if (_Py_INIT_FAILED(err)) {
            goto fail;
        }

        err = Py_InitializeFromConfig(&config);

        /* Py_InitializeFromConfig() copied config which must now be
           cleared to release memory */
        PyConfig_Clear(&config);

        return err;

    fail:
        PyConfig_Clear(&config);
        Py_ExitInitError(err);
    }

.. note::
   ``PyConfig`` does not have any field for extra inittab functions:
   ``PyImport_AppendInittab()`` and ``PyImport_ExtendInittab()``
   functions are still relevant (and can be called before Python
   initialization).


Initialization with constant PyConfig
-------------------------------------

When no ``PyConfig`` method is used but only
``Py_InitializeFromConfig()``, the caller is responsible for managing
``PyConfig`` memory. In that case, constant strings and constant string
lists can be used to avoid dynamically allocated memory. It can be used
for most simple configurations.

Example of Python initialization enabling the isolated mode::

    PyConfig config = PyConfig_INIT;
    config.isolated = 1;

    PyInitError err = Py_InitializeFromConfig(&config);
    if (Py_INIT_FAILED(err)) {
        Py_ExitInitError(err);
    }
    /* ... use Python API here ... */
    Py_Finalize();

``PyConfig_Clear()`` is not needed in this example since ``config`` does
not contain any dynamically allocated string:
``Py_InitializeFromConfig`` is responsible to fill other fields and
manage the memory.

For convenience, two other functions are provided for constant
``PyConfig``:

* ``PyInitError Py_InitializeFromArgs(const PyConfig *config, int
argc, wchar_t **argv)``
* ``PyInitError Py_InitializeFromBytesArgs(const PyConfig *config, int
argc, char **argv)``

They be called with *config* set to ``NULL``. The caller of these
functions is responsible to handle failure or exit using
``Py_INIT_FAILED()`` and ``Py_ExitInitError()``.


Path Configuration
------------------

``PyConfig`` contains multiple fields for the path configuration:

* Path configuration input fields:

  * ``home``
  * ``module_search_path_env``
  * ``pathconfig_warnings``

* Path configuration output fields:

  * ``dll_path`` (Windows only)
  * ``exec_prefix``
  * ``executable``
  * ``prefix``
  * ``use_module_search_paths``, ``module_search_paths``

Set ``pathconfig_warnings`` to 0 to suppress warnings when computing the
path configuration.

It is possible to completely ignore the function computing the default
path configuration by setting explicitly all path configuration output
fields listed above. A string is considered as set even if it's an empty
string. ``module_search_paths`` is considered as set if
``use_module_search_paths`` is set to 1. In this case, path
configuration input fields are ignored as well.

If ``base_prefix`` or ``base_exec_prefix`` fields are not set, they
inherit their value from ``prefix`` and ``exec_prefix`` respectively.

If ``site_import`` is non-zero, ``sys.path`` can be modified by the
``site`` module. For example, if ``user_site_directory`` is non-zero,
the user site directory is added to ``sys.path`` (if it exists).


Isolate Python
--------------

The default configuration is designed to behave as a regular Python.
To embed Python into an application, it's possible to tune the
configuration to better isolated the embedded Python from the system:

* Set ``isolated`` to 1 to ignore environment variables and not prepend
  the current directory to ``sys.path``.
* Set the `Path Configuration`_ ("output fields") to ignore the function
  computing the default path configuration.


Py_BytesMain()
--------------

Python 3.7 provides a high-level ``Py_Main()`` function which requires
to pass command line arguments as ``wchar_t*`` strings. It is
non-trivial to use the correct encoding to decode bytes. Python has its
own set of issues with C locale coercion and UTF-8 Mode.

This PEP adds a new ``Py_BytesMain()`` function which takes command line
arguments as bytes::

    int Py_BytesMain(int argc, char **argv)

Py_RunMain()
------------

The new ``Py_RunMain()`` function executes the command
(``PyConfig.run_command``), the script (``PyConfig.run_filename``) or
the module (``PyConfig.run_module``) specified on the command line or in
the configuration, and then finalizes Python. It returns an exit status
that can be passed to the ``exit()`` function.

Example of customized Python in isolated mode::

    #include <Python.h>

    int main(int argc, char *argv[])
    {
        PyConfig config = PyConfig_INIT;
        config.isolated = 1;

        PyInitError err = Py_InitializeFromBytesArgs(&config, argc, argv);
        if (Py_INIT_FAILED(err)) {
            Py_ExitInitError(err);
        }

        /* put more configuration code here if needed */

        return Py_RunMain();
    }

The example is a basic implementation of the "System Python Executable"
discussed in PEP 432.


Memory allocations and Py_DecodeLocale()
----------------------------------------

Python memory allocation functions like ``PyMem_RawMalloc()`` must not
be used before Python pre-initialization, whereas calling directly
``malloc()`` and ``free()`` is always safe.

For ``PyPreConfig`` and constant ``PyConfig``, the caller is responsible
to manage dynamically allocated memory; constant strings and constant
string lists can be used to avoid memory allocations.

Dynamic ``PyConfig`` requires to call ``PyConfig_Clear()`` to release
memory.

``Py_DecodeLocale()`` must not be called before the pre-initialization.


Backwards Compatibility
=======================

This PEP only adds a new API: it leaves the existing API unchanged and
has no impact on the backwards compatibility.

The implementation ensures that the existing API is compatible with the
new API. For example, ``PyConfig`` uses the value of global
configuration variables as default values.


Annex: Python Configuration
===========================

Priority and Rules
------------------

Priority of configuration parameters, highest to lowest:

* ``PyConfig``
* ``PyPreConfig``
* Configuration files
* Command line options
* Environment variables
* Global configuration variables

Priority of warning options, highest to lowest:

* ``PyConfig.warnoptions``
* ``PyConfig.dev_mode`` (add ``"default"``)
* ``PYTHONWARNINGS`` environment variables
* ``-W WARNOPTION`` command line argument
* ``PyConfig.bytes_warning`` (add ``"error::BytesWarning"`` if greater
  than 1, or add ``"default::BytesWarning``)

Rules on ``PyConfig`` parameters:

* If ``isolated`` is non-zero, ``use_environment`` and
  ``user_site_directory`` are set to 0.
* If ``legacy_windows_fs_encoding`` is non-zero, ``utf8_mode`` is set to
  0.
* If ``dev_mode`` is non-zero, ``allocator`` is set to ``"debug"``,
  ``faulthandler`` is set to 1, and ``"default"`` filter is added to
  ``warnoptions``. But the ``PYTHONMALLOC`` environment variable has the
  priority over ``dev_mode`` to set the memory allocator.
* If ``base_prefix`` is not set, it inherits ``prefix`` value.
* If ``base_exec_prefix`` is not set, it inherits ``exec_prefix`` value.
* If the ``python._pth`` configuration file is present, ``isolated`` is
  set to 1 and ``site_import`` is set to 0; but ``site_import`` is set
  to 1 if ``python._pth`` contains ``import site``.

Rules on ``PyConfig`` and ``PyPreConfig`` parameters:

* If ``PyPreConfig.legacy_windows_fs_encoding`` is non-zero,
  set ``PyConfig.utf8_mode`` to 0, set ``PyConfig.filesystem_encoding``
  to ``mbcs``, and set ``PyConfig.filesystem_errors`` to ``replace``.

Configuration Files
-------------------

Python configuration files:

* ``pyvenv.cfg``
* ``python._pth`` (Windows only)
* ``pybuilddir.txt`` (Unix only)

Global Configuration Variables
------------------------------

Global configuration variables mapped to ``PyPreConfig`` fields:

========================================  ================================
Variable                                  Field
========================================  ================================
``Py_IgnoreEnvironmentFlag``              ``use_environment`` (NOT)
``Py_IsolatedFlag``                       ``isolated``
``Py_LegacyWindowsFSEncodingFlag``        ``legacy_windows_fs_encoding``
``Py_UTF8Mode``                           ``utf8_mode``
========================================  ================================

(NOT) means that the ``PyPreConfig`` value is the oposite of the global
configuration variable value.

Global configuration variables mapped to ``PyConfig`` fields:

========================================  ================================
Variable                                  Field
========================================  ================================
``Py_BytesWarningFlag``                   ``bytes_warning``
``Py_DebugFlag``                          ``parser_debug``
``Py_DontWriteBytecodeFlag``              ``write_bytecode`` (NOT)
``Py_FileSystemDefaultEncodeErrors``      ``filesystem_errors``
``Py_FileSystemDefaultEncoding``          ``filesystem_encoding``
``Py_FrozenFlag``                         ``pathconfig_warnings`` (NOT)
``Py_HasFileSystemDefaultEncoding``       ``filesystem_encoding``
``Py_HashRandomizationFlag``              ``use_hash_seed``, ``hash_seed``
``Py_IgnoreEnvironmentFlag``              ``use_environment`` (NOT)
``Py_InspectFlag``                        ``inspect``
``Py_InteractiveFlag``                    ``interactive``
``Py_IsolatedFlag``                       ``isolated``
``Py_LegacyWindowsStdioFlag``             ``legacy_windows_stdio``
``Py_NoSiteFlag``                         ``site_import`` (NOT)
``Py_NoUserSiteDirectory``                ``user_site_directory`` (NOT)
``Py_OptimizeFlag``                       ``optimization_level``
``Py_QuietFlag``                          ``quiet``
``Py_UnbufferedStdioFlag``                ``buffered_stdio`` (NOT)
``Py_VerboseFlag``                        ``verbose``
``_Py_HasFileSystemDefaultEncodeErrors``  ``filesystem_errors``
========================================  ================================

(NOT) means that the ``PyConfig`` value is the oposite of the global
configuration variable value.

``Py_LegacyWindowsFSEncodingFlag`` and ``Py_LegacyWindowsStdioFlag`` are
only available on Windows.

Command Line Arguments
----------------------

Usage::

    python3 [options]
    python3 [options] -c COMMAND
    python3 [options] -m MODULE
    python3 [options] SCRIPT


Command line options mapped to pseudo-action on ``PyPreConfig`` fields:

================================  ================================
Option                            ``PyConfig`` field
================================  ================================
``-E``                            ``use_environment = 0``
``-I``                            ``isolated = 1``
``-X dev``                        ``dev_mode = 1``
``-X utf8``                       ``utf8_mode = 1``
``-X utf8=VALUE``                 ``utf8_mode = VALUE``
================================  ================================

Command line options mapped to pseudo-action on ``PyConfig`` fields:

================================  ================================
Option                            ``PyConfig`` field
================================  ================================
``-b``                            ``bytes_warning++``
``-B``                            ``write_bytecode = 0``
``-c COMMAND``                    ``run_command = COMMAND``
``--check-hash-based-pycs=MODE``  ``_check_hash_pycs_mode = MODE``
``-d``                            ``parser_debug++``
``-E``                            ``use_environment = 0``
``-i``                            ``inspect++`` and ``interactive++``
``-I``                            ``isolated = 1``
``-m MODULE``                     ``run_module = MODULE``
``-O``                            ``optimization_level++``
``-q``                            ``quiet++``
``-R``                            ``use_hash_seed = 0``
``-s``                            ``user_site_directory = 0``
``-S``                            ``site_import``
``-t``                            ignored (kept for backwards compatibility)
``-u``                            ``buffered_stdio = 0``
``-v``                            ``verbose++``
``-W WARNING``                    add ``WARNING`` to ``warnoptions``
``-x``                            ``skip_source_first_line = 1``
``-X OPTION``                     add ``OPTION`` to ``xoptions``
================================  ================================

``-h``, ``-?`` and ``-V`` options are handled without ``PyConfig``.

-X Options
----------

-X options mapped to pseudo-action on ``PyConfig`` fields:

================================  ================================
Option                            ``PyConfig`` field
================================  ================================
``-X dev``                        ``dev_mode = 1``
``-X faulthandler``               ``faulthandler = 1``
``-X importtime``                 ``import_time = 1``
``-X pycache_prefix=PREFIX``      ``pycache_prefix = PREFIX``
``-X showalloccount``             ``show_alloc_count = 1``
``-X showrefcount``               ``show_ref_count = 1``
``-X tracemalloc=N``              ``tracemalloc = N``
================================  ================================

Environment Variables
---------------------

Environment variables mapped to ``PyPreConfig`` fields:

=================================  =============================================
Variable                           ``PyPreConfig`` field
=================================  =============================================
``PYTHONCOERCECLOCALE``            ``coerce_c_locale``, ``coerce_c_locale_warn``
``PYTHONDEVMODE``                  ``dev_mode``
``PYTHONLEGACYWINDOWSFSENCODING``  ``legacy_windows_fs_encoding``
``PYTHONMALLOC``                   ``allocator``
``PYTHONUTF8``                     ``utf8_mode``
=================================  =============================================

Environment variables mapped to ``PyConfig`` fields:

=================================  ====================================
Variable                           ``PyConfig`` field
=================================  ====================================
``PYTHONDEBUG``                    ``parser_debug``
``PYTHONDEVMODE``                  ``dev_mode``
``PYTHONDONTWRITEBYTECODE``        ``write_bytecode``
``PYTHONDUMPREFS``                 ``dump_refs``
``PYTHONEXECUTABLE``               ``program_name``
``PYTHONFAULTHANDLER``             ``faulthandler``
``PYTHONHASHSEED``                 ``use_hash_seed``, ``hash_seed``
``PYTHONHOME``                     ``home``
``PYTHONINSPECT``                  ``inspect``
``PYTHONIOENCODING``               ``stdio_encoding``, ``stdio_errors``
``PYTHONLEGACYWINDOWSSTDIO``       ``legacy_windows_stdio``
``PYTHONMALLOCSTATS``              ``malloc_stats``
``PYTHONNOUSERSITE``               ``user_site_directory``
``PYTHONOPTIMIZE``                 ``optimization_level``
``PYTHONPATH``                     ``module_search_path_env``
``PYTHONPROFILEIMPORTTIME``        ``import_time``
``PYTHONPYCACHEPREFIX,``           ``pycache_prefix``
``PYTHONTRACEMALLOC``              ``tracemalloc``
``PYTHONUNBUFFERED``               ``buffered_stdio``
``PYTHONVERBOSE``                  ``verbose``
``PYTHONWARNINGS``                 ``warnoptions``
=================================  ====================================

``PYTHONLEGACYWINDOWSFSENCODING`` and ``PYTHONLEGACYWINDOWSSTDIO`` are
specific to Windows.


Annex: Python 3.7 API
=====================

Python 3.7 has 4 functions in its C API to initialize and finalize
Python:

* ``Py_Initialize()``, ``Py_InitializeEx()``: initialize Python
* ``Py_Finalize()``, ``Py_FinalizeEx()``: finalize Python

Python 3.7 can be configured using `Global Configuration Variables`_,
`Environment Variables`_, and the following functions:

* ``PyImport_AppendInittab()``
* ``PyImport_ExtendInittab()``
* ``PyMem_SetAllocator()``
* ``PyMem_SetupDebugHooks()``
* ``PyObject_SetArenaAllocator()``
* ``Py_SetPath()``
* ``Py_SetProgramName()``
* ``Py_SetPythonHome()``
* ``Py_SetStandardStreamEncoding()``
* ``PySys_AddWarnOption()``
* ``PySys_AddXOption()``
* ``PySys_ResetWarnOptions()``

There is also a high-level ``Py_Main()`` function.


Python Issues
=============

Issues that will be fixed by this PEP, directly or indirectly:

* `bpo-1195571 <https://bugs.python.org/issue1195571>`_: "simple
  callback system for Py_FatalError"
* `bpo-11320 <https://bugs.python.org/issue11320>`_:
  "Usage of API method Py_SetPath causes errors in Py_Initialize()
  (Posix ony)"
* `bpo-13533 <https://bugs.python.org/issue13533>`_: "Would like
  Py_Initialize to play friendly with host app"
* `bpo-14956 <https://bugs.python.org/issue14956>`_: "custom PYTHONPATH
  may break apps embedding Python"
* `bpo-19983 <https://bugs.python.org/issue19983>`_: "When interrupted
  during startup, Python should not call abort() but exit()"
* `bpo-22213 <https://bugs.python.org/issue22213>`_: "Make pyvenv style
  virtual environments easier to configure when embedding Python". This
  PEP more or
* `bpo-22257 <https://bugs.python.org/issue22257>`_: "PEP 432: Redesign
  the interpreter startup sequence"
* `bpo-29778 <https://bugs.python.org/issue29778>`_: "_Py_CheckPython3
  uses uninitialized dllpath when embedder sets module path with
  Py_SetPath"
* `bpo-30560 <https://bugs.python.org/issue30560>`_: "Add
  Py_SetFatalErrorAbortFunc: Allow embedding program to handle fatal
  errors".
* `bpo-31745 <https://bugs.python.org/issue31745>`_: "Overloading
  "Py_GetPath" does not work"
* `bpo-32573 <https://bugs.python.org/issue32573>`_: "All sys attributes
  (.argv, ...) should exist in embedded environments".
* `bpo-34725 <https://bugs.python.org/issue34725>`_:
  "Py_GetProgramFullPath() odd behaviour in Windows"
* `bpo-36204 <https://bugs.python.org/issue36204>`_: "Deprecate calling
  Py_Main() after Py_Initialize()? Add Py_InitializeFromArgv()?"
* `bpo-33135 <https://bugs.python.org/issue33135>`_: "Define field
  prefixes for the various config structs". The PEP now defines well
  how warnings options are handled.

Issues of the PEP implementation:

* `bpo-16961 <https://bugs.python.org/issue16961>`_: "No regression
  tests for -E and individual environment vars"
* `bpo-20361 <https://bugs.python.org/issue20361>`_: "-W command line
  options and PYTHONWARNINGS environmental variable should not override
  -b / -bb command line options"
* `bpo-26122 <https://bugs.python.org/issue26122>`_: "Isolated mode
  doesn't ignore PYTHONHASHSEED"
* `bpo-29818 <https://bugs.python.org/issue29818>`_:
  "Py_SetStandardStreamEncoding leads to a memory error in debug mode"
* `bpo-31845 <https://bugs.python.org/issue31845>`_:
  "PYTHONDONTWRITEBYTECODE and PYTHONOPTIMIZE have no effect"
* `bpo-32030 <https://bugs.python.org/issue32030>`_: "PEP 432: Rewrite
  Py_Main()"
* `bpo-32124 <https://bugs.python.org/issue32124>`_: "Document functions
  safe to be called before Py_Initialize()"
* `bpo-33042 <https://bugs.python.org/issue33042>`_: "New 3.7 startup
  sequence crashes PyInstaller"
* `bpo-33932 <https://bugs.python.org/issue33932>`_: "Calling
  Py_Initialize() twice now triggers a fatal error (Python 3.7)"
* `bpo-34008 <https://bugs.python.org/issue34008>`_: "Do we support
  calling Py_Main() after Py_Initialize()?"
* `bpo-34170 <https://bugs.python.org/issue34170>`_: "Py_Initialize():
  computing path configuration must not have side effect (PEP 432)"
* `bpo-34589 <https://bugs.python.org/issue34589>`_: "Py_Initialize()
  and Py_Main() should not enable C locale coercion"
* `bpo-34639 <https://bugs.python.org/issue34639>`_:
  "PYTHONCOERCECLOCALE is ignored when using -E or -I option"
* `bpo-36142 <https://bugs.python.org/issue36142>`_: "Add a new
  _PyPreConfig step to Python initialization to setup memory allocator
  and encodings"
* `bpo-36202 <https://bugs.python.org/issue36202>`_: "Calling
  Py_DecodeLocale() before _PyPreConfig_Write() can produce mojibake"
* `bpo-36301 <https://bugs.python.org/issue36301>`_: "Add
  _Py_PreInitialize() function"
* `bpo-36443 <https://bugs.python.org/issue36443>`_: "Disable
  coerce_c_locale and utf8_mode by default in _PyPreConfig?"
* `bpo-36444 <https://bugs.python.org/issue36444>`_: "Python
  initialization: remove _PyMainInterpreterConfig"
* `bpo-36471 <https://bugs.python.org/issue36471>`_: "PEP 432, PEP 587:
  Add _Py_RunMain()"
* `bpo-36763 <https://bugs.python.org/issue36763>`_: "PEP 587: Rework
  initialization API to prepare second version of the PEP"
* `bpo-36775 <https://bugs.python.org/issue36775>`_: "Rework filesystem
  codec implementation"
* `bpo-36900 <https://bugs.python.org/issue36900>`_: "Use _PyCoreConfig
  rather than global configuration variables"

Issues related to this PEP:

* `bpo-12598 <https://bugs.python.org/issue12598>`_: "Move sys variable
  initialization from import.c to sysmodule.c"
* `bpo-15577 <https://bugs.python.org/issue15577>`_: "Real argc and argv
  in embedded interpreter"
* `bpo-16202 <https://bugs.python.org/issue16202>`_: "sys.path[0]
  security issues"
* `bpo-18309 <https://bugs.python.org/issue18309>`_: "Make python
  slightly more relocatable"
* `bpo-25631 <https://bugs.python.org/issue25631>`_: "Segmentation fault
  with invalid Unicode command-line arguments in embedded Python"
* `bpo-26007 <https://bugs.python.org/issue26007>`_: "Support embedding
  the standard library in an executable"
* `bpo-31210 <https://bugs.python.org/issue31210>`_: "Can not import
  modules if sys.prefix contains DELIM".
* `bpo-31349 <https://bugs.python.org/issue31349>`_: "Embedded
  initialization ignores Py_SetProgramName()"
* `bpo-33919 <https://bugs.python.org/issue33919>`_: "Expose
  _PyCoreConfig structure to Python"
* `bpo-35173 <https://bugs.python.org/issue35173>`_: "Re-use already
  existing functionality to allow Python 2.7.x (both embedded and
  standalone) to locate the module path according to the shared library"


Version History
===============

* Version 3:

  * ``PyConfig``: Add ``configure_c_stdio`` and ``parse_argv``,
    rename ``_frozen`` to ``pathconfig_warnings``.
  * Rename functions using bytes strings and wide character strings. For
    example, ``Py_PreInitializeFromWideArgs`` becomes
    ``Py_PreInitializeFromArgs``, and ``PyConfig_SetArgv`` becomes
    ``PyConfig_SetBytesArgv``.
  * Add ``PyWideStringList_Insert()`` function.
  * New "Path configuration", "Isolate Python", "Python Issues"
    and "Version History" sections.
  * ``PyConfig_SetString()`` and ``PyConfig_SetBytesString()`` now
    requires the configuration as the first argument.
  * Rename ``Py_UnixMain()`` to ``Py_BytesMain()``

* Version 2: Add ``PyConfig`` methods (ex: ``PyConfig_Read()``), add
  ``PyWideStringList_Append()``, rename ``PyWideCharList`` to
  ``PyWideStringList``.
* Version 1: Initial version.

Copyright
=========

This document has been placed in the public domain.

From vstinner at redhat.com  Wed May 15 21:23:55 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Thu, 16 May 2019 03:23:55 +0200
Subject: [Python-Dev] bpo-36829: Add sys.unraisablehook()
Message-ID: <CA+3bQGHmR18+nQ8=oUc3cu2vZJ0riyqqxKmaJ8ykNe9NPnVS8w@mail.gmail.com>

Hi,

I recently modified Python 3.8 to start logging I/O error in io
destructors when using the development mode (-X dev) or when Python is
built in debug mode. This change allows to debug bpo-18748 very
strange crash in PyThread_exit_thread(), when a thread closes an
arbitrary file descriptor by mistake.

The problem is that exceptions raised in a destructor cannot be passed
to the current function call: the exception is logged into sys.stderr
with a message like "Exception ignored in: ...". It's easy to miss
such message in stderr.

Thomas Grainger opened 36829 to propose to add -X abortunraisable
command line option: abort immediately the current process (by calling
Py_FatalError()) at the first PyErr_WriteUnraisable() call. Thomas had
like a way to easily detect these in CI. I'm not satisfied by his
proposal, since it only gives little control to the user on how
"unraisable exceptions" are handled: the process dies, that's all.

https://bugs.python.org/issue36829

I proposed a different approach: add a new sys.unraisablehook hook
which is called to handle an "unraisable exception". To handle them
differently, replace the hook. For example, I wrote a custom hook to
log these exceptions into a file (the output on the Python test suite
is interesting!). It also becomes trivial to reimplement Thomas's idea
(kill the process):

    import signal
    def hook(unraisable): signal.raise_signal(signal.SIGABRT)
    sys.unraisablehook = hook

I plan to merge my implementation soon, are you fine with that?

https://github.com/python/cpython/pull/13187

--

The first implementation of my API used sys.unraisablehook(exc_type,
exc_value, exc_tb, obj). The problem is that Serhiy Storchaka asked me
to add a new error message field which breaks the API: the API is not
future-proof.

I modified my API to create an object to pack arguments. The new API
becomes sys.unraisablehook(unraisable) where unraisable has 4 fields:
exc_type, exc_value, exc_tb, obj. This API is now future-proof: adding
a new field will not break existing custom hooks!

By the way, I like this idea of adding an optional error message, and
I plan to implement it once sys.unraisablehook is merged ;-) I already
implemented it previously, but I reverted my changes to make the PR
simpler to review.


Extract of the documentation:

"""
Add new :func:`sys.unraisablehook` function which can be overriden to control
how "unraisable exceptions" are handled. It is called when an exception has
occurred but there is no way for Python to handle it. For example, when a
destructor raises an exception or during garbage collection
(:func:`gc.collect`).
"""

My implementation has a limitation: if PyErr_WriteUnraisable() is
called after the Python finalization cleared sys attributes (almost
the last function call of Py_Finalize), the default hook is called
instead of the custom hook. In this case, sys.stderr is None and so
the default hook does nothing.

These late calls to PyErr_WriteUnraisable() cannot be catched with my
approached, whereas Thomas Grainger's command line option "-X
abortunraisable" allows that.

My concern with Thomas's approach is that if the problem is killed
with SIGABRT by such late PyErr_WriteUnraisable(), a low-level
debugger like gdb is needed to investigate the crash, since Python is
already finalized and so cannot be used to investigate.

I prefer to allow arbitrary hook with the limitation, rather than
always kill the process with SIGABRT at the first
PyErr_WriteUnraisable() and require to use a low-level debugger.

Victor
-- 
Night gathers, and now my watch begins. It shall not end until my death.

From njs at pobox.com  Wed May 15 22:44:38 2019
From: njs at pobox.com (Nathaniel Smith)
Date: Wed, 15 May 2019 19:44:38 -0700
Subject: [Python-Dev] bpo-36829: Add sys.unraisablehook()
In-Reply-To: <CA+3bQGHmR18+nQ8=oUc3cu2vZJ0riyqqxKmaJ8ykNe9NPnVS8w@mail.gmail.com>
References: <CA+3bQGHmR18+nQ8=oUc3cu2vZJ0riyqqxKmaJ8ykNe9NPnVS8w@mail.gmail.com>
Message-ID: <CAPJVwBmrOBe4uBhH1sNdbxUdBJ3US4urBtpTVMHKakgZD9S3cQ@mail.gmail.com>

On Wed, May 15, 2019 at 6:25 PM Victor Stinner <vstinner at redhat.com> wrote:
> I proposed a different approach: add a new sys.unraisablehook hook
> which is called to handle an "unraisable exception". To handle them
> differently, replace the hook. For example, I wrote a custom hook to
> log these exceptions into a file (the output on the Python test suite
> is interesting!). It also becomes trivial to reimplement Thomas's idea
> (kill the process):

What happens if the hook raises an exception?

-n

-- 
Nathaniel J. Smith -- https://vorpus.org

From gregory.szorc at gmail.com  Thu May 16 00:34:18 2019
From: gregory.szorc at gmail.com (Gregory Szorc)
Date: Wed, 15 May 2019 21:34:18 -0700
Subject: [Python-Dev] RFC: PEP 587 "Python Initialization
 Configuration": 3rd version
In-Reply-To: <CA+3bQGHTqcgayS7YqeO6as3M3_J=KSX_v-cEYOf9UQX=5y+wkw@mail.gmail.com>
References: <CA+3bQGHTqcgayS7YqeO6as3M3_J=KSX_v-cEYOf9UQX=5y+wkw@mail.gmail.com>
Message-ID: <7ddebc01-a067-4b52-48b7-e90347ed7cc7@gmail.com>

On 5/15/2019 4:10 PM, Victor Stinner wrote:
> Hi,
> 
> Thanks to the constructive discussions, I enhanced my PEP 587. I don't
> plan any further change, the PEP is now ready to review (and maybe
> even for pronouncement, hi Thomas! :-)).
> 
> The Rationale now better explains all challenges and the complexity of
> the Python Initialization Configuration.
> 
> The "Isolate Python" section is a short guide explaining how configure
> Python to embed it into an application.
> 
> The "Path Configuration" section elaborates the most interesting part
> of the configuration: configure where Python looks for modules
> (sys.path). I added PyWideStringList_Insert() to allow to prepend a
> path in module_search_paths.
> 
> The "Python Issues" section give a long list of issues solved directly
> or indirectly by this PEP.
> 
> I'm open for bikeshedding on PyConfig fields names and added functions
> names ;-) I hesitate for "use_module_search_paths": maybe
> "module_search_paths_set" is a better name, as in "is
> module_search_paths set?". The purpose of this field is to allow to
> have an empty sys.path (ask PyConfig_Read() to not override it). IMHO
> an empty sys.path makes sense for some specific use cases, like
> executing Pyhon code without any external module.
> 
> My PEP 587 proposes better names: Py_FrozenFlag becomes
> PyConfig.pathconfig_warnings and Py_DebugFlag becomes
> PyConfig.parser_debug. I also avoided double negation. For example,
> Py_DontWriteBytecodeFlag becomes write_bytecode.
> 
> Changes between version 3 and version 2:
> 
> * PyConfig: Add configure_c_stdio and parse_argv; rename _frozen to
> pathconfig_warnings.
> * Rename functions using bytes strings and wide strings. For example,
> Py_PreInitializeFromWideArgs() becomes Py_PreInitializeFromArgs(), and
> PyConfig_SetArgv() becomes PyConfig_SetBytesArgv().
> * Add PyWideStringList_Insert() function.
> * New "Path configuration", "Isolate Python", "Python Issues" and
> "Version History" sections.
> * PyConfig_SetString() and PyConfig_SetBytesString() now requires the
> configuration as the first argument.
> * Rename Py_UnixMain() to Py_BytesMain()
> 
> 
> HTML version:
> https://www.python.org/dev/peps/pep-0587/
> 
> Full PEP text below.
> 
> I know that the PEP is long, but well, it's a complex topic, and I
> chose to add many examples to make the API easier to understand.

I saw your request for feedback on Twitter a few days back and found
this thread.

This PEP is of interest to me because I'm the maintainer of PyOxidizer -
a project for creating single file executables embedding Python. As part
of hacking on PyOxidizer, I will admit to grumbling about the current
state of the configuration and initialization mechanisms. The reliance
on global variables and the haphazard way in which you must call certain
functions before others was definitely a bit frustrating to deal with.

I don't want to wade into too much bikeshedding in my review. I'll let
the professionals deal with things like naming :) Also, I haven't read
previous posts about this PEP. Apologies if my comments bring up old topics.

Let's get on with the review...

My most important piece of feedback is: thank you for tackling this!
Your work to shore up the inner workings of interpreter state and
management is a big deal on multiple dimensions. I send my sincere
gratitude.

Overall, I'm very happy with the state of the proposal. Better than what
we currently have on nearly every dimension. When reading my feedback,
please keep in mind that I'm in like 95% agreement with the proposal as is.

The following paragraphs detail points of feedback.

PyPreConfig_INIT and PyConfig_INIT as macros that return a struct feel
weird to me. Specifically, the `PyPreConfig preconfig =
PyPreConfig_INIT;` pattern doesn't feel right. I'm sort of OK with these
being implemented as macros. But I think they should look like function
calls so the door is open to converting them to function calls in the
future. An argument to make them actual function calls today is to
facilitate better FFI interop. As it stands, non-C/C++ bindings to the
API will need to reimplement the macro's logic. That might be simple
today. But who knows what complexity may be added in years ahead. An
opaque function implementation future proofs the API.

PyPreConfig.allocator being a char* seems a bit weird. Does this imply
having to use strcmp() to determine which allocator to use? Perhaps the
allocator setting should be an int mapping to a constant instead?
Relatedly, how are custom allocators registered? e.g. from Rust, I want
to use Rust's allocator. How would I do that in this API? Do I still
need to call PyMem_SetAllocator()? I thought a point of this proposal
was to consolidate per-interpreter config settings?

I'm a little confused about the pre-initialization functions that take
command arguments. Is this intended to only be used for parsing the
arguments that `python` recognizes? Presumably a custom application
embedding Python would never use these APIs unless it wants to emulate
the behavior of `python`? (I suppose this can be clarified in the API
docs once this is implemented.)

What about PyImport_FrozenModules? This is a global variable related to
Python initialization (it contains _frozen_importlib and
_frozen_importlib_external) but it is not accounted for in the PEP. I
rely on this struct in PyOxidizer to replace the importlib modules with
custom versions so we can do 0-copy in-memory import of Python bytecode
for the entirety of the standard library. Should the PyConfig have a
reference to the _frozen[] to use? Should the _frozen struct be made
part of the public API?

The PEP mentions a private PyConfig._install_importlib member. I'm
curious what this is because it may be relevant to PyOxidizer. FWIW I
/might/ be interested in a mechanism to better control importlib
initialization because PyOxidizer is currently doing dirty things at
run-time to register the custom 0-copy meta path importer. I /think/ my
desired API would be a mechanism to control the name(s) of the frozen
module(s) to use to bootstrap importlib. Or there would be a way to
register the names of additional frozen modules to import and run as
part of initializing importlib (before any .py-based stdlib modules are
imported). Then PyOxidizer wouldn't need to hack up the source code to
importlib, compile custom bytecode, and inject it via
PyImport_FrozenModules. I concede this may be out of scope for the PEP.
But if the API is being reworked, I'd certainly welcome making it easier
for tools like PyOxidizer to work their crazy module importing magic :)

I really like the new Py_RunMain() API and associated PyConfig members.
I also invented this wheel in PyOxidizer and the new API should result
in me deleting some code that I wish I didn't have to write in the first
place :)

Since I mentioned PyOxidizer a lot, you may want to take a gander at
https://github.com/indygreg/PyOxidizer/blob/64514f862b57846801f9ae4af5968e2e4a541ab7/pyoxidizer/src/pyembed/pyinterp.rs.
That's the code I wrote for embedding a Python interpreter in Rust. I
invented a data structure for representing a Python interpreter
configuration. And the similarities to PyConfig are striking. I think
that's a good sign :) It might be useful to read through that file -
especially the init function (line with `pub fn init`) to see if
anything I'm doing pushes the boundaries of the proposed API. Feel free
to file GitHub issues if you see obvious bugs with PyOxidizer's Python
initialization logic while you're at it :)

Also, one thing that tripped me up a few times when writing PyOxidizer
was managing the lifetimes of memory that various global variables point
to. The short version is I was setting Python globals to point to memory
allocated by Rust and I managed to crash Python by freeing memory before
it should have been. Since the new API seems to preserve support for
global variables, I'm curious if there are changes to how memory must be
managed. It would be really nice to get to a state where you only need
to ensure the PyConfig instance and all its referenced memory only needs
to outlive the interpreter it configures. That would make the memory
lifetimes story intuitive and easily compatible with Rust.

One feature that I think is missing from the proposal (and this is
related to the previous paragraph) is the ability to prevent config
fallback to things that aren't PyConfig and PyPreConfig. There is
`PyConfig.parse_argv` to disable command argument parsing and
`PyConfig.use_environment` to disable environment variable fallback. But
AFAICT there is no option to disable configuration file fallback nor
global variable fallback. As someone who embeds Python and loves total
control, I would absolutely love to opt in to a "Py[Pre]Config only"
mode where those structs are the only things that control interpreter
behavior. I'd opt in to that in a heartbeat if it supported all the
customization that PyOxidizer requires!

... and I think that's all the points of feedback I have!

Again, this proposal is terrific overall and so much better than what we
have today. The wall of text I just wrote is disproportionate in size to
the quality of the PEP. I almost feel bad writing so much feedback for
such a terrific PEP ;)

Excellent work, Victor. I can't wait to see these changes materialize!

> ---
> 
> PEP: 587
> Title: Python Initialization Configuration
> Author: Victor Stinner <vstinner at redhat.com>, Nick Coghlan <ncoghlan at gmail.com>
> BDFL-Delegate: Thomas Wouters <thomas at python.org>
> Discussions-To: python-dev at python.org
> Status: Draft
> Type: Standards Track
> Content-Type: text/x-rst
> Created: 27-Mar-2019
> Python-Version: 3.8
> 
> Abstract
> ========
> 
> Add a new C API to configure the Python Initialization providing finer
> control on the whole configuration and better error reporting.
> 
> It becomes possible to read the configuration and modify it before it is
> applied. It also becomes possible to completely override how Python
> computes the module search paths (``sys.path``).
> 
> Building a customized Python which behaves as regular Python becomes
> easier using the new ``Py_RunMain()`` function. Moreover, command line
> arguments passed to ``PyConfig.argv`` are now parsed as the regular
> Python parses command line options, and ``PyConfig.xoptions`` are
> handled as ``-X opt`` command line options.
> 
> This extracts a subset of the API design from the PEP 432 development and
> refactoring work that is now considered sufficiently stable to make public
> (allowing 3rd party embedding applications access to the same configuration
> APIs that the native CPython CLI is now using).
> 
> 
> Rationale
> =========
> 
> Python is highly configurable but its configuration evolved organically.
> The initialization configuration is scattered all around the code using
> different ways to set them: global configuration variables (ex:
> ``Py_IsolatedFlag``), environment variables (ex: ``PYTHONPATH``),
> command line arguments (ex: ``-b``), configuration files (ex:
> ``pyvenv.cfg``), function calls (ex: ``Py_SetProgramName()``). A
> straightforward and reliable way to configure Python is needed.
> 
> Some configuration parameters are not accessible from the C API, or not
> easily. For example, there is no API to override the default values of
> ``sys.executable``.
> 
> Some options like ``PYTHONPATH`` can only be set using an environment
> variable which has a side effect on Python child processes.
> 
> Some options also depends on other options: see `Priority and Rules`_.
> Python 3.7 API does not provide a consistent view of the overall
> configuration.
> 
> The C API of Python 3.7 Initialization takes ``wchar_t*`` strings as
> input whereas the Python filesystem encoding is set during the
> initialization which can lead to mojibake.
> 
> Python 3.7 APIs like ``Py_Initialize()`` aborts the process on memory
> allocation failure which is not convenient when Python is embedded.
> Moreover, ``Py_Main()`` could exit directly the process rather than
> returning an exit code. Proposed new API reports the error or exit code
> to the caller which can decide how to handle it.
> 
> Implementing the PEP 540 (UTF-8 Mode) and the new ``-X dev`` correctly
> was almost impossible in Python 3.6. The code base has been deeply
> reworked in Python 3.7 and then in Python 3.8 to read the configuration
> into a structure with no side effect. It becomes possible to clear the
> configuration (release memory) and read again the configuration if the
> encoding changed . It is required to implement properly the UTF-8 which
> changes the encoding using ``-X utf8`` command line option. Internally,
> bytes ``argv`` strings are decoded from the filesystem encoding. The
> ``-X dev`` changes the memory allocator (behaves as
> ``PYTHONMALLOC=debug``), whereas it was not possible to change the
> memory allocation *while* parsing the command line arguments. The new
> design of the internal implementation not only allowed to implement
> properly ``-X utf8`` and ``-X dev``, it also allows to change the Python
> behavior way more easily, especially for corner cases like that, and
> ensure that the configuration remains consistent: see `Priority and
> Rules`_.
> 
> This PEP is a partial implementation of PEP 432 which is the overall
> design.  New fields can be added later to ``PyConfig`` structure to
> finish the implementation of the PEP 432 (e.g. by adding a new partial
> initialization API which allows to configure Python using Python objects to
> finish the full initialization). However, those features are omitted from this
> PEP as even the native CPython CLI doesn't work that way - the public API
> proposal in this PEP is limited to features which have already been implemented
> and adopted as private APIs for us in the native CPython CLI.
> 
> 
> Python Initialization C API
> ===========================
> 
> This PEP proposes to add the following new structures, functions and
> macros.
> 
> New structures (4):
> 
> * ``PyConfig``
> * ``PyInitError``
> * ``PyPreConfig``
> * ``PyWideStringList``
> 
> New functions (17):
> 
> * ``Py_PreInitialize(config)``
> * ``Py_PreInitializeFromBytesArgs(config, argc, argv)``
> * ``Py_PreInitializeFromArgs(config, argc, argv)``
> * ``PyWideStringList_Append(list, item)``
> * ``PyWideStringList_Insert(list, index, item)``
> * ``PyConfig_SetString(config,config_str, str)``
> * ``PyConfig_SetBytesString(config, config_str, str)``
> * ``PyConfig_SetBytesArgv(config, argc, argv)``
> * ``PyConfig_SetArgv(config, argc, argv)``
> * ``PyConfig_Read(config)``
> * ``PyConfig_Clear(config)``
> * ``Py_InitializeFromConfig(config)``
> * ``Py_InitializeFromBytesArgs(config, argc, argv)``
> * ``Py_InitializeFromArgs(config, argc, argv)``
> * ``Py_BytesMain(argc, argv)``
> * ``Py_RunMain()``
> * ``Py_ExitInitError(err)``
> 
> New macros (9):
> 
> * ``PyPreConfig_INIT``
> * ``PyConfig_INIT``
> * ``Py_INIT_OK()``
> * ``Py_INIT_ERR(MSG)``
> * ``Py_INIT_NO_MEMORY()``
> * ``Py_INIT_EXIT(EXITCODE)``
> * ``Py_INIT_IS_ERROR(err)``
> * ``Py_INIT_IS_EXIT(err)``
> * ``Py_INIT_FAILED(err)``
> 
> This PEP also adds ``_PyRuntimeState.preconfig`` (``PyPreConfig`` type)
> and ``PyInterpreterState.config`` (``PyConfig`` type) fields to these
> internal structures. ``PyInterpreterState.config`` becomes the new
> reference configuration, replacing global configuration variables and
> other private variables.
> 
> 
> PyWideStringList
> ----------------
> 
> ``PyWideStringList`` is a list of ``wchar_t*`` strings.
> 
> Example to initialize a string from C static array::
> 
>     static wchar_t* argv[2] = {
>         L"-c",
>         L"pass",
>     };
>     PyWideStringList config_argv = PyWideStringList_INIT;
>     config_argv.length = Py_ARRAY_LENGTH(argv);
>     config_argv.items = argv;
> 
> ``PyWideStringList`` structure fields:
> 
> * ``length`` (``Py_ssize_t``)
> * ``items`` (``wchar_t**``)
> 
> Methods:
> 
> * ``PyInitError PyWideStringList_Append(PyWideStringList *list, const
> wchar_t *item)``:
>   Append *item* to *list*.
> * ``PyInitError PyWideStringList_Insert(PyWideStringList *list,
> Py_ssize_t index, const wchar_t *item)``:
>   Insert *item* into *list* at *index*. If *index* is greater than
>   *list* length, just append *item* to *list*.
> 
> If *length* is non-zero, *items* must be non-NULL and all strings must
> be non-NULL.
> 
> PyInitError
> -----------
> 
> ``PyInitError`` is a structure to store an error message or an exit code
> for the Python Initialization. For an error, it stores the C function
> name which created the error.
> 
> Example::
> 
>     PyInitError alloc(void **ptr, size_t size)
>     {
>         *ptr = PyMem_RawMalloc(size);
>         if (*ptr == NULL) {
>             return Py_INIT_NO_MEMORY();
>         }
>         return Py_INIT_OK();
>     }
> 
>     int main(int argc, char **argv)
>     {
>         void *ptr;
>         PyInitError err = alloc(&ptr, 16);
>         if (Py_INIT_FAILED(err)) {
>             Py_ExitInitError(err);
>         }
>         PyMem_Free(ptr);
>         return 0;
>     }
> 
> ``PyInitError`` fields:
> 
> * ``exitcode`` (``int``):
>   argument passed to ``exit()``, only set by ``Py_INIT_EXIT()``.
> * ``err_msg`` (``const char*``): error message
> * private ``_func`` field: used by ``Py_INIT_ERR()`` to store the C
>   function name which created the error.
> * private ``_type`` field: for internal usage only.
> 
> Macro to create an error:
> 
> * ``Py_INIT_OK()``: Success.
> * ``Py_INIT_ERR(err_msg)``: Initialization error with a message.
> * ``Py_INIT_NO_MEMORY()``: Memory allocation failure (out of memory).
> * ``Py_INIT_EXIT(exitcode)``: Exit Python with the specified exit code.
> 
> Other macros and functions:
> 
> * ``Py_INIT_IS_ERROR(err)``: Is the result an error?
> * ``Py_INIT_IS_EXIT(err)``: Is the result an exit?
> * ``Py_INIT_FAILED(err)``: Is the result an error or an exit? Similar
>   to ``Py_INIT_IS_ERROR(err) || Py_INIT_IS_EXIT(err)``.
> * ``Py_ExitInitError(err)``: Call ``exit(exitcode)`` on Unix or
>   ``ExitProcess(exitcode)`` if the result is an exit, call
>   ``Py_FatalError(err_msg)`` if the result is an error. Must not be
>   called if the result is a success.
> 
> Pre-Initialization with PyPreConfig
> -----------------------------------
> 
> ``PyPreConfig`` structure is used to pre-initialize Python:
> 
> * Set the memory allocator
> * Configure the LC_CTYPE locale
> * Set the UTF-8 mode
> 
> Example using the pre-initialization to enable the UTF-8 Mode::
> 
>     PyPreConfig preconfig = PyPreConfig_INIT;
>     preconfig.utf8_mode = 1;
> 
>     PyInitError err = Py_PreInitialize(&preconfig);
>     if (Py_INIT_FAILED(err)) {
>         Py_ExitInitError(err);
>     }
> 
>     /* at this point, Python will speak UTF-8 */
> 
>     Py_Initialize();
>     /* ... use Python API here ... */
>     Py_Finalize();
> 
> Functions to pre-initialize Python:
> 
> * ``PyInitError Py_PreInitialize(const PyPreConfig *config)``
> * ``PyInitError Py_PreInitializeFromBytesArgs(const PyPreConfig
> *config, int argc, char **argv)``
> * ``PyInitError Py_PreInitializeFromArgs(const PyPreConfig *config,
> int argc, wchar_t **argv)``
> 
> These functions can be called with *config* set to ``NULL``.
> 
> If Python is initialized with command line arguments, the command line
> arguments must also be passed to pre-initialize Python, since they have
> an effect on the pre-configuration like encodings. For example, the
> ``-X utf8`` command line option enables the UTF-8 Mode.
> 
> These functions can be called with *config* set to ``NULL``. The caller
> is responsible to handle error or exit using ``Py_INIT_FAILED()`` and
> ``Py_ExitInitError()``.
> 
> ``PyPreConfig`` fields:
> 
> * ``allocator`` (``char*``, default: ``NULL``):
>   Name of the memory allocator (ex: ``"malloc"``).
> * ``coerce_c_locale`` (``int``, default: 0):
>   If equals to 2, coerce the C locale; if equals to 1, read the LC_CTYPE
>   locale to decide if it should be coerced.
> * ``coerce_c_locale_warn`` (``int``, default: 0):
>   If non-zero, emit a warning if the C locale is coerced.
> * ``dev_mode`` (``int``, default: 0):
>   See ``PyConfig.dev_mode``.
> * ``isolated`` (``int``, default: 0):
>   See ``PyConfig.isolated``.
> * ``legacy_windows_fs_encoding`` (``int``, Windows only, default: 0):
>   If non-zero, disable UTF-8 Mode, set the Python filesystem encoding to
>   ``mbcs``, set the filesystem error handler to ``replace``.
> * ``use_environment`` (``int``, default: 1):
>   See ``PyConfig.use_environment``.
> * ``utf8_mode`` (``int``, default: 0):
>   If non-zero, enable the UTF-8 mode.
> 
> ``PyPreConfig`` private field, for internal use only:
> 
> * ``_config_version`` (``int``, default: config version):
>   Configuration version, used for ABI compatibility.
> 
> The C locale coercion (PEP 538) and the UTF-8 Mode (PEP 540) are
> disabled by default in ``PyPreConfig``. Set ``coerce_c_locale``,
> ``coerce_c_locale_warn`` and ``utf8_mode`` to ``-1`` to let Python
> enable them depending on the user configuration. In this case, it's
> safer to explicitly pre-initialize Python to ensure that encodings are
> configured before the Python initialization starts. Example to get the
> same encoding than regular Python::
> 
>     PyPreConfig preconfig = PyPreConfig_INIT;
>     preconfig.coerce_c_locale = -1;
>     preconfig.coerce_c_locale_warn = -1;
>     preconfig.utf8_mode = -1;
> 
>     PyInitError err = Py_PreInitialize(&preconfig);
>     if (Py_INIT_FAILED(err)) {
>         Py_ExitInitError(err);
>     }
> 
> 
> Initialization with PyConfig
> ----------------------------
> 
> The ``PyConfig`` structure contains all parameters to configure Python.
> 
> Example setting the program name::
> 
>     PyInitError err;
>     PyConfig config = PyConfig_INIT;
> 
>     err = PyConfig_SetString(&config.program_name, L"my_program");
>     if (_Py_INIT_FAILED(err)) {
>         Py_ExitInitError(err);
>     }
> 
>     err = Py_InitializeFromConfig(&config);
>     PyConfig_Clear(&config);
> 
>     if (Py_INIT_FAILED(err)) {
>         Py_ExitInitError(err);
>     }
> 
> ``PyConfig`` methods:
> 
> * ``PyInitError PyConfig_SetString(PyConfig *config, wchar_t
> **config_str, const wchar_t *str)``:
>   Copy the wide character string *str* into ``*config_str``.
> * ``PyInitError PyConfig_SetBytesString(PyConfig *config, wchar_t
> **config_str, const char *str)``:
>   Decode *str* using ``Py_DecodeLocale()`` and set the result into
>   ``*config_str``. Pre-initialize Python if needed to ensure that
>   encodings are properly configured.
> * ``PyInitError PyConfig_SetArgv(PyConfig *config, int argc, wchar_t **argv)``:
>   Set command line arguments from wide character strings.
> * ``PyInitError PyConfig_SetBytesArgv(PyConfig *config, int argc, char
> **argv)``:
>   Set command line arguments: decode bytes using ``Py_DecodeLocale()``.
>   Pre-initialize Python if needed to ensure that encodings are properly
>   configured.
> * ``PyInitError PyConfig_Read(PyConfig *config)``:
>   Read all Python configuration. Fields which are already set are left
>   unchanged.
> * ``void PyConfig_Clear(PyConfig *config)``:
>   Release configuration memory.
> 
> Functions to initialize Python:
> 
> * ``PyInitError Py_InitializeFromConfig(const PyConfig *config)``:
>   Initialize Python from *config* configuration. *config* can be
>   ``NULL``.
> 
> The caller of these methods and functions is responsible to handle
> failure or exit using ``Py_INIT_FAILED()`` and ``Py_ExitInitError()``.
> 
> ``PyConfig`` fields:
> 
> * ``argv`` (``PyWideStringList``, default: empty):
>   Command line arguments, ``sys.argv``.
>   It is parsed and updated by default, set ``parse_argv`` to 0 to avoid
>   that.
> * ``base_exec_prefix`` (``wchar_t*``, default: ``NULL``):
>   ``sys.base_exec_prefix``.
> * ``base_prefix`` (``wchar_t*``, default: ``NULL``):
>   ``sys.base_prefix``.
> * ``buffered_stdio`` (``int``, default: 1):
>   If equals to 0, enable unbuffered mode, make stdout and stderr streams
>   to be unbuffered.
> * ``bytes_warning`` (``int``, default: 0):
>   If equals to 1, issue a warning when comparing ``bytes`` or
>   ``bytearray`` with ``str``, or comparing ``bytes`` with ``int``. If
>   equal or greater to 2, raise a ``BytesWarning`` exception.
> * ``check_hash_pycs_mode`` (``wchar_t*``, default: ``"default"``):
>   ``--check-hash-based-pycs`` command line option value (see PEP 552).
> * ``configure_c_stdio`` (``int``, default: 1):
>   If non-zero, configure C standard streams (``stdio``, ``stdout``,
>   ``stdout``).  For example, set their mode to ``O_BINARY`` on Windows.
> * ``dev_mode`` (``int``, default: 0):
>   Development mode
> * ``dll_path`` (``wchar_t*``, Windows only, default: ``NULL``):
>   Windows DLL path.
> * ``dump_refs`` (``int``, default: 0):
>   If non-zero, dump all objects which are still alive at exit
> * ``exec_prefix`` (``wchar_t*``, default: ``NULL``):
>   ``sys.exec_prefix``.
> * ``executable`` (``wchar_t*``, default: ``NULL``):
>   ``sys.executable``.
> * ``faulthandler`` (``int``, default: 0):
>   If non-zero, call ``faulthandler.enable()``.
> * ``filesystem_encoding`` (``wchar_t*``, default: ``NULL``):
>   Filesystem encoding, ``sys.getfilesystemencoding()``.
> * ``filesystem_errors`` (``wchar_t*``, default: ``NULL``):
>   Filesystem encoding errors, ``sys.getfilesystemencodeerrors()``.
> * ``use_hash_seed`` (``int``, default: 0),
>   ``hash_seed`` (``unsigned long``, default: 0):
>   Randomized hash function seed.
> * ``home`` (``wchar_t*``, default: ``NULL``):
>   Python home directory.
> * ``import_time`` (``int``, default: 0):
>   If non-zero, profile import time.
> * ``inspect`` (``int``, default: 0):
>   Enter interactive mode after executing a script or a command.
> * ``install_signal_handlers`` (``int``, default: 1):
>   Install signal handlers?
> * ``interactive`` (``int``, default: 0):
>   Interactive mode.
> * ``legacy_windows_stdio`` (``int``, Windows only, default: 0):
>   If non-zero, use ``io.FileIO`` instead of ``WindowsConsoleIO`` for
>   ``sys.stdin``, ``sys.stdout`` and ``sys.stderr``.
> * ``malloc_stats`` (``int``, default: 0):
>   If non-zero, dump memory allocation statistics at exit.
> * ``module_search_path_env`` (``wchar_t*``, default: ``NULL``):
>   ``PYTHONPATH`` environment variale value.
> * ``use_module_search_paths`` (``int``, default: 0),
>   ``module_search_paths`` (``PyWideStringList``, default: empty):
>   ``sys.path``.
> * ``optimization_level`` (``int``, default: 0):
>   Compilation optimization level.
> * ``parse_argv`` (``int``, default: 1):
>   If non-zero, parse ``argv`` command line arguments and update
>   ``argv``.
> * ``parser_debug`` (``int``, default: 0):
>   If non-zero, turn on parser debugging output (for expert only,
>   depending on compilation options).
> * ``pathconfig_warnings`` (``int``, default: 1):
>   If equal to 0, suppress warnings when computing the path
>   configuration.
> * ``prefix`` (``wchar_t*``, default: ``NULL``):
>   ``sys.prefix``.
> * ``program_name`` (``wchar_t*``, default: ``NULL``):
>   Program name.
> * ``program`` (``wchar_t*``, default: ``NULL``):
>   ``argv[0]`` or an empty string.
> * ``pycache_prefix`` (``wchar_t*``, default: ``NULL``):
>   ``.pyc`` cache prefix.
> * ``quiet`` (``int``, default: 0):
>   Quiet mode. For example, don't display the copyright and version
>   messages even in interactive mode.
> * ``run_command`` (``wchar_t*``, default: ``NULL``):
>   ``-c COMMAND`` argument.
> * ``run_filename`` (``wchar_t*``), default: ``NULL``:
>   ``python3 SCRIPT`` argument.
> * ``run_module`` (``wchar_t*``, default: ``NULL``):
>   ``python3 -m MODULE`` argument.
> * ``show_alloc_count`` (``int``, default: 0):
>   Show allocation counts at exit?
> * ``show_ref_count`` (``int``, default: 0):
>   Show total reference count at exit?
> * ``site_import`` (``int``, default: 1):
>   Import the ``site`` module at startup?
> * ``skip_source_first_line`` (``int``, default: 0):
>   Skip the first line of the source?
> * ``stdio_encoding`` (``wchar_t*``, default: ``NULL``),
>   ``stdio_errors`` (``wchar_t*``, default: ``NULL``):
>   Encoding and encoding errors of ``sys.stdin``, ``sys.stdout``
>   and ``sys.stderr``.
> * ``tracemalloc`` (``int``, default: 0):
>   If non-zero, call ``tracemalloc.start(value)``.
> * ``user_site_directory`` (``int``, default: 1):
>   If non-zero, add user site directory to ``sys.path``.
> * ``verbose`` (``int``, default: 0):
>   If non-zero, enable verbose mode.
> * ``warnoptions`` (``PyWideStringList``, default: empty):
>   Options of the ``warnings`` module to build warnings filters.
> * ``write_bytecode`` (``int``, default: 1):
>   If non-zero, write ``.pyc`` files.
> * ``xoptions`` (``PyWideStringList``, default: empty):
>   ``sys._xoptions``.
> 
> ``PyConfig`` private fields, for internal use only:
> 
> * ``_config_version`` (``int``, default: config version):
>   Configuration version, used for ABI compatibility.
> * ``_install_importlib`` (``int``, default: 1):
>   Install importlib?
> * ``_init_main`` (``int``, default: 1):
>   If equal to 0, stop Python initialization before the "main" phase
>   (see PEP 432).
> 
> By default, the ``argv`` arguments are parsed as regular Python command
> line arguments and ``argv`` is updated to strip parsed Python arguments:
> see `Command Line Arguments`_. Set ``parse_argv`` to 0 to avoid parsing
> and updating ``argv``. If ``argv`` is empty, an empty string is added to
> ensure that ``sys.argv`` always exists and is never empty.
> 
> The ``xoptions`` options are parsed to set other options: see `-X
> Options`_.
> 
> More complete example modifying the configuration before calling
> ``PyConfig_Read()``, and then modify the read configuration::
> 
>     PyInitError init_python(const char *program_name)
>     {
>         PyInitError err;
>         PyConfig config = PyConfig_INIT;
> 
>         /* Set the program name before reading the configuraton
>            (decode byte string from the locale encoding) */
>         err = PyConfig_SetBytesString(&config.program_name,
>                                       program_name);
>         if (_Py_INIT_FAILED(err)) {
>             goto fail;
>         }
> 
>         /* Read all configuration at once */
>         err = PyConfig_Read(&config);
>         if (_Py_INIT_FAILED(err)) {
>             goto fail;
>         }
> 
>         /* Append our custom search path to sys.path */
>         err = PyWideStringList_Append(&config.module_search_paths,
>                                       L"/path/to/more/modules");
>         if (_Py_INIT_FAILED(err)) {
>             goto fail;
>         }
> 
>         /* Override executable computed by PyConfig_Read() */
>         err = PyConfig_SetString(&config, &config.executable, L"my_executable");
>         if (_Py_INIT_FAILED(err)) {
>             goto fail;
>         }
> 
>         err = Py_InitializeFromConfig(&config);
> 
>         /* Py_InitializeFromConfig() copied config which must now be
>            cleared to release memory */
>         PyConfig_Clear(&config);
> 
>         return err;
> 
>     fail:
>         PyConfig_Clear(&config);
>         Py_ExitInitError(err);
>     }
> 
> .. note::
>    ``PyConfig`` does not have any field for extra inittab functions:
>    ``PyImport_AppendInittab()`` and ``PyImport_ExtendInittab()``
>    functions are still relevant (and can be called before Python
>    initialization).
> 
> 
> Initialization with constant PyConfig
> -------------------------------------
> 
> When no ``PyConfig`` method is used but only
> ``Py_InitializeFromConfig()``, the caller is responsible for managing
> ``PyConfig`` memory. In that case, constant strings and constant string
> lists can be used to avoid dynamically allocated memory. It can be used
> for most simple configurations.
> 
> Example of Python initialization enabling the isolated mode::
> 
>     PyConfig config = PyConfig_INIT;
>     config.isolated = 1;
> 
>     PyInitError err = Py_InitializeFromConfig(&config);
>     if (Py_INIT_FAILED(err)) {
>         Py_ExitInitError(err);
>     }
>     /* ... use Python API here ... */
>     Py_Finalize();
> 
> ``PyConfig_Clear()`` is not needed in this example since ``config`` does
> not contain any dynamically allocated string:
> ``Py_InitializeFromConfig`` is responsible to fill other fields and
> manage the memory.
> 
> For convenience, two other functions are provided for constant
> ``PyConfig``:
> 
> * ``PyInitError Py_InitializeFromArgs(const PyConfig *config, int
> argc, wchar_t **argv)``
> * ``PyInitError Py_InitializeFromBytesArgs(const PyConfig *config, int
> argc, char **argv)``
> 
> They be called with *config* set to ``NULL``. The caller of these
> functions is responsible to handle failure or exit using
> ``Py_INIT_FAILED()`` and ``Py_ExitInitError()``.
> 
> 
> Path Configuration
> ------------------
> 
> ``PyConfig`` contains multiple fields for the path configuration:
> 
> * Path configuration input fields:
> 
>   * ``home``
>   * ``module_search_path_env``
>   * ``pathconfig_warnings``
> 
> * Path configuration output fields:
> 
>   * ``dll_path`` (Windows only)
>   * ``exec_prefix``
>   * ``executable``
>   * ``prefix``
>   * ``use_module_search_paths``, ``module_search_paths``
> 
> Set ``pathconfig_warnings`` to 0 to suppress warnings when computing the
> path configuration.
> 
> It is possible to completely ignore the function computing the default
> path configuration by setting explicitly all path configuration output
> fields listed above. A string is considered as set even if it's an empty
> string. ``module_search_paths`` is considered as set if
> ``use_module_search_paths`` is set to 1. In this case, path
> configuration input fields are ignored as well.
> 
> If ``base_prefix`` or ``base_exec_prefix`` fields are not set, they
> inherit their value from ``prefix`` and ``exec_prefix`` respectively.
> 
> If ``site_import`` is non-zero, ``sys.path`` can be modified by the
> ``site`` module. For example, if ``user_site_directory`` is non-zero,
> the user site directory is added to ``sys.path`` (if it exists).
> 
> 
> Isolate Python
> --------------
> 
> The default configuration is designed to behave as a regular Python.
> To embed Python into an application, it's possible to tune the
> configuration to better isolated the embedded Python from the system:
> 
> * Set ``isolated`` to 1 to ignore environment variables and not prepend
>   the current directory to ``sys.path``.
> * Set the `Path Configuration`_ ("output fields") to ignore the function
>   computing the default path configuration.
> 
> 
> Py_BytesMain()
> --------------
> 
> Python 3.7 provides a high-level ``Py_Main()`` function which requires
> to pass command line arguments as ``wchar_t*`` strings. It is
> non-trivial to use the correct encoding to decode bytes. Python has its
> own set of issues with C locale coercion and UTF-8 Mode.
> 
> This PEP adds a new ``Py_BytesMain()`` function which takes command line
> arguments as bytes::
> 
>     int Py_BytesMain(int argc, char **argv)
> 
> Py_RunMain()
> ------------
> 
> The new ``Py_RunMain()`` function executes the command
> (``PyConfig.run_command``), the script (``PyConfig.run_filename``) or
> the module (``PyConfig.run_module``) specified on the command line or in
> the configuration, and then finalizes Python. It returns an exit status
> that can be passed to the ``exit()`` function.
> 
> Example of customized Python in isolated mode::
> 
>     #include <Python.h>
> 
>     int main(int argc, char *argv[])
>     {
>         PyConfig config = PyConfig_INIT;
>         config.isolated = 1;
> 
>         PyInitError err = Py_InitializeFromBytesArgs(&config, argc, argv);
>         if (Py_INIT_FAILED(err)) {
>             Py_ExitInitError(err);
>         }
> 
>         /* put more configuration code here if needed */
> 
>         return Py_RunMain();
>     }
> 
> The example is a basic implementation of the "System Python Executable"
> discussed in PEP 432.
> 
> 
> Memory allocations and Py_DecodeLocale()
> ----------------------------------------
> 
> Python memory allocation functions like ``PyMem_RawMalloc()`` must not
> be used before Python pre-initialization, whereas calling directly
> ``malloc()`` and ``free()`` is always safe.
> 
> For ``PyPreConfig`` and constant ``PyConfig``, the caller is responsible
> to manage dynamically allocated memory; constant strings and constant
> string lists can be used to avoid memory allocations.
> 
> Dynamic ``PyConfig`` requires to call ``PyConfig_Clear()`` to release
> memory.
> 
> ``Py_DecodeLocale()`` must not be called before the pre-initialization.
> 
> 
> Backwards Compatibility
> =======================
> 
> This PEP only adds a new API: it leaves the existing API unchanged and
> has no impact on the backwards compatibility.
> 
> The implementation ensures that the existing API is compatible with the
> new API. For example, ``PyConfig`` uses the value of global
> configuration variables as default values.
> 
> 
> Annex: Python Configuration
> ===========================
> 
> Priority and Rules
> ------------------
> 
> Priority of configuration parameters, highest to lowest:
> 
> * ``PyConfig``
> * ``PyPreConfig``
> * Configuration files
> * Command line options
> * Environment variables
> * Global configuration variables
> 
> Priority of warning options, highest to lowest:
> 
> * ``PyConfig.warnoptions``
> * ``PyConfig.dev_mode`` (add ``"default"``)
> * ``PYTHONWARNINGS`` environment variables
> * ``-W WARNOPTION`` command line argument
> * ``PyConfig.bytes_warning`` (add ``"error::BytesWarning"`` if greater
>   than 1, or add ``"default::BytesWarning``)
> 
> Rules on ``PyConfig`` parameters:
> 
> * If ``isolated`` is non-zero, ``use_environment`` and
>   ``user_site_directory`` are set to 0.
> * If ``legacy_windows_fs_encoding`` is non-zero, ``utf8_mode`` is set to
>   0.
> * If ``dev_mode`` is non-zero, ``allocator`` is set to ``"debug"``,
>   ``faulthandler`` is set to 1, and ``"default"`` filter is added to
>   ``warnoptions``. But the ``PYTHONMALLOC`` environment variable has the
>   priority over ``dev_mode`` to set the memory allocator.
> * If ``base_prefix`` is not set, it inherits ``prefix`` value.
> * If ``base_exec_prefix`` is not set, it inherits ``exec_prefix`` value.
> * If the ``python._pth`` configuration file is present, ``isolated`` is
>   set to 1 and ``site_import`` is set to 0; but ``site_import`` is set
>   to 1 if ``python._pth`` contains ``import site``.
> 
> Rules on ``PyConfig`` and ``PyPreConfig`` parameters:
> 
> * If ``PyPreConfig.legacy_windows_fs_encoding`` is non-zero,
>   set ``PyConfig.utf8_mode`` to 0, set ``PyConfig.filesystem_encoding``
>   to ``mbcs``, and set ``PyConfig.filesystem_errors`` to ``replace``.
> 
> Configuration Files
> -------------------
> 
> Python configuration files:
> 
> * ``pyvenv.cfg``
> * ``python._pth`` (Windows only)
> * ``pybuilddir.txt`` (Unix only)
> 
> Global Configuration Variables
> ------------------------------
> 
> Global configuration variables mapped to ``PyPreConfig`` fields:
> 
> ========================================  ================================
> Variable                                  Field
> ========================================  ================================
> ``Py_IgnoreEnvironmentFlag``              ``use_environment`` (NOT)
> ``Py_IsolatedFlag``                       ``isolated``
> ``Py_LegacyWindowsFSEncodingFlag``        ``legacy_windows_fs_encoding``
> ``Py_UTF8Mode``                           ``utf8_mode``
> ========================================  ================================
> 
> (NOT) means that the ``PyPreConfig`` value is the oposite of the global
> configuration variable value.
> 
> Global configuration variables mapped to ``PyConfig`` fields:
> 
> ========================================  ================================
> Variable                                  Field
> ========================================  ================================
> ``Py_BytesWarningFlag``                   ``bytes_warning``
> ``Py_DebugFlag``                          ``parser_debug``
> ``Py_DontWriteBytecodeFlag``              ``write_bytecode`` (NOT)
> ``Py_FileSystemDefaultEncodeErrors``      ``filesystem_errors``
> ``Py_FileSystemDefaultEncoding``          ``filesystem_encoding``
> ``Py_FrozenFlag``                         ``pathconfig_warnings`` (NOT)
> ``Py_HasFileSystemDefaultEncoding``       ``filesystem_encoding``
> ``Py_HashRandomizationFlag``              ``use_hash_seed``, ``hash_seed``
> ``Py_IgnoreEnvironmentFlag``              ``use_environment`` (NOT)
> ``Py_InspectFlag``                        ``inspect``
> ``Py_InteractiveFlag``                    ``interactive``
> ``Py_IsolatedFlag``                       ``isolated``
> ``Py_LegacyWindowsStdioFlag``             ``legacy_windows_stdio``
> ``Py_NoSiteFlag``                         ``site_import`` (NOT)
> ``Py_NoUserSiteDirectory``                ``user_site_directory`` (NOT)
> ``Py_OptimizeFlag``                       ``optimization_level``
> ``Py_QuietFlag``                          ``quiet``
> ``Py_UnbufferedStdioFlag``                ``buffered_stdio`` (NOT)
> ``Py_VerboseFlag``                        ``verbose``
> ``_Py_HasFileSystemDefaultEncodeErrors``  ``filesystem_errors``
> ========================================  ================================
> 
> (NOT) means that the ``PyConfig`` value is the oposite of the global
> configuration variable value.
> 
> ``Py_LegacyWindowsFSEncodingFlag`` and ``Py_LegacyWindowsStdioFlag`` are
> only available on Windows.
> 
> Command Line Arguments
> ----------------------
> 
> Usage::
> 
>     python3 [options]
>     python3 [options] -c COMMAND
>     python3 [options] -m MODULE
>     python3 [options] SCRIPT
> 
> 
> Command line options mapped to pseudo-action on ``PyPreConfig`` fields:
> 
> ================================  ================================
> Option                            ``PyConfig`` field
> ================================  ================================
> ``-E``                            ``use_environment = 0``
> ``-I``                            ``isolated = 1``
> ``-X dev``                        ``dev_mode = 1``
> ``-X utf8``                       ``utf8_mode = 1``
> ``-X utf8=VALUE``                 ``utf8_mode = VALUE``
> ================================  ================================
> 
> Command line options mapped to pseudo-action on ``PyConfig`` fields:
> 
> ================================  ================================
> Option                            ``PyConfig`` field
> ================================  ================================
> ``-b``                            ``bytes_warning++``
> ``-B``                            ``write_bytecode = 0``
> ``-c COMMAND``                    ``run_command = COMMAND``
> ``--check-hash-based-pycs=MODE``  ``_check_hash_pycs_mode = MODE``
> ``-d``                            ``parser_debug++``
> ``-E``                            ``use_environment = 0``
> ``-i``                            ``inspect++`` and ``interactive++``
> ``-I``                            ``isolated = 1``
> ``-m MODULE``                     ``run_module = MODULE``
> ``-O``                            ``optimization_level++``
> ``-q``                            ``quiet++``
> ``-R``                            ``use_hash_seed = 0``
> ``-s``                            ``user_site_directory = 0``
> ``-S``                            ``site_import``
> ``-t``                            ignored (kept for backwards compatibility)
> ``-u``                            ``buffered_stdio = 0``
> ``-v``                            ``verbose++``
> ``-W WARNING``                    add ``WARNING`` to ``warnoptions``
> ``-x``                            ``skip_source_first_line = 1``
> ``-X OPTION``                     add ``OPTION`` to ``xoptions``
> ================================  ================================
> 
> ``-h``, ``-?`` and ``-V`` options are handled without ``PyConfig``.
> 
> -X Options
> ----------
> 
> -X options mapped to pseudo-action on ``PyConfig`` fields:
> 
> ================================  ================================
> Option                            ``PyConfig`` field
> ================================  ================================
> ``-X dev``                        ``dev_mode = 1``
> ``-X faulthandler``               ``faulthandler = 1``
> ``-X importtime``                 ``import_time = 1``
> ``-X pycache_prefix=PREFIX``      ``pycache_prefix = PREFIX``
> ``-X showalloccount``             ``show_alloc_count = 1``
> ``-X showrefcount``               ``show_ref_count = 1``
> ``-X tracemalloc=N``              ``tracemalloc = N``
> ================================  ================================
> 
> Environment Variables
> ---------------------
> 
> Environment variables mapped to ``PyPreConfig`` fields:
> 
> =================================  =============================================
> Variable                           ``PyPreConfig`` field
> =================================  =============================================
> ``PYTHONCOERCECLOCALE``            ``coerce_c_locale``, ``coerce_c_locale_warn``
> ``PYTHONDEVMODE``                  ``dev_mode``
> ``PYTHONLEGACYWINDOWSFSENCODING``  ``legacy_windows_fs_encoding``
> ``PYTHONMALLOC``                   ``allocator``
> ``PYTHONUTF8``                     ``utf8_mode``
> =================================  =============================================
> 
> Environment variables mapped to ``PyConfig`` fields:
> 
> =================================  ====================================
> Variable                           ``PyConfig`` field
> =================================  ====================================
> ``PYTHONDEBUG``                    ``parser_debug``
> ``PYTHONDEVMODE``                  ``dev_mode``
> ``PYTHONDONTWRITEBYTECODE``        ``write_bytecode``
> ``PYTHONDUMPREFS``                 ``dump_refs``
> ``PYTHONEXECUTABLE``               ``program_name``
> ``PYTHONFAULTHANDLER``             ``faulthandler``
> ``PYTHONHASHSEED``                 ``use_hash_seed``, ``hash_seed``
> ``PYTHONHOME``                     ``home``
> ``PYTHONINSPECT``                  ``inspect``
> ``PYTHONIOENCODING``               ``stdio_encoding``, ``stdio_errors``
> ``PYTHONLEGACYWINDOWSSTDIO``       ``legacy_windows_stdio``
> ``PYTHONMALLOCSTATS``              ``malloc_stats``
> ``PYTHONNOUSERSITE``               ``user_site_directory``
> ``PYTHONOPTIMIZE``                 ``optimization_level``
> ``PYTHONPATH``                     ``module_search_path_env``
> ``PYTHONPROFILEIMPORTTIME``        ``import_time``
> ``PYTHONPYCACHEPREFIX,``           ``pycache_prefix``
> ``PYTHONTRACEMALLOC``              ``tracemalloc``
> ``PYTHONUNBUFFERED``               ``buffered_stdio``
> ``PYTHONVERBOSE``                  ``verbose``
> ``PYTHONWARNINGS``                 ``warnoptions``
> =================================  ====================================
> 
> ``PYTHONLEGACYWINDOWSFSENCODING`` and ``PYTHONLEGACYWINDOWSSTDIO`` are
> specific to Windows.
> 
> 
> Annex: Python 3.7 API
> =====================
> 
> Python 3.7 has 4 functions in its C API to initialize and finalize
> Python:
> 
> * ``Py_Initialize()``, ``Py_InitializeEx()``: initialize Python
> * ``Py_Finalize()``, ``Py_FinalizeEx()``: finalize Python
> 
> Python 3.7 can be configured using `Global Configuration Variables`_,
> `Environment Variables`_, and the following functions:
> 
> * ``PyImport_AppendInittab()``
> * ``PyImport_ExtendInittab()``
> * ``PyMem_SetAllocator()``
> * ``PyMem_SetupDebugHooks()``
> * ``PyObject_SetArenaAllocator()``
> * ``Py_SetPath()``
> * ``Py_SetProgramName()``
> * ``Py_SetPythonHome()``
> * ``Py_SetStandardStreamEncoding()``
> * ``PySys_AddWarnOption()``
> * ``PySys_AddXOption()``
> * ``PySys_ResetWarnOptions()``
> 
> There is also a high-level ``Py_Main()`` function.
> 
> 
> Python Issues
> =============
> 
> Issues that will be fixed by this PEP, directly or indirectly:
> 
> * `bpo-1195571 <https://bugs.python.org/issue1195571>`_: "simple
>   callback system for Py_FatalError"
> * `bpo-11320 <https://bugs.python.org/issue11320>`_:
>   "Usage of API method Py_SetPath causes errors in Py_Initialize()
>   (Posix ony)"
> * `bpo-13533 <https://bugs.python.org/issue13533>`_: "Would like
>   Py_Initialize to play friendly with host app"
> * `bpo-14956 <https://bugs.python.org/issue14956>`_: "custom PYTHONPATH
>   may break apps embedding Python"
> * `bpo-19983 <https://bugs.python.org/issue19983>`_: "When interrupted
>   during startup, Python should not call abort() but exit()"
> * `bpo-22213 <https://bugs.python.org/issue22213>`_: "Make pyvenv style
>   virtual environments easier to configure when embedding Python". This
>   PEP more or
> * `bpo-22257 <https://bugs.python.org/issue22257>`_: "PEP 432: Redesign
>   the interpreter startup sequence"
> * `bpo-29778 <https://bugs.python.org/issue29778>`_: "_Py_CheckPython3
>   uses uninitialized dllpath when embedder sets module path with
>   Py_SetPath"
> * `bpo-30560 <https://bugs.python.org/issue30560>`_: "Add
>   Py_SetFatalErrorAbortFunc: Allow embedding program to handle fatal
>   errors".
> * `bpo-31745 <https://bugs.python.org/issue31745>`_: "Overloading
>   "Py_GetPath" does not work"
> * `bpo-32573 <https://bugs.python.org/issue32573>`_: "All sys attributes
>   (.argv, ...) should exist in embedded environments".
> * `bpo-34725 <https://bugs.python.org/issue34725>`_:
>   "Py_GetProgramFullPath() odd behaviour in Windows"
> * `bpo-36204 <https://bugs.python.org/issue36204>`_: "Deprecate calling
>   Py_Main() after Py_Initialize()? Add Py_InitializeFromArgv()?"
> * `bpo-33135 <https://bugs.python.org/issue33135>`_: "Define field
>   prefixes for the various config structs". The PEP now defines well
>   how warnings options are handled.
> 
> Issues of the PEP implementation:
> 
> * `bpo-16961 <https://bugs.python.org/issue16961>`_: "No regression
>   tests for -E and individual environment vars"
> * `bpo-20361 <https://bugs.python.org/issue20361>`_: "-W command line
>   options and PYTHONWARNINGS environmental variable should not override
>   -b / -bb command line options"
> * `bpo-26122 <https://bugs.python.org/issue26122>`_: "Isolated mode
>   doesn't ignore PYTHONHASHSEED"
> * `bpo-29818 <https://bugs.python.org/issue29818>`_:
>   "Py_SetStandardStreamEncoding leads to a memory error in debug mode"
> * `bpo-31845 <https://bugs.python.org/issue31845>`_:
>   "PYTHONDONTWRITEBYTECODE and PYTHONOPTIMIZE have no effect"
> * `bpo-32030 <https://bugs.python.org/issue32030>`_: "PEP 432: Rewrite
>   Py_Main()"
> * `bpo-32124 <https://bugs.python.org/issue32124>`_: "Document functions
>   safe to be called before Py_Initialize()"
> * `bpo-33042 <https://bugs.python.org/issue33042>`_: "New 3.7 startup
>   sequence crashes PyInstaller"
> * `bpo-33932 <https://bugs.python.org/issue33932>`_: "Calling
>   Py_Initialize() twice now triggers a fatal error (Python 3.7)"
> * `bpo-34008 <https://bugs.python.org/issue34008>`_: "Do we support
>   calling Py_Main() after Py_Initialize()?"
> * `bpo-34170 <https://bugs.python.org/issue34170>`_: "Py_Initialize():
>   computing path configuration must not have side effect (PEP 432)"
> * `bpo-34589 <https://bugs.python.org/issue34589>`_: "Py_Initialize()
>   and Py_Main() should not enable C locale coercion"
> * `bpo-34639 <https://bugs.python.org/issue34639>`_:
>   "PYTHONCOERCECLOCALE is ignored when using -E or -I option"
> * `bpo-36142 <https://bugs.python.org/issue36142>`_: "Add a new
>   _PyPreConfig step to Python initialization to setup memory allocator
>   and encodings"
> * `bpo-36202 <https://bugs.python.org/issue36202>`_: "Calling
>   Py_DecodeLocale() before _PyPreConfig_Write() can produce mojibake"
> * `bpo-36301 <https://bugs.python.org/issue36301>`_: "Add
>   _Py_PreInitialize() function"
> * `bpo-36443 <https://bugs.python.org/issue36443>`_: "Disable
>   coerce_c_locale and utf8_mode by default in _PyPreConfig?"
> * `bpo-36444 <https://bugs.python.org/issue36444>`_: "Python
>   initialization: remove _PyMainInterpreterConfig"
> * `bpo-36471 <https://bugs.python.org/issue36471>`_: "PEP 432, PEP 587:
>   Add _Py_RunMain()"
> * `bpo-36763 <https://bugs.python.org/issue36763>`_: "PEP 587: Rework
>   initialization API to prepare second version of the PEP"
> * `bpo-36775 <https://bugs.python.org/issue36775>`_: "Rework filesystem
>   codec implementation"
> * `bpo-36900 <https://bugs.python.org/issue36900>`_: "Use _PyCoreConfig
>   rather than global configuration variables"
> 
> Issues related to this PEP:
> 
> * `bpo-12598 <https://bugs.python.org/issue12598>`_: "Move sys variable
>   initialization from import.c to sysmodule.c"
> * `bpo-15577 <https://bugs.python.org/issue15577>`_: "Real argc and argv
>   in embedded interpreter"
> * `bpo-16202 <https://bugs.python.org/issue16202>`_: "sys.path[0]
>   security issues"
> * `bpo-18309 <https://bugs.python.org/issue18309>`_: "Make python
>   slightly more relocatable"
> * `bpo-25631 <https://bugs.python.org/issue25631>`_: "Segmentation fault
>   with invalid Unicode command-line arguments in embedded Python"
> * `bpo-26007 <https://bugs.python.org/issue26007>`_: "Support embedding
>   the standard library in an executable"
> * `bpo-31210 <https://bugs.python.org/issue31210>`_: "Can not import
>   modules if sys.prefix contains DELIM".
> * `bpo-31349 <https://bugs.python.org/issue31349>`_: "Embedded
>   initialization ignores Py_SetProgramName()"
> * `bpo-33919 <https://bugs.python.org/issue33919>`_: "Expose
>   _PyCoreConfig structure to Python"
> * `bpo-35173 <https://bugs.python.org/issue35173>`_: "Re-use already
>   existing functionality to allow Python 2.7.x (both embedded and
>   standalone) to locate the module path according to the shared library"
> 
> 
> Version History
> ===============
> 
> * Version 3:
> 
>   * ``PyConfig``: Add ``configure_c_stdio`` and ``parse_argv``,
>     rename ``_frozen`` to ``pathconfig_warnings``.
>   * Rename functions using bytes strings and wide character strings. For
>     example, ``Py_PreInitializeFromWideArgs`` becomes
>     ``Py_PreInitializeFromArgs``, and ``PyConfig_SetArgv`` becomes
>     ``PyConfig_SetBytesArgv``.
>   * Add ``PyWideStringList_Insert()`` function.
>   * New "Path configuration", "Isolate Python", "Python Issues"
>     and "Version History" sections.
>   * ``PyConfig_SetString()`` and ``PyConfig_SetBytesString()`` now
>     requires the configuration as the first argument.
>   * Rename ``Py_UnixMain()`` to ``Py_BytesMain()``
> 
> * Version 2: Add ``PyConfig`` methods (ex: ``PyConfig_Read()``), add
>   ``PyWideStringList_Append()``, rename ``PyWideCharList`` to
>   ``PyWideStringList``.
> * Version 1: Initial version.
> 
> Copyright
> =========
> 
> This document has been placed in the public domain.
> 


From storchaka at gmail.com  Thu May 16 02:35:59 2019
From: storchaka at gmail.com (Serhiy Storchaka)
Date: Thu, 16 May 2019 09:35:59 +0300
Subject: [Python-Dev] bpo-36829: Add sys.unraisablehook()
In-Reply-To: <CA+3bQGHmR18+nQ8=oUc3cu2vZJ0riyqqxKmaJ8ykNe9NPnVS8w@mail.gmail.com>
References: <CA+3bQGHmR18+nQ8=oUc3cu2vZJ0riyqqxKmaJ8ykNe9NPnVS8w@mail.gmail.com>
Message-ID: <qbj0cg$24cj$1@blaine.gmane.org>

16.05.19 04:23, Victor Stinner ????:
> The first implementation of my API used sys.unraisablehook(exc_type,
> exc_value, exc_tb, obj). The problem is that Serhiy Storchaka asked me
> to add a new error message field which breaks the API: the API is not
> future-proof.
> 
> I modified my API to create an object to pack arguments. The new API
> becomes sys.unraisablehook(unraisable) where unraisable has 4 fields:
> exc_type, exc_value, exc_tb, obj. This API is now future-proof: adding
> a new field will not break existing custom hooks!

I prefer the former design, when the hook takes 5 arguments: exc_type, 
exc_value, exc_tb, obj and msg. Any additional human readable 
information can be encoded in msg, and machine readable information can 
be encoded in msg or obj. Currently we have no plans for adding more 
details, and I do not think that we will need to do this in future. 
Packing arguments into a single extendable object just complicates the 
code and increases the chance of raising an exception or crashing.

Even obj and msg could be merged into a single object, and the hook 
could check whether it is a string or callable. But passing them as 
separate arguments is fine to me, I just think that no more complication 
is necessary.


From vstinner at redhat.com  Thu May 16 05:57:24 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Thu, 16 May 2019 11:57:24 +0200
Subject: [Python-Dev] bpo-36829: Add sys.unraisablehook()
In-Reply-To: <CAPJVwBmrOBe4uBhH1sNdbxUdBJ3US4urBtpTVMHKakgZD9S3cQ@mail.gmail.com>
References: <CA+3bQGHmR18+nQ8=oUc3cu2vZJ0riyqqxKmaJ8ykNe9NPnVS8w@mail.gmail.com>
 <CAPJVwBmrOBe4uBhH1sNdbxUdBJ3US4urBtpTVMHKakgZD9S3cQ@mail.gmail.com>
Message-ID: <CA+3bQGHbWAJSV7Y8hN0qwaya9YD2D_qXtyfkaSkpKoS2KrE1ng@mail.gmail.com>

Le jeu. 16 mai 2019 ? 04:44, Nathaniel Smith <njs at pobox.com> a ?crit :
> What happens if the hook raises an exception?

Aha, thanks for asking the question!

If there is a custom hook and the hook fails, the default hook logs
the exception of the custom hook.

Technically, even if the default hook fails, the default hook is
called again to handle its own exception :-)

The fallback uses a direct access to the C implementation of the
default hook which reduces the risk of bugs.

My implementation contains an unit test to ensure that if a custom
hook raises an exception, it's a logged as expected ;-)

Victor
-- 
Night gathers, and now my watch begins. It shall not end until my death.

From vstinner at redhat.com  Thu May 16 06:12:20 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Thu, 16 May 2019 12:12:20 +0200
Subject: [Python-Dev] bpo-36829: Add sys.unraisablehook()
In-Reply-To: <qbj0cg$24cj$1@blaine.gmane.org>
References: <CA+3bQGHmR18+nQ8=oUc3cu2vZJ0riyqqxKmaJ8ykNe9NPnVS8w@mail.gmail.com>
 <qbj0cg$24cj$1@blaine.gmane.org>
Message-ID: <CA+3bQGEBdccO7W-1cy6TV91tMC1ipXc5shac1Byiz5Oueunj5w@mail.gmail.com>

Le jeu. 16 mai 2019 ? 08:39, Serhiy Storchaka <storchaka at gmail.com> a ?crit :
>
> 16.05.19 04:23, Victor Stinner ????:
> > The first implementation of my API used sys.unraisablehook(exc_type,
> > exc_value, exc_tb, obj). The problem is that Serhiy Storchaka asked me
> > to add a new error message field which breaks the API: the API is not
> > future-proof.
> >
> > I modified my API to create an object to pack arguments. The new API
> > becomes sys.unraisablehook(unraisable) where unraisable has 4 fields:
> > exc_type, exc_value, exc_tb, obj. This API is now future-proof: adding
> > a new field will not break existing custom hooks!
>
> I prefer the former design, when the hook takes 5 arguments: exc_type,
> exc_value, exc_tb, obj and msg. Any additional human readable
> information can be encoded in msg, and machine readable information can
> be encoded in msg or obj. Currently we have no plans for adding more
> details, and I do not think that we will need to do this in future.
> Packing arguments into a single extendable object just complicates the
> code and increases the chance of raising an exception or crashing.
>
> Even obj and msg could be merged into a single object, and the hook
> could check whether it is a string or callable. But passing them as
> separate arguments is fine to me, I just think that no more complication
> is necessary.

I came to the UnraisableHookArgs structseq idea because of my bad
experience with extension warnings "hooks". Let me tell you this story
:-)

To enhance ResourceWarning messages, I modified Python 3.6 to add a
new "source" parameter to the warnings module. It's the object which
caused the ResourceWarning. This object is mostly used to display the
traceback where the object has been allocated, traceback read using
tracemalloc.get_object_traceback() and so required tracemalloc to be
enabled.

   https://bugs.python.org/issue26604

The problem is that the 2 warnings "hooks" use a fixed number of
positional (and positional-or-keyword) parameters:

def showwarning(message, category, filename, lineno, file=None, line=None): ...
def formatwarning(message, category, filename, lineno, line=None): ...

Adding a new parameter would simply break *all* custom hooks in the wild...

At the same time, internally, the warnings module uses a
WarningMessage object to "pack" all parameters into a single object. I
was able to easily add a new "source" attribute to WarningMessage
without breaking the code using WarningMessage.

I added new hooks which accept WarningMessage:

def _showwarnmsg(msg): ...
def _formatwarnmsg(msg): ...

The problem is to keep the backward compatibility: decide which hook
should be called... How to detect that showwarning or _showwarnmsg has
been overriden? If both are overriden, which one should be modified?

The implementation is tricky, and it caused a few minor regressions:

https://github.com/python/cpython/commit/be7c460fb50efe3b88a00281025d76acc62ad2fd

All these problems are the consequence of the initial design choice of
warnings hooks: using a fixed number of parameters. This API simply
cannot be extended. IMHO it's a bad design,  and we can do better:
WarningMessage is a better design.

--

I would prefer to not reproduce the same API design mistake with
sys.unraisablehook.

I modified my PR to only use 4 fields: (exc_type, exc_value, exc_tb, obj).

I plan to add a 5th field "err_msg" ("error_message"?) later to
enhance the hook (allow to pass a custom error message to give more
context where the exception comes from). Passing a single
UnraisableHookArgs parameter to sys.unraisablehook allows to add a 5th
field without breaking the backward compatibility.

> Any additional human readable
> information can be encoded in msg, and machine readable information can
> be encoded in msg or obj.

IMHO it's very risky to declare the current API as "complete". In my
experience, we always want to enhance an API at some point to pass
more information. IMHO the warnings module with my new "source"
parameter is a good example.

For unraisable hook, it's not hard to imagine other useful parameters
that can be passed to the hook to provide more context about the
exception. For example, right now we only pass one object. But there
are cases where a second object would totally makes sense.

--

> Packing arguments into a single extendable object just complicates the
> code and increases the chance of raising an exception or crashing.

Technically, UnraisableHookArgs is basically a tuple of 4 items. I
consider that there is a low risk that creating the object can fail.

UnraisableHookArgs creation failure *is* covered by my implementation!
The default hook is called directly in C without using a temporary
UnraisableHookArgs object. The exception which caused the failure is
logged as well.

IMHO the very little risk of UnraisableHookArgs creation failure is
worth it, compared to the pain to extend an API based on a fixed
number of parameters.

Victor
-- 
Night gathers, and now my watch begins. It shall not end until my death.

From andrew.svetlov at gmail.com  Thu May 16 06:39:28 2019
From: andrew.svetlov at gmail.com (Andrew Svetlov)
Date: Thu, 16 May 2019 13:39:28 +0300
Subject: [Python-Dev] bpo-36829: Add sys.unraisablehook()
In-Reply-To: <CA+3bQGEBdccO7W-1cy6TV91tMC1ipXc5shac1Byiz5Oueunj5w@mail.gmail.com>
References: <CA+3bQGHmR18+nQ8=oUc3cu2vZJ0riyqqxKmaJ8ykNe9NPnVS8w@mail.gmail.com>
 <qbj0cg$24cj$1@blaine.gmane.org>
 <CA+3bQGEBdccO7W-1cy6TV91tMC1ipXc5shac1Byiz5Oueunj5w@mail.gmail.com>
Message-ID: <CAL3CFcWPy8p7Ove3AeTC-Z1=bOX7K+q1oaYe+DE++=zfZnzpaA@mail.gmail.com>

After the detailed explanation, UnraisableHookArgs makes sense.
Forward-compatibility is important thing

On Thu, May 16, 2019 at 1:12 PM Victor Stinner <vstinner at redhat.com> wrote:
>
> Le jeu. 16 mai 2019 ? 08:39, Serhiy Storchaka <storchaka at gmail.com> a ?crit :
> >
> > 16.05.19 04:23, Victor Stinner ????:
> > > The first implementation of my API used sys.unraisablehook(exc_type,
> > > exc_value, exc_tb, obj). The problem is that Serhiy Storchaka asked me
> > > to add a new error message field which breaks the API: the API is not
> > > future-proof.
> > >
> > > I modified my API to create an object to pack arguments. The new API
> > > becomes sys.unraisablehook(unraisable) where unraisable has 4 fields:
> > > exc_type, exc_value, exc_tb, obj. This API is now future-proof: adding
> > > a new field will not break existing custom hooks!
> >
> > I prefer the former design, when the hook takes 5 arguments: exc_type,
> > exc_value, exc_tb, obj and msg. Any additional human readable
> > information can be encoded in msg, and machine readable information can
> > be encoded in msg or obj. Currently we have no plans for adding more
> > details, and I do not think that we will need to do this in future.
> > Packing arguments into a single extendable object just complicates the
> > code and increases the chance of raising an exception or crashing.
> >
> > Even obj and msg could be merged into a single object, and the hook
> > could check whether it is a string or callable. But passing them as
> > separate arguments is fine to me, I just think that no more complication
> > is necessary.
>
> I came to the UnraisableHookArgs structseq idea because of my bad
> experience with extension warnings "hooks". Let me tell you this story
> :-)
>
> To enhance ResourceWarning messages, I modified Python 3.6 to add a
> new "source" parameter to the warnings module. It's the object which
> caused the ResourceWarning. This object is mostly used to display the
> traceback where the object has been allocated, traceback read using
> tracemalloc.get_object_traceback() and so required tracemalloc to be
> enabled.
>
>    https://bugs.python.org/issue26604
>
> The problem is that the 2 warnings "hooks" use a fixed number of
> positional (and positional-or-keyword) parameters:
>
> def showwarning(message, category, filename, lineno, file=None, line=None): ...
> def formatwarning(message, category, filename, lineno, line=None): ...
>
> Adding a new parameter would simply break *all* custom hooks in the wild...
>
> At the same time, internally, the warnings module uses a
> WarningMessage object to "pack" all parameters into a single object. I
> was able to easily add a new "source" attribute to WarningMessage
> without breaking the code using WarningMessage.
>
> I added new hooks which accept WarningMessage:
>
> def _showwarnmsg(msg): ...
> def _formatwarnmsg(msg): ...
>
> The problem is to keep the backward compatibility: decide which hook
> should be called... How to detect that showwarning or _showwarnmsg has
> been overriden? If both are overriden, which one should be modified?
>
> The implementation is tricky, and it caused a few minor regressions:
>
> https://github.com/python/cpython/commit/be7c460fb50efe3b88a00281025d76acc62ad2fd
>
> All these problems are the consequence of the initial design choice of
> warnings hooks: using a fixed number of parameters. This API simply
> cannot be extended. IMHO it's a bad design,  and we can do better:
> WarningMessage is a better design.
>
> --
>
> I would prefer to not reproduce the same API design mistake with
> sys.unraisablehook.
>
> I modified my PR to only use 4 fields: (exc_type, exc_value, exc_tb, obj).
>
> I plan to add a 5th field "err_msg" ("error_message"?) later to
> enhance the hook (allow to pass a custom error message to give more
> context where the exception comes from). Passing a single
> UnraisableHookArgs parameter to sys.unraisablehook allows to add a 5th
> field without breaking the backward compatibility.
>
> > Any additional human readable
> > information can be encoded in msg, and machine readable information can
> > be encoded in msg or obj.
>
> IMHO it's very risky to declare the current API as "complete". In my
> experience, we always want to enhance an API at some point to pass
> more information. IMHO the warnings module with my new "source"
> parameter is a good example.
>
> For unraisable hook, it's not hard to imagine other useful parameters
> that can be passed to the hook to provide more context about the
> exception. For example, right now we only pass one object. But there
> are cases where a second object would totally makes sense.
>
> --
>
> > Packing arguments into a single extendable object just complicates the
> > code and increases the chance of raising an exception or crashing.
>
> Technically, UnraisableHookArgs is basically a tuple of 4 items. I
> consider that there is a low risk that creating the object can fail.
>
> UnraisableHookArgs creation failure *is* covered by my implementation!
> The default hook is called directly in C without using a temporary
> UnraisableHookArgs object. The exception which caused the failure is
> logged as well.
>
> IMHO the very little risk of UnraisableHookArgs creation failure is
> worth it, compared to the pain to extend an API based on a fixed
> number of parameters.
>
> Victor
> --
> Night gathers, and now my watch begins. It shall not end until my death.
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe: https://mail.python.org/mailman/options/python-dev/andrew.svetlov%40gmail.com



-- 
Thanks,
Andrew Svetlov

From storchaka at gmail.com  Thu May 16 06:54:04 2019
From: storchaka at gmail.com (Serhiy Storchaka)
Date: Thu, 16 May 2019 13:54:04 +0300
Subject: [Python-Dev] bpo-36829: Add sys.unraisablehook()
In-Reply-To: <CA+3bQGEBdccO7W-1cy6TV91tMC1ipXc5shac1Byiz5Oueunj5w@mail.gmail.com>
References: <CA+3bQGHmR18+nQ8=oUc3cu2vZJ0riyqqxKmaJ8ykNe9NPnVS8w@mail.gmail.com>
 <qbj0cg$24cj$1@blaine.gmane.org>
 <CA+3bQGEBdccO7W-1cy6TV91tMC1ipXc5shac1Byiz5Oueunj5w@mail.gmail.com>
Message-ID: <qbjfgd$2qgd$1@blaine.gmane.org>

16.05.19 13:12, Victor Stinner ????:
> I came to the UnraisableHookArgs structseq idea because of my bad
> experience with extension warnings "hooks". Let me tell you this story
> :-)

I know this story, because I followed these issues.

> For unraisable hook, it's not hard to imagine other useful parameters
> that can be passed to the hook to provide more context about the
> exception. For example, right now we only pass one object. But there
> are cases where a second object would totally makes sense.

If you have plans for adding new details in future, I propose to add a 
6th parameter "context" or "extra" (always None currently). It is as 
extensible as packing all arguments into a single structure, but you do 
not need to introduce the structure type and create its instance until 
you need to pass additional info.


From solipsis at pitrou.net  Thu May 16 07:31:00 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Thu, 16 May 2019 13:31:00 +0200
Subject: [Python-Dev] deprecation of abstractstaticmethod and
 abstractclassmethod
References: <51c99452-91d3-a479-2666-1af554c433e2@stoneleaf.us>
 <CAPJVwB=czHqzrfV33LmUd-zrqM8xpizzbKC8PEPos1zOQhmo8w@mail.gmail.com>
 <571659b9-d63e-4bf9-ba06-56e7555b9aa8@python.org>
Message-ID: <20190516133100.08acad67@fsol>

On Wed, 15 May 2019 13:00:16 -0700
Steve Dower <steve.dower at python.org> wrote:

> On 15May2019 1248, Nathaniel Smith wrote:
> > I don't care about the deprecation either way. But can we fix the 
> > individual decorators so both orders work? Even if it requires a special 
> > case in the code, it seems worthwhile to remove a subtle user-visible 
> > footgun.  
> 
> The classmethod and staticmethod objects already have a getter for 
> __isabstractmethod__ that forwards to the underlying object, so they 
> should just need a setter as well, right?

Or, alternatively, raise an error if the wrong ordering is applied.
Failing silently isn't very helpful.

Regards

Antoine.



From vstinner at redhat.com  Thu May 16 08:02:49 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Thu, 16 May 2019 14:02:49 +0200
Subject: [Python-Dev] RFC: PEP 587 "Python Initialization
 Configuration": 3rd version
In-Reply-To: <7ddebc01-a067-4b52-48b7-e90347ed7cc7@gmail.com>
References: <CA+3bQGHTqcgayS7YqeO6as3M3_J=KSX_v-cEYOf9UQX=5y+wkw@mail.gmail.com>
 <7ddebc01-a067-4b52-48b7-e90347ed7cc7@gmail.com>
Message-ID: <CA+3bQGG8BdtVxh2jDWFKo4mn=n0dxzg4pPnTbsqvFhRMUFcdeg@mail.gmail.com>

(Le jeu. 16 mai 2019 ? 06:34, Gregory Szorc <gregory.szorc at gmail.com> a ?crit :
> > I know that the PEP is long, but well, it's a complex topic, and I
> > chose to add many examples to make the API easier to understand.
>
> I saw your request for feedback on Twitter a few days back and found
> this thread.
>
> This PEP is of interest to me because I'm the maintainer of PyOxidizer -
> a project for creating single file executables embedding Python.

Aha, interesting :-)

> As part
> of hacking on PyOxidizer, I will admit to grumbling about the current
> state of the configuration and initialization mechanisms. The reliance
> on global variables and the haphazard way in which you must call certain
> functions before others was definitely a bit frustrating to deal with.

Yeah, that's what I tried to explain in the PEP 587 Rationale.


> My most important piece of feedback is: thank you for tackling this!
> Your work to shore up the inner workings of interpreter state and
> management is a big deal on multiple dimensions. I send my sincere
> gratitude.

You're welcome ;-)


> PyPreConfig_INIT and PyConfig_INIT as macros that return a struct feel
> weird to me. Specifically, the `PyPreConfig preconfig =
> PyPreConfig_INIT;` pattern doesn't feel right. I'm sort of OK with these
> being implemented as macros. But I think they should look like function
> calls so the door is open to converting them to function calls in the
> future.

Ah yes, I noticed that some projects can only import symbols, not use
directly the C API. You're right that such macro can be an issue.

Would you be ok with a "PyConfig_Init(PyConfig *config);" function
which would initialize all fields to theire default values? Maybe
PyConfig_INIT should be renamed to PyConfig_STATIC_INIT.

You can find a similar API for pthread mutex, there is a init function
*and* a macro for static initialization:

       int pthread_mutex_init(pthread_mutex_t *restrict mutex,
           const pthread_mutexattr_t *restrict attr);

       pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;


> PyPreConfig.allocator being a char* seems a bit weird. Does this imply
> having to use strcmp() to determine which allocator to use? Perhaps the
> allocator setting should be an int mapping to a constant instead?

Yes, _PyMem_SetupAllocators() uses strcmp(). There are 6 supported values:

* "default"
* "debug"
* "pymalloc"
* "pymalloc_debug"
* "malloc"
* "malloc_debug"

Note: pymalloc and pymalloc_debug are not supported if Python is
explicitly configure using --without-pymalloc.

I think that I chose to use string because the feature was first
implemented using an environment variable.

Actually, I *like* the idea of avoiding string in PyPreConfig because
a string might need memory allocation, whereas the pre-initialization
is supposed to configure memory allocation :-) I will change the type
to an enum.


> Relatedly, how are custom allocators registered? e.g. from Rust, I want
> to use Rust's allocator. How would I do that in this API? Do I still
> need to call PyMem_SetAllocator()?

By default, PyPreConfig.allocator is set to NULL. In that case,
_PyPreConfig_Write() leaves the memory allocator unmodified.

As PyImport_AppendInittab() and PyImport_ExtendInittab(),
PyMem_SetAllocator() remains relevant and continue to work as
previously.

Example to set your custom allocator:
---
PyInitError err = Py_PreInitialize(NULL);
if (Py_INIT_FAILED(err)) {
    Py_ExitInitError(err);
}
PyMem_SetAllocator(PYMEM_DOMAIN_MEM, my_cool_allocator);
---

Well, it also works in the opposite order, but I prefer to call
PyMem_SetAllocator() after the pre-initialization to make it more
explicit :-)
---
PyMem_SetAllocator(PYMEM_DOMAIN_MEM, my_cool_allocator);
PyInitError err = Py_PreInitialize(NULL);
if (Py_INIT_FAILED(err)) {
    Py_ExitInitError(err);
}
---


> I thought a point of this proposal
> was to consolidate per-interpreter config settings?

Right. But PyMem_SetAllocator() uses PyMemAllocatorDomain enum and
PyMemAllocatorEx structure which are not really "future-proof". For
example, I already replaced PyMemAllocator with PyMemAllocatorEx to
add "calloc". We might extend it later one more time to add allocator
with a specific memory alignement (even if the issue is now closed):

https://bugs.python.org/issue18835

I consider that PyMem_SetAllocator() is too specific to be added to PyPreConfig.

Are you fine with that?


> I'm a little confused about the pre-initialization functions that take
> command arguments. Is this intended to only be used for parsing the
> arguments that `python` recognizes? Presumably a custom application
> embedding Python would never use these APIs unless it wants to emulate
> the behavior of `python`? (I suppose this can be clarified in the API
> docs once this is implemented.)

Yes, Py_PreInitializeFromArgs() parses -E, -I, -X dev and -X utf8 options:
https://www.python.org/dev/peps/pep-0587/#command-line-arguments

Extract of my "Isolate Python" section:

"The default configuration is designed to behave as a regular Python.
To embed Python into an application, it's possible to tune the
configuration to better isolated the embedded Python from the system:
(...)"

https://www.python.org/dev/peps/pep-0587/#isolate-python

I wasn't sure if I should mention parse_argv=0 in this section or not.
According to what you wrote, I should :-)

*Maybe* rather than documenting how to isolate Python, we might even
provide a function for that?

void PyConfig_Isolate(PyConfig *config)
{ config->isolated = 1; config->parse_argv = 0; }

I didn't propose that because so far, I'm not sure that everybody has
the same opinion on what "isolation" means. Does it only mean ignore
environment variables? Or also ignore configuration files? What about
the path configuration?

That's why I propose to start without such opiniated
PyConfig_Isolate() function :-)


> What about PyImport_FrozenModules? This is a global variable related to
> Python initialization (it contains _frozen_importlib and
> _frozen_importlib_external) but it is not accounted for in the PEP.
> I rely on this struct in PyOxidizer to replace the importlib modules with
> custom versions so we can do 0-copy in-memory import of Python bytecode
> for the entirety of the standard library. Should the PyConfig have a
> reference to the _frozen[] to use? Should the _frozen struct be made
> part of the public API?


First of all, PEP 587 is designed to be easily extendable :-) I added
_config_version field to even provide backward ABI compatibility.

Honestly, I never looked at PyImport_FrozenModules. It seems to fall
into the same category than "importtab": kind of corner case use case
which cannot be easily generalized into PyConfig structure.

As I would say the same that what I wrote about
PyImport_AppendInittab(): PyImport_FrozenModules symbol remains
relevant and continue to work as expected. I understand that it must
be set before the initialization, and it seems safe to set it even
before the pre-initialization since it's a static array.

Note: I renamed PyConfig._frozen to PyConfig.pathconfig_warnings: it's
an int and it's unrelated to PyImport_FrozenModules.


> I rely on this struct in PyOxidizer to replace the importlib modules with
> custom versions so we can do 0-copy in-memory import of Python bytecode
> for the entirety of the standard library.

Wait, that sounds like a cool feature! Would it make sense to make
this feature upstream? If yes, maybe send a separated email to
python-dev and/or open an issue.


> The PEP mentions a private PyConfig._install_importlib member. I'm
> curious what this is because it may be relevant to PyOxidizer. FWIW I
> /might/ be interested in a mechanism to better control importlib
> initialization because PyOxidizer is currently doing dirty things at
> run-time to register the custom 0-copy meta path importer. I /think/ my
> desired API would be a mechanism to control the name(s) of the frozen
> module(s) to use to bootstrap importlib. Or there would be a way to
> register the names of additional frozen modules to import and run as
> part of initializing importlib (before any .py-based stdlib modules are
> imported). Then PyOxidizer wouldn't need to hack up the source code to
> importlib, compile custom bytecode, and inject it via
> PyImport_FrozenModules. I concede this may be out of scope for the PEP.
> But if the API is being reworked, I'd certainly welcome making it easier
> for tools like PyOxidizer to work their crazy module importing magic :)

PEP 587 is an incomplete implementation of the PEP 432. We are
discussing with Nick Coghlan, Steve Dower and some others about having
2 phases for the Python initialization: "core" and "main". The "core"
phase would provide a bare minimum working Python: builtin exceptions
and types, maybe builtin imports, and that's basically all. It would
allow to configure Python using the newly created interpreter, for
example configure Python by running Python code.

The problem is that these 2 phases are not well defined yet, it's
still under discussion. Nick and me agreed to start with PEP 587 as a
first milestone, and see later how to implement "core" and "main"
phases.

If the private field "_init_main" of the PEP 587 is set to 0,
Py_InitializeFromConfig() stops at the "core" phase (in fact, it's
already implemented!). But I didn't implement yet a
_Py_InitializeMain() function to "finish" the initialization. Let's
say that it exists, we would get:

---
PyConfig config = PyConfig_INIT;
config._init_main = 0;
PyInitError err = Py_InitializeFromConfig(&config);
if (Py_INIT_FAILED(err)) {
    Py_ExitInitError(err);
}

/* add your code to customize Python here */
/* calling PyRun_SimpleString() here is safe */

/* finish Python initialization */
PyInitError err = _Py_InitializeMain(&config);
if (Py_INIT_FAILED(err)) {
    Py_ExitInitError(err);
}
---

Would it solve your use case?

Sorry, I didn't understand properly what you mean by "controlling the
names of the frozen modules to use to bootstrap importlib".


> I really like the new Py_RunMain() API and associated PyConfig members.
> I also invented this wheel in PyOxidizer and the new API should result
> in me deleting some code that I wish I didn't have to write in the first
> place :)

Great!


> I invented a data structure for representing a Python interpreter
> configuration. And the similarities to PyConfig are striking. I think
> that's a good sign :)

He he :-)

> It might be useful to read through that file -
> especially the init function (line with `pub fn init`) to see if
> anything I'm doing pushes the boundaries of the proposed API. Feel free
> to file GitHub issues if you see obvious bugs with PyOxidizer's Python
> initialization logic while you're at it :)

Your link didn't work, but I found:
https://github.com/indygreg/PyOxidizer/blob/master/pyoxidizer/src/pyembed/pyinterp.rs

"write_modules_directory_env" seems very specific to your needs. Apart
of that, I confirm that PythonConfig is very close to PEP 587
PyConfig! I notice that you also avoided double negation, thanks ;-)


/* Pre-initialization functions we could support:
*
* PyObject_SetArenaAllocator()
* PySys_AddWarnOption()
* PySys_AddXOption()
* PySys_ResetWarnOptions()
*/

Apart PyObject_SetArenaAllocator(), PyConfig implements the 3 other functions.

Again, ss PyMem_SetAllocator(), PyObject_SetArenaAllocator() remains
relevant and can be used with the pre-initialization.

PySys_SetObject("argv", obj) is covered by PyConfig.argv.

PySys_SetObject("argvb", obj): I'm not sure why you are doing that,
it's easy to retrieve sys.argv as bytes, it's now even documented:
https://docs.python.org/dev/library/sys.html#sys.argv

---

Sorry, I'm not an importlib expert. I'm not sure what could be done in
PEP 587 for your specific importlib changes.


> Also, one thing that tripped me up a few times when writing PyOxidizer
> was managing the lifetimes of memory that various global variables point
> to. The short version is I was setting Python globals to point to memory
> allocated by Rust and I managed to crash Python by freeing memory before
> it should have been. Since the new API seems to preserve support for
> global variables, I'm curious if there are changes to how memory must be
> managed. It would be really nice to get to a state where you only need
> to ensure the PyConfig instance and all its referenced memory only needs
> to outlive the interpreter it configures. That would make the memory
> lifetimes story intuitive and easily compatible with Rust.

For the specific case of PyConfig, you have to call
PyConfig_Clear(config) after you called Py_InitializeFromConfig().
Python keeps a copy of your configuration (and it completes the
missing fields, if needed).

I modified a lot of functions to ensure that Python cleanups more
globals at exit in Py_Finalize() and at the end of Py_Main() /
Py_RunMain().

I'm not sure if it replies to your question. If you want a more
specific, can you please give more concrete examples of globals?

There is also an on-going refactoring to move globals into
_PyRuntimeState and PyInterpreterState: change needed to support
subinterpreters, see Eric Snow's PEP 554.


> One feature that I think is missing from the proposal (and this is
> related to the previous paragraph) is the ability to prevent config
> fallback to things that aren't PyConfig and PyPreConfig. There is
> `PyConfig.parse_argv` to disable command argument parsing and
> `PyConfig.use_environment` to disable environment variable fallback. But
> AFAICT there is no option to disable configuration file fallback nor
> global variable fallback.

If you embed Python, you control global configuration variables, no? I
chose to design PyConfig to inherit global configuration variables
because it allows to support both ways to configure Python using a
single implementation.

Would you prefer an explicit PyConfig_SetDefaults(config) which would
completely ignore global configuration variables?

See Lib/test/test_embed.py unit tests which uses Programs/_testembed.c:
https://github.com/python/cpython/blob/master/Programs/_testembed.c

python._pth (Windows only), pybuilddir.txt (Unix only) and pyvenv.cfg
configuration files are only used by the function building the "Path
Configuration".

Using PEP 587, you can now completely ignore this function:
https://www.python.org/dev/peps/pep-0587/#path-configuration


> Again, this proposal is terrific overall and so much better than what we
> have today. The wall of text I just wrote is disproportionate in size to
> the quality of the PEP. I almost feel bad writing so much feedback for
> such a terrific PEP ;)
>
> Excellent work, Victor. I can't wait to see these changes materialize!

Thanks :-)

Thanks for your very interesting feedback. It's really helpful to see
how the API is used "for real" :-)

Victor

From p.f.moore at gmail.com  Thu May 16 09:30:37 2019
From: p.f.moore at gmail.com (Paul Moore)
Date: Thu, 16 May 2019 14:30:37 +0100
Subject: [Python-Dev] RFC: PEP 587 "Python Initialization
 Configuration": 3rd version
In-Reply-To: <CA+3bQGG8BdtVxh2jDWFKo4mn=n0dxzg4pPnTbsqvFhRMUFcdeg@mail.gmail.com>
References: <CA+3bQGHTqcgayS7YqeO6as3M3_J=KSX_v-cEYOf9UQX=5y+wkw@mail.gmail.com>
 <7ddebc01-a067-4b52-48b7-e90347ed7cc7@gmail.com>
 <CA+3bQGG8BdtVxh2jDWFKo4mn=n0dxzg4pPnTbsqvFhRMUFcdeg@mail.gmail.com>
Message-ID: <CACac1F9+0vtWNXBhONcZ57-uUvPmrAivVvaKe6xkVjNrPT78nA@mail.gmail.com>

On Thu, 16 May 2019 at 13:05, Victor Stinner <vstinner at redhat.com> wrote:
> > PyPreConfig_INIT and PyConfig_INIT as macros that return a struct feel
> > weird to me. Specifically, the `PyPreConfig preconfig =
> > PyPreConfig_INIT;` pattern doesn't feel right. I'm sort of OK with these
> > being implemented as macros. But I think they should look like function
> > calls so the door is open to converting them to function calls in the
> > future.
>
> Ah yes, I noticed that some projects can only import symbols, not use
> directly the C API. You're right that such macro can be an issue.

I've not been following this PEP particularly, but I can confirm that
the Vim bindings for Python also have this restriction (at least on
Windows). To allow binding to the Python interpreter at runtime, and
only on demand, the interface does an explicit
LoadLibrary/GetProcAddress call for each C API function that's used.
That means macros are unavailable (short of wholesale copying of the
Python headers). (It's also a painfully laborious bit of code, and it
would be nice if there were a better way of doing it, but I've never
had the time/motivation to try to improve this, so that's just how
it's stayed).

Paul

From vstinner at redhat.com  Thu May 16 09:47:22 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Thu, 16 May 2019 15:47:22 +0200
Subject: [Python-Dev] bpo-36829: Add sys.unraisablehook()
In-Reply-To: <qbjfgd$2qgd$1@blaine.gmane.org>
References: <CA+3bQGHmR18+nQ8=oUc3cu2vZJ0riyqqxKmaJ8ykNe9NPnVS8w@mail.gmail.com>
 <qbj0cg$24cj$1@blaine.gmane.org>
 <CA+3bQGEBdccO7W-1cy6TV91tMC1ipXc5shac1Byiz5Oueunj5w@mail.gmail.com>
 <qbjfgd$2qgd$1@blaine.gmane.org>
Message-ID: <CA+3bQGHQeNrr_FwGn6Op1VBFZ=CCh_z3_5-ak8M4AL-Q=xvZnA@mail.gmail.com>

Le jeu. 16 mai 2019 ? 12:57, Serhiy Storchaka <storchaka at gmail.com> a ?crit :
> > For unraisable hook, it's not hard to imagine other useful parameters
> > that can be passed to the hook to provide more context about the
> > exception. For example, right now we only pass one object. But there
> > are cases where a second object would totally makes sense.
>
> If you have plans for adding new details in future, I propose to add a
> 6th parameter "context" or "extra" (always None currently). It is as
> extensible as packing all arguments into a single structure, but you do
> not need to introduce the structure type and create its instance until
> you need to pass additional info.

In my implementation, UnraisableHookArgs is a C "structseq" type. In
short, it's a tuple. make_unraisable_hook_args() basically builds a
tuple of 4 items and uses PyTuple_SET_ITEM() to set the items.
_PyErr_WriteUnraisableDefaultHook() uses PyStructSequence_GET_ITEM()
to get items.

The code pack and unpack UnraisableHookArgs is simple and reliable.

An "unraisable exception" doesn't mean that Python is collapsing. It
only means that the code is unable to report the exception to the
caller: there is no reason why allocating a 4-tuple or calling a
simple Python function (sys.unraisablehook) would fail.

--

I dislike the compromise of having an API in 2 parts: positional
parameters for some parameters, and a structure for some other
parameters. I prefer to pack all arguments into a single structure.

--

IMHO it's readable to get attributes from an object in a Python hook:
it doesn't surprised me, OOP is common in Python :-) Simplified
example of a pure Python reimplementation of the default hook:

def myhook(unraisable):
    if unraisable.obj is not None:
        print(f"Exception ignored in: {unraisable.obj!r}")

    if unraisable.exc_tb is not None:
        traceback.print_tb(unraisable.exc_tb)

    print(f"{unraisable.exc_type.__name__}: {unraisable.exc_value}")

Compared to positional arguments:

def myhook(exc_type, exc_value, exc_tb, obj, extras):
    if obj is not None:
        print(f"Exception ignored in: {obj!r}")

    if exc_tb is not None:
        print_tb(exc_tb, file=file)

    print(f"{exc_type.__name__}: {exc_value}")

Again, the warnings module uses a similar WarningsMsg structure and
I'm not shocked by the implementation. Simplified code from
Lib/warnings.py:

def _formatwarnmsg_impl(msg):
    category = msg.category.__name__
    s =  f"{msg.filename}:{msg.lineno}: {category}: {msg.message}\n"

    if msg.line is None:
        line = linecache.getline(msg.filename, msg.lineno)
    else:
        line = msg.line
    if line:
        s += "  %s\n" % line.strip()

    if msg.source is not None:
        ...
    return s

Victor
-- 
Night gathers, and now my watch begins. It shall not end until my death.

From thomas at python.org  Thu May 16 10:10:06 2019
From: thomas at python.org (Thomas Wouters)
Date: Thu, 16 May 2019 16:10:06 +0200
Subject: [Python-Dev] RFC: PEP 587 "Python Initialization
 Configuration": 3rd version
In-Reply-To: <CA+3bQGG8BdtVxh2jDWFKo4mn=n0dxzg4pPnTbsqvFhRMUFcdeg@mail.gmail.com>
References: <CA+3bQGHTqcgayS7YqeO6as3M3_J=KSX_v-cEYOf9UQX=5y+wkw@mail.gmail.com>
 <7ddebc01-a067-4b52-48b7-e90347ed7cc7@gmail.com>
 <CA+3bQGG8BdtVxh2jDWFKo4mn=n0dxzg4pPnTbsqvFhRMUFcdeg@mail.gmail.com>
Message-ID: <CAPdQG2q-Mo2mMjQOd0oj1yKQXjfXvBvGshxc3kqXHUXRZaKziA@mail.gmail.com>

On Thu, May 16, 2019 at 2:03 PM Victor Stinner <vstinner at redhat.com> wrote:

> (Le jeu. 16 mai 2019 ? 06:34, Gregory Szorc <gregory.szorc at gmail.com> a
> ?crit :
> > > I know that the PEP is long, but well, it's a complex topic, and I
> > > chose to add many examples to make the API easier to understand.
> >
> > I saw your request for feedback on Twitter a few days back and found
> > this thread.
> >
> > This PEP is of interest to me because I'm the maintainer of PyOxidizer -
> > a project for creating single file executables embedding Python.
>
> Aha, interesting :-)
>

Just for some context to everyone: Gregory's PyOxidizer is very similar to
Hermetic Python, the thing we use at Google for all Python programs in our
mono-repo. We had a short email discussion facilitated by Augie Fackler,
who wants to use PyOxidizer for Mercurial, about how Hermetic Python works.

At the PyCon sprints last week, I sat down with Victor, Steve Dower and
Eric Snow, showing them how Hermetic Python embeds CPython, and what hoops
it has to jump through and what issues we encountered. I think most of
those issues would also apply to PyOxidizer, lthough it sounds like Gregory
solved some of the issues a bit differently. (Hermetic Python was
originally written for Python 2.7, so it doesn't try to deal with
importlib's bootstrapping, for example.)

I have some comments and questions about the PEP as well, some of which
overlap with Gregory's or Victor's answers:

[...]

> > PyPreConfig_INIT and PyConfig_INIT as macros that return a struct feel
> > weird to me. Specifically, the `PyPreConfig preconfig =
> > PyPreConfig_INIT;` pattern doesn't feel right. I'm sort of OK with these
> > being implemented as macros. But I think they should look like function
> > calls so the door is open to converting them to function calls in the
> > future.
>
> Ah yes, I noticed that some projects can only import symbols, not use
> directly the C API. You're right that such macro can be an issue.
>
> Would you be ok with a "PyConfig_Init(PyConfig *config);" function
> which would initialize all fields to theire default values? Maybe
> PyConfig_INIT should be renamed to PyConfig_STATIC_INIT.
>
> You can find a similar API for pthread mutex, there is a init function
> *and* a macro for static initialization:
>
>        int pthread_mutex_init(pthread_mutex_t *restrict mutex,
>            const pthread_mutexattr_t *restrict attr);
>
>        pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
>

This was going to be my suggestion as well: for any non-trivial macro, we
should have a function for it instead. I would also point out that PEP 587
has a code example that uses PyWideStringList_INIT, but that macro isn't
mention anywhere else. The PEP is a bit unclear as to the semantics of
PyWideStringList as a whole: the example uses a static array with length,
but doesn't explain what would happen with statically allocated data like
that if you call the Append or Extend functions. It also doesn't cover how
e.g. argv parsing would remove items from the list. (I would also suggest
the PEP shouldn't use the term 'list', at least not unqualified, if it
isn't an actual Python list.)

I understand the desire to make static allocation and initialisation
possible, but since you only need PyWideStringList for PyConfig, not
PyPreConfig (which sets the allocator), perhaps having a
PyWideStringList_Init(), which copies memory, and PyWideStringList_Clear()
to clear it, would be better?

> What about PyImport_FrozenModules? This is a global variable related to
> > Python initialization (it contains _frozen_importlib and
> > _frozen_importlib_external) but it is not accounted for in the PEP.
> > I rely on this struct in PyOxidizer to replace the importlib modules with
> > custom versions so we can do 0-copy in-memory import of Python bytecode
> > for the entirety of the standard library. Should the PyConfig have a
> > reference to the _frozen[] to use? Should the _frozen struct be made
> > part of the public API?
>
>
> First of all, PEP 587 is designed to be easily extendable :-) I added
> _config_version field to even provide backward ABI compatibility.
>
> Honestly, I never looked at PyImport_FrozenModules. It seems to fall
> into the same category than "importtab": kind of corner case use case
> which cannot be easily generalized into PyConfig structure.
>
> As I would say the same that what I wrote about
> PyImport_AppendInittab(): PyImport_FrozenModules symbol remains
> relevant and continue to work as expected. I understand that it must
> be set before the initialization, and it seems safe to set it even
> before the pre-initialization since it's a static array.
>
> Note: I renamed PyConfig._frozen to PyConfig.pathconfig_warnings: it's
> an int and it's unrelated to PyImport_FrozenModules.


>
> > I rely on this struct in PyOxidizer to replace the importlib modules with
> > custom versions so we can do 0-copy in-memory import of Python bytecode
> > for the entirety of the standard library.
>
> Wait, that sounds like a cool feature! Would it make sense to make
> this feature upstream? If yes, maybe send a separated email to
> python-dev and/or open an issue.


> > The PEP mentions a private PyConfig._install_importlib member. I'm
> > curious what this is because it may be relevant to PyOxidizer. FWIW I
> > /might/ be interested in a mechanism to better control importlib
> > initialization because PyOxidizer is currently doing dirty things at
> > run-time to register the custom 0-copy meta path importer. I /think/ my
> > desired API would be a mechanism to control the name(s) of the frozen
> > module(s) to use to bootstrap importlib. Or there would be a way to
> > register the names of additional frozen modules to import and run as
> > part of initializing importlib (before any .py-based stdlib modules are
> > imported). Then PyOxidizer wouldn't need to hack up the source code to
> > importlib, compile custom bytecode, and inject it via
> > PyImport_FrozenModules. I concede this may be out of scope for the PEP.
> > But if the API is being reworked, I'd certainly welcome making it easier
> > for tools like PyOxidizer to work their crazy module importing magic :)
>
> PEP 587 is an incomplete implementation of the PEP 432. We are
> discussing with Nick Coghlan, Steve Dower and some others about having
> 2 phases for the Python initialization: "core" and "main". The "core"
> phase would provide a bare minimum working Python: builtin exceptions
> and types, maybe builtin imports, and that's basically all. It would
> allow to configure Python using the newly created interpreter, for
> example configure Python by running Python code.
>
> The problem is that these 2 phases are not well defined yet, it's
> still under discussion. Nick and me agreed to start with PEP 587 as a
> first milestone, and see later how to implement "core" and "main"
> phases.
>
> If the private field "_init_main" of the PEP 587 is set to 0,
> Py_InitializeFromConfig() stops at the "core" phase (in fact, it's
> already implemented!). But I didn't implement yet a
> _Py_InitializeMain() function to "finish" the initialization. Let's
> say that it exists, we would get:
>
> ---
> PyConfig config = PyConfig_INIT;
> config._init_main = 0;
> PyInitError err = Py_InitializeFromConfig(&config);
> if (Py_INIT_FAILED(err)) {
>     Py_ExitInitError(err);
> }
>
> /* add your code to customize Python here */
> /* calling PyRun_SimpleString() here is safe */
>
> /* finish Python initialization */
> PyInitError err = _Py_InitializeMain(&config);
> if (Py_INIT_FAILED(err)) {
>     Py_ExitInitError(err);
> }
> ---
>
> Would it solve your use case?
>

FWIW, I understand the need here: for Hermetic Python, we solved it by
adding a new API similar to PyImport_AppendInittab, but instead registering
a generic callback hook to be called *during* the initialisation process:
after the base runtime and the import mechanism are initialised (at which
point you can create Python objects), but before *any* modules are
imported. We use that callback to insert a meta-importer that satisfies all
stdlib imports from an embedded archive. (Using a meta-importer allows us
to bypass the fileysystem altogether, even for what would otherwise be
failed path lookups.)

As I mentioned, Hermetic Python was originally written for Python 2.7, but
this approach works fine with a frozen importlib as well. The idea of
'core' and 'main' initialisation will likely work for this, as well.

Other questions/comments about PEP 587:

I really like the PyInitError struct. I would like more functions to use
it, e.g. the PyRrun_* "very high level" API, which currently calls exit()
for you on SystemExit, and returns -1 without any other information on
error. For those, I'm not entirely sure 'Init' makes sense in the name...
but I can live with it.

A couple of things are documented as performing pre-initialisation
(PyConfig_SetBytesString, PyConfig_SetBytesArgv). I understand why, but I
feel like that might be confusing and error-prone. Would it not be better
to have them fail if pre-initialisation hasn't been performed yet?

The buffered_stdio field of PyConfig mentions stdout and stderr, but not
stdin. Does it not affect stdin? (Many of the fields could do with a bit
more explicit documentation, to be honest.)

The configure_c_stdio field of PyConfig sounds like it might not set
sys.stdin/stdout/stderr. That would be new behaviour, but configure_c_stdio
doesn't have an existing equivalence, so I'm not sure if that's what you
meant or not.

The dll_path field of PyConfig says "Windows only". Does that meant the
struct doesn't have that field except in a Windows build? Or is it ignored,
instead? If it doesn't have that field at all, what #define can be used to
determine if the PyConfig struct will have it or not?

It feels a bit weird to have both 'inspect' and 'interactive' in PyConfig.
Is there a substantive difference between them? Is this just so you can
easily tell if any of run_module / run_command / run_filename are set?

"module_search_path_env" sounds like an awkward and somewhat misleading
name for the translation of PYTHONPATH. Can we not just use, say,
pythonpath_env? I expect the intended audience to know that PYTHONPATH !=
sys.path.

The module_search_paths field in PyConfig doesn't mention if it's setting
or adding to the calculated sys.path. As a whole, the path-calculation bits
are a bit under-documented. Since this is an awkward bit of CPython, it
wouldn't hurt to mention what "the default path configuration" does (i.e.
search for python's home starting at program_name, add fixed subdirs to it,
etc.)

Path configuration is mentioned as being able to issue warnings, but it
doesn't mention *how*. It can't be the warnings module at this stage. I
presume it's just printing to stderr.

Regarding Py_RunMain(): does it do the right thing when something calls
PyErr_Print() with SystemExit set? (I mentioned last week that
PyErr_Print() will call C's exit() in that case, which is obviously
terrible for embedders.)

Regarding isolated_mode and the site module, should we make stronger
guarantees about site.py's behaviour being optional? The problem with site
is that it does four things that aren't configurable, one of which is
usually very desirable, one of which probably doesn't matter to embedders,
and two that are iffy: sys.path deduplication and canonicalisation (and
fixing up __file__/__cached__ attributes of already-imported modules);
adding site-packages directories; looking for and importing
sitecustomize.py; executing .pth files. The site module doesn't easily
allow doing only some of these. (user-site directories are an exception, as
they have their own flag, so I'm not listing that here.) With Hermetic
Python we don't care about any of these (for a variety of different
reasons), but I'm always a little worried that future Python versions would
add behaviour to site that we *do* need.

(As a side note, here's an issue I forgot to talk about last week: with
Hermetic Python's meta-importers we have an ancillary regular import hook
for correctly dealing with packages with modified __path__, so that for
example 'xml' from the embedded stdlib zip can still import '_xmlplus' from
the filesystem or a separate zip, and append its __path__ entries to its
own. To do that, we use a special prefix to use for the embedded archive
meta-importers; we don't want to use a file because they are not files on
disk. The prefixes used to be something like '<embedded archive XXX at
YYY>'. This works fine, and with correct ordering of import hooks nothing
will try to find files named '<embedded archive XXX at YYY>'... until user
code imports site for some reason, which then canonicalises sys.path,
replacing the magic prefixes with '/path/to/cwd/<embedded archive XXX at
YYY>'. We've since made the magic prefixes start with /, but I'm not happy
with it :P)

-- 
Thomas Wouters <thomas at python.org>

Hi! I'm an email virus! Think twice before sending your email to help me
spread!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190516/8a8eba0b/attachment.html>

From steve.dower at python.org  Thu May 16 11:23:08 2019
From: steve.dower at python.org (Steve Dower)
Date: Thu, 16 May 2019 08:23:08 -0700
Subject: [Python-Dev] RFC: PEP 587 "Python Initialization
 Configuration": 3rd version
In-Reply-To: <7ddebc01-a067-4b52-48b7-e90347ed7cc7@gmail.com>
References: <CA+3bQGHTqcgayS7YqeO6as3M3_J=KSX_v-cEYOf9UQX=5y+wkw@mail.gmail.com>
 <7ddebc01-a067-4b52-48b7-e90347ed7cc7@gmail.com>
Message-ID: <57ab48b9-fd1a-9300-d28b-8c3164b1d583@python.org>

Thanks for adding your input, Gregory! It's much appreciated.

I'll shuffle your comments around a bit, as I'd rather address the 
themes than each individual point.

On 15May2019 2134, Gregory Szorc wrote:
> PyPreConfig_INIT and PyConfig_INIT as macros that return a struct feel
> weird to me. Specifically, the `PyPreConfig preconfig =
> PyPreConfig_INIT;` pattern doesn't feel right.

I see Victor agreed here, but I think this is the right pattern for 
PreConfig. The "_INIT" macro pattern is common throughout as a way to 
initialize a stack-allocated struct - we really can't change it to be 
anything than "{ .member = static value }" without breaking users, but 
if you have another way to initialize it correctly then that is fine. 
The important factor here is that this struct has to be allocated 
_without_ any memory management provided by Python.

That said, I don't particularly like this approach for PyConfig. As you 
said:

> Also, one thing that tripped me up a few times when writing PyOxidizer
> was managing the lifetimes of memory that various global variables point
> to.

My preference here is for PreConfig to get far enough that we can 
construct the full configuration as regular Python objects (e.g. using 
PyDict_New, PyUnicode_FromString, etc.)[1] rather than a brand new C 
struct with a new set of functions. That will cost copies/allocations at 
startup, but it will also ensure that the lifetime of the configuration 
info is managed by the runtime.

I assume you already have code/helpers for constructing Python strings 
and basic data structures, so I wonder whether it would be helpful to be 
able to use them to create the configuration info?

([1]: Yes, this requires implementation changes so they work 
pre-interpreter and cross-interpreter. This work probably has to happen 
anyway, so I don't see any harm in assuming it will happen.)

> I'm a little confused about the pre-initialization functions that take
> command arguments. Is this intended to only be used for parsing the
> arguments that `python` recognizes? Presumably a custom application
> embedding Python would never use these APIs unless it wants to emulate
> the behavior of `python`? (I suppose this can be clarified in the API
> docs once this is implemented.)

> One feature that I think is missing from the proposal (and this is
> related to the previous paragraph) is the ability to prevent config
> fallback to things that aren't PyConfig and PyPreConfig. 

This is certainly my intent, and I *think* Victor is coming around to it 
too ;)

My preference is that embedding by default does not use any information 
outside of the configuration provided by the host application. Then our 
"python" host application can read the environment/argv/etc. and convert 
it into configuration. Since some embedders also want to do this, we can 
provide helper functions to replicate the behaviour.

Does this sound like a balance that would suit your needs? Would you 
expect an embedded Python to be isolated by default? Or would you assume 
that it's going to pick up configuration from various places and that 
you (as an embedder) need to explicitly suppress that?

(Some parts of the stdlib and some 3rd-party libraries use their own 
environment variables at runtime. We may not be able to convert all of 
those to configuration, but at least they're read lazily, and so Python 
code can override them by setting the variables.)

> What about PyImport_FrozenModules? 

> FWIW I /might/ be interested in a mechanism to better control importlib
> initialization because PyOxidizer is currently doing dirty things at
> run-time to register the custom 0-copy meta path importer.

Controlling imports early in initialization is one of our broader goals 
here, and one that I would particularly like to figure out before we 
commit to a new public API. Registering new importers should not have to 
be "dirty".

Cheers,
Steve

From steve.dower at python.org  Thu May 16 11:33:19 2019
From: steve.dower at python.org (Steve Dower)
Date: Thu, 16 May 2019 08:33:19 -0700
Subject: [Python-Dev] RFC: PEP 587 "Python Initialization
 Configuration": 3rd version
In-Reply-To: <CA+3bQGHTqcgayS7YqeO6as3M3_J=KSX_v-cEYOf9UQX=5y+wkw@mail.gmail.com>
References: <CA+3bQGHTqcgayS7YqeO6as3M3_J=KSX_v-cEYOf9UQX=5y+wkw@mail.gmail.com>
Message-ID: <de2aef25-9836-562b-5d59-6b09205cf7ab@python.org>

On 15May2019 1610, Victor Stinner wrote:
> Thanks to the constructive discussions, I enhanced my PEP 587. I don't
> plan any further change, the PEP is now ready to review (and maybe
> even for pronouncement, hi Thomas! :-)).

My view is that while this is a fantastic PEP and the groundwork that 
already exists as private API is excellent, it is too early to commit to 
a new public API and we need to do more analysis work. We should not 
accept this PEP at this time.

So far, the API being exposed here has not been tested with embedders. 
We have very little feedback on whether it meets their needs or would 
help them simplify or make their projects more robust. I have concerns 
about the number of new functions being added, the new patterns being 
proposed, and both forward and backwards compatibility as we inevitably 
make changes. (I have discussed all of these in person with Victor, 
Nick, and Thomas at PyCon last week, which is why I'm not doing a 
point-by-point here.)

As soon as we publish a PEP declaring a new embedding API, users will 
assume that it's here to stay. I don't believe that is true, as there is 
much more we can and should do to improve embedding. But we don't get to 
totally revise the public API on each release without alienating users, 
which is why I would rather hold the public API changes until 3.9, 
investigate and design them properly. It does our users a disservice to 
make major changes like this without due process.

Cheers,
Steve

From steve.dower at python.org  Thu May 16 11:45:11 2019
From: steve.dower at python.org (Steve Dower)
Date: Thu, 16 May 2019 08:45:11 -0700
Subject: [Python-Dev] RFC: PEP 587 "Python Initialization
 Configuration": 3rd version
In-Reply-To: <CAPdQG2q-Mo2mMjQOd0oj1yKQXjfXvBvGshxc3kqXHUXRZaKziA@mail.gmail.com>
References: <CA+3bQGHTqcgayS7YqeO6as3M3_J=KSX_v-cEYOf9UQX=5y+wkw@mail.gmail.com>
 <7ddebc01-a067-4b52-48b7-e90347ed7cc7@gmail.com>
 <CA+3bQGG8BdtVxh2jDWFKo4mn=n0dxzg4pPnTbsqvFhRMUFcdeg@mail.gmail.com>
 <CAPdQG2q-Mo2mMjQOd0oj1yKQXjfXvBvGshxc3kqXHUXRZaKziA@mail.gmail.com>
Message-ID: <97a82b7a-0410-be1d-cda4-88fc4f6ec1b3@python.org>

On 16May2019 0710, Thomas Wouters wrote:
> A couple of things are documented as performing pre-initialisation 
> (PyConfig_SetBytesString,?PyConfig_SetBytesArgv). I understand why, but 
> I feel like that might be confusing and error-prone. Would it not be 
> better to have them fail if pre-initialisation hasn't been performed yet?

I agree. Anything other than setting up the struct for 
pre-initialization settings doesn't need to work here.

> The dll_path field of PyConfig says "Windows only". Does that meant the 
> struct doesn't have that field except in a Windows build? Or is it 
> ignored, instead? If it doesn't have that field at all, what #define can 
> be used to determine if the PyConfig struct will have it or not?

This field doesn't need to be here. It exists because it was used in 
getpathp.c, and Victor's internal refactoring has kept it around through 
all the field movement.

If we properly design initialization instead of just refactoring until 
it's public, I bet this field will go away.

> "module_search_path_env" sounds like an awkward and somewhat misleading 
> name for the translation of PYTHONPATH. Can we not just use, say, 
> pythonpath_env? I expect the intended audience to know that PYTHONPATH 
> != sys.path.

Again, this doesn't need to be its own configuration field, but because 
of the refactoring approach taken here it's flowed out to public API.

A "init config from environment" can load this value and put it into the 
"sys.path-equivalent field" in the config.

> The module_search_paths field in PyConfig doesn't mention if it's 
> setting or adding to the calculated sys.path. As a whole, the 
> path-calculation bits are a bit under-documented. Since this is an 
> awkward bit of CPython, it wouldn't hurt to mention what "the default 
> path configuration" does (i.e. search for python's home starting at 
> program_name, add fixed subdirs to it, etc.)

Again, let's design this part properly instead of exposing what we've 
had for years :)

> Regarding Py_RunMain(): does it do the right thing when something calls 
> PyErr_Print() with SystemExit set? (I mentioned last week that 
> PyErr_Print() will call C's exit() in that case, which is obviously 
> terrible for embedders.)

Can we just fix PyErr_Print() to not exit? Surely we only depend on it 
in one or two places (sys.excepthook?) and it's almost certainly not 
helping anyone else.

> Regarding isolated_mode and the site module, should we make stronger 
> guarantees about site.py's behaviour being optional?

Yes, I've been forgetting about this too. There's a lot of configuration 
that's split between site.py and initialization, so it's very hard to 
understand what will be ready when you leave out site.py. Straightening 
this out would help (everyone except virtualenv, probably ;) )

Cheers,
Steve


From steve.dower at python.org  Thu May 16 11:56:22 2019
From: steve.dower at python.org (Steve Dower)
Date: Thu, 16 May 2019 08:56:22 -0700
Subject: [Python-Dev] bpo-36829: Add sys.unraisablehook()
In-Reply-To: <CA+3bQGHQeNrr_FwGn6Op1VBFZ=CCh_z3_5-ak8M4AL-Q=xvZnA@mail.gmail.com>
References: <CA+3bQGHmR18+nQ8=oUc3cu2vZJ0riyqqxKmaJ8ykNe9NPnVS8w@mail.gmail.com>
 <qbj0cg$24cj$1@blaine.gmane.org>
 <CA+3bQGEBdccO7W-1cy6TV91tMC1ipXc5shac1Byiz5Oueunj5w@mail.gmail.com>
 <qbjfgd$2qgd$1@blaine.gmane.org>
 <CA+3bQGHQeNrr_FwGn6Op1VBFZ=CCh_z3_5-ak8M4AL-Q=xvZnA@mail.gmail.com>
Message-ID: <8c678174-b68b-3e70-9f82-b4c7e274185c@python.org>

On 16May2019 0647, Victor Stinner wrote:
> Le jeu. 16 mai 2019 ? 12:57, Serhiy Storchaka <storchaka at gmail.com> a ?crit :
>>> For unraisable hook, it's not hard to imagine other useful parameters
>>> that can be passed to the hook to provide more context about the
>>> exception. For example, right now we only pass one object. But there
>>> are cases where a second object would totally makes sense.
>>
>> If you have plans for adding new details in future, I propose to add a
>> 6th parameter "context" or "extra" (always None currently). It is as
>> extensible as packing all arguments into a single structure, but you do
>> not need to introduce the structure type and create its instance until
>> you need to pass additional info.
> 
> In my implementation, UnraisableHookArgs is a C "structseq" type. In
> short, it's a tuple. make_unraisable_hook_args() basically builds a
> tuple of 4 items and uses PyTuple_SET_ITEM() to set the items.
> _PyErr_WriteUnraisableDefaultHook() uses PyStructSequence_GET_ITEM()
> to get items.
> 
> The code pack and unpack UnraisableHookArgs is simple and reliable.
> 
> An "unraisable exception" doesn't mean that Python is collapsing. It
> only means that the code is unable to report the exception to the
> caller: there is no reason why allocating a 4-tuple or calling a
> simple Python function (sys.unraisablehook) would fail.
> 
> --
> 
> I dislike the compromise of having an API in 2 parts: positional
> parameters for some parameters, and a structure for some other
> parameters. I prefer to pack all arguments into a single structure.

I really like this API, and I agree with Victor that we don't really 
need more than the exception info. For future expansion, we can pass in 
a different exception, no?

I'm not even convinced we need the obj argument, or that it's a good 
idea - this is yet another place where it's likely to be dead/dying 
already. And what can you do with it? Resurrection seems like a really 
bad idea, as does diving into a custom __repr__. There's no useful 
recovery mechanism here that I'm aware of, so I'd be in favor of just 
passing through the exception and nothing else.

Cheers,
Steve

From steve.dower at python.org  Thu May 16 12:02:29 2019
From: steve.dower at python.org (Steve Dower)
Date: Thu, 16 May 2019 09:02:29 -0700
Subject: [Python-Dev] bpo-36829: Add sys.unraisablehook()
In-Reply-To: <8c678174-b68b-3e70-9f82-b4c7e274185c@python.org>
References: <CA+3bQGHmR18+nQ8=oUc3cu2vZJ0riyqqxKmaJ8ykNe9NPnVS8w@mail.gmail.com>
 <qbj0cg$24cj$1@blaine.gmane.org>
 <CA+3bQGEBdccO7W-1cy6TV91tMC1ipXc5shac1Byiz5Oueunj5w@mail.gmail.com>
 <qbjfgd$2qgd$1@blaine.gmane.org>
 <CA+3bQGHQeNrr_FwGn6Op1VBFZ=CCh_z3_5-ak8M4AL-Q=xvZnA@mail.gmail.com>
 <8c678174-b68b-3e70-9f82-b4c7e274185c@python.org>
Message-ID: <b20d536c-3106-5704-d5db-e6237d3a712d@python.org>

On 16May2019 0856, Steve Dower wrote:
> On 16May2019 0647, Victor Stinner wrote:
>> Le jeu. 16 mai 2019 ? 12:57, Serhiy Storchaka <storchaka at gmail.com> a 
>> ?crit :
>>>> For unraisable hook, it's not hard to imagine other useful parameters
>>>> that can be passed to the hook to provide more context about the
>>>> exception. For example, right now we only pass one object. But there
>>>> are cases where a second object would totally makes sense.
>>>
>>> If you have plans for adding new details in future, I propose to add a
>>> 6th parameter "context" or "extra" (always None currently). It is as
>>> extensible as packing all arguments into a single structure, but you do
>>> not need to introduce the structure type and create its instance until
>>> you need to pass additional info.
>>
>> In my implementation, UnraisableHookArgs is a C "structseq" type. In
>> short, it's a tuple. make_unraisable_hook_args() basically builds a
>> tuple of 4 items and uses PyTuple_SET_ITEM() to set the items.
>> _PyErr_WriteUnraisableDefaultHook() uses PyStructSequence_GET_ITEM()
>> to get items.
>>
>> The code pack and unpack UnraisableHookArgs is simple and reliable.
>>
>> An "unraisable exception" doesn't mean that Python is collapsing. It
>> only means that the code is unable to report the exception to the
>> caller: there is no reason why allocating a 4-tuple or calling a
>> simple Python function (sys.unraisablehook) would fail.
>>
>> -- 
>>
>> I dislike the compromise of having an API in 2 parts: positional
>> parameters for some parameters, and a structure for some other
>> parameters. I prefer to pack all arguments into a single structure.
> 
> I really like this API, and I agree with Victor that we don't really 
> need more than the exception info. For future expansion, we can pass in 
> a different exception, no?
> 
> I'm not even convinced we need the obj argument, or that it's a good 
> idea - this is yet another place where it's likely to be dead/dying 
> already. And what can you do with it? Resurrection seems like a really 
> bad idea, as does diving into a custom __repr__. There's no useful 
> recovery mechanism here that I'm aware of, so I'd be in favor of just 
> passing through the exception and nothing else.

Actually, if the default implementation prints the exception message, 
how is this different from sys.excepthook? Specifically, from the point 
of customizing the hooks.

If I were going to replace unraisablehook to do something on specific 
exceptions, I'm almost certainly going to replace excepthook as well, 
no? The only difference is whether there are any try/except blocks in 
between, and by definition I think the answer is no (in both cases, or 
we wouldn't have reached the hook).

Do you have scenarios in mind where you would need these to do different 
things? And would those be just as well served by a flag on the 
exception object rather than an entirely separate hook?

Cheers,
Steve

From steve.dower at python.org  Thu May 16 12:12:26 2019
From: steve.dower at python.org (Steve Dower)
Date: Thu, 16 May 2019 09:12:26 -0700
Subject: [Python-Dev] bpo-36829: Add sys.unraisablehook()
In-Reply-To: <b20d536c-3106-5704-d5db-e6237d3a712d@python.org>
References: <CA+3bQGHmR18+nQ8=oUc3cu2vZJ0riyqqxKmaJ8ykNe9NPnVS8w@mail.gmail.com>
 <qbj0cg$24cj$1@blaine.gmane.org>
 <CA+3bQGEBdccO7W-1cy6TV91tMC1ipXc5shac1Byiz5Oueunj5w@mail.gmail.com>
 <qbjfgd$2qgd$1@blaine.gmane.org>
 <CA+3bQGHQeNrr_FwGn6Op1VBFZ=CCh_z3_5-ak8M4AL-Q=xvZnA@mail.gmail.com>
 <8c678174-b68b-3e70-9f82-b4c7e274185c@python.org>
 <b20d536c-3106-5704-d5db-e6237d3a712d@python.org>
Message-ID: <b6f317a1-e98d-c11c-a8b7-672d117faa7c@python.org>

On 16May2019 0902, Steve Dower wrote:
> Actually, if the default implementation prints the exception message, 
> how is this different from sys.excepthook? Specifically, from the point 
> of customizing the hooks.
> 
> If I were going to replace unraisablehook to do something on specific 
> exceptions, I'm almost certainly going to replace excepthook as well, 
> no? The only difference is whether there are any try/except blocks in 
> between, and by definition I think the answer is no (in both cases, or 
> we wouldn't have reached the hook).
> 
> Do you have scenarios in mind where you would need these to do different 
> things? And would those be just as well served by a flag on the 
> exception object rather than an entirely separate hook?

Finally, the changes aren't in yet but PEP 578 is accepted, so perhaps 
this could also be satisfied by an audit hook for an exception that's 
about to be ignored?

Cheers,
Steve

From vstinner at redhat.com  Thu May 16 13:25:06 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Thu, 16 May 2019 19:25:06 +0200
Subject: [Python-Dev] RFC: PEP 587 "Python Initialization
 Configuration": 3rd version
In-Reply-To: <CAPdQG2q-Mo2mMjQOd0oj1yKQXjfXvBvGshxc3kqXHUXRZaKziA@mail.gmail.com>
References: <CA+3bQGHTqcgayS7YqeO6as3M3_J=KSX_v-cEYOf9UQX=5y+wkw@mail.gmail.com>
 <7ddebc01-a067-4b52-48b7-e90347ed7cc7@gmail.com>
 <CA+3bQGG8BdtVxh2jDWFKo4mn=n0dxzg4pPnTbsqvFhRMUFcdeg@mail.gmail.com>
 <CAPdQG2q-Mo2mMjQOd0oj1yKQXjfXvBvGshxc3kqXHUXRZaKziA@mail.gmail.com>
Message-ID: <CA+3bQGF-PQvV8bH-7aWUVwvMTz=ssxiooLRWd_HEQAw-eEUX2A@mail.gmail.com>

Le jeu. 16 mai 2019 ? 16:10, Thomas Wouters <thomas at python.org> a ?crit :
>> Would you be ok with a "PyConfig_Init(PyConfig *config);" function
>> which would initialize all fields to theire default values? Maybe
>> PyConfig_INIT should be renamed to PyConfig_STATIC_INIT.
>>
>> You can find a similar API for pthread mutex, there is a init function
>> *and* a macro for static initialization:
>>
>>        int pthread_mutex_init(pthread_mutex_t *restrict mutex,
>>            const pthread_mutexattr_t *restrict attr);
>>
>>        pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
>
>
> This was going to be my suggestion as well: for any non-trivial macro, we should have a function for it instead.

Ok, I will do that.


> I would also point out that PEP 587 has a code example that uses PyWideStringList_INIT, but that macro isn't mention anywhere else.

Oh, I forgot to better document it. Well, the macro is trivial:

#define _PyWstrList_INIT (_PyWstrList){.length = 0, .items = NULL}

For consistency, I prefer to not initialize manually these fields, but
use a macro instead.

(Variables are allocated on the stack and so *must* be initialized.)


> The PEP is a bit unclear as to the semantics of PyWideStringList as a whole: the example uses a static array with length, but doesn't explain what would happen with statically allocated data like that if you call the Append or Extend functions. It also doesn't cover how e.g. argv parsing would remove items from the list. (I would also suggest the PEP shouldn't use the term 'list', at least not unqualified, if it isn't an actual Python list.)

Calling PyWideStringList_Append() or PyWideStringList_Insert() on a
"constant" list will crash: don't do that :-)

I tried to explain the subtle details of "constant" vs "dynamic"
configurations in "Initialization with constant PyConfig" and "Memory
allocations and Py_DecodeLocale()" functions.

A "constant" PyWideStringList must not be used with a "dynamic"
PyConfig: otherwise, PyConfig_Clear() will crash as well.

I would prefer to have separated "const PyWideStringList" and "const
PyConfig" types, but the C language doesn't convert "wchat_*" to
"const wchar_t*" when you do that. We would need duplicated
PyConstantWideStringList and PyConstantConfig structures, which would
require to be "casted" to PyWideStringList and PyConfig internally to
reuse the same code for constant and dynamic configuration.

If you consider that the specific case of "constant configuration"
adds too much burden / complexity, we mgiht remove it and always
require to use dynamic configuration.

Right now, Programs/_testembed.c almost uses only "constant"
configuration. Using dynamic memory would make the code longer: need
to handle memory allocation failures.


> I understand the desire to make static allocation and initialisation possible, but since you only need PyWideStringList for PyConfig, not PyPreConfig (which sets the allocator), perhaps having a PyWideStringList_Init(), which copies memory, and PyWideStringList_Clear() to clear it, would be better?

Do you mean to always require to build dynamic lists? Said
differently, not allow to write something like the following code?

    static wchar_t* argv[] = {
        L"python3",
        L"-c",
        L"pass",
        L"arg2",
    };

    _PyCoreConfig config = _PyCoreConfig_INIT;
    config.argv.length = Py_ARRAY_LENGTH(argv);
    config.argv.items = argv;


>> If the private field "_init_main" of the PEP 587 is set to 0,
>> Py_InitializeFromConfig() stops at the "core" phase (in fact, it's
>> already implemented!). But I didn't implement yet a
>> _Py_InitializeMain() function to "finish" the initialization. Let's
>> say that it exists, we would get:
>>
>> ---
>> PyConfig config = PyConfig_INIT;
>> config._init_main = 0;
>> PyInitError err = Py_InitializeFromConfig(&config);
>> if (Py_INIT_FAILED(err)) {
>>     Py_ExitInitError(err);
>> }
>>
>> /* add your code to customize Python here */
>> /* calling PyRun_SimpleString() here is safe */
>>
>> /* finish Python initialization */
>> PyInitError err = _Py_InitializeMain(&config);
>> if (Py_INIT_FAILED(err)) {
>>     Py_ExitInitError(err);
>> }
>> ---
>>
>> Would it solve your use case?
>
>
> FWIW, I understand the need here: for Hermetic Python, we solved it by adding a new API similar to PyImport_AppendInittab, but instead registering a generic callback hook to be called *during* the initialisation process: after the base runtime and the import mechanism are initialised (at which point you can create Python objects), but before *any* modules are imported. We use that callback to insert a meta-importer that satisfies all stdlib imports from an embedded archive. (Using a meta-importer allows us to bypass the fileysystem altogether, even for what would otherwise be failed path lookups.)
>
> As I mentioned, Hermetic Python was originally written for Python 2.7, but this approach works fine with a frozen importlib as well. The idea of 'core' and 'main' initialisation will likely work for this, as well.

Well, even if it's not part of the PEP 587, I just implemented it
anyway while fixing a bug:
https://github.com/python/cpython/commit/9ef5dcaa0b3c7c7ba28dbb3ec0c9507d9d05e3a9

Example:

static int test_init_main(void)
{
    _PyCoreConfig config = _PyCoreConfig_INIT;
    configure_init_main(&config);
    config._init_main = 0;

    _PyInitError err = _Py_InitializeFromConfig(&config);
    if (_Py_INIT_FAILED(err)) {
        _Py_ExitInitError(err);
    }

    /* sys.stdout don't exist yet: it is created by _Py_InitializeMain() */
    int res = PyRun_SimpleString(
        "import sys; "
        "print('Run Python code before _Py_InitializeMain', "
               "file=sys.stderr)");
    if (res < 0) {
        exit(1);
    }

    err = _Py_InitializeMain();
    if (_Py_INIT_FAILED(err)) {
        _Py_ExitInitError(err);
    }

    return _Py_RunMain();
}

As you can see, it's possible execute Python between "core" and "main"
initialization phases. Moreover, I even fixed Python to be able to use
"import sys" before the "main" initialization phase ;-) (Only builtin
and frozen modules are available at this stage.)

Again, I'm not comfortable to make PyConfig._init_main and
_Py_InitializeMain() public, because I consider that they are too
experimental and we don't have enough time to discuss what is the
"core" initialization phase exactly.


> Other questions/comments about PEP 587:
>
> I really like the PyInitError struct. I would like more functions to use it, e.g. the PyRrun_* "very high level" API, which currently calls exit() for you on SystemExit, and returns -1 without any other information on error. For those, I'm not entirely sure 'Init' makes sense in the name... but I can live with it.

PyInitError structure can be renamed PyError, but it should only be
used with functions which can exit Python. In short, are you talking
"The Very High Level Layer" of the C API?
https://docs.python.org/dev/c-api/veryhigh.html

One issue is that I dislike adding new functions to the C API, but it
seems like we should add a few to provide a better API for embedded
Python. libpython must never exit the process! (or only when you
explicity asks that :-))

Note: PyRun_SimpleStringFlags() is a wrapper which makes
PyRun_StringFlags() usage easier. PyRun_StringFlags() doesn't handle
the exception and so let you decide how to handle it.


> A couple of things are documented as performing pre-initialisation (PyConfig_SetBytesString, PyConfig_SetBytesArgv). I understand why, but I feel like that might be confusing and error-prone. Would it not be better to have them fail if pre-initialisation hasn't been performed yet?

It's easier to modify the code to fail with an error if Python is not
pre-initialized.

I propose to implicitly pre-initialize Python to make the API easier
to use. In practice, you rarely have to explicitly pre-initialize
Python. The default PyPreConfig is just fine for almost all use cases,
especially since Nick Coghlan and me decided to disable C locale
coercion and UTF-8 Mode by default. You now have to opt-in to enable
these encoding features.


> The buffered_stdio field of PyConfig mentions stdout and stderr, but not stdin. Does it not affect stdin?

Extract of create_stdio():

    /* stdin is always opened in buffered mode, first because it shouldn't
       make a difference in common use cases, second because TextIOWrapper
       depends on the presence of a read1() method which only exists on
       buffered streams.
    */

Note: Unbuffered stdin doesn't magically make the producer on the
other side of a pipe flushing its (stdout/stderr) buffer more
frequently :-)


> (Many of the fields could do with a bit more explicit documentation, to be honest.)

Well, 2 years ago, almost no configuration parameter was documented
:-) I helped to document "Global configuration variables" at:
https://docs.python.org/dev/c-api/init.html#global-configuration-variables

I had to reverse engineer the code to be able to document it :-D

Right now, my reference documentation lives in
Include/cpython/coreconfig.h. Some parameters are better documented
there, than in the PEP. I can try to enhance the documentation in the
PEP.


> The configure_c_stdio field of PyConfig sounds like it might not set sys.stdin/stdout/stderr. That would be new behaviour, but configure_c_stdio doesn't have an existing equivalence, so I'm not sure if that's what you meant or not.

In Python 3.7, only Py_Main() configured C standard streams.

I moved the code into _PyCoreConfig_Write() which is called by
_Py_InitializeFromConfig() and so by Py_Initialize() as well.

My intent is to be able to get the same behavior using Py_Initialize()
+ Py_RunMain(), than using Py_Main().

Said differently, Python 3.8 now always configures C standard streams.
Maybe I should modify the configure_c_stdio default value to 0, and
only enable it by default in Py_Main()?

Honestly, I'm a little bit confused here. I'm not sure what is the
expected behavior. Usually, in case of doubt, I look at the behavior
before my refactoring. The old behaviour was that only Py_Main()
configured C standard streams. Maybe I should restore this behavior.

But to build a customized Python which should behave as the regular
Python, you would like opt-in for configure_c_stdio=1.

Maybe we need a function to set the configuration to get "regular
Python" behavior?

Something like: PyConfig_SetRegularPythonBehavior()? (sorry for the silly name!)


> The dll_path field of PyConfig says "Windows only". Does that meant the struct doesn't have that field except in a Windows build? Or is it ignored, instead? If it doesn't have that field at all, what #define can be used to determine if the PyConfig struct will have it or not?

The field doesn't exist on non-Windows platforms.

I chose to expose it to let the developer chooses where Python looks for DLL.

But Steve just said (in an email below) that there is no reason to
make it configurable. In that case, I will make it internal again. It
seems like I misunderstood the purpose of this parameter.


> It feels a bit weird to have both 'inspect' and 'interactive' in PyConfig. Is there a substantive difference between them? Is this just so you can easily tell if any of run_module / run_command / run_filename are set?

In Python 3.7, there are Py_InspectFlag and Py_InteractiveFlag.

If "interactive" parameter is non-zero, C standard streams are
configured as buffered. It is also used to decide if stdin is
considered as interactive or not:

/* Return non-zero is stdin is a TTY or if -i command line option is used */
static int
stdin_is_interactive(const _PyCoreConfig *config)
{
    return (isatty(fileno(stdin)) || config->interactive);
}

The "inspect" parameter is used to decide if we start a REPL or not.

The "-i" command line option sets inspect (Py_InspectFlag) and
interactive (Py_InteractiveFlag) to 1.

These flags are exposed at Python level as sys.flags.inspect and
sys.flags.interactive.

... Honestly, I'm not sure if there is a real difference between these
two flags, but they are exposed and exist for years... so I decided to
keep them.


> "module_search_path_env" sounds like an awkward and somewhat misleading name for the translation of PYTHONPATH. Can we not just use, say, pythonpath_env? I expect the intended audience to know that PYTHONPATH != sys.path.

Sure, I can rename it.


> The module_search_paths field in PyConfig doesn't mention if it's setting or adding to the calculated sys.path. As a whole, the path-calculation bits are a bit under-documented.

Py_InitializeFromConfig() sets sys.path from module_search_paths.

sys.path doesn't exist before Py_InitializeFromConfig() is called.


> Since this is an awkward bit of CPython, it wouldn't hurt to mention what "the default path configuration" does (i.e. search for python's home starting at program_name, add fixed subdirs to it, etc.)

Oh, that's a big task :-) Nobody knows what getpath.c and getpathp.c do :-D


> Path configuration is mentioned as being able to issue warnings, but it doesn't mention *how*. It can't be the warnings module at this stage. I presume it's just printing to stderr.

First, I didn't know, but I just saw that it's only on Unix
(getpath.c). On Windows (getpathp.c), no warning is emitted.

The warning is written into C stderr.

The flag isn't new: it's based on Py_FrozenFlag. When I looked at how
Python is embedded, I was surprised by the number of applications
setting Py_FrozenFlag to 1 to suppress these warnings.


> Regarding Py_RunMain(): does it do the right thing when something calls PyErr_Print() with SystemExit set? (I mentioned last week that PyErr_Print() will call C's exit() in that case, which is obviously terrible for embedders.)

I spent a significant amount of time to ensure that
Py_InitializeFromConfig() and Py_RunMain() don't exit directly, but
return a proper failure or exit code. For example, Python 3.6 contains
around 319 calls to Py_FatalError(). The master branch contains around
181 calls to Py_FatalError(): still a lot, but I converted 138 calls
to _Py_INIT_ERR() ;-)

The work is not complete: I just checked, Py_RunMain() still calls
directly PyErr_Print() at many places. Well, the code can be fixed,
and it's not directly related to the PEP, is it? The issue already
existed in Python 3.7 with Py_Main().


> Regarding isolated_mode and the site module, should we make stronger guarantees about site.py's behaviour being optional? The problem with site is that it does four things that aren't configurable, one of which is usually very desirable, one of which probably doesn't matter to embedders, and two that are iffy: sys.path deduplication and canonicalisation (and fixing up __file__/__cached__ attributes of already-imported modules); adding site-packages directories; looking for and importing sitecustomize.py; executing .pth files. The site module doesn't easily allow doing only some of these. (user-site directories are an exception, as they have their own flag, so I'm not listing that here.) With Hermetic Python we don't care about any of these (for a variety of different reasons), but I'm always a little worried that future Python versions would add behaviour to site that we *do* need.

Honestly, I would prefer to simply remove the site module, I dislike
it because it makes Python startup way slower :-) ... But well, it
does a few important things :-)

About the PEP 587: PyConfig.user_site_directory is exported as
sys.flags.no_user_site (negative value) which is used by the site
module.

I'm not sure if you are asking me to modify my PEP, or if it's more a
general remark. The PEP 587 gives control on how sys.path is
initialized.

In the "Isolate Python" section, I suggest to set the "isolated"
parameter to 1 which imply setting user_site_directory to 0. So
sys.path isn't modified afterwards. What you pass to PyConfig is what
you get in sys.path in this case.

Victor
-- 
Night gathers, and now my watch begins. It shall not end until my death.

From matusvalo at gmail.com  Thu May 16 14:04:25 2019
From: matusvalo at gmail.com (matus valo)
Date: Thu, 16 May 2019 20:04:25 +0200
Subject: [Python-Dev] bpo-9584: Added brace expressions to the glob and
 fnmatch.
Message-ID: <CAHm8GSiKpCd6Ug4uzHHYtKk21fO_OFKTbpup+FwO51P0HiC0FQ@mail.gmail.com>

Hi All,

I have implemented PR fixing bpo-9584 few months ago. Recently, I was
encouraged that conversation on DEV mailing list should be started here on
DEV mailing list. From the conversation in bug report, I understood that
the main problem is that straightforward implementation can break a
backward compatibility. E.g.:

* Patched python:

>>> import os
>>> import glob
>>> os.makedirs('a{b,c}d/e')
>>> os.listdir('a{b,c}d')
['e']
>>> glob.glob('a{b,c}d/*')
[]
>>>

* Unpatched python:

>>> import os, glob
>>> os.makedirs('a{b,c}d/e')
>>> os.listdir('a{b,c}d')
['e']
>>> glob.glob('a{b,c}d/*')
['a{b,c}d/e']


How can I proceed with the PR? Please advise.


Thanks,

Matus Valo
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190516/1d49a960/attachment.html>

From barry at python.org  Thu May 16 14:10:55 2019
From: barry at python.org (Barry Warsaw)
Date: Thu, 16 May 2019 11:10:55 -0700
Subject: [Python-Dev] bpo-36829: Add sys.unraisablehook()
In-Reply-To: <CA+3bQGEBdccO7W-1cy6TV91tMC1ipXc5shac1Byiz5Oueunj5w@mail.gmail.com>
References: <CA+3bQGHmR18+nQ8=oUc3cu2vZJ0riyqqxKmaJ8ykNe9NPnVS8w@mail.gmail.com>
 <qbj0cg$24cj$1@blaine.gmane.org>
 <CA+3bQGEBdccO7W-1cy6TV91tMC1ipXc5shac1Byiz5Oueunj5w@mail.gmail.com>
Message-ID: <0AB0D675-4CA8-46D2-93A9-2F83E6AF3FA6@python.org>

On May 16, 2019, at 03:12, Victor Stinner <vstinner at redhat.com> wrote:

> I came to the UnraisableHookArgs structseq idea because of my bad
> experience with extension warnings "hooks". Let me tell you this story
> :-)

Thanks for that!

> def showwarning(message, category, filename, lineno, file=None, line=None): ...
> def formatwarning(message, category, filename, lineno, line=None): ?

While I?m fine with the API you propose, you could consider keyword-only arguments to help future proof the call signature.  I don?t like it as much because it?s not as backward compatibility proof, but it?s an option to perhaps consider.

-Barry

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: Message signed with OpenPGP
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190516/1cb765e9/attachment.sig>

From vstinner at redhat.com  Thu May 16 14:38:17 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Thu, 16 May 2019 20:38:17 +0200
Subject: [Python-Dev] bpo-36829: Add sys.unraisablehook()
In-Reply-To: <0AB0D675-4CA8-46D2-93A9-2F83E6AF3FA6@python.org>
References: <CA+3bQGHmR18+nQ8=oUc3cu2vZJ0riyqqxKmaJ8ykNe9NPnVS8w@mail.gmail.com>
 <qbj0cg$24cj$1@blaine.gmane.org>
 <CA+3bQGEBdccO7W-1cy6TV91tMC1ipXc5shac1Byiz5Oueunj5w@mail.gmail.com>
 <0AB0D675-4CA8-46D2-93A9-2F83E6AF3FA6@python.org>
Message-ID: <CA+3bQGEd9Ox5e=nK0s-bOdZpL0NcG1vtt_s507Hv=YB5WBNLMg@mail.gmail.com>

> While I?m fine with the API you propose, you could consider keyword-only
arguments to help future proof the call signature.  I don?t like it as much
because it?s not as backward compatibility proof, but it?s an option to
perhaps consider.

Let's say that we have: hook(*, exc_type, exc_value, exc_tb, obj). Now we
pass a new err_msg keyword argument: the call fails with a TypeError :-(

Or do you mean using **kwargs? I don't think **kwargs is a good API :-(
Well, the same can be done using *args and positional arguments to ignore
new unknown arguments, but I also dislike such API.

Victor

-- 
Night gathers, and now my watch begins. It shall not end until my death.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190516/cf786168/attachment.html>

From encukou at gmail.com  Thu May 16 14:58:33 2019
From: encukou at gmail.com (Petr Viktorin)
Date: Thu, 16 May 2019 20:58:33 +0200
Subject: [Python-Dev] bpo-36829: Add sys.unraisablehook()
In-Reply-To: <CA+3bQGHmR18+nQ8=oUc3cu2vZJ0riyqqxKmaJ8ykNe9NPnVS8w@mail.gmail.com>
References: <CA+3bQGHmR18+nQ8=oUc3cu2vZJ0riyqqxKmaJ8ykNe9NPnVS8w@mail.gmail.com>
Message-ID: <314887b2-8fb9-447d-7293-2babb8ba5f00@gmail.com>

On 5/16/19 3:23 AM, Victor Stinner wrote:
[...]
> I modified my API to create an object to pack arguments. The new API
> becomes sys.unraisablehook(unraisable) where unraisable has 4 fields:
> exc_type, exc_value, exc_tb, obj.
[...]
I always thought the classic (exc_type, exc_value, exc_tb) triple is a 
holdover from older Python versions, and all the information is now in 
the exception instance.
Is the triple ever different from (type(exc), exc, exc.__traceback__)?
(possibly with a getattr for __traceback__)
Should new APIs use it?

From njs at pobox.com  Thu May 16 15:29:00 2019
From: njs at pobox.com (Nathaniel Smith)
Date: Thu, 16 May 2019 12:29:00 -0700
Subject: [Python-Dev] bpo-36829: Add sys.unraisablehook()
In-Reply-To: <b20d536c-3106-5704-d5db-e6237d3a712d@python.org>
References: <CA+3bQGHmR18+nQ8=oUc3cu2vZJ0riyqqxKmaJ8ykNe9NPnVS8w@mail.gmail.com>
 <qbj0cg$24cj$1@blaine.gmane.org>
 <CA+3bQGEBdccO7W-1cy6TV91tMC1ipXc5shac1Byiz5Oueunj5w@mail.gmail.com>
 <qbjfgd$2qgd$1@blaine.gmane.org>
 <CA+3bQGHQeNrr_FwGn6Op1VBFZ=CCh_z3_5-ak8M4AL-Q=xvZnA@mail.gmail.com>
 <8c678174-b68b-3e70-9f82-b4c7e274185c@python.org>
 <b20d536c-3106-5704-d5db-e6237d3a712d@python.org>
Message-ID: <CAPJVwBmBrpUeq10==ZdoEnvDZ7xZJJjF3svfQxck1OrzN0MgXA@mail.gmail.com>

On Thu, May 16, 2019, 09:07 Steve Dower <steve.dower at python.org> wrote:

>
> Actually, if the default implementation prints the exception message,
> how is this different from sys.excepthook? Specifically, from the point
> of customizing the hooks.
>

sys.excepthook means the program has fully unwound and is about to exit.
This is pretty different from an exception inside a __del__ or background
thread or whatever, where the program definitely hasn't unwound and is
likely to continue. And I'm pretty sure they have behavioral differences
already, like if you pass in a SystemExit exception then sys.excepthook
doesn't print anything, but PyErr_WriteUnraiseable prints a traceback.

So making them two separate hooks seems right to me. Some people will
override both; that's fine.

-n
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190516/059f443b/attachment-0001.html>

From solipsis at pitrou.net  Thu May 16 15:41:13 2019
From: solipsis at pitrou.net (Antoine Pitrou)
Date: Thu, 16 May 2019 21:41:13 +0200
Subject: [Python-Dev] Need review
Message-ID: <20190516214113.07623f9a@fsol>


Hello,

I need a review on the PEP 574 implementation:
https://github.com/python/cpython/pull/7076

I would really like it to be in 3.8 and so ideally it should be merged
within two weeks.

Regards

Antoine.



From vstinner at redhat.com  Thu May 16 16:22:00 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Thu, 16 May 2019 22:22:00 +0200
Subject: [Python-Dev] bpo-36829: Add sys.unraisablehook()
In-Reply-To: <314887b2-8fb9-447d-7293-2babb8ba5f00@gmail.com>
References: <CA+3bQGHmR18+nQ8=oUc3cu2vZJ0riyqqxKmaJ8ykNe9NPnVS8w@mail.gmail.com>
 <314887b2-8fb9-447d-7293-2babb8ba5f00@gmail.com>
Message-ID: <CA+3bQGFrZDkbaNsjMsXNUKvJbgb3-5qVmoF785x5cYqKS+2aPA@mail.gmail.com>

Le jeu. 16 mai 2019 ? 20:58, Petr Viktorin <encukou at gmail.com> a ?crit :
> I always thought the classic (exc_type, exc_value, exc_tb) triple is a
> holdover from older Python versions, and all the information is now in
> the exception instance.
> Is the triple ever different from (type(exc), exc, exc.__traceback__)?
> (possibly with a getattr for __traceback__)

I added assertions in PyErr_WriteTraceback():

    assert(Py_TYPE(v) == t);
    assert(PyException_GetTraceback(v) == tb);

"Py_TYPE(v) == t" fails in
test_exceptions.test_memory_error_in_PyErr_PrintEx() for example.
PyErr_NoMemory() calls PyErr_SetNone(PyExc_MemoryError), it sets
tstate->curexc_type to PyExc_MemoryError, but tstate->curexc_value is
set to NULLL.

"PyException_GetTraceback(v) == tb" fails in
test_exceptions.test_unraisable() for example: "PyTraceBack_Here(f);"
in the "error:" label of ceval.c creates a traceback object and sets
it to tstate->curexec_traceback, but it doesn't set the __traceback__
attribute of the current exception.

> Should new APIs use it?

I tried to add a "PyErr_NormalizeException(&t, &v, &tb);" call in
PyErr_WriteUnraisable(): it creates an exception object (exc_value)
for the PyErr_NoMemory() case, but it still doesn't set the
__traceback__ attribute of the exception for the PyTraceBack_Here()
case.

It seems like PyErr_WriteUnraisable() cannot avoid having 3 variables
(exc_type, exc_value, exc_tb), since they are not consistent as you
may expect.

Victor
-- 
Night gathers, and now my watch begins. It shall not end until my death.

From vstinner at redhat.com  Thu May 16 17:04:49 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Thu, 16 May 2019 23:04:49 +0200
Subject: [Python-Dev] bpo-36829: Add sys.unraisablehook()
In-Reply-To: <8c678174-b68b-3e70-9f82-b4c7e274185c@python.org>
References: <CA+3bQGHmR18+nQ8=oUc3cu2vZJ0riyqqxKmaJ8ykNe9NPnVS8w@mail.gmail.com>
 <qbj0cg$24cj$1@blaine.gmane.org>
 <CA+3bQGEBdccO7W-1cy6TV91tMC1ipXc5shac1Byiz5Oueunj5w@mail.gmail.com>
 <qbjfgd$2qgd$1@blaine.gmane.org>
 <CA+3bQGHQeNrr_FwGn6Op1VBFZ=CCh_z3_5-ak8M4AL-Q=xvZnA@mail.gmail.com>
 <8c678174-b68b-3e70-9f82-b4c7e274185c@python.org>
Message-ID: <CA+3bQGHaGhsBkS8eEfTXjGxxMwdMqF449pP_pj4vNsEKS96Snw@mail.gmail.com>

Le jeu. 16 mai 2019 ? 17:56, Steve Dower <steve.dower at python.org> a ?crit :
> I really like this API, and I agree with Victor that we don't really
> need more than the exception info. For future expansion, we can pass in
> a different exception, no?

Sorry, I don't understand. I explained that we need more than
(exc_type, exc_value, exc_tb).

"obj" is part of the C function PyErr_WriteUnraisable(). We have to
pass it to the hook. Otherwise, how do you want to guess where the
exception comes from? Without any context, it can be super painful to
debug such exception :-(

That's why I said that I like Serhiy's idea of extending the API to
allow to also pass an error message.

Unraisable exceptions are commonly raised during garbage collection or
in finalizers. So it's commonly happens when you don't "expect" them
:-)


> I'm not even convinced we need the obj argument, or that it's a good
> idea - this is yet another place where it's likely to be dead/dying
> already. And what can you do with it? Resurrection seems like a really
> bad idea, as does diving into a custom __repr__. There's no useful
> recovery mechanism here that I'm aware of, so I'd be in favor of just
> passing through the exception and nothing else.

Well, first of all, I would advice to *not* keep "obj" alive after the
execution of the hook. Keep repr(obj) if you want, but not a reference
to the object. Same for the exception value, keeping it alive is a
high risk of creating annoying reference cycles ;-)

--

In a finalizer, "obj" is not always the object being finalized.

Example: when an _asyncio.Future is finalized,
loop.call_exception_handler() is called if the future wasn't consumed.
If this call fails, PyErr_WriteUnraisable(func) is called. func isn't
the future, but the call_exception_handler() method.

Example: on a garbage collection, callbacks of weak references are
called. If a callback fails, PyErr_WriteUnraisable(callback) is
called. It's not the collected object nor the weak reference.

It's also common that PyErr_WriteUnraisable(NULL) is called. In this
case, you have no context where the exception comes from :-( For that,
I experimented a custom hook which logs also the current Python stack.
That's useful in many cases!

socket.socket finalizer is a case where the finalized object (the
socket) is passed to the hook. IMHO it's fine to resurrect a socket in
that case. Finalization isn't deallocation. The objet remains
consistent. The finalization protocol ensures that the finalizer is
only called once.

In practice, I wouldn't advice to resurrect objects :-) I would expect
that a hook only calls repr(hook) and then forgets the object.

The current PyErr_WriteUnraisable() implementation does exactly that:
it formats repr(obj) into sys.stderr.

*If* someone finds a case where PyErr_WriteUnraisable() can resurect
an object that is freed just after the call, I would suggest to fix
the code to not pass the object to PyErr_WriteUnraisable(). Using PEP
442 finalizers, I don't think that it should happen.

Victor
-- 
Night gathers, and now my watch begins. It shall not end until my death.

From pablogsal at gmail.com  Thu May 16 17:12:29 2019
From: pablogsal at gmail.com (Pablo Galindo Salgado)
Date: Thu, 16 May 2019 22:12:29 +0100
Subject: [Python-Dev] Parser module in the stdlib
Message-ID: <CAFjbc8ExfBnbntfaTgDLk=wkWJzk-3xfG=omN+5nsSDxBQw+4w@mail.gmail.com>

Hi everyone,

TLDR
=====

I propose to remove the current parser module and expose pgen2 as a
standard library module.

Some context
===========

The parser module has been "deprecated" (technically we recommend to prefer
the ast module instead) since Python2.5 but is still in the standard
library.
Is a 1222-line C module that needs to be kept in sync with the grammar and
the Python parser sometimes by hand. It has also been broken for several
years:
I recently fixed a bug that was introduced in Python 3.5 that caused the
parse module to not being able to parse if-else blocks (
https://bugs.python.org/issue36256).

The interface it provides is a very raw view of the CST. For instance:

>>> parser.sequence2st(parser.suite("def f(x,y,z): pass").totuple())

provides an object with methods compile, isexpr, issuite, tolist, totuple.
The last two produce containers with the numerical values of the grammar
elements (tokens, dfas...etc)

>>> parser.suite("def f(x,y,z): pass").tolist()
[257, [269, [295, [263, [1, 'def'], [1, 'f'], [264, [7, '('], [265, [266,
[1, 'x']], [12, ','], [266, [1, 'y']], [12, ','], [266, [1, 'z']]], [8,
')']], [11, ':'], [304, [270, [271, [277, [1, 'pass']]], [4, '']]]]]], [4,
''], [0, '']]

This is a very raw interface and is very tied to the particularities of
CPython without almost any abstraction.

On the other hand, there is a Python implementation of the Python parser
and parser generator in lib2to3 (pgen2). This module is not documented and
is usually considered an implementation
detail of lib2to3 but is extremely useful. Several 3rd party packages
(black, fissix...) are using it directly or have their own forks due to the
fact that it can get outdated with respect to the Python3
grammar as it was originally used only for Python2 to Python3 migration. It
has the ability to consume LL1 grammars in EBNF form and produces an LL1
parser for them (by creating parser tables
that the same module can consume). Many people use the module currently to
support or parse supersets of Python (like Python2/3 compatible grammars,
cython-like changes...etc).

Proposition
========

I propose to remove finally the parser module as it has been "deprecated"
for a long time, is almost clear that nobody uses it and has very limited
usability and replace it (maybe with a different name)
with pgen2 (maybe with a more generic interface that is detached to lib2to3
particularities). This will not only help a lot current libraries that are
using forks or similar solutions but also will help to keep
synchronized the shipped grammar (that is able to parse Python2 and Python3
code) with the current Python one (as now will be more justified to keep
them in sync).

What do people think about? Do you have any concerns? Do you think is a
good/bad idea?

Regards from sunny London,
Pablo Galindo
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190516/16638ead/attachment.html>

From steve.dower at python.org  Thu May 16 17:16:49 2019
From: steve.dower at python.org (Steve Dower)
Date: Thu, 16 May 2019 14:16:49 -0700
Subject: [Python-Dev] bpo-36829: Add sys.unraisablehook()
In-Reply-To: <CA+3bQGHaGhsBkS8eEfTXjGxxMwdMqF449pP_pj4vNsEKS96Snw@mail.gmail.com>
References: <CA+3bQGHmR18+nQ8=oUc3cu2vZJ0riyqqxKmaJ8ykNe9NPnVS8w@mail.gmail.com>
 <qbj0cg$24cj$1@blaine.gmane.org>
 <CA+3bQGEBdccO7W-1cy6TV91tMC1ipXc5shac1Byiz5Oueunj5w@mail.gmail.com>
 <qbjfgd$2qgd$1@blaine.gmane.org>
 <CA+3bQGHQeNrr_FwGn6Op1VBFZ=CCh_z3_5-ak8M4AL-Q=xvZnA@mail.gmail.com>
 <8c678174-b68b-3e70-9f82-b4c7e274185c@python.org>
 <CA+3bQGHaGhsBkS8eEfTXjGxxMwdMqF449pP_pj4vNsEKS96Snw@mail.gmail.com>
Message-ID: <cb87728c-4ff3-b1cb-c212-1312e8fea626@python.org>

On 16May2019 1404, Victor Stinner wrote:
> Le jeu. 16 mai 2019 ? 17:56, Steve Dower <steve.dower at python.org> a ?crit :
>> I really like this API, and I agree with Victor that we don't really
>> need more than the exception info. For future expansion, we can pass in
>> a different exception, no?
> 
> Sorry, I don't understand. I explained that we need more than
> (exc_type, exc_value, exc_tb).
> 
> "obj" is part of the C function PyErr_WriteUnraisable(). We have to
> pass it to the hook. Otherwise, how do you want to guess where the
> exception comes from? Without any context, it can be super painful to
> debug such exception :-(

You go on to say "pass an error message" and "keep repr(obj) if you 
want", but how is this different from creating an exception that 
contains the custom message, the repr of the object, and chains the 
exception that triggered it?

If you just have a message and no exception at this point, firstly it's 
going against what the hook is documented as doing, but secondly why not 
convert the message into an exception?

Maybe I just missed where you explained how it isn't possible to 
represent an error message as an exception, but I'm pretty sure I can't 
be the only one who will have missed it, so maybe you could explain just 
that one point?

Thanks,
Steve

From vstinner at redhat.com  Thu May 16 17:41:39 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Thu, 16 May 2019 23:41:39 +0200
Subject: [Python-Dev] bpo-36829: Add sys.unraisablehook()
In-Reply-To: <cb87728c-4ff3-b1cb-c212-1312e8fea626@python.org>
References: <CA+3bQGHmR18+nQ8=oUc3cu2vZJ0riyqqxKmaJ8ykNe9NPnVS8w@mail.gmail.com>
 <qbj0cg$24cj$1@blaine.gmane.org>
 <CA+3bQGEBdccO7W-1cy6TV91tMC1ipXc5shac1Byiz5Oueunj5w@mail.gmail.com>
 <qbjfgd$2qgd$1@blaine.gmane.org>
 <CA+3bQGHQeNrr_FwGn6Op1VBFZ=CCh_z3_5-ak8M4AL-Q=xvZnA@mail.gmail.com>
 <8c678174-b68b-3e70-9f82-b4c7e274185c@python.org>
 <CA+3bQGHaGhsBkS8eEfTXjGxxMwdMqF449pP_pj4vNsEKS96Snw@mail.gmail.com>
 <cb87728c-4ff3-b1cb-c212-1312e8fea626@python.org>
Message-ID: <CA+3bQGEMLa1GzwCOZmRhUYht2m3zHCvs60t+ea=mqiKYSRApAg@mail.gmail.com>

Le jeu. 16 mai 2019 ? 23:17, Steve Dower <steve.dower at python.org> a ?crit :
> You go on to say "pass an error message" and "keep repr(obj) if you
> want", but how is this different from creating an exception that
> contains the custom message, the repr of the object, and chains the
> exception that triggered it?

Well, "unraisable exceptions" are raised when something goes wrong.
I'm not comfortable with creating a new exception instance and
chaining it to the previous exception, because it could go wrong and
raise a 3rd exception. Issue a new error while trying to log an error
can be annoying :-(

Moreover, when I looked at details of the "unraisable exception" (see
my reply to Petr Viktorin), I saw that the exception is not well
defined as you might expect. (exc_type, exc_value, exc_tb) can *not*
be replaced with (type(exc_value), exc_value,
exc_value.__traceback__). Sometimes, exc_value is None. Sometimes,
exc_tb is a traceback object, but exc_value.__traceback__ is None. So
I'm not comfortable neither to chain such badly shaped exception into
a new exception.

I prefer to pass "raw" values and let the hook decides how to handle them :-)

Said differently, I prefer to design the hook to restrict the risks of
creating a new error. At least in the code which calls the hook.
Inside the hook.

Victor
-- 
Night gathers, and now my watch begins. It shall not end until my death.

From njs at pobox.com  Thu May 16 17:46:32 2019
From: njs at pobox.com (Nathaniel Smith)
Date: Thu, 16 May 2019 14:46:32 -0700
Subject: [Python-Dev] bpo-36829: Add sys.unraisablehook()
In-Reply-To: <cb87728c-4ff3-b1cb-c212-1312e8fea626@python.org>
References: <CA+3bQGHmR18+nQ8=oUc3cu2vZJ0riyqqxKmaJ8ykNe9NPnVS8w@mail.gmail.com>
 <qbj0cg$24cj$1@blaine.gmane.org>
 <CA+3bQGEBdccO7W-1cy6TV91tMC1ipXc5shac1Byiz5Oueunj5w@mail.gmail.com>
 <qbjfgd$2qgd$1@blaine.gmane.org>
 <CA+3bQGHQeNrr_FwGn6Op1VBFZ=CCh_z3_5-ak8M4AL-Q=xvZnA@mail.gmail.com>
 <8c678174-b68b-3e70-9f82-b4c7e274185c@python.org>
 <CA+3bQGHaGhsBkS8eEfTXjGxxMwdMqF449pP_pj4vNsEKS96Snw@mail.gmail.com>
 <cb87728c-4ff3-b1cb-c212-1312e8fea626@python.org>
Message-ID: <CAPJVwBnKK+UWtpN4qU34d5UC9rp3sKY4q9-Uo-+HrFRjqKpZnQ@mail.gmail.com>

On Thu, May 16, 2019 at 2:17 PM Steve Dower <steve.dower at python.org> wrote:
> You go on to say "pass an error message" and "keep repr(obj) if you
> want", but how is this different from creating an exception that
> contains the custom message, the repr of the object, and chains the
> exception that triggered it?

A clever hook might want the actual object, so it can pretty-print it,
or open an interactive debugger and let it you examine it, or
something. Morally this is similar to calling repr(obj), but it
doesn't literally call repr(obj).

-n

-- 
Nathaniel J. Smith -- https://vorpus.org

From vstinner at redhat.com  Thu May 16 18:12:51 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Fri, 17 May 2019 00:12:51 +0200
Subject: [Python-Dev] Parser module in the stdlib
In-Reply-To: <CAFjbc8ExfBnbntfaTgDLk=wkWJzk-3xfG=omN+5nsSDxBQw+4w@mail.gmail.com>
References: <CAFjbc8ExfBnbntfaTgDLk=wkWJzk-3xfG=omN+5nsSDxBQw+4w@mail.gmail.com>
Message-ID: <CA+3bQGEXDzc52KjcPzdMk2ePyjQOQUM7GQApCMVnJsUrbcYffg@mail.gmail.com>

Le jeu. 16 mai 2019 ? 23:15, Pablo Galindo Salgado
<pablogsal at gmail.com> a ?crit :
> The parser module has been "deprecated" (technically we recommend to prefer the ast module instead) since Python2.5 but is still in the standard library.

Importing it doesn't emit a DeprecationgWarning. It's only deprecated
in the documentation:
https://docs.python.org/dev/library/parser.html

I searched for "import parser" in Python on GitHub. I looked at the 10
pages of results: I cannot find any code which looks to import
"parser" from the Python standard library. Only "import parser" in a
test suite of PyPy, something unrelated.


> >>> parser.suite("def f(x,y,z): pass").tolist()
> [257, [269, [295, [263, [1, 'def'], [1, 'f'], [264, [7, '('], [265, [266, [1, 'x']], [12, ','], [266, [1, 'y']], [12, ','], [266, [1, 'z']]], [8, ')']], [11, ':'], [304, [270, [271, [277, [1, 'pass']]], [4, '']]]]]], [4, ''], [0, '']]

I don't understand how anyone can read or use Concrete Syntax Tree
(CST) directly :-( I would expect that you need another module on top
of that to use a CST. But I'm not aware of anything in the stdlib, so
I understand that... nobody uses this "parser" module.

I never heard about the "parser" module in the stdlib before this email :-)


> Several 3rd party packages (black, fissix...) are using it directly or have their own forks due to the fact that it can get outdated with respect to the Python3
> grammar as it was originally used only for Python2 to Python3 migration. It has the ability to consume LL1 grammars in EBNF form and produces an LL1 parser for them (by creating parser tables
> that the same module can consume). Many people use the module currently to support or parse supersets of Python (like Python2/3 compatible grammars, cython-like changes...etc).

* Did someone review the pgen2 implementation?
* Does it have a good API?
* Does it come with documentation?
* Who is maintaining it? Who will maintain it?


> I propose to remove finally the parser module as it has been "deprecated" for a long time, is almost clear that nobody uses it and has very limited usability and replace it (maybe with a different name)
> with pgen2 (maybe with a more generic interface that is detached to lib2to3 particularities).

I'm not sure that these two things have to be done at the same time.
Maybe we can start by issuing a DeprecationWarning on "import parser"
and announce the future removal in What's New in Python 3.8, just in
case, and wait one more release before removing it.

But I'm also fine with removing it right now. As I wrote, I never
heard about this module previously...

If your proposal is to reuse "parser" name, I'm not sure that it's a
good idea, since it existed for years and had a different API. Why not
keeping "pgen2" name, you said that it's already used under this name
in the wild.

Note: One thing to consider is that https://pypi.org/project/pgen2/
name is already used. It might conflict if the "new" pgen2 (pgen3?
:-D) would have a little bit different API.

Victor
-- 
Night gathers, and now my watch begins. It shall not end until my death.

From vstinner at redhat.com  Thu May 16 18:17:00 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Fri, 17 May 2019 00:17:00 +0200
Subject: [Python-Dev] bpo-36829: Add sys.unraisablehook()
In-Reply-To: <CAPJVwBnKK+UWtpN4qU34d5UC9rp3sKY4q9-Uo-+HrFRjqKpZnQ@mail.gmail.com>
References: <CA+3bQGHmR18+nQ8=oUc3cu2vZJ0riyqqxKmaJ8ykNe9NPnVS8w@mail.gmail.com>
 <qbj0cg$24cj$1@blaine.gmane.org>
 <CA+3bQGEBdccO7W-1cy6TV91tMC1ipXc5shac1Byiz5Oueunj5w@mail.gmail.com>
 <qbjfgd$2qgd$1@blaine.gmane.org>
 <CA+3bQGHQeNrr_FwGn6Op1VBFZ=CCh_z3_5-ak8M4AL-Q=xvZnA@mail.gmail.com>
 <8c678174-b68b-3e70-9f82-b4c7e274185c@python.org>
 <CA+3bQGHaGhsBkS8eEfTXjGxxMwdMqF449pP_pj4vNsEKS96Snw@mail.gmail.com>
 <cb87728c-4ff3-b1cb-c212-1312e8fea626@python.org>
 <CAPJVwBnKK+UWtpN4qU34d5UC9rp3sKY4q9-Uo-+HrFRjqKpZnQ@mail.gmail.com>
Message-ID: <CA+3bQGGvkg+d7zpWBRRJiY=Ke3xjLiPxsGkb_=H7Ow0opY7p7w@mail.gmail.com>

Le jeu. 16 mai 2019 ? 23:46, Nathaniel Smith <njs at pobox.com> a ?crit :
> A clever hook might want the actual object, so it can pretty-print it,
> or open an interactive debugger and let it you examine it, or
> something. Morally this is similar to calling repr(obj), but it
> doesn't literally call repr(obj).

Good point. By the way, I started to use
tracemalloc.get_object_traceback(obj) to display where the object
comes from more and more often :-D It helps me at least in debugging.
So yeah, I would prefer to pass directly the object to the hook.

For example, I'm using it with the "source" parameter of a ResourceWarning:
https://pythondev.readthedocs.io/debug_tools.html#resourcewarning

But also when a buffer underflow or overflow is detected by debug
hooks on Python memory allocators:
https://pythondev.readthedocs.io/debug_tools.html#pythonmalloc-debug

It might also help me sometimes to be able to call
tracemalloc.get_object_traceback(obj) from a custom unraisablehook().

Victor
-- 
Night gathers, and now my watch begins. It shall not end until my death.

From njs at pobox.com  Thu May 16 18:41:26 2019
From: njs at pobox.com (Nathaniel Smith)
Date: Thu, 16 May 2019 15:41:26 -0700
Subject: [Python-Dev] Parser module in the stdlib
In-Reply-To: <CAFjbc8ExfBnbntfaTgDLk=wkWJzk-3xfG=omN+5nsSDxBQw+4w@mail.gmail.com>
References: <CAFjbc8ExfBnbntfaTgDLk=wkWJzk-3xfG=omN+5nsSDxBQw+4w@mail.gmail.com>
Message-ID: <CAPJVwB=YQdMbMUQFwtT-D2it=UjNv3CquXUgR+pyD42pqZ_-cQ@mail.gmail.com>

On Thu, May 16, 2019 at 2:13 PM Pablo Galindo Salgado
<pablogsal at gmail.com> wrote:
> I propose to remove finally the parser module as it has been "deprecated" for a long time, is almost clear that nobody uses it and has very limited usability and replace it (maybe with a different name)
> with pgen2 (maybe with a more generic interface that is detached to lib2to3 particularities). This will not only help a lot current libraries that are using forks or similar solutions but also will help to keep
> synchronized the shipped grammar (that is able to parse Python2 and Python3 code) with the current Python one (as now will be more justified to keep them in sync).

Will the folks using forks be happy to switch to the stdlib version?
For example I can imagine that if black wants to process 3.7 input
code while running on 3.6, it might prefer a parser on PyPI even if
the stdlib version were public, since the PyPI version can be updated
independently of the host Python.

-n

-- 
Nathaniel J. Smith -- https://vorpus.org

From pablogsal at gmail.com  Thu May 16 18:48:48 2019
From: pablogsal at gmail.com (Pablo Galindo Salgado)
Date: Thu, 16 May 2019 23:48:48 +0100
Subject: [Python-Dev] Parser module in the stdlib
In-Reply-To: <CAPJVwB=YQdMbMUQFwtT-D2it=UjNv3CquXUgR+pyD42pqZ_-cQ@mail.gmail.com>
References: <CAFjbc8ExfBnbntfaTgDLk=wkWJzk-3xfG=omN+5nsSDxBQw+4w@mail.gmail.com>
 <CAPJVwB=YQdMbMUQFwtT-D2it=UjNv3CquXUgR+pyD42pqZ_-cQ@mail.gmail.com>
Message-ID: <CAFjbc8HFS2+EuG9NbAExgDN5WPFV8X7QyC9pe_3GFtyenz3-5A@mail.gmail.com>

> Will the folks using forks be happy to switch to the stdlib version?
>For example I can imagine that if black wants to process 3.7 input
>code while running on 3.6, it might prefer a parser on PyPI even if
>he stdlib version were public, since the PyPI version can be updated
>independently of the host Python.
The tool can parse arbitrary grammars, the one that is packed into is just
one of them.

I think it would be useful, among other things because the standard library
lacks currently a proper CST solution. The ast module is heavily leveraged
for
things like formatters, static code analyzers...etc but CST can be very
useful as
?ukasz describes here:

https://bugs.python.org/issue33337

I think is missing an important gap in the stdlib and the closest thing we
have
(the current parser module) is not useful for any of that. Also, the core
to generating
the hypothetical new package (with some new API over it may be) is already
undocumented
as an implementation detail of lib2to3 (and some people are already using
it directly).



On Thu, 16 May 2019 at 23:41, Nathaniel Smith <njs at pobox.com> wrote:

> On Thu, May 16, 2019 at 2:13 PM Pablo Galindo Salgado
> <pablogsal at gmail.com> wrote:
> > I propose to remove finally the parser module as it has been
> "deprecated" for a long time, is almost clear that nobody uses it and has
> very limited usability and replace it (maybe with a different name)
> > with pgen2 (maybe with a more generic interface that is detached to
> lib2to3 particularities). This will not only help a lot current libraries
> that are using forks or similar solutions but also will help to keep
> > synchronized the shipped grammar (that is able to parse Python2 and
> Python3 code) with the current Python one (as now will be more justified to
> keep them in sync).
>
> Will the folks using forks be happy to switch to the stdlib version?
> For example I can imagine that if black wants to process 3.7 input
> code while running on 3.6, it might prefer a parser on PyPI even if
> the stdlib version were public, since the PyPI version can be updated
> independently of the host Python.
>
> -n
>
> --
> Nathaniel J. Smith -- https://vorpus.org
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190516/ebe52703/attachment.html>

From steve.dower at python.org  Thu May 16 18:55:13 2019
From: steve.dower at python.org (Steve Dower)
Date: Thu, 16 May 2019 15:55:13 -0700
Subject: [Python-Dev] Parser module in the stdlib
In-Reply-To: <CAFjbc8HFS2+EuG9NbAExgDN5WPFV8X7QyC9pe_3GFtyenz3-5A@mail.gmail.com>
References: <CAFjbc8ExfBnbntfaTgDLk=wkWJzk-3xfG=omN+5nsSDxBQw+4w@mail.gmail.com>
 <CAPJVwB=YQdMbMUQFwtT-D2it=UjNv3CquXUgR+pyD42pqZ_-cQ@mail.gmail.com>
 <CAFjbc8HFS2+EuG9NbAExgDN5WPFV8X7QyC9pe_3GFtyenz3-5A@mail.gmail.com>
Message-ID: <eaa047f9-efac-21f0-b6b4-db4d696d0d65@python.org>

On 16May2019 1548, Pablo Galindo Salgado wrote:
>  > Will the folks using forks be happy to switch to the stdlib version?
>>For example I can imagine that if black wants to process 3.7 input
>>code while running on 3.6, it might prefer a parser on PyPI even if
>>he stdlib version were public, since the PyPI version can be updated
>>independently of the host Python.
> The tool can parse arbitrary grammars, the one that is packed into is 
> just one of them.
> 
> I think it would be useful, among other things because the standard library
> lacks currently a proper CST solution. The ast module is heavily 
> leveraged for
> things like formatters, static code analyzers...etc but CST can be very 
> useful as
> ?ukasz describes here:
> 
> https://bugs.python.org/issue33337
> 
> I think is missing an important gap in the stdlib and the closest thing 
> we have
> (the current parser module) is not useful for any of that. Also, the 
> core to generating
> the hypothetical new package (with some new API over it may be) is 
> already undocumented
> as an implementation detail of lib2to3 (and some people are already 
> using it directly).

We still have the policy of not removing modules that exist in the 
Python 2 standard library. But 3.9 won't be covered by that :)

But I'm in favor of having a proper CST module that matches the version 
of Python it's in. It doesn't help people on earlier versions (yet), but 
given how closely tied it is to the Python version you're on I think it 
makes sense in the stdlib.

Cheers,
Steve

From steve.dower at python.org  Thu May 16 19:00:07 2019
From: steve.dower at python.org (Steve Dower)
Date: Thu, 16 May 2019 16:00:07 -0700
Subject: [Python-Dev] bpo-36829: Add sys.unraisablehook()
In-Reply-To: <CA+3bQGEMLa1GzwCOZmRhUYht2m3zHCvs60t+ea=mqiKYSRApAg@mail.gmail.com>
References: <CA+3bQGHmR18+nQ8=oUc3cu2vZJ0riyqqxKmaJ8ykNe9NPnVS8w@mail.gmail.com>
 <qbj0cg$24cj$1@blaine.gmane.org>
 <CA+3bQGEBdccO7W-1cy6TV91tMC1ipXc5shac1Byiz5Oueunj5w@mail.gmail.com>
 <qbjfgd$2qgd$1@blaine.gmane.org>
 <CA+3bQGHQeNrr_FwGn6Op1VBFZ=CCh_z3_5-ak8M4AL-Q=xvZnA@mail.gmail.com>
 <8c678174-b68b-3e70-9f82-b4c7e274185c@python.org>
 <CA+3bQGHaGhsBkS8eEfTXjGxxMwdMqF449pP_pj4vNsEKS96Snw@mail.gmail.com>
 <cb87728c-4ff3-b1cb-c212-1312e8fea626@python.org>
 <CA+3bQGEMLa1GzwCOZmRhUYht2m3zHCvs60t+ea=mqiKYSRApAg@mail.gmail.com>
Message-ID: <8332cadb-0434-e633-798e-7fe28ed5c09a@python.org>

On 16May2019 1441, Victor Stinner wrote:
> Le jeu. 16 mai 2019 ? 23:17, Steve Dower <steve.dower at python.org> a ?crit :
>> You go on to say "pass an error message" and "keep repr(obj) if you
>> want", but how is this different from creating an exception that
>> contains the custom message, the repr of the object, and chains the
>> exception that triggered it?
> 
> Well, "unraisable exceptions" are raised when something goes wrong.
> I'm not comfortable with creating a new exception instance and
> chaining it to the previous exception, because it could go wrong and
> raise a 3rd exception. Issue a new error while trying to log an error
> can be annoying :-(

I mean, aren't they all? :) That's why they're exceptional.

If we're not in a position to raise a new exception, then it's not safe 
to call into user's Python code. If it's safe to call into their Python 
code, then we have to be in a position to raise a new exception.

You said earlier that we can safely do this, and now you're saying we 
can't safely do it. Which is it?

> Moreover, when I looked at details of the "unraisable exception" (see
> my reply to Petr Viktorin), I saw that the exception is not well
> defined as you might expect. (exc_type, exc_value, exc_tb) can *not*
> be replaced with (type(exc_value), exc_value,
> exc_value.__traceback__). Sometimes, exc_value is None. Sometimes,
> exc_tb is a traceback object, but exc_value.__traceback__ is None. So
> I'm not comfortable neither to chain such badly shaped exception into
> a new exception.

Yeah, this is the normal optimization for raising and handling 
exceptions that never reach Python code. Exceptions are supposed to be 
normalized before re-entering the eval loop.

> I prefer to pass "raw" values and let the hook decides how to handle them :-)

This is fine, it's how we handle exceptions in most other places (such 
as __exit__, logging, sys, traceback and all through the C API), and 
skipping normalization for a last-chance "the-world-may-be-burning" hook 
isn't the worst thing ever.

Cheers,
Steve

From greg at krypto.org  Thu May 16 21:09:51 2019
From: greg at krypto.org (Gregory P. Smith)
Date: Thu, 16 May 2019 18:09:51 -0700
Subject: [Python-Dev] bpo-36829: Add sys.unraisablehook()
In-Reply-To: <8332cadb-0434-e633-798e-7fe28ed5c09a@python.org>
References: <CA+3bQGHmR18+nQ8=oUc3cu2vZJ0riyqqxKmaJ8ykNe9NPnVS8w@mail.gmail.com>
 <qbj0cg$24cj$1@blaine.gmane.org>
 <CA+3bQGEBdccO7W-1cy6TV91tMC1ipXc5shac1Byiz5Oueunj5w@mail.gmail.com>
 <qbjfgd$2qgd$1@blaine.gmane.org>
 <CA+3bQGHQeNrr_FwGn6Op1VBFZ=CCh_z3_5-ak8M4AL-Q=xvZnA@mail.gmail.com>
 <8c678174-b68b-3e70-9f82-b4c7e274185c@python.org>
 <CA+3bQGHaGhsBkS8eEfTXjGxxMwdMqF449pP_pj4vNsEKS96Snw@mail.gmail.com>
 <cb87728c-4ff3-b1cb-c212-1312e8fea626@python.org>
 <CA+3bQGEMLa1GzwCOZmRhUYht2m3zHCvs60t+ea=mqiKYSRApAg@mail.gmail.com>
 <8332cadb-0434-e633-798e-7fe28ed5c09a@python.org>
Message-ID: <CAGE7PNKGgFjQ1=ONXs=KBoCcBgK2ROrs1Y=B9Qinq=3cyrM5pQ@mail.gmail.com>

I like the feature, we should have it.  It'll be useful for debugging and
probably more.

Which brings me to the annoying paint color question: These exceptions were
most definitely raised. Thus the term "unraisable" is wrong. I believe you
really mean "uncatchable".

-gps

On Thu, May 16, 2019 at 4:00 PM Steve Dower <steve.dower at python.org> wrote:

> On 16May2019 1441, Victor Stinner wrote:
> > Le jeu. 16 mai 2019 ? 23:17, Steve Dower <steve.dower at python.org> a
> ?crit :
> >> You go on to say "pass an error message" and "keep repr(obj) if you
> >> want", but how is this different from creating an exception that
> >> contains the custom message, the repr of the object, and chains the
> >> exception that triggered it?
> >
> > Well, "unraisable exceptions" are raised when something goes wrong.
> > I'm not comfortable with creating a new exception instance and
> > chaining it to the previous exception, because it could go wrong and
> > raise a 3rd exception. Issue a new error while trying to log an error
> > can be annoying :-(
>
> I mean, aren't they all? :) That's why they're exceptional.
>
> If we're not in a position to raise a new exception, then it's not safe
> to call into user's Python code. If it's safe to call into their Python
> code, then we have to be in a position to raise a new exception.
>
> You said earlier that we can safely do this, and now you're saying we
> can't safely do it. Which is it?
>
> > Moreover, when I looked at details of the "unraisable exception" (see
> > my reply to Petr Viktorin), I saw that the exception is not well
> > defined as you might expect. (exc_type, exc_value, exc_tb) can *not*
> > be replaced with (type(exc_value), exc_value,
> > exc_value.__traceback__). Sometimes, exc_value is None. Sometimes,
> > exc_tb is a traceback object, but exc_value.__traceback__ is None. So
> > I'm not comfortable neither to chain such badly shaped exception into
> > a new exception.
>
> Yeah, this is the normal optimization for raising and handling
> exceptions that never reach Python code. Exceptions are supposed to be
> normalized before re-entering the eval loop.
>
> > I prefer to pass "raw" values and let the hook decides how to handle
> them :-)
>
> This is fine, it's how we handle exceptions in most other places (such
> as __exit__, logging, sys, traceback and all through the C API), and
> skipping normalization for a last-chance "the-world-may-be-burning" hook
> isn't the worst thing ever.
>
> Cheers,
> Steve
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/greg%40krypto.org
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190516/47e31641/attachment.html>

From vstinner at redhat.com  Thu May 16 21:23:34 2019
From: vstinner at redhat.com (Victor Stinner)
Date: Fri, 17 May 2019 03:23:34 +0200
Subject: [Python-Dev] bpo-36829: Add sys.unraisablehook()
In-Reply-To: <CAGE7PNKGgFjQ1=ONXs=KBoCcBgK2ROrs1Y=B9Qinq=3cyrM5pQ@mail.gmail.com>
References: <CA+3bQGHmR18+nQ8=oUc3cu2vZJ0riyqqxKmaJ8ykNe9NPnVS8w@mail.gmail.com>
 <qbj0cg$24cj$1@blaine.gmane.org>
 <CA+3bQGEBdccO7W-1cy6TV91tMC1ipXc5shac1Byiz5Oueunj5w@mail.gmail.com>
 <qbjfgd$2qgd$1@blaine.gmane.org>
 <CA+3bQGHQeNrr_FwGn6Op1VBFZ=CCh_z3_5-ak8M4AL-Q=xvZnA@mail.gmail.com>
 <8c678174-b68b-3e70-9f82-b4c7e274185c@python.org>
 <CA+3bQGHaGhsBkS8eEfTXjGxxMwdMqF449pP_pj4vNsEKS96Snw@mail.gmail.com>
 <cb87728c-4ff3-b1cb-c212-1312e8fea626@python.org>
 <CA+3bQGEMLa1GzwCOZmRhUYht2m3zHCvs60t+ea=mqiKYSRApAg@mail.gmail.com>
 <8332cadb-0434-e633-798e-7fe28ed5c09a@python.org>
 <CAGE7PNKGgFjQ1=ONXs=KBoCcBgK2ROrs1Y=B9Qinq=3cyrM5pQ@mail.gmail.com>
Message-ID: <CA+3bQGEUBZ2Qz2JPyT61z3CHu71FeTsozjYig4HrL=bt_6Hekw@mail.gmail.com>

Le ven. 17 mai 2019 ? 03:10, Gregory P. Smith <greg at krypto.org> a ?crit :
> I like the feature, we should have it.  It'll be useful for debugging and probably more.
>
> Which brings me to the annoying paint color question: These exceptions were most definitely raised. Thus the term "unraisable" is wrong. I believe you really mean "uncatchable".

"unraisablehook" name comes from the existing PyErr_WriteUnraisable().

I understood that "unraisable" means that the function calling
PyErr_WriteUnraisable() cannot "raise" the exception to its caller.
The exception has to be "swallowed" by the function.

--

If you like the feature, please review my PR :-)

https://github.com/python/cpython/pull/13187

Victor
-- 
Night gathers, and now my watch begins. It shall not end until my death.

From njs at pobox.com  Thu May 16 21:32:39 2019
From: njs at pobox.com (Nathaniel Smith)
Date: Thu, 16 May 2019 18:32:39 -0700
Subject: [Python-Dev] bpo-36829: Add sys.unraisablehook()
In-Reply-To: <CA+3bQGFrZDkbaNsjMsXNUKvJbgb3-5qVmoF785x5cYqKS+2aPA@mail.gmail.com>
References: <CA+3bQGHmR18+nQ8=oUc3cu2vZJ0riyqqxKmaJ8ykNe9NPnVS8w@mail.gmail.com>
 <314887b2-8fb9-447d-7293-2babb8ba5f00@gmail.com>
 <CA+3bQGFrZDkbaNsjMsXNUKvJbgb3-5qVmoF785x5cYqKS+2aPA@mail.gmail.com>
Message-ID: <CAPJVwB=01zD5PSseXc0c0+ub0TJySG-0tUFcXxKqGr23zYO_KA@mail.gmail.com>

On Thu, May 16, 2019 at 1:23 PM Victor Stinner <vstinner at redhat.com> wrote:
>
> Le jeu. 16 mai 2019 ? 20:58, Petr Viktorin <encukou at gmail.com> a ?crit :
> > I always thought the classic (exc_type, exc_value, exc_tb) triple is a
> > holdover from older Python versions, and all the information is now in
> > the exception instance.
> > Is the triple ever different from (type(exc), exc, exc.__traceback__)?
> > (possibly with a getattr for __traceback__)
>
> I added assertions in PyErr_WriteTraceback():
>
>     assert(Py_TYPE(v) == t);
>     assert(PyException_GetTraceback(v) == tb);
>
> "Py_TYPE(v) == t" fails in
> test_exceptions.test_memory_error_in_PyErr_PrintEx() for example.
> PyErr_NoMemory() calls PyErr_SetNone(PyExc_MemoryError), it sets
> tstate->curexc_type to PyExc_MemoryError, but tstate->curexc_value is
> set to NULLL.

This makes some sense ? if you can't allocate memory, then better not
allocate an exception instance to report that! So this is legitimately
a special case.

But... it looks like everywhere else, the way we handle this when
transitioning into Python code is to create an instance. For example,
that test does 'except MemoryError as e', so an instance does need to
be created then. The comments suggest that there's some trick where we
have pre-allocated MemoryError() instances? But either way, if we can
afford to call a Python hook (which requires at least allocating a
frame!), then we can probably also afford to materialize the
MemoryError instance. So I feel like maybe we shouldn't be passing
None to the unraisable hook, even if PyErr_NoMemory() did initially
set that?

Also, in practice, the only time I've ever seen MemoryError is from
attempting to do a single massively-huge allocation. It's never meant
that regular allocation of small objects will fail.

> "PyException_GetTraceback(v) == tb" fails in
> test_exceptions.test_unraisable() for example: "PyTraceBack_Here(f);"
> in the "error:" label of ceval.c creates a traceback object and sets
> it to tstate->curexec_traceback, but it doesn't set the __traceback__
> attribute of the current exception.

Isn't this just a bug that should be fixed?

> > Should new APIs use it?
>
> I tried to add a "PyErr_NormalizeException(&t, &v, &tb);" call in
> PyErr_WriteUnraisable(): it creates an exception object (exc_value)
> for the PyErr_NoMemory() case, but it still doesn't set the
> __traceback__ attribute of the exception for the PyTraceBack_Here()
> case.
>
> It seems like PyErr_WriteUnraisable() cannot avoid having 3 variables
> (exc_type, exc_value, exc_tb), since they are not consistent as you
> may expect.

I'm actually fine with it having three arguments -- even if it's
technically unnecessary, it's currently 100% consistent across these
low-level APIs, and it doesn't hurt anything, so we might as well
stick with it for consistency.

-n

-- 
Nathaniel J. Smith -- https://vorpus.org

From bcannon at gmail.com  Thu May 16 22:04:37 2019
From: bcannon at gmail.com (Brett Cannon)
Date: Thu, 16 May 2019 19:04:37 -0700
Subject: [Python-Dev] Parser module in the stdlib
In-Reply-To: <eaa047f9-efac-21f0-b6b4-db4d696d0d65@python.org>
References: <CAFjbc8ExfBnbntfaTgDLk=wkWJzk-3xfG=omN+5nsSDxBQw+4w@mail.gmail.com>
 <CAPJVwB=YQdMbMUQFwtT-D2it=UjNv3CquXUgR+pyD42pqZ_-cQ@mail.gmail.com>
 <CAFjbc8HFS2+EuG9NbAExgDN5WPFV8X7QyC9pe_3GFtyenz3-5A@mail.gmail.com>
 <eaa047f9-efac-21f0-b6b4-db4d696d0d65@python.org>
Message-ID: <CAP1=2W5L-bVLOuLPBFm7rsm1cbRcMshcQ8w6_3zF05NV0xTsWQ@mail.gmail.com>

On Thu., May 16, 2019, 15:56 Steve Dower, <steve.dower at python.org> wrote:

> On 16May2019 1548, Pablo Galindo Salgado wrote:
> >  > Will the folks using forks be happy to switch to the stdlib version?
> >>For example I can imagine that if black wants to process 3.7 input
> >>code while running on 3.6, it might prefer a parser on PyPI even if
> >>he stdlib version were public, since the PyPI version can be updated
> >>independently of the host Python.
> > The tool can parse arbitrary grammars, the one that is packed into is
> > just one of them.
> >
> > I think it would be useful, among other things because the standard
> library
> > lacks currently a proper CST solution. The ast module is heavily
> > leveraged for
> > things like formatters, static code analyzers...etc but CST can be very
> > useful as
> > ?ukasz describes here:
> >
> > https://bugs.python.org/issue33337
> >
> > I think is missing an important gap in the stdlib and the closest thing
> > we have
> > (the current parser module) is not useful for any of that. Also, the
> > core to generating
> > the hypothetical new package (with some new API over it may be) is
> > already undocumented
> > as an implementation detail of lib2to3 (and some people are already
> > using it directly).
>
> We still have the policy of not removing modules that exist in the
> Python 2 standard library. But 3.9 won't be covered by that :)
>

Correct. ? We should deprecate in 3.8 for removal in 3.9.


> But I'm in favor of having a proper CST module that matches the version
> of Python it's in. It doesn't help people on earlier versions (yet), but
> given how closely tied it is to the Python version you're on I think it
> makes sense in the stdlib.
>

+1. I think someone brought up the API, and probably talking to projects
that are using pgen2 out of lib2to3 would be good.

-Brett


> Cheers,
> Steve
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/brett%40python.org
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190516/cd8f75c9/attachment-0001.html>

From turnbull.stephen.fw at u.tsukuba.ac.jp  Fri May 17 09:06:34 2019
From: turnbull.stephen.fw at u.tsukuba.ac.jp (Stephen J. Turnbull)
Date: Fri, 17 May 2019 22:06:34 +0900
Subject: [Python-Dev] Consolidating channel of record [was: 581 (Using
 GitHub issues for CPython) is accepted]
In-Reply-To: <CALGmxEL8xJUMM2jUMDUOL+3fg=UxPXvz-7ek-Rw3nd9vhqbrPg@mail.gmail.com>
References: <7407D51F-AC46-4423-AF4A-63940F80D629@python.org>
 <20190515104830.5b307230@fsol>
 <CACac1F9h-uvqUNcjFMh2FCPD4+=mbPb5Eo7=a5aZnhJF0KZFNg@mail.gmail.com>
 <CA+3bQGFh3y6YNz9sWnbFcmFBgsXeaoO92_hFsGr_d=Y4Ee34XA@mail.gmail.com>
 <CACac1F_9cb2ykL4s-5G+GPvkhu+-EFhR_4C1VKY=A0O=o7+jUg@mail.gmail.com>
 <23772.29178.404867.929820@turnbull.sk.tsukuba.ac.jp>
 <CALGmxEL8xJUMM2jUMDUOL+3fg=UxPXvz-7ek-Rw3nd9vhqbrPg@mail.gmail.com>
Message-ID: <23774.45530.164132.186287@turnbull.sk.tsukuba.ac.jp>

Chris Barker - NOAA Federal writes:

 > Frankly, multiple long meandering threads in s single mailing list
 > are not s very good archive either.

True, but I have no idea how to address that administratively, except
to have a *very* strong moderator.

 > Ideally, the PEP is updated with a summary of the issues discussed
 > as the discussion unfolds.

The point of "channel of record" is not that it would replace the PEPs
themselves.  It's that PEP authors are people with time limitations,
too.

For example, there's at least one person currently requesting a review
on a PEP who has in the past loudly and publicly announced their
unsubscription from python-ideas and IIRC even python-dev.  I think
it's a good idea to have *one* place that is the principal source for
PEP protagonists who don't have time for or simply dislike
participating in some (or even all) of the channels du jour.  With a
designated channel of record, if discussions take place elsewhere, the
PEP protagonist *may*, but would be under *no obligation* to, follow
them or search for them.  In the current situation, there's an
implicit obligation for the protagonist to check all the channels,
maybe even to do a Google search.  Or at least some of the posters
seem to feel that way.

 > As the community seems to be moving to a wider variety of fora,
 > this will become all the more critical.

It would also be possible, I suppose, for the PEP protagonist to
designate a channel in the PEP.  That has its problems too (they can
choose a channel that is inconvenient for the majority of interested
participants, for example), but with a designated channel system of
either kind the problems are predictable and bounded.

Steve

From qiang.fang at zoho.com.cn  Fri May 17 04:00:11 2019
From: qiang.fang at zoho.com.cn (Q)
Date: Fri, 17 May 2019 16:00:11 +0800
Subject: [Python-Dev] Feature request: Change a Dependency Package Version
 During Package Initiation
Message-ID: <16ac4ce3e2f.c1af300c4816.5384009389495434427@zoho.com.cn>

A lot of the Python code we use in production are used directly as imports in other python

distributions (such as the python comes with the finite element software Abaqus and MSC Marc), many

packages (such as matplotlib, numpy) that may have varying versioned dependencies.



I was wondering if this could be expanded to allow a version to be set within a package and have

that propagate to all modules in that package. For example in the root init.py if I set

multiversion(tornado, 2.2.1) then all modules in that package will use tornado 2.2.1 when I import

tornado.



See a relevant issue on github:

https://github.com/mitsuhiko/multiversion/issues/1



Thank you!

Qiang
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190517/fbe8ba07/attachment.html>

From qiang.fang at zoho.com.cn  Fri May 17 04:09:45 2019
From: qiang.fang at zoho.com.cn (Q)
Date: Fri, 17 May 2019 16:09:45 +0800
Subject: [Python-Dev] Feature request: Change a Dependency Package Version
 During Package Initiation
In-Reply-To: <16ac4ce3e2f.c1af300c4816.5384009389495434427@zoho.com.cn>
References: <16ac4ce3e2f.c1af300c4816.5384009389495434427@zoho.com.cn>
Message-ID: <16ac4d7010e.1180c0d4d4832.5644021354870491002@zoho.com.cn>

A lot of the Python code we use in production are used directly as imports in other python



distributions (such as the python comes with the finite element software Abaqus and MSC Marc), many

packages (such as matplotlib, numpy) that may have varying versioned dependencies, which makes it is

a pain to get all these dependencies met in those close source python distributions.



The work around is to let a version to be set within a package and have that propagate to all

modules in that package. For example in the root init.py if I set tonado version to be 2.2.1 then

all modules in that package will use tornado 2.2.1 when I import tornado.



See a relevant issue of a similar package on github:

https://github.com/mitsuhiko/multiversion/issues/1



Thank you!

Qiang
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190517/6df771b2/attachment.html>

From bcannon at gmail.com  Fri May 17 11:25:15 2019
From: bcannon at gmail.com (Brett Cannon)
Date: Fri, 17 May 2019 08:25:15 -0700
Subject: [Python-Dev] Feature request: Change a Dependency Package
 Version During Package Initiation
In-Reply-To: <16ac4ce3e2f.c1af300c4816.5384009389495434427@zoho.com.cn>
References: <16ac4ce3e2f.c1af300c4816.5384009389495434427@zoho.com.cn>
Message-ID: <CAP1=2W4+W+2UQpgHMi=hN=2ugkLULjeY81xpLO73FHxx4-0f_w@mail.gmail.com>

Thanks for the idea but there are currently no plans to support such a
feature. If you would like to see it then you will need to write a PEP with
a proof-of-concept to demonstrate how you would expect such a feature to
work.

On Fri., May 17, 2019, 07:55 Q via Python-Dev, <python-dev at python.org>
wrote:

> A lot of the Python code we use in production are used directly as imports
> in other python
> distributions (such as the python comes with the finite element software
> Abaqus and MSC Marc), many
> packages (such as matplotlib, numpy) that may have varying versioned
> dependencies.
>
> I was wondering if this could be expanded to allow a version to be set
> within a package and have
> that propagate to all modules in that package. For example in the root
> init.py if I set
> multiversion(tornado, 2.2.1) then all modules in that package will use
> tornado 2.2.1 when I import
> tornado.
>
> See a relevant issue on github:
> https://github.com/mitsuhiko/multiversion/issues/1
>
> Thank you!
> Qiang
>
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/brett%40python.org
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190517/2be36dec/attachment.html>

From dholth at gmail.com  Fri May 17 11:38:55 2019
From: dholth at gmail.com (Daniel Holth)
Date: Fri, 17 May 2019 11:38:55 -0400
Subject: [Python-Dev] Feature request: Change a Dependency Package
 Version During Package Initiation
In-Reply-To: <CAP1=2W4+W+2UQpgHMi=hN=2ugkLULjeY81xpLO73FHxx4-0f_w@mail.gmail.com>
References: <16ac4ce3e2f.c1af300c4816.5384009389495434427@zoho.com.cn>
 <CAP1=2W4+W+2UQpgHMi=hN=2ugkLULjeY81xpLO73FHxx4-0f_w@mail.gmail.com>
Message-ID: <CAG8k2+5mbiNWnWmnTf--NfXtEzVLj402ihVdhUye2jxypC3D8w@mail.gmail.com>

This sounds exactly like what people used to do with eggs. You could have
multiple versions of a package on the path as eggs and then require a
version at runtime. The approach has problems. Ruby also abandoned a
strategy where random app code depends on package management code at
runtime.

One better strategy is to set up a python path in a wrapper script.

On Fri, May 17, 2019, 11:27 Brett Cannon <bcannon at gmail.com> wrote:

> Thanks for the idea but there are currently no plans to support such a
> feature. If you would like to see it then you will need to write a PEP with
> a proof-of-concept to demonstrate how you would expect such a feature to
> work.
>
> On Fri., May 17, 2019, 07:55 Q via Python-Dev, <python-dev at python.org>
> wrote:
>
>> A lot of the Python code we use in production are used directly as
>> imports in other python
>> distributions (such as the python comes with the finite element software
>> Abaqus and MSC Marc), many
>> packages (such as matplotlib, numpy) that may have varying versioned
>> dependencies.
>>
>> I was wondering if this could be expanded to allow a version to be set
>> within a package and have
>> that propagate to all modules in that package. For example in the root
>> init.py if I set
>> multiversion(tornado, 2.2.1) then all modules in that package will use
>> tornado 2.2.1 when I import
>> tornado.
>>
>> See a relevant issue on github:
>> https://github.com/mitsuhiko/multiversion/issues/1
>>
>> Thank you!
>> Qiang
>>
>> _______________________________________________
>> Python-Dev mailing list
>> Python-Dev at python.org
>> https://mail.python.org/mailman/listinfo/python-dev
>> Unsubscribe:
>> https://mail.python.org/mailman/options/python-dev/brett%40python.org
>>
> _______________________________________________
> Python-Dev mailing list
> Python-Dev at python.org
> https://mail.python.org/mailman/listinfo/python-dev
> Unsubscribe:
> https://mail.python.org/mailman/options/python-dev/dholth%40gmail.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190517/7e8387a0/attachment.html>

From status at bugs.python.org  Fri May 17 14:08:03 2019
From: status at bugs.python.org (Python tracker)
Date: Fri, 17 May 2019 18:08:03 +0000 (UTC)
Subject: [Python-Dev] Summary of Python tracker Issues
Message-ID: <20190517180803.A2F9352B235@bugs.ams1.psf.io>


ACTIVITY SUMMARY (2019-05-10 - 2019-05-17)
Python tracker at https://bugs.python.org/

To view or respond to any of the issues listed below, click on the issue.
Do NOT respond to this message.

Issues counts and deltas:
  open    7067 (-17)
  closed 41633 (+91)
  total  48700 (+74)

Open issues with patches: 2861 


Issues opened (56)
==================

#36084: Threading: add builtin TID attribute to Thread objects
https://bugs.python.org/issue36084  reopened by vstinner

#36801: Wait for connection_lost in StreamWriter.drain
https://bugs.python.org/issue36801  reopened by asvetlov

#36802: Revert back StreamWriter awrite/aclose but provide await write
https://bugs.python.org/issue36802  reopened by vstinner

#36817: Add = to f-strings for easier debugging.
https://bugs.python.org/issue36817  reopened by pablogsal

#36876: Global C variables are a problem.
https://bugs.python.org/issue36876  opened by eric.snow

#36877: [meta] Move fields from _PyRuntimeState to PyInterpreterState.
https://bugs.python.org/issue36877  opened by eric.snow

#36878: ast.parse with type_comments=True should allow extra text afte
https://bugs.python.org/issue36878  opened by msullivan

#36879: bug with round() and "numpy floats"
https://bugs.python.org/issue36879  opened by Scaler

#36880: Returning None from a callback with restype py_object decremen
https://bugs.python.org/issue36880  opened by dgelessus

#36881: isinstance raises TypeError for metaclass with metaclass=ABCMe
https://bugs.python.org/issue36881  opened by emanspeaks

#36882: ???ctypes?????????C?????????c_char_p??????????????????
https://bugs.python.org/issue36882  opened by fy2099

#36885: Make makeunicode.py script more readable
https://bugs.python.org/issue36885  opened by scoder

#36887: Add integer square root, math.isqrt
https://bugs.python.org/issue36887  opened by mark.dickinson

#36888: Create a way to check that the parent process is alive for dea
https://bugs.python.org/issue36888  opened by tomMoral

#36889: Merge StreamWriter and StreamReader into just asyncio.Stream
https://bugs.python.org/issue36889  opened by asvetlov

#36890: python-3.7.3-macosx10.6.pkg verification error on macOS 10.6 S
https://bugs.python.org/issue36890  opened by steve_314

#36891: Additional startup plugin for vendors
https://bugs.python.org/issue36891  opened by vx1920

#36892: "Modules" section in Tutorial contains incorrect description a
https://bugs.python.org/issue36892  opened by musou1500

#36893: email.headerregistry.Address blocks Unicode local part addr_sp
https://bugs.python.org/issue36893  opened by dracos

#36894: test_multiprocessing_spawn regression on Windows
https://bugs.python.org/issue36894  opened by pitrou

#36895: time.clock() marked for removal in 3.8 ?????still there.
https://bugs.python.org/issue36895  opened by mbussonn

#36896: clarify in types.rst that FunctionTypes & co  constructors don
https://bugs.python.org/issue36896  opened by mbussonn

#36897: shlex doesn't differentiate escaped characters in output
https://bugs.python.org/issue36897  opened by Matthew Gamble

#36898: Add parameter @case_sensitive to glob and rglob in pathlib
https://bugs.python.org/issue36898  opened by Chuang Men

#36901: Fix leaks in /PC/bdist_wininst/install.c
https://bugs.python.org/issue36901  opened by cheryl.sabella

#36904: Implement _PyStack_UnpackDict() with a single allocation
https://bugs.python.org/issue36904  opened by jdemeyer

#36905: test_typing.GetTypeHintTests.test_get_type_hints_modules_forwa
https://bugs.python.org/issue36905  opened by xtreak

#36906: Compile time textwrap.dedent() equivalent for str or bytes lit
https://bugs.python.org/issue36906  opened by gregory.p.smith

#36907: Crash due to borrowed references in _PyStack_UnpackDict()
https://bugs.python.org/issue36907  opened by jdemeyer

#36908: "This module is always available" is confusing
https://bugs.python.org/issue36908  opened by nedbat

#36910: Certain Malformed email causes email.parser to throw Attribute
https://bugs.python.org/issue36910  opened by msapiro

#36913: Missing documentation for decorators
https://bugs.python.org/issue36913  opened by tomerv

#36917: ast.NodeVisitor no longer calls visit_Str
https://bugs.python.org/issue36917  opened by Anthony Sottile

#36918: ValueError warning in test_urllib due to io.IOBase destructor
https://bugs.python.org/issue36918  opened by xtreak

#36919: Exception from 'compile' reports a newline char not present in
https://bugs.python.org/issue36919  opened by BCSharp

#36921: Deprecate yield from and @coroutine in asyncio
https://bugs.python.org/issue36921  opened by asvetlov

#36922: Implement Py_TPFLAGS_METHOD_DESCRIPTOR
https://bugs.python.org/issue36922  opened by jdemeyer

#36924: Simplify implementation of classmethod_descriptor.__call__
https://bugs.python.org/issue36924  opened by jdemeyer

#36926: Implement methoddescr_call without _PyMethodDef_RawFastCallDic
https://bugs.python.org/issue36926  opened by jdemeyer

#36927: traceback docstrings should explicitly state return values ins
https://bugs.python.org/issue36927  opened by Aaron Hall

#36929: Other Python _io implementations may not expose _io in their t
https://bugs.python.org/issue36929  opened by tekknolagi

#36932: asyncio-task.rst could use proper deprecated-removed directive
https://bugs.python.org/issue36932  opened by mbussonn

#36933: sys.set_coroutine_wrapper documented as to be removed in 3.8 (
https://bugs.python.org/issue36933  opened by mbussonn

#36935: bpo-35813 introduced usage of the deprecated PyErr_SetFromWind
https://bugs.python.org/issue36935  opened by ZackerySpytz

#36936: CALL_FUNCTION_KW opcode: keyword names must be non-empty
https://bugs.python.org/issue36936  opened by jdemeyer

#36937: New _PyObject_MakeTpCall() function
https://bugs.python.org/issue36937  opened by jdemeyer

#36940: Update Py_FrozenMain() for _PyCoreConfig (PEP 587)
https://bugs.python.org/issue36940  opened by vstinner

#36941: Windows build changes for Windows ARM64
https://bugs.python.org/issue36941  opened by Paul Monson

#36942: Windows code changes for Windows ARM64
https://bugs.python.org/issue36942  opened by Paul Monson

#36943: Windows test changes for Windows ARM64
https://bugs.python.org/issue36943  opened by Paul Monson

#36944: Add support for ARM64 to libffi
https://bugs.python.org/issue36944  opened by Paul Monson

#36945: Add _PyPreConfig.configure_locale: allow to leave LC_CTYPE unc
https://bugs.python.org/issue36945  opened by vstinner

#36946: Possible signed integer overflow in slice handling
https://bugs.python.org/issue36946  opened by ZackerySpytz

#36947: [Good first issue] Fix 3.3.3.1 Metaclasses Documentation
https://bugs.python.org/issue36947  opened by Nicholas Matthews

#36948: NameError in urllib.request.URLopener.retrieve
https://bugs.python.org/issue36948  opened by xtreak

#36949: WeakSet.__repr__ and __str__ do not show contents of the set
https://bugs.python.org/issue36949  opened by steve.dower



Most recent 15 issues with no replies (15)
==========================================

#36949: WeakSet.__repr__ and __str__ do not show contents of the set
https://bugs.python.org/issue36949

#36948: NameError in urllib.request.URLopener.retrieve
https://bugs.python.org/issue36948

#36944: Add support for ARM64 to libffi
https://bugs.python.org/issue36944

#36943: Windows test changes for Windows ARM64
https://bugs.python.org/issue36943

#36940: Update Py_FrozenMain() for _PyCoreConfig (PEP 587)
https://bugs.python.org/issue36940

#36933: sys.set_coroutine_wrapper documented as to be removed in 3.8 (
https://bugs.python.org/issue36933

#36932: asyncio-task.rst could use proper deprecated-removed directive
https://bugs.python.org/issue36932

#36926: Implement methoddescr_call without _PyMethodDef_RawFastCallDic
https://bugs.python.org/issue36926

#36924: Simplify implementation of classmethod_descriptor.__call__
https://bugs.python.org/issue36924

#36922: Implement Py_TPFLAGS_METHOD_DESCRIPTOR
https://bugs.python.org/issue36922

#36921: Deprecate yield from and @coroutine in asyncio
https://bugs.python.org/issue36921

#36905: test_typing.GetTypeHintTests.test_get_type_hints_modules_forwa
https://bugs.python.org/issue36905

#36901: Fix leaks in /PC/bdist_wininst/install.c
https://bugs.python.org/issue36901

#36896: clarify in types.rst that FunctionTypes & co  constructors don
https://bugs.python.org/issue36896

#36889: Merge StreamWriter and StreamReader into just asyncio.Stream
https://bugs.python.org/issue36889



Most recent 15 issues waiting for review (15)
=============================================

#36948: NameError in urllib.request.URLopener.retrieve
https://bugs.python.org/issue36948

#36946: Possible signed integer overflow in slice handling
https://bugs.python.org/issue36946

#36945: Add _PyPreConfig.configure_locale: allow to leave LC_CTYPE unc
https://bugs.python.org/issue36945

#36943: Windows test changes for Windows ARM64
https://bugs.python.org/issue36943

#36942: Windows code changes for Windows ARM64
https://bugs.python.org/issue36942

#36941: Windows build changes for Windows ARM64
https://bugs.python.org/issue36941

#36937: New _PyObject_MakeTpCall() function
https://bugs.python.org/issue36937

#36936: CALL_FUNCTION_KW opcode: keyword names must be non-empty
https://bugs.python.org/issue36936

#36935: bpo-35813 introduced usage of the deprecated PyErr_SetFromWind
https://bugs.python.org/issue36935

#36932: asyncio-task.rst could use proper deprecated-removed directive
https://bugs.python.org/issue36932

#36929: Other Python _io implementations may not expose _io in their t
https://bugs.python.org/issue36929

#36927: traceback docstrings should explicitly state return values ins
https://bugs.python.org/issue36927

#36926: Implement methoddescr_call without _PyMethodDef_RawFastCallDic
https://bugs.python.org/issue36926

#36924: Simplify implementation of classmethod_descriptor.__call__
https://bugs.python.org/issue36924

#36922: Implement Py_TPFLAGS_METHOD_DESCRIPTOR
https://bugs.python.org/issue36922



Top 10 most discussed issues (10)
=================================

#36867: Make semaphore_tracker track other system resources
https://bugs.python.org/issue36867  11 msgs

#36887: Add integer square root, math.isqrt
https://bugs.python.org/issue36887  11 msgs

#36763: PEP 587: Rework initialization API to prepare second version o
https://bugs.python.org/issue36763  10 msgs

#36917: ast.NodeVisitor no longer calls visit_Str
https://bugs.python.org/issue36917  10 msgs

#36870: test_asyncio: test_drain_raises() fails randomly on Windows
https://bugs.python.org/issue36870   9 msgs

#36880: Returning None from a callback with restype py_object decremen
https://bugs.python.org/issue36880   9 msgs

#36895: time.clock() marked for removal in 3.8 ?????still there.
https://bugs.python.org/issue36895   9 msgs

#36908: "This module is always available" is confusing
https://bugs.python.org/issue36908   8 msgs

#36945: Add _PyPreConfig.configure_locale: allow to leave LC_CTYPE unc
https://bugs.python.org/issue36945   8 msgs

#35495: argparse does not honor default argument for nargs=argparse.RE
https://bugs.python.org/issue35495   7 msgs



Issues closed (89)
==================

#1257: atexit errors should result in nonzero exit code
https://bugs.python.org/issue1257  closed by vstinner

#2921: enable embedding: declare/#define only py* symbols in #include
https://bugs.python.org/issue2921  closed by vstinner

#3020: doctest should have lib2to3 integration
https://bugs.python.org/issue3020  closed by scoder

#3620: test_smtplib is flaky
https://bugs.python.org/issue3620  closed by SilentGhost

#6584: gzip module has no custom exception
https://bugs.python.org/issue6584  closed by serhiy.storchaka

#10991: trace fails when test imported a temporary file
https://bugs.python.org/issue10991  closed by brett.cannon

#13320: _remove_visual_c_ref in distutils.msvc9compiler causes DLL loa
https://bugs.python.org/issue13320  closed by vstinner

#13493: Import error with embedded python on AIX 6.1
https://bugs.python.org/issue13493  closed by vstinner

#14228: Don't display traceback when import site is interrupted by CTR
https://bugs.python.org/issue14228  closed by vstinner

#14353: Proper gettext support in locale module
https://bugs.python.org/issue14353  closed by benjamin.peterson

#16100: Compiling vim with Python 3.3 support fails
https://bugs.python.org/issue16100  closed by zach.ware

#16961: No regression tests for -E and individual environment vars
https://bugs.python.org/issue16961  closed by vstinner

#17679: sysconfig generation uses some env variables multiple times
https://bugs.python.org/issue17679  closed by vstinner

#19175: Erroneous reference to "integer" in format string grammar
https://bugs.python.org/issue19175  closed by cheryl.sabella

#19216: stat cache for import bootstrap
https://bugs.python.org/issue19216  closed by vstinner

#21202: Naming a file` io.py` causes cryptic error message
https://bugs.python.org/issue21202  closed by vstinner

#21563: Segv during call to builtin_execfile in application embedding 
https://bugs.python.org/issue21563  closed by vstinner

#22747: Interpreter fails in initialize on systems where HAVE_LANGINFO
https://bugs.python.org/issue22747  closed by vstinner

#23603: Embedding Python3.4 - PyUnicode_Check fails (MinGW-W64)
https://bugs.python.org/issue23603  closed by vstinner

#24280: Unable to install Python
https://bugs.python.org/issue24280  closed by vstinner

#24758: unittest.mock.Mock's new "unsafe" feature needs a better error
https://bugs.python.org/issue24758  closed by xtreak

#26122: Isolated mode doesn't ignore PYTHONHASHSEED
https://bugs.python.org/issue26122  closed by vstinner

#26480: add a flag that will not give the set a sys.stdin
https://bugs.python.org/issue26480  closed by vstinner

#26707: plistlib fails to parse bplist with 0x80 UID values
https://bugs.python.org/issue26707  closed by serhiy.storchaka

#26891: CPython doesn't work when you disable refcounting
https://bugs.python.org/issue26891  closed by vstinner

#29818: Py_SetStandardStreamEncoding leads to a memory error in debug 
https://bugs.python.org/issue29818  closed by vstinner

#30464: gammavariate has a wrong comment
https://bugs.python.org/issue30464  closed by mark.dickinson

#30633: Python 3.6.1 installation issues on OpenSuse 42.1: ModuleNotFo
https://bugs.python.org/issue30633  closed by vstinner

#31473: Debug hooks on memory allocators are not thread safe (serialno
https://bugs.python.org/issue31473  closed by vstinner

#32177: spammers mine emails from bugs.python.org
https://bugs.python.org/issue32177  closed by SilentGhost

#32231: -bb option should override -W options
https://bugs.python.org/issue32231  closed by vstinner

#32832: doctest should support custom ps1/ps2 prompts
https://bugs.python.org/issue32832  closed by cheryl.sabella

#32995: Add a glossary entry for context variables
https://bugs.python.org/issue32995  closed by cheryl.sabella

#33123: Path.unlink should have a missing_ok parameter
https://bugs.python.org/issue33123  closed by pitrou

#33303: ElementTree Comment text isn't escaped
https://bugs.python.org/issue33303  closed by scoder

#33882: doc Mention breakpoint() in debugger-related FAQ
https://bugs.python.org/issue33882  closed by matrixise

#34152: performance of some list slice assignment margin cases can be 
https://bugs.python.org/issue34152  closed by pablogsal

#34408: possible null pointer dereference in pystate.c
https://bugs.python.org/issue34408  closed by pablogsal

#34424: Unicode names break email header
https://bugs.python.org/issue34424  closed by cheryl.sabella

#34484: Unicode HOWTO incorrectly refers to Private Use Area for surro
https://bugs.python.org/issue34484  closed by akuchling

#34509: Starting to use gcc-8 on CI
https://bugs.python.org/issue34509  closed by zach.ware

#34579: test_embed.InitConfigTests fail on AIX
https://bugs.python.org/issue34579  closed by vstinner

#34682: Typo reports on docs@
https://bugs.python.org/issue34682  closed by cheryl.sabella

#35138: timeit documentation should have example with function argumen
https://bugs.python.org/issue35138  closed by vstinner

#35589: BaseSelectorEventLoop.sock_sendall() performance regression: e
https://bugs.python.org/issue35589  closed by asvetlov

#36008: [good first issue] Update documentation for 3.8
https://bugs.python.org/issue36008  closed by cheryl.sabella

#36471: PEP 432, PEP 587: Add _Py_RunMain()
https://bugs.python.org/issue36471  closed by vstinner

#36474: RecursionError resets trace function set via sys.settrace
https://bugs.python.org/issue36474  closed by blueyed

#36594: Undefined behavior due to incorrect usage of %p in format stri
https://bugs.python.org/issue36594  closed by brett.cannon

#36618: clang expects memory aligned on 16 bytes, but pymalloc aligns 
https://bugs.python.org/issue36618  closed by vstinner

#36620: Documentation missing parameter for Itertools.zip_longest
https://bugs.python.org/issue36620  closed by rhettinger

#36684: codecov.io code coverage has not updated since 2019-04-13
https://bugs.python.org/issue36684  closed by inada.naoki

#36725: Reference leak regression with Python3.8a3
https://bugs.python.org/issue36725  closed by vstinner

#36728: Remove PyEval_ReInitThreads() from the public C API
https://bugs.python.org/issue36728  closed by vstinner

#36748: Optimize textio write buffering
https://bugs.python.org/issue36748  closed by inada.naoki

#36749: PPC64 AIX 3.x: compilation issue, linker fails to locate symbo
https://bugs.python.org/issue36749  closed by vstinner

#36751: Changes in the inspect module for PEP 570
https://bugs.python.org/issue36751  closed by pablogsal

#36760: subprocess.run fails with capture_output=True and stderr=STDOU
https://bugs.python.org/issue36760  closed by gregory.p.smith

#36789: Unicode HOWTO incorrectly states that UTF-8 contains no zero b
https://bugs.python.org/issue36789  closed by cheryl.sabella

#36791: sum() relies on C signed overflow behaviour
https://bugs.python.org/issue36791  closed by serhiy.storchaka

#36799: Typo in ctypes documentation
https://bugs.python.org/issue36799  closed by matrixise

#36807: IDLE doesn't call os.fsync()
https://bugs.python.org/issue36807  closed by terry.reedy

#36818: Add PyInterpreterState.runtime.
https://bugs.python.org/issue36818  closed by vstinner

#36822: Minor grammatical fix in glossary.rst
https://bugs.python.org/issue36822  closed by pablogsal

#36845: ipaddres.IPv4Network and ipaddress.IPv6Network tuple construct
https://bugs.python.org/issue36845  closed by inada.naoki

#36875: argparse does not ship with translations
https://bugs.python.org/issue36875  closed by terry.reedy

#36883: ???ctypes?????????C?????????c_char_p??????????????????
https://bugs.python.org/issue36883  closed by anthonypjshaw

#36884: DeprecationWarning in test_asyncio.test_pep492.StreamReaderTes
https://bugs.python.org/issue36884  closed by asvetlov

#36886: Failed to construct CodeType on Python-3.8.0a4
https://bugs.python.org/issue36886  closed by SilentGhost

#36899: datetime utcfromtimestamp ignores astimezone
https://bugs.python.org/issue36899  closed by SilentGhost

#36900: Use _PyCoreConfig rather than global configuration variables
https://bugs.python.org/issue36900  closed by vstinner

#36902: spam
https://bugs.python.org/issue36902  closed by SilentGhost

#36903: ResourceWarning in test_logging.HandlerTest.test_post_fork_chi
https://bugs.python.org/issue36903  closed by xtreak

#36909: LastUpdatedOrderedDict recipe uses super() unnecessarily
https://bugs.python.org/issue36909  closed by rhettinger

#36911: ast.parse outputs ast.Strs which do not differentiate between 
https://bugs.python.org/issue36911  closed by eric.smith

#36912: Can't left-align strings using f-strings or format()
https://bugs.python.org/issue36912  closed by gvanrossum

#36914: zipimport does not load ZIP files produced by GitHub
https://bugs.python.org/issue36914  closed by SilentGhost

#36915: regrtest: when interrupted, temporary directory is not removed
https://bugs.python.org/issue36915  closed by vstinner

#36916: Swallow unhandled exception report introduced by 36802
https://bugs.python.org/issue36916  closed by asvetlov

#36920: inspect.getcallargs sees optional arg to builtin as required
https://bugs.python.org/issue36920  closed by brett.cannon

#36923: Implemented __str__ for zip and map objects
https://bugs.python.org/issue36923  closed by SilentGhost

#36925: python3.7.3 can't work after MacOS upgrade from v10.14.4 to v1
https://bugs.python.org/issue36925  closed by ned.deily

#36928: linkt threading.settrace to sys.settrace
https://bugs.python.org/issue36928  closed by SilentGhost

#36930: Windows proxy settings automatically used ... partly
https://bugs.python.org/issue36930  closed by iwetzel

#36931: json lib doesnt want to load from file
https://bugs.python.org/issue36931  closed by zach.ware

#36934: C API Function PyLong_AsDouble Returning Wrong Value
https://bugs.python.org/issue36934  closed by sajjadfx

#36938: Py_XDECREF on PyUnicodeobject raises SIGSEGV signal
https://bugs.python.org/issue36938  closed by serhiy.storchaka

#36939: Allow to use shutil.copytree for existing destination director
https://bugs.python.org/issue36939  closed by jack1142

#1465646: test_grp & test_pwd fail
https://bugs.python.org/issue1465646  closed by matrixise

From qiang.fang at zoho.com.cn  Fri May 17 22:26:04 2019
From: qiang.fang at zoho.com.cn (Q)
Date: Sat, 18 May 2019 10:26:04 +0800
Subject: [Python-Dev] Feature request: Change a Dependency Package
 Version During Package Initiation
In-Reply-To: <CAG8k2+5mbiNWnWmnTf--NfXtEzVLj402ihVdhUye2jxypC3D8w@mail.gmail.com>
References: <16ac4ce3e2f.c1af300c4816.5384009389495434427@zoho.com.cn>
 <CAP1=2W4+W+2UQpgHMi=hN=2ugkLULjeY81xpLO73FHxx4-0f_w@mail.gmail.com>
 <CAG8k2+5mbiNWnWmnTf--NfXtEzVLj402ihVdhUye2jxypC3D8w@mail.gmail.com>
Message-ID: <16ac8c2b2b4.ffb0004b5281.6365385802178906075@zoho.com.cn>

>From the viewpoint of the package user, people don't want to change every import to "require a version at runtime". If "set up a python path in a wrapper script" is a better strategy, can you please give an example for the following use case:


The abaqus python distribution has libA 1.0, the external package to be installed is LibB, which requires libA2.0, and we don't want to change every import in LibB to be import libA 1.0, because the source code may have not been provided.

In emacs, you can always advice a command to change its behaviour, which makes it very user friendly, and that what all the following suggestion is about. I have no idea at all how it could be implemented though.

https://github.com/mitsuhiko/multiversion/issues/1

"The work around is to let a version to be set within a package and have that propagate to all modules in that package. For example in the root init.py if I set tonado version to be 2.2.1 then all modules in that package will use tornado 2.2.1 when I import tornado."



---- ? ???, 2019-05-17 23:38:55 Daniel Holth <dholth at gmail.com> ?? ----



This sounds exactly like what people used to do with eggs. You could have multiple versions of a package on the path as eggs and then require a version at runtime. The approach has problems. Ruby also abandoned a strategy where random app code depends on package management code at runtime.



One better strategy is to set up a python path in a wrapper script.




On Fri, May 17, 2019, 11:27 Brett Cannon <mailto:bcannon at gmail.com> wrote:





Thanks for the idea but there are currently no plans to support such a feature. If you would like to see it then you will need to write a PEP with a proof-of-concept to demonstrate how you would expect such a feature to work.



On Fri., May 17, 2019, 07:55 Q via Python-Dev, <mailto:python-dev at python.org> wrote:



A lot of the Python code we use in production are used directly as imports in other python

distributions (such as the python comes with the finite element software Abaqus and MSC Marc), many

packages (such as matplotlib, numpy) that may have varying versioned dependencies.



I was wondering if this could be expanded to allow a version to be set within a package and have

that propagate to all modules in that package. For example in the root init.py if I set

multiversion(tornado, 2.2.1) then all modules in that package will use tornado 2.2.1 when I import

tornado.



See a relevant issue on github:

https://github.com/mitsuhiko/multiversion/issues/1



Thank you!

Qiang





_______________________________________________

 Python-Dev mailing list

 mailto:Python-Dev at python.org

 https://mail.python.org/mailman/listinfo/python-dev

 Unsubscribe: https://mail.python.org/mailman/options/python-dev/brett%40python.org



_______________________________________________

 Python-Dev mailing list

 mailto:Python-Dev at python.org

 https://mail.python.org/mailman/listinfo/python-dev

 Unsubscribe: https://mail.python.org/mailman/options/python-dev/dholth%40gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190518/f7e3a65e/attachment.html>

From qiang.fang at zoho.com.cn  Fri May 17 22:32:14 2019
From: qiang.fang at zoho.com.cn (Q)
Date: Sat, 18 May 2019 10:32:14 +0800
Subject: [Python-Dev] Feature request: Change a Dependency Package
 Version During Package Initiation
In-Reply-To: <16ac8c2b2b4.ffb0004b5281.6365385802178906075@zoho.com.cn>
References: <16ac4ce3e2f.c1af300c4816.5384009389495434427@zoho.com.cn>
 <CAP1=2W4+W+2UQpgHMi=hN=2ugkLULjeY81xpLO73FHxx4-0f_w@mail.gmail.com>
 <CAG8k2+5mbiNWnWmnTf--NfXtEzVLj402ihVdhUye2jxypC3D8w@mail.gmail.com>
 <16ac8c2b2b4.ffb0004b5281.6365385802178906075@zoho.com.cn>
Message-ID: <16ac8c85883.1228864315288.5365657524062277459@zoho.com.cn>

Sorry, there is an error in my last post. It's corrected as:

The abaqus python distribution has libA 1.0, the external package to be installed is LibB, which requires libA2.0, and we don't want to change every import in LibB to be import /somewhere/libA2.0, because the source code may have not been provided.





---- ? ???, 2019-05-18 10:26:04 Q <qiang.fang at zoho.com.cn> ?? ----



>From the viewpoint of the package user, people don't want to change every import to "require a version at runtime". If "set up a python path in a wrapper script" is a better strategy, can you please give an example for the following use case:


The abaqus python distribution has libA 1.0, the external package to be installed is LibB, which requires libA2.0, and we don't want to change every import in LibB to be import libA 1.0, because the source code may have not been provided.

In emacs, you can always advice a command to change its behaviour, which makes it very user friendly, and that what all the following suggestion is about. I have no idea at all how it could be implemented though.

https://github.com/mitsuhiko/multiversion/issues/1

"The work around is to let a version to be set within a package and have that propagate to all modules in that package. For example in the root init.py if I set tonado version to be 2.2.1 then all modules in that package will use tornado 2.2.1 when I import tornado."



---- ? ???, 2019-05-17 23:38:55 Daniel Holth <dholth at gmail.com> ?? ----










This sounds exactly like what people used to do with eggs. You could have multiple versions of a package on the path as eggs and then require a version at runtime. The approach has problems. Ruby also abandoned a strategy where random app code depends on package management code at runtime.



One better strategy is to set up a python path in a wrapper script.




On Fri, May 17, 2019, 11:27 Brett Cannon <mailto:bcannon at gmail.com> wrote:





Thanks for the idea but there are currently no plans to support such a feature. If you would like to see it then you will need to write a PEP with a proof-of-concept to demonstrate how you would expect such a feature to work.



On Fri., May 17, 2019, 07:55 Q via Python-Dev, <mailto:python-dev at python.org> wrote:



A lot of the Python code we use in production are used directly as imports in other python

distributions (such as the python comes with the finite element software Abaqus and MSC Marc), many

packages (such as matplotlib, numpy) that may have varying versioned dependencies.



I was wondering if this could be expanded to allow a version to be set within a package and have

that propagate to all modules in that package. For example in the root init.py if I set

multiversion(tornado, 2.2.1) then all modules in that package will use tornado 2.2.1 when I import

tornado.



See a relevant issue on github:

https://github.com/mitsuhiko/multiversion/issues/1



Thank you!

Qiang





_______________________________________________

Python-Dev mailing list

mailto:Python-Dev at python.org

https://mail.python.org/mailman/listinfo/python-dev

Unsubscribe: https://mail.python.org/mailman/options/python-dev/brett%40python.org



_______________________________________________

Python-Dev mailing list

mailto:Python-Dev at python.org

https://mail.python.org/mailman/listinfo/python-dev

Unsubscribe: https://mail.python.org/mailman/options/python-dev/dholth%40gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190518/225782dc/attachment.html>

From thatiparthysreenivas at gmail.com  Sat May 18 02:38:41 2019
From: thatiparthysreenivas at gmail.com (Srinivas Reddy Thatiparthy)
Date: Sat, 18 May 2019 12:08:41 +0530
Subject: [Python-Dev] Merge ?
Message-ID: <CAEaN0UYaZr5W7_yLQw0nn+oJKu5MHLEwtJUNqz9N+gV9DQ4N2A@mail.gmail.com>

Pls take a look here  https://github.com/python/cpython/pull/9882

If it not okay to document that   >>> mock.assert_has_calls([])
does not raise an exception; then i will go ahead and close the pr.


Best Regards,
Srinivas Reddy Thatiparthy.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://mail.python.org/pipermail/python-dev/attachments/20190518/5b415a59/attachment-0001.html>

